
STM32Code.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000002cc  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000bdfc  080002d0  080002d0  000012d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000004c4  0800c0d0  0800c0d0  0000d0d0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  0800c594  0800c594  0000d594  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  0800c59c  0800c59c  0000d59c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .fini_array   00000004  0800c5a0  0800c5a0  0000d5a0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .data         000001d8  24000000  0800c5a4  0000e000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00000514  240001d8  0800c77c  0000e1d8  2**2
                  ALLOC
  8 ._user_heap_stack 00000604  240006ec  0800c77c  0000e6ec  2**0
                  ALLOC
  9 .ARM.attributes 0000002e  00000000  00000000  0000e1d8  2**0
                  CONTENTS, READONLY
 10 .debug_info   00019ee4  00000000  00000000  0000e206  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 00002f85  00000000  00000000  000280ea  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 000014e8  00000000  00000000  0002b070  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_rnglists 0000106a  00000000  00000000  0002c558  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  00035139  00000000  00000000  0002d5c2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   0001ce31  00000000  00000000  000626fb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    001518fa  00000000  00000000  0007f52c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000043  00000000  00000000  001d0e26  2**0
                  CONTENTS, READONLY
 18 .debug_frame  0000679c  00000000  00000000  001d0e6c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line_str 00000060  00000000  00000000  001d7608  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002d0 <__do_global_dtors_aux>:
 80002d0:	b510      	push	{r4, lr}
 80002d2:	4c05      	ldr	r4, [pc, #20]	@ (80002e8 <__do_global_dtors_aux+0x18>)
 80002d4:	7823      	ldrb	r3, [r4, #0]
 80002d6:	b933      	cbnz	r3, 80002e6 <__do_global_dtors_aux+0x16>
 80002d8:	4b04      	ldr	r3, [pc, #16]	@ (80002ec <__do_global_dtors_aux+0x1c>)
 80002da:	b113      	cbz	r3, 80002e2 <__do_global_dtors_aux+0x12>
 80002dc:	4804      	ldr	r0, [pc, #16]	@ (80002f0 <__do_global_dtors_aux+0x20>)
 80002de:	f3af 8000 	nop.w
 80002e2:	2301      	movs	r3, #1
 80002e4:	7023      	strb	r3, [r4, #0]
 80002e6:	bd10      	pop	{r4, pc}
 80002e8:	240001d8 	.word	0x240001d8
 80002ec:	00000000 	.word	0x00000000
 80002f0:	0800c0b4 	.word	0x0800c0b4

080002f4 <frame_dummy>:
 80002f4:	b508      	push	{r3, lr}
 80002f6:	4b03      	ldr	r3, [pc, #12]	@ (8000304 <frame_dummy+0x10>)
 80002f8:	b11b      	cbz	r3, 8000302 <frame_dummy+0xe>
 80002fa:	4903      	ldr	r1, [pc, #12]	@ (8000308 <frame_dummy+0x14>)
 80002fc:	4803      	ldr	r0, [pc, #12]	@ (800030c <frame_dummy+0x18>)
 80002fe:	f3af 8000 	nop.w
 8000302:	bd08      	pop	{r3, pc}
 8000304:	00000000 	.word	0x00000000
 8000308:	240001dc 	.word	0x240001dc
 800030c:	0800c0b4 	.word	0x0800c0b4

08000310 <strcmp>:
 8000310:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000314:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000318:	2a01      	cmp	r2, #1
 800031a:	bf28      	it	cs
 800031c:	429a      	cmpcs	r2, r3
 800031e:	d0f7      	beq.n	8000310 <strcmp>
 8000320:	1ad0      	subs	r0, r2, r3
 8000322:	4770      	bx	lr
	...

08000330 <memchr>:
 8000330:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000334:	2a10      	cmp	r2, #16
 8000336:	db2b      	blt.n	8000390 <memchr+0x60>
 8000338:	f010 0f07 	tst.w	r0, #7
 800033c:	d008      	beq.n	8000350 <memchr+0x20>
 800033e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000342:	3a01      	subs	r2, #1
 8000344:	428b      	cmp	r3, r1
 8000346:	d02d      	beq.n	80003a4 <memchr+0x74>
 8000348:	f010 0f07 	tst.w	r0, #7
 800034c:	b342      	cbz	r2, 80003a0 <memchr+0x70>
 800034e:	d1f6      	bne.n	800033e <memchr+0xe>
 8000350:	b4f0      	push	{r4, r5, r6, r7}
 8000352:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000356:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800035a:	f022 0407 	bic.w	r4, r2, #7
 800035e:	f07f 0700 	mvns.w	r7, #0
 8000362:	2300      	movs	r3, #0
 8000364:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000368:	3c08      	subs	r4, #8
 800036a:	ea85 0501 	eor.w	r5, r5, r1
 800036e:	ea86 0601 	eor.w	r6, r6, r1
 8000372:	fa85 f547 	uadd8	r5, r5, r7
 8000376:	faa3 f587 	sel	r5, r3, r7
 800037a:	fa86 f647 	uadd8	r6, r6, r7
 800037e:	faa5 f687 	sel	r6, r5, r7
 8000382:	b98e      	cbnz	r6, 80003a8 <memchr+0x78>
 8000384:	d1ee      	bne.n	8000364 <memchr+0x34>
 8000386:	bcf0      	pop	{r4, r5, r6, r7}
 8000388:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800038c:	f002 0207 	and.w	r2, r2, #7
 8000390:	b132      	cbz	r2, 80003a0 <memchr+0x70>
 8000392:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000396:	3a01      	subs	r2, #1
 8000398:	ea83 0301 	eor.w	r3, r3, r1
 800039c:	b113      	cbz	r3, 80003a4 <memchr+0x74>
 800039e:	d1f8      	bne.n	8000392 <memchr+0x62>
 80003a0:	2000      	movs	r0, #0
 80003a2:	4770      	bx	lr
 80003a4:	3801      	subs	r0, #1
 80003a6:	4770      	bx	lr
 80003a8:	2d00      	cmp	r5, #0
 80003aa:	bf06      	itte	eq
 80003ac:	4635      	moveq	r5, r6
 80003ae:	3803      	subeq	r0, #3
 80003b0:	3807      	subne	r0, #7
 80003b2:	f015 0f01 	tst.w	r5, #1
 80003b6:	d107      	bne.n	80003c8 <memchr+0x98>
 80003b8:	3001      	adds	r0, #1
 80003ba:	f415 7f80 	tst.w	r5, #256	@ 0x100
 80003be:	bf02      	ittt	eq
 80003c0:	3001      	addeq	r0, #1
 80003c2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80003c6:	3001      	addeq	r0, #1
 80003c8:	bcf0      	pop	{r4, r5, r6, r7}
 80003ca:	3801      	subs	r0, #1
 80003cc:	4770      	bx	lr
 80003ce:	bf00      	nop

080003d0 <strlen>:
 80003d0:	4603      	mov	r3, r0
 80003d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80003d6:	2a00      	cmp	r2, #0
 80003d8:	d1fb      	bne.n	80003d2 <strlen+0x2>
 80003da:	1a18      	subs	r0, r3, r0
 80003dc:	3801      	subs	r0, #1
 80003de:	4770      	bx	lr

080003e0 <__aeabi_uldivmod>:
 80003e0:	b953      	cbnz	r3, 80003f8 <__aeabi_uldivmod+0x18>
 80003e2:	b94a      	cbnz	r2, 80003f8 <__aeabi_uldivmod+0x18>
 80003e4:	2900      	cmp	r1, #0
 80003e6:	bf08      	it	eq
 80003e8:	2800      	cmpeq	r0, #0
 80003ea:	bf1c      	itt	ne
 80003ec:	f04f 31ff 	movne.w	r1, #4294967295
 80003f0:	f04f 30ff 	movne.w	r0, #4294967295
 80003f4:	f000 b988 	b.w	8000708 <__aeabi_idiv0>
 80003f8:	f1ad 0c08 	sub.w	ip, sp, #8
 80003fc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000400:	f000 f806 	bl	8000410 <__udivmoddi4>
 8000404:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000408:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800040c:	b004      	add	sp, #16
 800040e:	4770      	bx	lr

08000410 <__udivmoddi4>:
 8000410:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000414:	9d08      	ldr	r5, [sp, #32]
 8000416:	468e      	mov	lr, r1
 8000418:	4604      	mov	r4, r0
 800041a:	4688      	mov	r8, r1
 800041c:	2b00      	cmp	r3, #0
 800041e:	d14a      	bne.n	80004b6 <__udivmoddi4+0xa6>
 8000420:	428a      	cmp	r2, r1
 8000422:	4617      	mov	r7, r2
 8000424:	d962      	bls.n	80004ec <__udivmoddi4+0xdc>
 8000426:	fab2 f682 	clz	r6, r2
 800042a:	b14e      	cbz	r6, 8000440 <__udivmoddi4+0x30>
 800042c:	f1c6 0320 	rsb	r3, r6, #32
 8000430:	fa01 f806 	lsl.w	r8, r1, r6
 8000434:	fa20 f303 	lsr.w	r3, r0, r3
 8000438:	40b7      	lsls	r7, r6
 800043a:	ea43 0808 	orr.w	r8, r3, r8
 800043e:	40b4      	lsls	r4, r6
 8000440:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000444:	fa1f fc87 	uxth.w	ip, r7
 8000448:	fbb8 f1fe 	udiv	r1, r8, lr
 800044c:	0c23      	lsrs	r3, r4, #16
 800044e:	fb0e 8811 	mls	r8, lr, r1, r8
 8000452:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000456:	fb01 f20c 	mul.w	r2, r1, ip
 800045a:	429a      	cmp	r2, r3
 800045c:	d909      	bls.n	8000472 <__udivmoddi4+0x62>
 800045e:	18fb      	adds	r3, r7, r3
 8000460:	f101 30ff 	add.w	r0, r1, #4294967295
 8000464:	f080 80ea 	bcs.w	800063c <__udivmoddi4+0x22c>
 8000468:	429a      	cmp	r2, r3
 800046a:	f240 80e7 	bls.w	800063c <__udivmoddi4+0x22c>
 800046e:	3902      	subs	r1, #2
 8000470:	443b      	add	r3, r7
 8000472:	1a9a      	subs	r2, r3, r2
 8000474:	b2a3      	uxth	r3, r4
 8000476:	fbb2 f0fe 	udiv	r0, r2, lr
 800047a:	fb0e 2210 	mls	r2, lr, r0, r2
 800047e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000482:	fb00 fc0c 	mul.w	ip, r0, ip
 8000486:	459c      	cmp	ip, r3
 8000488:	d909      	bls.n	800049e <__udivmoddi4+0x8e>
 800048a:	18fb      	adds	r3, r7, r3
 800048c:	f100 32ff 	add.w	r2, r0, #4294967295
 8000490:	f080 80d6 	bcs.w	8000640 <__udivmoddi4+0x230>
 8000494:	459c      	cmp	ip, r3
 8000496:	f240 80d3 	bls.w	8000640 <__udivmoddi4+0x230>
 800049a:	443b      	add	r3, r7
 800049c:	3802      	subs	r0, #2
 800049e:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 80004a2:	eba3 030c 	sub.w	r3, r3, ip
 80004a6:	2100      	movs	r1, #0
 80004a8:	b11d      	cbz	r5, 80004b2 <__udivmoddi4+0xa2>
 80004aa:	40f3      	lsrs	r3, r6
 80004ac:	2200      	movs	r2, #0
 80004ae:	e9c5 3200 	strd	r3, r2, [r5]
 80004b2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004b6:	428b      	cmp	r3, r1
 80004b8:	d905      	bls.n	80004c6 <__udivmoddi4+0xb6>
 80004ba:	b10d      	cbz	r5, 80004c0 <__udivmoddi4+0xb0>
 80004bc:	e9c5 0100 	strd	r0, r1, [r5]
 80004c0:	2100      	movs	r1, #0
 80004c2:	4608      	mov	r0, r1
 80004c4:	e7f5      	b.n	80004b2 <__udivmoddi4+0xa2>
 80004c6:	fab3 f183 	clz	r1, r3
 80004ca:	2900      	cmp	r1, #0
 80004cc:	d146      	bne.n	800055c <__udivmoddi4+0x14c>
 80004ce:	4573      	cmp	r3, lr
 80004d0:	d302      	bcc.n	80004d8 <__udivmoddi4+0xc8>
 80004d2:	4282      	cmp	r2, r0
 80004d4:	f200 8105 	bhi.w	80006e2 <__udivmoddi4+0x2d2>
 80004d8:	1a84      	subs	r4, r0, r2
 80004da:	eb6e 0203 	sbc.w	r2, lr, r3
 80004de:	2001      	movs	r0, #1
 80004e0:	4690      	mov	r8, r2
 80004e2:	2d00      	cmp	r5, #0
 80004e4:	d0e5      	beq.n	80004b2 <__udivmoddi4+0xa2>
 80004e6:	e9c5 4800 	strd	r4, r8, [r5]
 80004ea:	e7e2      	b.n	80004b2 <__udivmoddi4+0xa2>
 80004ec:	2a00      	cmp	r2, #0
 80004ee:	f000 8090 	beq.w	8000612 <__udivmoddi4+0x202>
 80004f2:	fab2 f682 	clz	r6, r2
 80004f6:	2e00      	cmp	r6, #0
 80004f8:	f040 80a4 	bne.w	8000644 <__udivmoddi4+0x234>
 80004fc:	1a8a      	subs	r2, r1, r2
 80004fe:	0c03      	lsrs	r3, r0, #16
 8000500:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000504:	b280      	uxth	r0, r0
 8000506:	b2bc      	uxth	r4, r7
 8000508:	2101      	movs	r1, #1
 800050a:	fbb2 fcfe 	udiv	ip, r2, lr
 800050e:	fb0e 221c 	mls	r2, lr, ip, r2
 8000512:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000516:	fb04 f20c 	mul.w	r2, r4, ip
 800051a:	429a      	cmp	r2, r3
 800051c:	d907      	bls.n	800052e <__udivmoddi4+0x11e>
 800051e:	18fb      	adds	r3, r7, r3
 8000520:	f10c 38ff 	add.w	r8, ip, #4294967295
 8000524:	d202      	bcs.n	800052c <__udivmoddi4+0x11c>
 8000526:	429a      	cmp	r2, r3
 8000528:	f200 80e0 	bhi.w	80006ec <__udivmoddi4+0x2dc>
 800052c:	46c4      	mov	ip, r8
 800052e:	1a9b      	subs	r3, r3, r2
 8000530:	fbb3 f2fe 	udiv	r2, r3, lr
 8000534:	fb0e 3312 	mls	r3, lr, r2, r3
 8000538:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 800053c:	fb02 f404 	mul.w	r4, r2, r4
 8000540:	429c      	cmp	r4, r3
 8000542:	d907      	bls.n	8000554 <__udivmoddi4+0x144>
 8000544:	18fb      	adds	r3, r7, r3
 8000546:	f102 30ff 	add.w	r0, r2, #4294967295
 800054a:	d202      	bcs.n	8000552 <__udivmoddi4+0x142>
 800054c:	429c      	cmp	r4, r3
 800054e:	f200 80ca 	bhi.w	80006e6 <__udivmoddi4+0x2d6>
 8000552:	4602      	mov	r2, r0
 8000554:	1b1b      	subs	r3, r3, r4
 8000556:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 800055a:	e7a5      	b.n	80004a8 <__udivmoddi4+0x98>
 800055c:	f1c1 0620 	rsb	r6, r1, #32
 8000560:	408b      	lsls	r3, r1
 8000562:	fa22 f706 	lsr.w	r7, r2, r6
 8000566:	431f      	orrs	r7, r3
 8000568:	fa0e f401 	lsl.w	r4, lr, r1
 800056c:	fa20 f306 	lsr.w	r3, r0, r6
 8000570:	fa2e fe06 	lsr.w	lr, lr, r6
 8000574:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000578:	4323      	orrs	r3, r4
 800057a:	fa00 f801 	lsl.w	r8, r0, r1
 800057e:	fa1f fc87 	uxth.w	ip, r7
 8000582:	fbbe f0f9 	udiv	r0, lr, r9
 8000586:	0c1c      	lsrs	r4, r3, #16
 8000588:	fb09 ee10 	mls	lr, r9, r0, lr
 800058c:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000590:	fb00 fe0c 	mul.w	lr, r0, ip
 8000594:	45a6      	cmp	lr, r4
 8000596:	fa02 f201 	lsl.w	r2, r2, r1
 800059a:	d909      	bls.n	80005b0 <__udivmoddi4+0x1a0>
 800059c:	193c      	adds	r4, r7, r4
 800059e:	f100 3aff 	add.w	sl, r0, #4294967295
 80005a2:	f080 809c 	bcs.w	80006de <__udivmoddi4+0x2ce>
 80005a6:	45a6      	cmp	lr, r4
 80005a8:	f240 8099 	bls.w	80006de <__udivmoddi4+0x2ce>
 80005ac:	3802      	subs	r0, #2
 80005ae:	443c      	add	r4, r7
 80005b0:	eba4 040e 	sub.w	r4, r4, lr
 80005b4:	fa1f fe83 	uxth.w	lr, r3
 80005b8:	fbb4 f3f9 	udiv	r3, r4, r9
 80005bc:	fb09 4413 	mls	r4, r9, r3, r4
 80005c0:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 80005c4:	fb03 fc0c 	mul.w	ip, r3, ip
 80005c8:	45a4      	cmp	ip, r4
 80005ca:	d908      	bls.n	80005de <__udivmoddi4+0x1ce>
 80005cc:	193c      	adds	r4, r7, r4
 80005ce:	f103 3eff 	add.w	lr, r3, #4294967295
 80005d2:	f080 8082 	bcs.w	80006da <__udivmoddi4+0x2ca>
 80005d6:	45a4      	cmp	ip, r4
 80005d8:	d97f      	bls.n	80006da <__udivmoddi4+0x2ca>
 80005da:	3b02      	subs	r3, #2
 80005dc:	443c      	add	r4, r7
 80005de:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 80005e2:	eba4 040c 	sub.w	r4, r4, ip
 80005e6:	fba0 ec02 	umull	lr, ip, r0, r2
 80005ea:	4564      	cmp	r4, ip
 80005ec:	4673      	mov	r3, lr
 80005ee:	46e1      	mov	r9, ip
 80005f0:	d362      	bcc.n	80006b8 <__udivmoddi4+0x2a8>
 80005f2:	d05f      	beq.n	80006b4 <__udivmoddi4+0x2a4>
 80005f4:	b15d      	cbz	r5, 800060e <__udivmoddi4+0x1fe>
 80005f6:	ebb8 0203 	subs.w	r2, r8, r3
 80005fa:	eb64 0409 	sbc.w	r4, r4, r9
 80005fe:	fa04 f606 	lsl.w	r6, r4, r6
 8000602:	fa22 f301 	lsr.w	r3, r2, r1
 8000606:	431e      	orrs	r6, r3
 8000608:	40cc      	lsrs	r4, r1
 800060a:	e9c5 6400 	strd	r6, r4, [r5]
 800060e:	2100      	movs	r1, #0
 8000610:	e74f      	b.n	80004b2 <__udivmoddi4+0xa2>
 8000612:	fbb1 fcf2 	udiv	ip, r1, r2
 8000616:	0c01      	lsrs	r1, r0, #16
 8000618:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 800061c:	b280      	uxth	r0, r0
 800061e:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 8000622:	463b      	mov	r3, r7
 8000624:	4638      	mov	r0, r7
 8000626:	463c      	mov	r4, r7
 8000628:	46b8      	mov	r8, r7
 800062a:	46be      	mov	lr, r7
 800062c:	2620      	movs	r6, #32
 800062e:	fbb1 f1f7 	udiv	r1, r1, r7
 8000632:	eba2 0208 	sub.w	r2, r2, r8
 8000636:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 800063a:	e766      	b.n	800050a <__udivmoddi4+0xfa>
 800063c:	4601      	mov	r1, r0
 800063e:	e718      	b.n	8000472 <__udivmoddi4+0x62>
 8000640:	4610      	mov	r0, r2
 8000642:	e72c      	b.n	800049e <__udivmoddi4+0x8e>
 8000644:	f1c6 0220 	rsb	r2, r6, #32
 8000648:	fa2e f302 	lsr.w	r3, lr, r2
 800064c:	40b7      	lsls	r7, r6
 800064e:	40b1      	lsls	r1, r6
 8000650:	fa20 f202 	lsr.w	r2, r0, r2
 8000654:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000658:	430a      	orrs	r2, r1
 800065a:	fbb3 f8fe 	udiv	r8, r3, lr
 800065e:	b2bc      	uxth	r4, r7
 8000660:	fb0e 3318 	mls	r3, lr, r8, r3
 8000664:	0c11      	lsrs	r1, r2, #16
 8000666:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800066a:	fb08 f904 	mul.w	r9, r8, r4
 800066e:	40b0      	lsls	r0, r6
 8000670:	4589      	cmp	r9, r1
 8000672:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000676:	b280      	uxth	r0, r0
 8000678:	d93e      	bls.n	80006f8 <__udivmoddi4+0x2e8>
 800067a:	1879      	adds	r1, r7, r1
 800067c:	f108 3cff 	add.w	ip, r8, #4294967295
 8000680:	d201      	bcs.n	8000686 <__udivmoddi4+0x276>
 8000682:	4589      	cmp	r9, r1
 8000684:	d81f      	bhi.n	80006c6 <__udivmoddi4+0x2b6>
 8000686:	eba1 0109 	sub.w	r1, r1, r9
 800068a:	fbb1 f9fe 	udiv	r9, r1, lr
 800068e:	fb09 f804 	mul.w	r8, r9, r4
 8000692:	fb0e 1119 	mls	r1, lr, r9, r1
 8000696:	b292      	uxth	r2, r2
 8000698:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800069c:	4542      	cmp	r2, r8
 800069e:	d229      	bcs.n	80006f4 <__udivmoddi4+0x2e4>
 80006a0:	18ba      	adds	r2, r7, r2
 80006a2:	f109 31ff 	add.w	r1, r9, #4294967295
 80006a6:	d2c4      	bcs.n	8000632 <__udivmoddi4+0x222>
 80006a8:	4542      	cmp	r2, r8
 80006aa:	d2c2      	bcs.n	8000632 <__udivmoddi4+0x222>
 80006ac:	f1a9 0102 	sub.w	r1, r9, #2
 80006b0:	443a      	add	r2, r7
 80006b2:	e7be      	b.n	8000632 <__udivmoddi4+0x222>
 80006b4:	45f0      	cmp	r8, lr
 80006b6:	d29d      	bcs.n	80005f4 <__udivmoddi4+0x1e4>
 80006b8:	ebbe 0302 	subs.w	r3, lr, r2
 80006bc:	eb6c 0c07 	sbc.w	ip, ip, r7
 80006c0:	3801      	subs	r0, #1
 80006c2:	46e1      	mov	r9, ip
 80006c4:	e796      	b.n	80005f4 <__udivmoddi4+0x1e4>
 80006c6:	eba7 0909 	sub.w	r9, r7, r9
 80006ca:	4449      	add	r1, r9
 80006cc:	f1a8 0c02 	sub.w	ip, r8, #2
 80006d0:	fbb1 f9fe 	udiv	r9, r1, lr
 80006d4:	fb09 f804 	mul.w	r8, r9, r4
 80006d8:	e7db      	b.n	8000692 <__udivmoddi4+0x282>
 80006da:	4673      	mov	r3, lr
 80006dc:	e77f      	b.n	80005de <__udivmoddi4+0x1ce>
 80006de:	4650      	mov	r0, sl
 80006e0:	e766      	b.n	80005b0 <__udivmoddi4+0x1a0>
 80006e2:	4608      	mov	r0, r1
 80006e4:	e6fd      	b.n	80004e2 <__udivmoddi4+0xd2>
 80006e6:	443b      	add	r3, r7
 80006e8:	3a02      	subs	r2, #2
 80006ea:	e733      	b.n	8000554 <__udivmoddi4+0x144>
 80006ec:	f1ac 0c02 	sub.w	ip, ip, #2
 80006f0:	443b      	add	r3, r7
 80006f2:	e71c      	b.n	800052e <__udivmoddi4+0x11e>
 80006f4:	4649      	mov	r1, r9
 80006f6:	e79c      	b.n	8000632 <__udivmoddi4+0x222>
 80006f8:	eba1 0109 	sub.w	r1, r1, r9
 80006fc:	46c4      	mov	ip, r8
 80006fe:	fbb1 f9fe 	udiv	r9, r1, lr
 8000702:	fb09 f804 	mul.w	r8, r9, r4
 8000706:	e7c4      	b.n	8000692 <__udivmoddi4+0x282>

08000708 <__aeabi_idiv0>:
 8000708:	4770      	bx	lr
 800070a:	bf00      	nop

0800070c <AS5600_read_angle>:
 */

#include "AS5600.h"
#include "stdint.h"

HAL_StatusTypeDef AS5600_read_angle(I2C_HandleTypeDef *hi2c, float *angle){
 800070c:	b580      	push	{r7, lr}
 800070e:	b088      	sub	sp, #32
 8000710:	af04      	add	r7, sp, #16
 8000712:	6078      	str	r0, [r7, #4]
 8000714:	6039      	str	r1, [r7, #0]
    
    HAL_StatusTypeDef ret ;
    uint8_t angle_buff[2]; // hold the 2 bits from the Raw Angle 
    ret = HAL_I2C_Mem_Read(hi2c, (AS5600_ADRESS<<1), AS5600_RAW_ANGLE_REG, I2C_MEMADD_SIZE_8BIT,angle_buff,2,HAL_MAX_DELAY);//HAL_MAX_DELAY is blockling 
 8000716:	f04f 33ff 	mov.w	r3, #4294967295
 800071a:	9302      	str	r3, [sp, #8]
 800071c:	2302      	movs	r3, #2
 800071e:	9301      	str	r3, [sp, #4]
 8000720:	f107 0308 	add.w	r3, r7, #8
 8000724:	9300      	str	r3, [sp, #0]
 8000726:	2301      	movs	r3, #1
 8000728:	220c      	movs	r2, #12
 800072a:	216c      	movs	r1, #108	@ 0x6c
 800072c:	6878      	ldr	r0, [r7, #4]
 800072e:	f002 fa97 	bl	8002c60 <HAL_I2C_Mem_Read>
 8000732:	4603      	mov	r3, r0
 8000734:	73fb      	strb	r3, [r7, #15]
    if (ret != HAL_OK){
 8000736:	7bfb      	ldrb	r3, [r7, #15]
 8000738:	2b00      	cmp	r3, #0
 800073a:	d003      	beq.n	8000744 <AS5600_read_angle+0x38>
    	handle_error(ret);
 800073c:	7bfb      	ldrb	r3, [r7, #15]
 800073e:	4618      	mov	r0, r3
 8000740:	f000 f826 	bl	8000790 <handle_error>
    }
    uint16_t raw_angle = (((angle_buff[0]<<8)|angle_buff[1])&0x0FFF);
 8000744:	7a3b      	ldrb	r3, [r7, #8]
 8000746:	b21b      	sxth	r3, r3
 8000748:	021b      	lsls	r3, r3, #8
 800074a:	b21a      	sxth	r2, r3
 800074c:	7a7b      	ldrb	r3, [r7, #9]
 800074e:	b21b      	sxth	r3, r3
 8000750:	4313      	orrs	r3, r2
 8000752:	b21b      	sxth	r3, r3
 8000754:	b29b      	uxth	r3, r3
 8000756:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800075a:	81bb      	strh	r3, [r7, #12]

    *angle = 360.0f*((float)raw_angle/4096.0f);
 800075c:	89bb      	ldrh	r3, [r7, #12]
 800075e:	ee07 3a90 	vmov	s15, r3
 8000762:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8000766:	eddf 6a08 	vldr	s13, [pc, #32]	@ 8000788 <AS5600_read_angle+0x7c>
 800076a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800076e:	ed9f 7a07 	vldr	s14, [pc, #28]	@ 800078c <AS5600_read_angle+0x80>
 8000772:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000776:	683b      	ldr	r3, [r7, #0]
 8000778:	edc3 7a00 	vstr	s15, [r3]
    return HAL_OK;
 800077c:	2300      	movs	r3, #0
}
 800077e:	4618      	mov	r0, r3
 8000780:	3710      	adds	r7, #16
 8000782:	46bd      	mov	sp, r7
 8000784:	bd80      	pop	{r7, pc}
 8000786:	bf00      	nop
 8000788:	45800000 	.word	0x45800000
 800078c:	43b40000 	.word	0x43b40000

08000790 <handle_error>:
        printf("No magnet detected or improper alignment\n");
        return 0; // Magnet is not detected
    }
}

void handle_error(HAL_StatusTypeDef status) {
 8000790:	b580      	push	{r7, lr}
 8000792:	b082      	sub	sp, #8
 8000794:	af00      	add	r7, sp, #0
 8000796:	4603      	mov	r3, r0
 8000798:	71fb      	strb	r3, [r7, #7]
    if (status != HAL_OK) {
 800079a:	79fb      	ldrb	r3, [r7, #7]
 800079c:	2b00      	cmp	r3, #0
 800079e:	d004      	beq.n	80007aa <handle_error+0x1a>
        // Implement error handling logic (e.g., log error or reset I²C bus)
        printf("I2C Error: %d\n", status);
 80007a0:	79fb      	ldrb	r3, [r7, #7]
 80007a2:	4619      	mov	r1, r3
 80007a4:	4803      	ldr	r0, [pc, #12]	@ (80007b4 <handle_error+0x24>)
 80007a6:	f009 fd7b 	bl	800a2a0 <iprintf>
    }
}
 80007aa:	bf00      	nop
 80007ac:	3708      	adds	r7, #8
 80007ae:	46bd      	mov	sp, r7
 80007b0:	bd80      	pop	{r7, pc}
 80007b2:	bf00      	nop
 80007b4:	0800c114 	.word	0x0800c114

080007b8 <__io_putchar>:

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
int __io_putchar(int ch) {
 80007b8:	b580      	push	{r7, lr}
 80007ba:	b082      	sub	sp, #8
 80007bc:	af00      	add	r7, sp, #0
 80007be:	6078      	str	r0, [r7, #4]
    //HAL_UART_Transmit(&huart3, (uint8_t *)&ch, 1, HAL_MAX_DELAY);
    HAL_UART_Transmit(&huart2, (uint8_t *)&ch, 1, HAL_MAX_DELAY);
 80007c0:	1d39      	adds	r1, r7, #4
 80007c2:	f04f 33ff 	mov.w	r3, #4294967295
 80007c6:	2201      	movs	r2, #1
 80007c8:	4803      	ldr	r0, [pc, #12]	@ (80007d8 <__io_putchar+0x20>)
 80007ca:	f006 fb73 	bl	8006eb4 <HAL_UART_Transmit>
    return ch;
 80007ce:	687b      	ldr	r3, [r7, #4]
}
 80007d0:	4618      	mov	r0, r3
 80007d2:	3708      	adds	r7, #8
 80007d4:	46bd      	mov	sp, r7
 80007d6:	bd80      	pop	{r7, pc}
 80007d8:	24000328 	.word	0x24000328

080007dc <System_Init>:

uint32_t uiBuad= 115200;

//uart interrupt ring buffer init
void System_Init(void) {
 80007dc:	b580      	push	{r7, lr}
 80007de:	af00      	add	r7, sp, #0
  // Initialize ring buffer
  ring_buffer_init(&uart_ring_buffer);
 80007e0:	4804      	ldr	r0, [pc, #16]	@ (80007f4 <System_Init+0x18>)
 80007e2:	f000 fc09 	bl	8000ff8 <ring_buffer_init>

  // Start UART reception in interrupt mode
  HAL_UART_Receive_IT(&huart3, &rx_data_s, 1);
 80007e6:	2201      	movs	r2, #1
 80007e8:	4903      	ldr	r1, [pc, #12]	@ (80007f8 <System_Init+0x1c>)
 80007ea:	4804      	ldr	r0, [pc, #16]	@ (80007fc <System_Init+0x20>)
 80007ec:	f006 fbf0 	bl	8006fd0 <HAL_UART_Receive_IT>
}
 80007f0:	bf00      	nop
 80007f2:	bd80      	pop	{r7, pc}
 80007f4:	24000450 	.word	0x24000450
 80007f8:	24000554 	.word	0x24000554
 80007fc:	240003bc 	.word	0x240003bc

08000800 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 8000800:	b580      	push	{r7, lr}
 8000802:	b088      	sub	sp, #32
 8000804:	af00      	add	r7, sp, #0
 8000806:	6078      	str	r0, [r7, #4]
  if (huart->Instance == USART3) { // Ensure this is for the correct UART instance
 8000808:	687b      	ldr	r3, [r7, #4]
 800080a:	681b      	ldr	r3, [r3, #0]
 800080c:	4a50      	ldr	r2, [pc, #320]	@ (8000950 <HAL_UART_RxCpltCallback+0x150>)
 800080e:	4293      	cmp	r3, r2
 8000810:	d14a      	bne.n	80008a8 <HAL_UART_RxCpltCallback+0xa8>
      // Add received byte to the ring buffer
	  printf("Received");
 8000812:	4850      	ldr	r0, [pc, #320]	@ (8000954 <HAL_UART_RxCpltCallback+0x154>)
 8000814:	f009 fd44 	bl	800a2a0 <iprintf>
      ring_buffer_put(&uart_ring_buffer, rx_data_s);
 8000818:	4b4f      	ldr	r3, [pc, #316]	@ (8000958 <HAL_UART_RxCpltCallback+0x158>)
 800081a:	781b      	ldrb	r3, [r3, #0]
 800081c:	4619      	mov	r1, r3
 800081e:	484f      	ldr	r0, [pc, #316]	@ (800095c <HAL_UART_RxCpltCallback+0x15c>)
 8000820:	f000 fbfc 	bl	800101c <ring_buffer_put>

      // Check if we received a carriage return '\r' (end of command)
      if (rx_data_s == '\r') {
 8000824:	4b4c      	ldr	r3, [pc, #304]	@ (8000958 <HAL_UART_RxCpltCallback+0x158>)
 8000826:	781b      	ldrb	r3, [r3, #0]
 8000828:	2b0d      	cmp	r3, #13
 800082a:	d138      	bne.n	800089e <HAL_UART_RxCpltCallback+0x9e>
          uint8_t data;
          uint16_t index = 0;
 800082c:	2300      	movs	r3, #0
 800082e:	83fb      	strh	r3, [r7, #30]

          // Extract the command from the ring buffer
          while (ring_buffer_get(&uart_ring_buffer, &data) && data != '\r' && index < COMMAND_MAX_LENGTH - 1) {
 8000830:	e006      	b.n	8000840 <HAL_UART_RxCpltCallback+0x40>
              command_buffer[index++] = (char)data;
 8000832:	8bfb      	ldrh	r3, [r7, #30]
 8000834:	1c5a      	adds	r2, r3, #1
 8000836:	83fa      	strh	r2, [r7, #30]
 8000838:	461a      	mov	r2, r3
 800083a:	7bf9      	ldrb	r1, [r7, #15]
 800083c:	4b48      	ldr	r3, [pc, #288]	@ (8000960 <HAL_UART_RxCpltCallback+0x160>)
 800083e:	5499      	strb	r1, [r3, r2]
          while (ring_buffer_get(&uart_ring_buffer, &data) && data != '\r' && index < COMMAND_MAX_LENGTH - 1) {
 8000840:	f107 030f 	add.w	r3, r7, #15
 8000844:	4619      	mov	r1, r3
 8000846:	4845      	ldr	r0, [pc, #276]	@ (800095c <HAL_UART_RxCpltCallback+0x15c>)
 8000848:	f000 fc15 	bl	8001076 <ring_buffer_get>
 800084c:	4603      	mov	r3, r0
 800084e:	2b00      	cmp	r3, #0
 8000850:	d005      	beq.n	800085e <HAL_UART_RxCpltCallback+0x5e>
 8000852:	7bfb      	ldrb	r3, [r7, #15]
 8000854:	2b0d      	cmp	r3, #13
 8000856:	d002      	beq.n	800085e <HAL_UART_RxCpltCallback+0x5e>
 8000858:	8bfb      	ldrh	r3, [r7, #30]
 800085a:	2b3e      	cmp	r3, #62	@ 0x3e
 800085c:	d9e9      	bls.n	8000832 <HAL_UART_RxCpltCallback+0x32>
          }
          command_buffer[index] = '\0'; // Null-terminate the string
 800085e:	8bfb      	ldrh	r3, [r7, #30]
 8000860:	4a3f      	ldr	r2, [pc, #252]	@ (8000960 <HAL_UART_RxCpltCallback+0x160>)
 8000862:	2100      	movs	r1, #0
 8000864:	54d1      	strb	r1, [r2, r3]

          // Process the command
          const char *response;
          if (strcmp(command_buffer, "hello") == 0) {
 8000866:	493f      	ldr	r1, [pc, #252]	@ (8000964 <HAL_UART_RxCpltCallback+0x164>)
 8000868:	483d      	ldr	r0, [pc, #244]	@ (8000960 <HAL_UART_RxCpltCallback+0x160>)
 800086a:	f7ff fd51 	bl	8000310 <strcmp>
 800086e:	4603      	mov	r3, r0
 8000870:	2b00      	cmp	r3, #0
 8000872:	d102      	bne.n	800087a <HAL_UART_RxCpltCallback+0x7a>
              response = "Hello to you too!\n";
 8000874:	4b3c      	ldr	r3, [pc, #240]	@ (8000968 <HAL_UART_RxCpltCallback+0x168>)
 8000876:	61bb      	str	r3, [r7, #24]
 8000878:	e001      	b.n	800087e <HAL_UART_RxCpltCallback+0x7e>
          } else {
              response = "Uh oh, something didn't work...\n";
 800087a:	4b3c      	ldr	r3, [pc, #240]	@ (800096c <HAL_UART_RxCpltCallback+0x16c>)
 800087c:	61bb      	str	r3, [r7, #24]
          }

          // Transmit the response
          HAL_UART_Transmit(&huart3, (uint8_t *)response, strlen(response), HAL_MAX_DELAY);
 800087e:	69b8      	ldr	r0, [r7, #24]
 8000880:	f7ff fda6 	bl	80003d0 <strlen>
 8000884:	4603      	mov	r3, r0
 8000886:	b29a      	uxth	r2, r3
 8000888:	f04f 33ff 	mov.w	r3, #4294967295
 800088c:	69b9      	ldr	r1, [r7, #24]
 800088e:	4838      	ldr	r0, [pc, #224]	@ (8000970 <HAL_UART_RxCpltCallback+0x170>)
 8000890:	f006 fb10 	bl	8006eb4 <HAL_UART_Transmit>

          // Clear the command buffer for reuse
          memset(command_buffer, 0, COMMAND_MAX_LENGTH);
 8000894:	2240      	movs	r2, #64	@ 0x40
 8000896:	2100      	movs	r1, #0
 8000898:	4831      	ldr	r0, [pc, #196]	@ (8000960 <HAL_UART_RxCpltCallback+0x160>)
 800089a:	f009 fdeb 	bl	800a474 <memset>
      }

      // Re-enable UART interrupt for next byte reception
      HAL_UART_Receive_IT(&huart3, &rx_data_s, 1);
 800089e:	2201      	movs	r2, #1
 80008a0:	492d      	ldr	r1, [pc, #180]	@ (8000958 <HAL_UART_RxCpltCallback+0x158>)
 80008a2:	4833      	ldr	r0, [pc, #204]	@ (8000970 <HAL_UART_RxCpltCallback+0x170>)
 80008a4:	f006 fb94 	bl	8006fd0 <HAL_UART_Receive_IT>
  }

  if (huart->Instance == USART2) { // Ensure this is for the correct UART instance
 80008a8:	687b      	ldr	r3, [r7, #4]
 80008aa:	681b      	ldr	r3, [r3, #0]
 80008ac:	4a31      	ldr	r2, [pc, #196]	@ (8000974 <HAL_UART_RxCpltCallback+0x174>)
 80008ae:	4293      	cmp	r3, r2
 80008b0:	d14a      	bne.n	8000948 <HAL_UART_RxCpltCallback+0x148>
        // Add received byte to the ring buffer
  	  printf("Received");
 80008b2:	4828      	ldr	r0, [pc, #160]	@ (8000954 <HAL_UART_RxCpltCallback+0x154>)
 80008b4:	f009 fcf4 	bl	800a2a0 <iprintf>
        ring_buffer_put(&uart_ring_buffer, rx_data_s);
 80008b8:	4b27      	ldr	r3, [pc, #156]	@ (8000958 <HAL_UART_RxCpltCallback+0x158>)
 80008ba:	781b      	ldrb	r3, [r3, #0]
 80008bc:	4619      	mov	r1, r3
 80008be:	4827      	ldr	r0, [pc, #156]	@ (800095c <HAL_UART_RxCpltCallback+0x15c>)
 80008c0:	f000 fbac 	bl	800101c <ring_buffer_put>

        // Check if we received a carriage return '\r' (end of command)
        if (rx_data_s == '\r') {
 80008c4:	4b24      	ldr	r3, [pc, #144]	@ (8000958 <HAL_UART_RxCpltCallback+0x158>)
 80008c6:	781b      	ldrb	r3, [r3, #0]
 80008c8:	2b0d      	cmp	r3, #13
 80008ca:	d138      	bne.n	800093e <HAL_UART_RxCpltCallback+0x13e>
            uint8_t data;
            uint16_t index = 0;
 80008cc:	2300      	movs	r3, #0
 80008ce:	82fb      	strh	r3, [r7, #22]

            // Extract the command from the ring buffer
            while (ring_buffer_get(&uart_ring_buffer, &data) && data != '\r' && index < COMMAND_MAX_LENGTH - 1) {
 80008d0:	e006      	b.n	80008e0 <HAL_UART_RxCpltCallback+0xe0>
                command_buffer[index++] = (char)data;
 80008d2:	8afb      	ldrh	r3, [r7, #22]
 80008d4:	1c5a      	adds	r2, r3, #1
 80008d6:	82fa      	strh	r2, [r7, #22]
 80008d8:	461a      	mov	r2, r3
 80008da:	7bb9      	ldrb	r1, [r7, #14]
 80008dc:	4b20      	ldr	r3, [pc, #128]	@ (8000960 <HAL_UART_RxCpltCallback+0x160>)
 80008de:	5499      	strb	r1, [r3, r2]
            while (ring_buffer_get(&uart_ring_buffer, &data) && data != '\r' && index < COMMAND_MAX_LENGTH - 1) {
 80008e0:	f107 030e 	add.w	r3, r7, #14
 80008e4:	4619      	mov	r1, r3
 80008e6:	481d      	ldr	r0, [pc, #116]	@ (800095c <HAL_UART_RxCpltCallback+0x15c>)
 80008e8:	f000 fbc5 	bl	8001076 <ring_buffer_get>
 80008ec:	4603      	mov	r3, r0
 80008ee:	2b00      	cmp	r3, #0
 80008f0:	d005      	beq.n	80008fe <HAL_UART_RxCpltCallback+0xfe>
 80008f2:	7bbb      	ldrb	r3, [r7, #14]
 80008f4:	2b0d      	cmp	r3, #13
 80008f6:	d002      	beq.n	80008fe <HAL_UART_RxCpltCallback+0xfe>
 80008f8:	8afb      	ldrh	r3, [r7, #22]
 80008fa:	2b3e      	cmp	r3, #62	@ 0x3e
 80008fc:	d9e9      	bls.n	80008d2 <HAL_UART_RxCpltCallback+0xd2>
            }
            command_buffer[index] = '\0'; // Null-terminate the string
 80008fe:	8afb      	ldrh	r3, [r7, #22]
 8000900:	4a17      	ldr	r2, [pc, #92]	@ (8000960 <HAL_UART_RxCpltCallback+0x160>)
 8000902:	2100      	movs	r1, #0
 8000904:	54d1      	strb	r1, [r2, r3]

            // Process the command
            const char *response;
            if (strcmp(command_buffer, "hello XBEEEEEEEXBEEEEEEEXBEEEEEEEXBEEEEEEE") == 0) {
 8000906:	491c      	ldr	r1, [pc, #112]	@ (8000978 <HAL_UART_RxCpltCallback+0x178>)
 8000908:	4815      	ldr	r0, [pc, #84]	@ (8000960 <HAL_UART_RxCpltCallback+0x160>)
 800090a:	f7ff fd01 	bl	8000310 <strcmp>
 800090e:	4603      	mov	r3, r0
 8000910:	2b00      	cmp	r3, #0
 8000912:	d102      	bne.n	800091a <HAL_UART_RxCpltCallback+0x11a>
                response = "Hello to you too!\n";
 8000914:	4b14      	ldr	r3, [pc, #80]	@ (8000968 <HAL_UART_RxCpltCallback+0x168>)
 8000916:	613b      	str	r3, [r7, #16]
 8000918:	e001      	b.n	800091e <HAL_UART_RxCpltCallback+0x11e>
            } else {
                response = "Uh oh, something XBEEEEEEE didn't work...\n";
 800091a:	4b18      	ldr	r3, [pc, #96]	@ (800097c <HAL_UART_RxCpltCallback+0x17c>)
 800091c:	613b      	str	r3, [r7, #16]
            }

            // Transmit the response
            HAL_UART_Transmit(&huart2, (uint8_t *)response, strlen(response), HAL_MAX_DELAY);
 800091e:	6938      	ldr	r0, [r7, #16]
 8000920:	f7ff fd56 	bl	80003d0 <strlen>
 8000924:	4603      	mov	r3, r0
 8000926:	b29a      	uxth	r2, r3
 8000928:	f04f 33ff 	mov.w	r3, #4294967295
 800092c:	6939      	ldr	r1, [r7, #16]
 800092e:	4814      	ldr	r0, [pc, #80]	@ (8000980 <HAL_UART_RxCpltCallback+0x180>)
 8000930:	f006 fac0 	bl	8006eb4 <HAL_UART_Transmit>

            // Clear the command buffer for reuse
            memset(command_buffer, 0, COMMAND_MAX_LENGTH);
 8000934:	2240      	movs	r2, #64	@ 0x40
 8000936:	2100      	movs	r1, #0
 8000938:	4809      	ldr	r0, [pc, #36]	@ (8000960 <HAL_UART_RxCpltCallback+0x160>)
 800093a:	f009 fd9b 	bl	800a474 <memset>
        }

        // Re-enable UART interrupt for next byte reception
        HAL_UART_Receive_IT(&huart3, &rx_data_s, 1);
 800093e:	2201      	movs	r2, #1
 8000940:	4905      	ldr	r1, [pc, #20]	@ (8000958 <HAL_UART_RxCpltCallback+0x158>)
 8000942:	480b      	ldr	r0, [pc, #44]	@ (8000970 <HAL_UART_RxCpltCallback+0x170>)
 8000944:	f006 fb44 	bl	8006fd0 <HAL_UART_Receive_IT>
    }
}
 8000948:	bf00      	nop
 800094a:	3720      	adds	r7, #32
 800094c:	46bd      	mov	sp, r7
 800094e:	bd80      	pop	{r7, pc}
 8000950:	40004800 	.word	0x40004800
 8000954:	0800c124 	.word	0x0800c124
 8000958:	24000554 	.word	0x24000554
 800095c:	24000450 	.word	0x24000450
 8000960:	24000558 	.word	0x24000558
 8000964:	0800c130 	.word	0x0800c130
 8000968:	0800c138 	.word	0x0800c138
 800096c:	0800c14c 	.word	0x0800c14c
 8000970:	240003bc 	.word	0x240003bc
 8000974:	40004400 	.word	0x40004400
 8000978:	0800c170 	.word	0x0800c170
 800097c:	0800c19c 	.word	0x0800c19c
 8000980:	24000328 	.word	0x24000328

08000984 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000984:	b580      	push	{r7, lr}
 8000986:	b084      	sub	sp, #16
 8000988:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */

  /* USER CODE END 1 */

  /* MPU Configuration--------------------------------------------------------*/
  MPU_Config();
 800098a:	f000 fb03 	bl	8000f94 <MPU_Config>

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800098e:	f000 ff8b 	bl	80018a8 <HAL_Init>

  /* USER CODE BEGIN Init */
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000992:	f000 f839 	bl	8000a08 <SystemClock_Config>

  /* USER CODE BEGIN SysInit */
  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000996:	f000 fa59 	bl	8000e4c <MX_GPIO_Init>
  MX_TIM1_Init();
 800099a:	f000 f8d3 	bl	8000b44 <MX_TIM1_Init>
  MX_USART3_UART_Init();
 800099e:	f000 fa09 	bl	8000db4 <MX_USART3_UART_Init>
  MX_USART2_UART_Init();
 80009a2:	f000 f9bb 	bl	8000d1c <MX_USART2_UART_Init>
  MX_I2C1_Init();
 80009a6:	f000 f88d 	bl	8000ac4 <MX_I2C1_Init>
  MX_USART1_UART_Init();
 80009aa:	f000 f96b 	bl	8000c84 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */
  System_Init();
 80009ae:	f7ff ff15 	bl	80007dc <System_Init>

  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 80009b2:	2100      	movs	r1, #0
 80009b4:	480f      	ldr	r0, [pc, #60]	@ (80009f4 <main+0x70>)
 80009b6:	f005 fb2d 	bl	8006014 <HAL_TIM_PWM_Start>

 float angle;
char* bootstatement = "Systems booting";
 80009ba:	4b0f      	ldr	r3, [pc, #60]	@ (80009f8 <main+0x74>)
 80009bc:	607b      	str	r3, [r7, #4]
HAL_UART_Transmit(&huart3, &bootstatement, sizeof(bootstatement), 1);
 80009be:	1d39      	adds	r1, r7, #4
 80009c0:	2301      	movs	r3, #1
 80009c2:	2204      	movs	r2, #4
 80009c4:	480d      	ldr	r0, [pc, #52]	@ (80009fc <main+0x78>)
 80009c6:	f006 fa75 	bl	8006eb4 <HAL_UART_Transmit>
	     }

	     // 3. Optional: Add minimal delay to prevent CPU overload
	  */

	  	  HAL_StatusTypeDef i2c_status = AS5600_read_angle(&hi2c1, &angle);
 80009ca:	f107 0308 	add.w	r3, r7, #8
 80009ce:	4619      	mov	r1, r3
 80009d0:	480b      	ldr	r0, [pc, #44]	@ (8000a00 <main+0x7c>)
 80009d2:	f7ff fe9b 	bl	800070c <AS5600_read_angle>
 80009d6:	4603      	mov	r3, r0
 80009d8:	73fb      	strb	r3, [r7, #15]
	 	  if (i2c_status== HAL_OK){
 80009da:	7bfb      	ldrb	r3, [r7, #15]
 80009dc:	2b00      	cmp	r3, #0
 80009de:	d1f4      	bne.n	80009ca <main+0x46>
	 		  printf("the angle is %f", angle);
 80009e0:	edd7 7a02 	vldr	s15, [r7, #8]
 80009e4:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80009e8:	ec53 2b17 	vmov	r2, r3, d7
 80009ec:	4805      	ldr	r0, [pc, #20]	@ (8000a04 <main+0x80>)
 80009ee:	f009 fc57 	bl	800a2a0 <iprintf>
  {	/*
 80009f2:	e7ea      	b.n	80009ca <main+0x46>
 80009f4:	24000248 	.word	0x24000248
 80009f8:	0800c1c8 	.word	0x0800c1c8
 80009fc:	240003bc 	.word	0x240003bc
 8000a00:	240001f4 	.word	0x240001f4
 8000a04:	0800c1d8 	.word	0x0800c1d8

08000a08 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000a08:	b580      	push	{r7, lr}
 8000a0a:	b09c      	sub	sp, #112	@ 0x70
 8000a0c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000a0e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000a12:	224c      	movs	r2, #76	@ 0x4c
 8000a14:	2100      	movs	r1, #0
 8000a16:	4618      	mov	r0, r3
 8000a18:	f009 fd2c 	bl	800a474 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000a1c:	1d3b      	adds	r3, r7, #4
 8000a1e:	2220      	movs	r2, #32
 8000a20:	2100      	movs	r1, #0
 8000a22:	4618      	mov	r0, r3
 8000a24:	f009 fd26 	bl	800a474 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 8000a28:	2002      	movs	r0, #2
 8000a2a:	f002 fd39 	bl	80034a0 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8000a2e:	2300      	movs	r3, #0
 8000a30:	603b      	str	r3, [r7, #0]
 8000a32:	4b23      	ldr	r3, [pc, #140]	@ (8000ac0 <SystemClock_Config+0xb8>)
 8000a34:	699b      	ldr	r3, [r3, #24]
 8000a36:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8000a3a:	4a21      	ldr	r2, [pc, #132]	@ (8000ac0 <SystemClock_Config+0xb8>)
 8000a3c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000a40:	6193      	str	r3, [r2, #24]
 8000a42:	4b1f      	ldr	r3, [pc, #124]	@ (8000ac0 <SystemClock_Config+0xb8>)
 8000a44:	699b      	ldr	r3, [r3, #24]
 8000a46:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000a4a:	603b      	str	r3, [r7, #0]
 8000a4c:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8000a4e:	bf00      	nop
 8000a50:	4b1b      	ldr	r3, [pc, #108]	@ (8000ac0 <SystemClock_Config+0xb8>)
 8000a52:	699b      	ldr	r3, [r3, #24]
 8000a54:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8000a58:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8000a5c:	d1f8      	bne.n	8000a50 <SystemClock_Config+0x48>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000a5e:	2302      	movs	r3, #2
 8000a60:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
 8000a62:	2301      	movs	r3, #1
 8000a64:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.HSICalibrationValue = 64;
 8000a66:	2340      	movs	r3, #64	@ 0x40
 8000a68:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000a6a:	2300      	movs	r3, #0
 8000a6c:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000a6e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000a72:	4618      	mov	r0, r3
 8000a74:	f002 fd4e 	bl	8003514 <HAL_RCC_OscConfig>
 8000a78:	4603      	mov	r3, r0
 8000a7a:	2b00      	cmp	r3, #0
 8000a7c:	d001      	beq.n	8000a82 <SystemClock_Config+0x7a>
  {
    Error_Handler();
 8000a7e:	f000 fab5 	bl	8000fec <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000a82:	233f      	movs	r3, #63	@ 0x3f
 8000a84:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000a86:	2300      	movs	r3, #0
 8000a88:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8000a8a:	2300      	movs	r3, #0
 8000a8c:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 8000a8e:	2300      	movs	r3, #0
 8000a90:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV1;
 8000a92:	2300      	movs	r3, #0
 8000a94:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 8000a96:	2340      	movs	r3, #64	@ 0x40
 8000a98:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 8000a9a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000a9e:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV1;
 8000aa0:	2300      	movs	r3, #0
 8000aa2:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000aa4:	1d3b      	adds	r3, r7, #4
 8000aa6:	2101      	movs	r1, #1
 8000aa8:	4618      	mov	r0, r3
 8000aaa:	f003 f90d 	bl	8003cc8 <HAL_RCC_ClockConfig>
 8000aae:	4603      	mov	r3, r0
 8000ab0:	2b00      	cmp	r3, #0
 8000ab2:	d001      	beq.n	8000ab8 <SystemClock_Config+0xb0>
  {
    Error_Handler();
 8000ab4:	f000 fa9a 	bl	8000fec <Error_Handler>
  }
}
 8000ab8:	bf00      	nop
 8000aba:	3770      	adds	r7, #112	@ 0x70
 8000abc:	46bd      	mov	sp, r7
 8000abe:	bd80      	pop	{r7, pc}
 8000ac0:	58024800 	.word	0x58024800

08000ac4 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000ac4:	b580      	push	{r7, lr}
 8000ac6:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000ac8:	4b1b      	ldr	r3, [pc, #108]	@ (8000b38 <MX_I2C1_Init+0x74>)
 8000aca:	4a1c      	ldr	r2, [pc, #112]	@ (8000b3c <MX_I2C1_Init+0x78>)
 8000acc:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00707CBB;
 8000ace:	4b1a      	ldr	r3, [pc, #104]	@ (8000b38 <MX_I2C1_Init+0x74>)
 8000ad0:	4a1b      	ldr	r2, [pc, #108]	@ (8000b40 <MX_I2C1_Init+0x7c>)
 8000ad2:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8000ad4:	4b18      	ldr	r3, [pc, #96]	@ (8000b38 <MX_I2C1_Init+0x74>)
 8000ad6:	2200      	movs	r2, #0
 8000ad8:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000ada:	4b17      	ldr	r3, [pc, #92]	@ (8000b38 <MX_I2C1_Init+0x74>)
 8000adc:	2201      	movs	r2, #1
 8000ade:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000ae0:	4b15      	ldr	r3, [pc, #84]	@ (8000b38 <MX_I2C1_Init+0x74>)
 8000ae2:	2200      	movs	r2, #0
 8000ae4:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8000ae6:	4b14      	ldr	r3, [pc, #80]	@ (8000b38 <MX_I2C1_Init+0x74>)
 8000ae8:	2200      	movs	r2, #0
 8000aea:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000aec:	4b12      	ldr	r3, [pc, #72]	@ (8000b38 <MX_I2C1_Init+0x74>)
 8000aee:	2200      	movs	r2, #0
 8000af0:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000af2:	4b11      	ldr	r3, [pc, #68]	@ (8000b38 <MX_I2C1_Init+0x74>)
 8000af4:	2200      	movs	r2, #0
 8000af6:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000af8:	4b0f      	ldr	r3, [pc, #60]	@ (8000b38 <MX_I2C1_Init+0x74>)
 8000afa:	2200      	movs	r2, #0
 8000afc:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000afe:	480e      	ldr	r0, [pc, #56]	@ (8000b38 <MX_I2C1_Init+0x74>)
 8000b00:	f002 f812 	bl	8002b28 <HAL_I2C_Init>
 8000b04:	4603      	mov	r3, r0
 8000b06:	2b00      	cmp	r3, #0
 8000b08:	d001      	beq.n	8000b0e <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8000b0a:	f000 fa6f 	bl	8000fec <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000b0e:	2100      	movs	r1, #0
 8000b10:	4809      	ldr	r0, [pc, #36]	@ (8000b38 <MX_I2C1_Init+0x74>)
 8000b12:	f002 fc2d 	bl	8003370 <HAL_I2CEx_ConfigAnalogFilter>
 8000b16:	4603      	mov	r3, r0
 8000b18:	2b00      	cmp	r3, #0
 8000b1a:	d001      	beq.n	8000b20 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8000b1c:	f000 fa66 	bl	8000fec <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8000b20:	2100      	movs	r1, #0
 8000b22:	4805      	ldr	r0, [pc, #20]	@ (8000b38 <MX_I2C1_Init+0x74>)
 8000b24:	f002 fc6f 	bl	8003406 <HAL_I2CEx_ConfigDigitalFilter>
 8000b28:	4603      	mov	r3, r0
 8000b2a:	2b00      	cmp	r3, #0
 8000b2c:	d001      	beq.n	8000b32 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8000b2e:	f000 fa5d 	bl	8000fec <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000b32:	bf00      	nop
 8000b34:	bd80      	pop	{r7, pc}
 8000b36:	bf00      	nop
 8000b38:	240001f4 	.word	0x240001f4
 8000b3c:	40005400 	.word	0x40005400
 8000b40:	00707cbb 	.word	0x00707cbb

08000b44 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000b44:	b580      	push	{r7, lr}
 8000b46:	b098      	sub	sp, #96	@ 0x60
 8000b48:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000b4a:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8000b4e:	2200      	movs	r2, #0
 8000b50:	601a      	str	r2, [r3, #0]
 8000b52:	605a      	str	r2, [r3, #4]
 8000b54:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000b56:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8000b5a:	2200      	movs	r2, #0
 8000b5c:	601a      	str	r2, [r3, #0]
 8000b5e:	605a      	str	r2, [r3, #4]
 8000b60:	609a      	str	r2, [r3, #8]
 8000b62:	60da      	str	r2, [r3, #12]
 8000b64:	611a      	str	r2, [r3, #16]
 8000b66:	615a      	str	r2, [r3, #20]
 8000b68:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8000b6a:	1d3b      	adds	r3, r7, #4
 8000b6c:	2234      	movs	r2, #52	@ 0x34
 8000b6e:	2100      	movs	r1, #0
 8000b70:	4618      	mov	r0, r3
 8000b72:	f009 fc7f 	bl	800a474 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000b76:	4b41      	ldr	r3, [pc, #260]	@ (8000c7c <MX_TIM1_Init+0x138>)
 8000b78:	4a41      	ldr	r2, [pc, #260]	@ (8000c80 <MX_TIM1_Init+0x13c>)
 8000b7a:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 64-1;
 8000b7c:	4b3f      	ldr	r3, [pc, #252]	@ (8000c7c <MX_TIM1_Init+0x138>)
 8000b7e:	223f      	movs	r2, #63	@ 0x3f
 8000b80:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000b82:	4b3e      	ldr	r3, [pc, #248]	@ (8000c7c <MX_TIM1_Init+0x138>)
 8000b84:	2200      	movs	r2, #0
 8000b86:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 20000-1;
 8000b88:	4b3c      	ldr	r3, [pc, #240]	@ (8000c7c <MX_TIM1_Init+0x138>)
 8000b8a:	f644 621f 	movw	r2, #19999	@ 0x4e1f
 8000b8e:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000b90:	4b3a      	ldr	r3, [pc, #232]	@ (8000c7c <MX_TIM1_Init+0x138>)
 8000b92:	2200      	movs	r2, #0
 8000b94:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000b96:	4b39      	ldr	r3, [pc, #228]	@ (8000c7c <MX_TIM1_Init+0x138>)
 8000b98:	2200      	movs	r2, #0
 8000b9a:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000b9c:	4b37      	ldr	r3, [pc, #220]	@ (8000c7c <MX_TIM1_Init+0x138>)
 8000b9e:	2200      	movs	r2, #0
 8000ba0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8000ba2:	4836      	ldr	r0, [pc, #216]	@ (8000c7c <MX_TIM1_Init+0x138>)
 8000ba4:	f005 f9de 	bl	8005f64 <HAL_TIM_PWM_Init>
 8000ba8:	4603      	mov	r3, r0
 8000baa:	2b00      	cmp	r3, #0
 8000bac:	d001      	beq.n	8000bb2 <MX_TIM1_Init+0x6e>
  {
    Error_Handler();
 8000bae:	f000 fa1d 	bl	8000fec <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000bb2:	2300      	movs	r3, #0
 8000bb4:	657b      	str	r3, [r7, #84]	@ 0x54
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8000bb6:	2300      	movs	r3, #0
 8000bb8:	65bb      	str	r3, [r7, #88]	@ 0x58
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000bba:	2300      	movs	r3, #0
 8000bbc:	65fb      	str	r3, [r7, #92]	@ 0x5c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000bbe:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8000bc2:	4619      	mov	r1, r3
 8000bc4:	482d      	ldr	r0, [pc, #180]	@ (8000c7c <MX_TIM1_Init+0x138>)
 8000bc6:	f005 fffd 	bl	8006bc4 <HAL_TIMEx_MasterConfigSynchronization>
 8000bca:	4603      	mov	r3, r0
 8000bcc:	2b00      	cmp	r3, #0
 8000bce:	d001      	beq.n	8000bd4 <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 8000bd0:	f000 fa0c 	bl	8000fec <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000bd4:	2360      	movs	r3, #96	@ 0x60
 8000bd6:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.Pulse = 5000;
 8000bd8:	f241 3388 	movw	r3, #5000	@ 0x1388
 8000bdc:	63fb      	str	r3, [r7, #60]	@ 0x3c
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000bde:	2300      	movs	r3, #0
 8000be0:	643b      	str	r3, [r7, #64]	@ 0x40
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8000be2:	2300      	movs	r3, #0
 8000be4:	647b      	str	r3, [r7, #68]	@ 0x44
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000be6:	2300      	movs	r3, #0
 8000be8:	64bb      	str	r3, [r7, #72]	@ 0x48
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000bea:	2300      	movs	r3, #0
 8000bec:	64fb      	str	r3, [r7, #76]	@ 0x4c
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000bee:	2300      	movs	r3, #0
 8000bf0:	653b      	str	r3, [r7, #80]	@ 0x50
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000bf2:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8000bf6:	2200      	movs	r2, #0
 8000bf8:	4619      	mov	r1, r3
 8000bfa:	4820      	ldr	r0, [pc, #128]	@ (8000c7c <MX_TIM1_Init+0x138>)
 8000bfc:	f005 fb26 	bl	800624c <HAL_TIM_PWM_ConfigChannel>
 8000c00:	4603      	mov	r3, r0
 8000c02:	2b00      	cmp	r3, #0
 8000c04:	d001      	beq.n	8000c0a <MX_TIM1_Init+0xc6>
  {
    Error_Handler();
 8000c06:	f000 f9f1 	bl	8000fec <Error_Handler>
  }
  sConfigOC.Pulse = 1500;
 8000c0a:	f240 53dc 	movw	r3, #1500	@ 0x5dc
 8000c0e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000c10:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8000c14:	2204      	movs	r2, #4
 8000c16:	4619      	mov	r1, r3
 8000c18:	4818      	ldr	r0, [pc, #96]	@ (8000c7c <MX_TIM1_Init+0x138>)
 8000c1a:	f005 fb17 	bl	800624c <HAL_TIM_PWM_ConfigChannel>
 8000c1e:	4603      	mov	r3, r0
 8000c20:	2b00      	cmp	r3, #0
 8000c22:	d001      	beq.n	8000c28 <MX_TIM1_Init+0xe4>
  {
    Error_Handler();
 8000c24:	f000 f9e2 	bl	8000fec <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8000c28:	2300      	movs	r3, #0
 8000c2a:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8000c2c:	2300      	movs	r3, #0
 8000c2e:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8000c30:	2300      	movs	r3, #0
 8000c32:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8000c34:	2300      	movs	r3, #0
 8000c36:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8000c38:	2300      	movs	r3, #0
 8000c3a:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000c3c:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000c40:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8000c42:	2300      	movs	r3, #0
 8000c44:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8000c46:	2300      	movs	r3, #0
 8000c48:	627b      	str	r3, [r7, #36]	@ 0x24
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8000c4a:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8000c4e:	62bb      	str	r3, [r7, #40]	@ 0x28
  sBreakDeadTimeConfig.Break2Filter = 0;
 8000c50:	2300      	movs	r3, #0
 8000c52:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8000c54:	2300      	movs	r3, #0
 8000c56:	637b      	str	r3, [r7, #52]	@ 0x34
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8000c58:	1d3b      	adds	r3, r7, #4
 8000c5a:	4619      	mov	r1, r3
 8000c5c:	4807      	ldr	r0, [pc, #28]	@ (8000c7c <MX_TIM1_Init+0x138>)
 8000c5e:	f006 f84d 	bl	8006cfc <HAL_TIMEx_ConfigBreakDeadTime>
 8000c62:	4603      	mov	r3, r0
 8000c64:	2b00      	cmp	r3, #0
 8000c66:	d001      	beq.n	8000c6c <MX_TIM1_Init+0x128>
  {
    Error_Handler();
 8000c68:	f000 f9c0 	bl	8000fec <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8000c6c:	4803      	ldr	r0, [pc, #12]	@ (8000c7c <MX_TIM1_Init+0x138>)
 8000c6e:	f000 fad7 	bl	8001220 <HAL_TIM_MspPostInit>

}
 8000c72:	bf00      	nop
 8000c74:	3760      	adds	r7, #96	@ 0x60
 8000c76:	46bd      	mov	sp, r7
 8000c78:	bd80      	pop	{r7, pc}
 8000c7a:	bf00      	nop
 8000c7c:	24000248 	.word	0x24000248
 8000c80:	40010000 	.word	0x40010000

08000c84 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000c84:	b580      	push	{r7, lr}
 8000c86:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000c88:	4b22      	ldr	r3, [pc, #136]	@ (8000d14 <MX_USART1_UART_Init+0x90>)
 8000c8a:	4a23      	ldr	r2, [pc, #140]	@ (8000d18 <MX_USART1_UART_Init+0x94>)
 8000c8c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 8000c8e:	4b21      	ldr	r3, [pc, #132]	@ (8000d14 <MX_USART1_UART_Init+0x90>)
 8000c90:	f44f 5216 	mov.w	r2, #9600	@ 0x2580
 8000c94:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000c96:	4b1f      	ldr	r3, [pc, #124]	@ (8000d14 <MX_USART1_UART_Init+0x90>)
 8000c98:	2200      	movs	r2, #0
 8000c9a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000c9c:	4b1d      	ldr	r3, [pc, #116]	@ (8000d14 <MX_USART1_UART_Init+0x90>)
 8000c9e:	2200      	movs	r2, #0
 8000ca0:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000ca2:	4b1c      	ldr	r3, [pc, #112]	@ (8000d14 <MX_USART1_UART_Init+0x90>)
 8000ca4:	2200      	movs	r2, #0
 8000ca6:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000ca8:	4b1a      	ldr	r3, [pc, #104]	@ (8000d14 <MX_USART1_UART_Init+0x90>)
 8000caa:	220c      	movs	r2, #12
 8000cac:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000cae:	4b19      	ldr	r3, [pc, #100]	@ (8000d14 <MX_USART1_UART_Init+0x90>)
 8000cb0:	2200      	movs	r2, #0
 8000cb2:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000cb4:	4b17      	ldr	r3, [pc, #92]	@ (8000d14 <MX_USART1_UART_Init+0x90>)
 8000cb6:	2200      	movs	r2, #0
 8000cb8:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000cba:	4b16      	ldr	r3, [pc, #88]	@ (8000d14 <MX_USART1_UART_Init+0x90>)
 8000cbc:	2200      	movs	r2, #0
 8000cbe:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000cc0:	4b14      	ldr	r3, [pc, #80]	@ (8000d14 <MX_USART1_UART_Init+0x90>)
 8000cc2:	2200      	movs	r2, #0
 8000cc4:	625a      	str	r2, [r3, #36]	@ 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000cc6:	4b13      	ldr	r3, [pc, #76]	@ (8000d14 <MX_USART1_UART_Init+0x90>)
 8000cc8:	2200      	movs	r2, #0
 8000cca:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000ccc:	4811      	ldr	r0, [pc, #68]	@ (8000d14 <MX_USART1_UART_Init+0x90>)
 8000cce:	f006 f8a1 	bl	8006e14 <HAL_UART_Init>
 8000cd2:	4603      	mov	r3, r0
 8000cd4:	2b00      	cmp	r3, #0
 8000cd6:	d001      	beq.n	8000cdc <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 8000cd8:	f000 f988 	bl	8000fec <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000cdc:	2100      	movs	r1, #0
 8000cde:	480d      	ldr	r0, [pc, #52]	@ (8000d14 <MX_USART1_UART_Init+0x90>)
 8000ce0:	f008 fd1b 	bl	800971a <HAL_UARTEx_SetTxFifoThreshold>
 8000ce4:	4603      	mov	r3, r0
 8000ce6:	2b00      	cmp	r3, #0
 8000ce8:	d001      	beq.n	8000cee <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 8000cea:	f000 f97f 	bl	8000fec <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000cee:	2100      	movs	r1, #0
 8000cf0:	4808      	ldr	r0, [pc, #32]	@ (8000d14 <MX_USART1_UART_Init+0x90>)
 8000cf2:	f008 fd50 	bl	8009796 <HAL_UARTEx_SetRxFifoThreshold>
 8000cf6:	4603      	mov	r3, r0
 8000cf8:	2b00      	cmp	r3, #0
 8000cfa:	d001      	beq.n	8000d00 <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 8000cfc:	f000 f976 	bl	8000fec <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8000d00:	4804      	ldr	r0, [pc, #16]	@ (8000d14 <MX_USART1_UART_Init+0x90>)
 8000d02:	f008 fcd1 	bl	80096a8 <HAL_UARTEx_DisableFifoMode>
 8000d06:	4603      	mov	r3, r0
 8000d08:	2b00      	cmp	r3, #0
 8000d0a:	d001      	beq.n	8000d10 <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 8000d0c:	f000 f96e 	bl	8000fec <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000d10:	bf00      	nop
 8000d12:	bd80      	pop	{r7, pc}
 8000d14:	24000294 	.word	0x24000294
 8000d18:	40011000 	.word	0x40011000

08000d1c <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000d1c:	b580      	push	{r7, lr}
 8000d1e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000d20:	4b22      	ldr	r3, [pc, #136]	@ (8000dac <MX_USART2_UART_Init+0x90>)
 8000d22:	4a23      	ldr	r2, [pc, #140]	@ (8000db0 <MX_USART2_UART_Init+0x94>)
 8000d24:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 8000d26:	4b21      	ldr	r3, [pc, #132]	@ (8000dac <MX_USART2_UART_Init+0x90>)
 8000d28:	f44f 5216 	mov.w	r2, #9600	@ 0x2580
 8000d2c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000d2e:	4b1f      	ldr	r3, [pc, #124]	@ (8000dac <MX_USART2_UART_Init+0x90>)
 8000d30:	2200      	movs	r2, #0
 8000d32:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000d34:	4b1d      	ldr	r3, [pc, #116]	@ (8000dac <MX_USART2_UART_Init+0x90>)
 8000d36:	2200      	movs	r2, #0
 8000d38:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000d3a:	4b1c      	ldr	r3, [pc, #112]	@ (8000dac <MX_USART2_UART_Init+0x90>)
 8000d3c:	2200      	movs	r2, #0
 8000d3e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000d40:	4b1a      	ldr	r3, [pc, #104]	@ (8000dac <MX_USART2_UART_Init+0x90>)
 8000d42:	220c      	movs	r2, #12
 8000d44:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000d46:	4b19      	ldr	r3, [pc, #100]	@ (8000dac <MX_USART2_UART_Init+0x90>)
 8000d48:	2200      	movs	r2, #0
 8000d4a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000d4c:	4b17      	ldr	r3, [pc, #92]	@ (8000dac <MX_USART2_UART_Init+0x90>)
 8000d4e:	2200      	movs	r2, #0
 8000d50:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000d52:	4b16      	ldr	r3, [pc, #88]	@ (8000dac <MX_USART2_UART_Init+0x90>)
 8000d54:	2200      	movs	r2, #0
 8000d56:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000d58:	4b14      	ldr	r3, [pc, #80]	@ (8000dac <MX_USART2_UART_Init+0x90>)
 8000d5a:	2200      	movs	r2, #0
 8000d5c:	625a      	str	r2, [r3, #36]	@ 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000d5e:	4b13      	ldr	r3, [pc, #76]	@ (8000dac <MX_USART2_UART_Init+0x90>)
 8000d60:	2200      	movs	r2, #0
 8000d62:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000d64:	4811      	ldr	r0, [pc, #68]	@ (8000dac <MX_USART2_UART_Init+0x90>)
 8000d66:	f006 f855 	bl	8006e14 <HAL_UART_Init>
 8000d6a:	4603      	mov	r3, r0
 8000d6c:	2b00      	cmp	r3, #0
 8000d6e:	d001      	beq.n	8000d74 <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 8000d70:	f000 f93c 	bl	8000fec <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000d74:	2100      	movs	r1, #0
 8000d76:	480d      	ldr	r0, [pc, #52]	@ (8000dac <MX_USART2_UART_Init+0x90>)
 8000d78:	f008 fccf 	bl	800971a <HAL_UARTEx_SetTxFifoThreshold>
 8000d7c:	4603      	mov	r3, r0
 8000d7e:	2b00      	cmp	r3, #0
 8000d80:	d001      	beq.n	8000d86 <MX_USART2_UART_Init+0x6a>
  {
    Error_Handler();
 8000d82:	f000 f933 	bl	8000fec <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000d86:	2100      	movs	r1, #0
 8000d88:	4808      	ldr	r0, [pc, #32]	@ (8000dac <MX_USART2_UART_Init+0x90>)
 8000d8a:	f008 fd04 	bl	8009796 <HAL_UARTEx_SetRxFifoThreshold>
 8000d8e:	4603      	mov	r3, r0
 8000d90:	2b00      	cmp	r3, #0
 8000d92:	d001      	beq.n	8000d98 <MX_USART2_UART_Init+0x7c>
  {
    Error_Handler();
 8000d94:	f000 f92a 	bl	8000fec <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 8000d98:	4804      	ldr	r0, [pc, #16]	@ (8000dac <MX_USART2_UART_Init+0x90>)
 8000d9a:	f008 fc85 	bl	80096a8 <HAL_UARTEx_DisableFifoMode>
 8000d9e:	4603      	mov	r3, r0
 8000da0:	2b00      	cmp	r3, #0
 8000da2:	d001      	beq.n	8000da8 <MX_USART2_UART_Init+0x8c>
  {
    Error_Handler();
 8000da4:	f000 f922 	bl	8000fec <Error_Handler>
  	  //UART_Start_Receive_IT(&huart2, &ucRxData, 1);
      //HAL_UART_Receive_IT(&huart2, &ucRxData, 1);

  /* USER CODE END USART2_Init 2 */

}
 8000da8:	bf00      	nop
 8000daa:	bd80      	pop	{r7, pc}
 8000dac:	24000328 	.word	0x24000328
 8000db0:	40004400 	.word	0x40004400

08000db4 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8000db4:	b580      	push	{r7, lr}
 8000db6:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000db8:	4b22      	ldr	r3, [pc, #136]	@ (8000e44 <MX_USART3_UART_Init+0x90>)
 8000dba:	4a23      	ldr	r2, [pc, #140]	@ (8000e48 <MX_USART3_UART_Init+0x94>)
 8000dbc:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8000dbe:	4b21      	ldr	r3, [pc, #132]	@ (8000e44 <MX_USART3_UART_Init+0x90>)
 8000dc0:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000dc4:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000dc6:	4b1f      	ldr	r3, [pc, #124]	@ (8000e44 <MX_USART3_UART_Init+0x90>)
 8000dc8:	2200      	movs	r2, #0
 8000dca:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000dcc:	4b1d      	ldr	r3, [pc, #116]	@ (8000e44 <MX_USART3_UART_Init+0x90>)
 8000dce:	2200      	movs	r2, #0
 8000dd0:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000dd2:	4b1c      	ldr	r3, [pc, #112]	@ (8000e44 <MX_USART3_UART_Init+0x90>)
 8000dd4:	2200      	movs	r2, #0
 8000dd6:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000dd8:	4b1a      	ldr	r3, [pc, #104]	@ (8000e44 <MX_USART3_UART_Init+0x90>)
 8000dda:	220c      	movs	r2, #12
 8000ddc:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000dde:	4b19      	ldr	r3, [pc, #100]	@ (8000e44 <MX_USART3_UART_Init+0x90>)
 8000de0:	2200      	movs	r2, #0
 8000de2:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000de4:	4b17      	ldr	r3, [pc, #92]	@ (8000e44 <MX_USART3_UART_Init+0x90>)
 8000de6:	2200      	movs	r2, #0
 8000de8:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000dea:	4b16      	ldr	r3, [pc, #88]	@ (8000e44 <MX_USART3_UART_Init+0x90>)
 8000dec:	2200      	movs	r2, #0
 8000dee:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000df0:	4b14      	ldr	r3, [pc, #80]	@ (8000e44 <MX_USART3_UART_Init+0x90>)
 8000df2:	2200      	movs	r2, #0
 8000df4:	625a      	str	r2, [r3, #36]	@ 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000df6:	4b13      	ldr	r3, [pc, #76]	@ (8000e44 <MX_USART3_UART_Init+0x90>)
 8000df8:	2200      	movs	r2, #0
 8000dfa:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000dfc:	4811      	ldr	r0, [pc, #68]	@ (8000e44 <MX_USART3_UART_Init+0x90>)
 8000dfe:	f006 f809 	bl	8006e14 <HAL_UART_Init>
 8000e02:	4603      	mov	r3, r0
 8000e04:	2b00      	cmp	r3, #0
 8000e06:	d001      	beq.n	8000e0c <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 8000e08:	f000 f8f0 	bl	8000fec <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000e0c:	2100      	movs	r1, #0
 8000e0e:	480d      	ldr	r0, [pc, #52]	@ (8000e44 <MX_USART3_UART_Init+0x90>)
 8000e10:	f008 fc83 	bl	800971a <HAL_UARTEx_SetTxFifoThreshold>
 8000e14:	4603      	mov	r3, r0
 8000e16:	2b00      	cmp	r3, #0
 8000e18:	d001      	beq.n	8000e1e <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 8000e1a:	f000 f8e7 	bl	8000fec <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000e1e:	2100      	movs	r1, #0
 8000e20:	4808      	ldr	r0, [pc, #32]	@ (8000e44 <MX_USART3_UART_Init+0x90>)
 8000e22:	f008 fcb8 	bl	8009796 <HAL_UARTEx_SetRxFifoThreshold>
 8000e26:	4603      	mov	r3, r0
 8000e28:	2b00      	cmp	r3, #0
 8000e2a:	d001      	beq.n	8000e30 <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 8000e2c:	f000 f8de 	bl	8000fec <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 8000e30:	4804      	ldr	r0, [pc, #16]	@ (8000e44 <MX_USART3_UART_Init+0x90>)
 8000e32:	f008 fc39 	bl	80096a8 <HAL_UARTEx_DisableFifoMode>
 8000e36:	4603      	mov	r3, r0
 8000e38:	2b00      	cmp	r3, #0
 8000e3a:	d001      	beq.n	8000e40 <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 8000e3c:	f000 f8d6 	bl	8000fec <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000e40:	bf00      	nop
 8000e42:	bd80      	pop	{r7, pc}
 8000e44:	240003bc 	.word	0x240003bc
 8000e48:	40004800 	.word	0x40004800

08000e4c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000e4c:	b580      	push	{r7, lr}
 8000e4e:	b08c      	sub	sp, #48	@ 0x30
 8000e50:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e52:	f107 031c 	add.w	r3, r7, #28
 8000e56:	2200      	movs	r2, #0
 8000e58:	601a      	str	r2, [r3, #0]
 8000e5a:	605a      	str	r2, [r3, #4]
 8000e5c:	609a      	str	r2, [r3, #8]
 8000e5e:	60da      	str	r2, [r3, #12]
 8000e60:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000e62:	4b49      	ldr	r3, [pc, #292]	@ (8000f88 <MX_GPIO_Init+0x13c>)
 8000e64:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000e68:	4a47      	ldr	r2, [pc, #284]	@ (8000f88 <MX_GPIO_Init+0x13c>)
 8000e6a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000e6e:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000e72:	4b45      	ldr	r3, [pc, #276]	@ (8000f88 <MX_GPIO_Init+0x13c>)
 8000e74:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000e78:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000e7c:	61bb      	str	r3, [r7, #24]
 8000e7e:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000e80:	4b41      	ldr	r3, [pc, #260]	@ (8000f88 <MX_GPIO_Init+0x13c>)
 8000e82:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000e86:	4a40      	ldr	r2, [pc, #256]	@ (8000f88 <MX_GPIO_Init+0x13c>)
 8000e88:	f043 0310 	orr.w	r3, r3, #16
 8000e8c:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000e90:	4b3d      	ldr	r3, [pc, #244]	@ (8000f88 <MX_GPIO_Init+0x13c>)
 8000e92:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000e96:	f003 0310 	and.w	r3, r3, #16
 8000e9a:	617b      	str	r3, [r7, #20]
 8000e9c:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000e9e:	4b3a      	ldr	r3, [pc, #232]	@ (8000f88 <MX_GPIO_Init+0x13c>)
 8000ea0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000ea4:	4a38      	ldr	r2, [pc, #224]	@ (8000f88 <MX_GPIO_Init+0x13c>)
 8000ea6:	f043 0308 	orr.w	r3, r3, #8
 8000eaa:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000eae:	4b36      	ldr	r3, [pc, #216]	@ (8000f88 <MX_GPIO_Init+0x13c>)
 8000eb0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000eb4:	f003 0308 	and.w	r3, r3, #8
 8000eb8:	613b      	str	r3, [r7, #16]
 8000eba:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000ebc:	4b32      	ldr	r3, [pc, #200]	@ (8000f88 <MX_GPIO_Init+0x13c>)
 8000ebe:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000ec2:	4a31      	ldr	r2, [pc, #196]	@ (8000f88 <MX_GPIO_Init+0x13c>)
 8000ec4:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000ec8:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000ecc:	4b2e      	ldr	r3, [pc, #184]	@ (8000f88 <MX_GPIO_Init+0x13c>)
 8000ece:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000ed2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8000ed6:	60fb      	str	r3, [r7, #12]
 8000ed8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000eda:	4b2b      	ldr	r3, [pc, #172]	@ (8000f88 <MX_GPIO_Init+0x13c>)
 8000edc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000ee0:	4a29      	ldr	r2, [pc, #164]	@ (8000f88 <MX_GPIO_Init+0x13c>)
 8000ee2:	f043 0301 	orr.w	r3, r3, #1
 8000ee6:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000eea:	4b27      	ldr	r3, [pc, #156]	@ (8000f88 <MX_GPIO_Init+0x13c>)
 8000eec:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000ef0:	f003 0301 	and.w	r3, r3, #1
 8000ef4:	60bb      	str	r3, [r7, #8]
 8000ef6:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000ef8:	4b23      	ldr	r3, [pc, #140]	@ (8000f88 <MX_GPIO_Init+0x13c>)
 8000efa:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000efe:	4a22      	ldr	r2, [pc, #136]	@ (8000f88 <MX_GPIO_Init+0x13c>)
 8000f00:	f043 0302 	orr.w	r3, r3, #2
 8000f04:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000f08:	4b1f      	ldr	r3, [pc, #124]	@ (8000f88 <MX_GPIO_Init+0x13c>)
 8000f0a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000f0e:	f003 0302 	and.w	r3, r3, #2
 8000f12:	607b      	str	r3, [r7, #4]
 8000f14:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, GPIO_PIN_7, GPIO_PIN_RESET);
 8000f16:	2200      	movs	r2, #0
 8000f18:	2180      	movs	r1, #128	@ 0x80
 8000f1a:	481c      	ldr	r0, [pc, #112]	@ (8000f8c <MX_GPIO_Init+0x140>)
 8000f1c:	f001 fdea 	bl	8002af4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PG7 */
  GPIO_InitStruct.Pin = GPIO_PIN_7;
 8000f20:	2380      	movs	r3, #128	@ 0x80
 8000f22:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000f24:	2301      	movs	r3, #1
 8000f26:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f28:	2300      	movs	r3, #0
 8000f2a:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f2c:	2300      	movs	r3, #0
 8000f2e:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000f30:	f107 031c 	add.w	r3, r7, #28
 8000f34:	4619      	mov	r1, r3
 8000f36:	4815      	ldr	r0, [pc, #84]	@ (8000f8c <MX_GPIO_Init+0x140>)
 8000f38:	f001 fc34 	bl	80027a4 <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* Configure USART3 TX (PD8) and RX (PD9) */
  GPIO_InitStruct.Pin = GPIO_PIN_8 | GPIO_PIN_9;
 8000f3c:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8000f40:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f42:	2302      	movs	r3, #2
 8000f44:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f46:	2300      	movs	r3, #0
 8000f48:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000f4a:	2302      	movs	r3, #2
 8000f4c:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF7_USART3; // AF7 for USART3
 8000f4e:	2307      	movs	r3, #7
 8000f50:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000f52:	f107 031c 	add.w	r3, r7, #28
 8000f56:	4619      	mov	r1, r3
 8000f58:	480d      	ldr	r0, [pc, #52]	@ (8000f90 <MX_GPIO_Init+0x144>)
 8000f5a:	f001 fc23 	bl	80027a4 <HAL_GPIO_Init>

  /* Configure USART3 TX (PD5) and RX (PD6) */
   GPIO_InitStruct.Pin = GPIO_PIN_5 | GPIO_PIN_6;
 8000f5e:	2360      	movs	r3, #96	@ 0x60
 8000f60:	61fb      	str	r3, [r7, #28]
   GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f62:	2302      	movs	r3, #2
 8000f64:	623b      	str	r3, [r7, #32]
   GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f66:	2300      	movs	r3, #0
 8000f68:	627b      	str	r3, [r7, #36]	@ 0x24
   GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000f6a:	2302      	movs	r3, #2
 8000f6c:	62bb      	str	r3, [r7, #40]	@ 0x28
   GPIO_InitStruct.Alternate = GPIO_AF7_USART2; // AF7 for USART2
 8000f6e:	2307      	movs	r3, #7
 8000f70:	62fb      	str	r3, [r7, #44]	@ 0x2c
   HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000f72:	f107 031c 	add.w	r3, r7, #28
 8000f76:	4619      	mov	r1, r3
 8000f78:	4805      	ldr	r0, [pc, #20]	@ (8000f90 <MX_GPIO_Init+0x144>)
 8000f7a:	f001 fc13 	bl	80027a4 <HAL_GPIO_Init>
  /* USER CODE END MX_GPIO_Init_2 */
}
 8000f7e:	bf00      	nop
 8000f80:	3730      	adds	r7, #48	@ 0x30
 8000f82:	46bd      	mov	sp, r7
 8000f84:	bd80      	pop	{r7, pc}
 8000f86:	bf00      	nop
 8000f88:	58024400 	.word	0x58024400
 8000f8c:	58021800 	.word	0x58021800
 8000f90:	58020c00 	.word	0x58020c00

08000f94 <MPU_Config>:
/* USER CODE END 4 */

 /* MPU Configuration */

void MPU_Config(void)
{
 8000f94:	b580      	push	{r7, lr}
 8000f96:	b084      	sub	sp, #16
 8000f98:	af00      	add	r7, sp, #0
  MPU_Region_InitTypeDef MPU_InitStruct = {0};
 8000f9a:	463b      	mov	r3, r7
 8000f9c:	2200      	movs	r2, #0
 8000f9e:	601a      	str	r2, [r3, #0]
 8000fa0:	605a      	str	r2, [r3, #4]
 8000fa2:	609a      	str	r2, [r3, #8]
 8000fa4:	60da      	str	r2, [r3, #12]

  /* Disables the MPU */
  HAL_MPU_Disable();
 8000fa6:	f000 fe21 	bl	8001bec <HAL_MPU_Disable>

  /** Initializes and configures the Region and the memory to be protected
  */
  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 8000faa:	2301      	movs	r3, #1
 8000fac:	703b      	strb	r3, [r7, #0]
  MPU_InitStruct.Number = MPU_REGION_NUMBER0;
 8000fae:	2300      	movs	r3, #0
 8000fb0:	707b      	strb	r3, [r7, #1]
  MPU_InitStruct.BaseAddress = 0x0;
 8000fb2:	2300      	movs	r3, #0
 8000fb4:	607b      	str	r3, [r7, #4]
  MPU_InitStruct.Size = MPU_REGION_SIZE_4GB;
 8000fb6:	231f      	movs	r3, #31
 8000fb8:	723b      	strb	r3, [r7, #8]
  MPU_InitStruct.SubRegionDisable = 0x87;
 8000fba:	2387      	movs	r3, #135	@ 0x87
 8000fbc:	727b      	strb	r3, [r7, #9]
  MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL0;
 8000fbe:	2300      	movs	r3, #0
 8000fc0:	72bb      	strb	r3, [r7, #10]
  MPU_InitStruct.AccessPermission = MPU_REGION_NO_ACCESS;
 8000fc2:	2300      	movs	r3, #0
 8000fc4:	72fb      	strb	r3, [r7, #11]
  MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_DISABLE;
 8000fc6:	2301      	movs	r3, #1
 8000fc8:	733b      	strb	r3, [r7, #12]
  MPU_InitStruct.IsShareable = MPU_ACCESS_SHAREABLE;
 8000fca:	2301      	movs	r3, #1
 8000fcc:	737b      	strb	r3, [r7, #13]
  MPU_InitStruct.IsCacheable = MPU_ACCESS_NOT_CACHEABLE;
 8000fce:	2300      	movs	r3, #0
 8000fd0:	73bb      	strb	r3, [r7, #14]
  MPU_InitStruct.IsBufferable = MPU_ACCESS_NOT_BUFFERABLE;
 8000fd2:	2300      	movs	r3, #0
 8000fd4:	73fb      	strb	r3, [r7, #15]

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8000fd6:	463b      	mov	r3, r7
 8000fd8:	4618      	mov	r0, r3
 8000fda:	f000 fe3f 	bl	8001c5c <HAL_MPU_ConfigRegion>
  /* Enables the MPU */
  HAL_MPU_Enable(MPU_PRIVILEGED_DEFAULT);
 8000fde:	2004      	movs	r0, #4
 8000fe0:	f000 fe1c 	bl	8001c1c <HAL_MPU_Enable>

}
 8000fe4:	bf00      	nop
 8000fe6:	3710      	adds	r7, #16
 8000fe8:	46bd      	mov	sp, r7
 8000fea:	bd80      	pop	{r7, pc}

08000fec <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000fec:	b480      	push	{r7}
 8000fee:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000ff0:	b672      	cpsid	i
}
 8000ff2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000ff4:	bf00      	nop
 8000ff6:	e7fd      	b.n	8000ff4 <Error_Handler+0x8>

08000ff8 <ring_buffer_init>:
//ring_buffer.c
#include "ring_buffer.h"

void ring_buffer_init(ring_buffer *p_ring_buf){
 8000ff8:	b480      	push	{r7}
 8000ffa:	b083      	sub	sp, #12
 8000ffc:	af00      	add	r7, sp, #0
 8000ffe:	6078      	str	r0, [r7, #4]
    p_ring_buf->head = 0;
 8001000:	687b      	ldr	r3, [r7, #4]
 8001002:	2200      	movs	r2, #0
 8001004:	f8a3 2100 	strh.w	r2, [r3, #256]	@ 0x100
    p_ring_buf->tail = 0;
 8001008:	687b      	ldr	r3, [r7, #4]
 800100a:	2200      	movs	r2, #0
 800100c:	f8a3 2102 	strh.w	r2, [r3, #258]	@ 0x102
}
 8001010:	bf00      	nop
 8001012:	370c      	adds	r7, #12
 8001014:	46bd      	mov	sp, r7
 8001016:	f85d 7b04 	ldr.w	r7, [sp], #4
 800101a:	4770      	bx	lr

0800101c <ring_buffer_put>:

//add data to the ring buffer 
uint8_t ring_buffer_put(ring_buffer *p_ring_buf, uint8_t data){
 800101c:	b480      	push	{r7}
 800101e:	b085      	sub	sp, #20
 8001020:	af00      	add	r7, sp, #0
 8001022:	6078      	str	r0, [r7, #4]
 8001024:	460b      	mov	r3, r1
 8001026:	70fb      	strb	r3, [r7, #3]
    uint16_t next = (p_ring_buf->head + 1 ) % RING_BUFFER_SIZE; // increments by one and becomes 0 when reached buffer size (should wraparound at max int val) 
 8001028:	687b      	ldr	r3, [r7, #4]
 800102a:	f8b3 3100 	ldrh.w	r3, [r3, #256]	@ 0x100
 800102e:	b29b      	uxth	r3, r3
 8001030:	3301      	adds	r3, #1
 8001032:	425a      	negs	r2, r3
 8001034:	b2db      	uxtb	r3, r3
 8001036:	b2d2      	uxtb	r2, r2
 8001038:	bf58      	it	pl
 800103a:	4253      	negpl	r3, r2
 800103c:	81fb      	strh	r3, [r7, #14]
    if (next == p_ring_buf->tail){
 800103e:	687b      	ldr	r3, [r7, #4]
 8001040:	f8b3 3102 	ldrh.w	r3, [r3, #258]	@ 0x102
 8001044:	b29b      	uxth	r3, r3
 8001046:	89fa      	ldrh	r2, [r7, #14]
 8001048:	429a      	cmp	r2, r3
 800104a:	d101      	bne.n	8001050 <ring_buffer_put+0x34>
        return 0; // when its full 
 800104c:	2300      	movs	r3, #0
 800104e:	e00c      	b.n	800106a <ring_buffer_put+0x4e>
    }
    p_ring_buf->buffer[p_ring_buf->head]= data;
 8001050:	687b      	ldr	r3, [r7, #4]
 8001052:	f8b3 3100 	ldrh.w	r3, [r3, #256]	@ 0x100
 8001056:	b29b      	uxth	r3, r3
 8001058:	4619      	mov	r1, r3
 800105a:	687b      	ldr	r3, [r7, #4]
 800105c:	78fa      	ldrb	r2, [r7, #3]
 800105e:	545a      	strb	r2, [r3, r1]
    p_ring_buf->head = next;
 8001060:	687b      	ldr	r3, [r7, #4]
 8001062:	89fa      	ldrh	r2, [r7, #14]
 8001064:	f8a3 2100 	strh.w	r2, [r3, #256]	@ 0x100
    return 1; // succcess
 8001068:	2301      	movs	r3, #1
}
 800106a:	4618      	mov	r0, r3
 800106c:	3714      	adds	r7, #20
 800106e:	46bd      	mov	sp, r7
 8001070:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001074:	4770      	bx	lr

08001076 <ring_buffer_get>:

//get data from the ring buffer
uint8_t ring_buffer_get(ring_buffer *p_ring_buf, uint8_t *data){
 8001076:	b480      	push	{r7}
 8001078:	b083      	sub	sp, #12
 800107a:	af00      	add	r7, sp, #0
 800107c:	6078      	str	r0, [r7, #4]
 800107e:	6039      	str	r1, [r7, #0]
    if (p_ring_buf->head == p_ring_buf->tail) {
 8001080:	687b      	ldr	r3, [r7, #4]
 8001082:	f8b3 3100 	ldrh.w	r3, [r3, #256]	@ 0x100
 8001086:	b29a      	uxth	r2, r3
 8001088:	687b      	ldr	r3, [r7, #4]
 800108a:	f8b3 3102 	ldrh.w	r3, [r3, #258]	@ 0x102
 800108e:	b29b      	uxth	r3, r3
 8001090:	429a      	cmp	r2, r3
 8001092:	d101      	bne.n	8001098 <ring_buffer_get+0x22>
        return 0; // Buffer empty
 8001094:	2300      	movs	r3, #0
 8001096:	e017      	b.n	80010c8 <ring_buffer_get+0x52>
    }
    *data = p_ring_buf->buffer[p_ring_buf->tail];
 8001098:	687b      	ldr	r3, [r7, #4]
 800109a:	f8b3 3102 	ldrh.w	r3, [r3, #258]	@ 0x102
 800109e:	b29b      	uxth	r3, r3
 80010a0:	461a      	mov	r2, r3
 80010a2:	687b      	ldr	r3, [r7, #4]
 80010a4:	5c9a      	ldrb	r2, [r3, r2]
 80010a6:	683b      	ldr	r3, [r7, #0]
 80010a8:	701a      	strb	r2, [r3, #0]
    p_ring_buf->tail = (p_ring_buf->tail+1)%RING_BUFFER_SIZE;
 80010aa:	687b      	ldr	r3, [r7, #4]
 80010ac:	f8b3 3102 	ldrh.w	r3, [r3, #258]	@ 0x102
 80010b0:	b29b      	uxth	r3, r3
 80010b2:	3301      	adds	r3, #1
 80010b4:	425a      	negs	r2, r3
 80010b6:	b2db      	uxtb	r3, r3
 80010b8:	b2d2      	uxtb	r2, r2
 80010ba:	bf58      	it	pl
 80010bc:	4253      	negpl	r3, r2
 80010be:	b29a      	uxth	r2, r3
 80010c0:	687b      	ldr	r3, [r7, #4]
 80010c2:	f8a3 2102 	strh.w	r2, [r3, #258]	@ 0x102
    return 1; // read
 80010c6:	2301      	movs	r3, #1
}
 80010c8:	4618      	mov	r0, r3
 80010ca:	370c      	adds	r7, #12
 80010cc:	46bd      	mov	sp, r7
 80010ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010d2:	4770      	bx	lr

080010d4 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80010d4:	b480      	push	{r7}
 80010d6:	b083      	sub	sp, #12
 80010d8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80010da:	4b0a      	ldr	r3, [pc, #40]	@ (8001104 <HAL_MspInit+0x30>)
 80010dc:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80010e0:	4a08      	ldr	r2, [pc, #32]	@ (8001104 <HAL_MspInit+0x30>)
 80010e2:	f043 0302 	orr.w	r3, r3, #2
 80010e6:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 80010ea:	4b06      	ldr	r3, [pc, #24]	@ (8001104 <HAL_MspInit+0x30>)
 80010ec:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80010f0:	f003 0302 	and.w	r3, r3, #2
 80010f4:	607b      	str	r3, [r7, #4]
 80010f6:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80010f8:	bf00      	nop
 80010fa:	370c      	adds	r7, #12
 80010fc:	46bd      	mov	sp, r7
 80010fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001102:	4770      	bx	lr
 8001104:	58024400 	.word	0x58024400

08001108 <HAL_I2C_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hi2c: I2C handle pointer
  * @retval None
  */
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001108:	b580      	push	{r7, lr}
 800110a:	b0b8      	sub	sp, #224	@ 0xe0
 800110c:	af00      	add	r7, sp, #0
 800110e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001110:	f107 03cc 	add.w	r3, r7, #204	@ 0xcc
 8001114:	2200      	movs	r2, #0
 8001116:	601a      	str	r2, [r3, #0]
 8001118:	605a      	str	r2, [r3, #4]
 800111a:	609a      	str	r2, [r3, #8]
 800111c:	60da      	str	r2, [r3, #12]
 800111e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001120:	f107 0310 	add.w	r3, r7, #16
 8001124:	22b8      	movs	r2, #184	@ 0xb8
 8001126:	2100      	movs	r1, #0
 8001128:	4618      	mov	r0, r3
 800112a:	f009 f9a3 	bl	800a474 <memset>
  if(hi2c->Instance==I2C1)
 800112e:	687b      	ldr	r3, [r7, #4]
 8001130:	681b      	ldr	r3, [r3, #0]
 8001132:	4a27      	ldr	r2, [pc, #156]	@ (80011d0 <HAL_I2C_MspInit+0xc8>)
 8001134:	4293      	cmp	r3, r2
 8001136:	d146      	bne.n	80011c6 <HAL_I2C_MspInit+0xbe>

    /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8001138:	f04f 0208 	mov.w	r2, #8
 800113c:	f04f 0300 	mov.w	r3, #0
 8001140:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.I2c123ClockSelection = RCC_I2C1235CLKSOURCE_D2PCLK1;
 8001144:	2300      	movs	r3, #0
 8001146:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800114a:	f107 0310 	add.w	r3, r7, #16
 800114e:	4618      	mov	r0, r3
 8001150:	f003 f946 	bl	80043e0 <HAL_RCCEx_PeriphCLKConfig>
 8001154:	4603      	mov	r3, r0
 8001156:	2b00      	cmp	r3, #0
 8001158:	d001      	beq.n	800115e <HAL_I2C_MspInit+0x56>
    {
      Error_Handler();
 800115a:	f7ff ff47 	bl	8000fec <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800115e:	4b1d      	ldr	r3, [pc, #116]	@ (80011d4 <HAL_I2C_MspInit+0xcc>)
 8001160:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001164:	4a1b      	ldr	r2, [pc, #108]	@ (80011d4 <HAL_I2C_MspInit+0xcc>)
 8001166:	f043 0302 	orr.w	r3, r3, #2
 800116a:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800116e:	4b19      	ldr	r3, [pc, #100]	@ (80011d4 <HAL_I2C_MspInit+0xcc>)
 8001170:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001174:	f003 0302 	and.w	r3, r3, #2
 8001178:	60fb      	str	r3, [r7, #12]
 800117a:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 800117c:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8001180:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001184:	2312      	movs	r3, #18
 8001186:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800118a:	2300      	movs	r3, #0
 800118c:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001190:	2300      	movs	r3, #0
 8001192:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001196:	2304      	movs	r3, #4
 8001198:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800119c:	f107 03cc 	add.w	r3, r7, #204	@ 0xcc
 80011a0:	4619      	mov	r1, r3
 80011a2:	480d      	ldr	r0, [pc, #52]	@ (80011d8 <HAL_I2C_MspInit+0xd0>)
 80011a4:	f001 fafe 	bl	80027a4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80011a8:	4b0a      	ldr	r3, [pc, #40]	@ (80011d4 <HAL_I2C_MspInit+0xcc>)
 80011aa:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80011ae:	4a09      	ldr	r2, [pc, #36]	@ (80011d4 <HAL_I2C_MspInit+0xcc>)
 80011b0:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80011b4:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 80011b8:	4b06      	ldr	r3, [pc, #24]	@ (80011d4 <HAL_I2C_MspInit+0xcc>)
 80011ba:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80011be:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80011c2:	60bb      	str	r3, [r7, #8]
 80011c4:	68bb      	ldr	r3, [r7, #8]

    /* USER CODE END I2C1_MspInit 1 */

  }

}
 80011c6:	bf00      	nop
 80011c8:	37e0      	adds	r7, #224	@ 0xe0
 80011ca:	46bd      	mov	sp, r7
 80011cc:	bd80      	pop	{r7, pc}
 80011ce:	bf00      	nop
 80011d0:	40005400 	.word	0x40005400
 80011d4:	58024400 	.word	0x58024400
 80011d8:	58020400 	.word	0x58020400

080011dc <HAL_TIM_PWM_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_pwm: TIM_PWM handle pointer
  * @retval None
  */
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 80011dc:	b480      	push	{r7}
 80011de:	b085      	sub	sp, #20
 80011e0:	af00      	add	r7, sp, #0
 80011e2:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM1)
 80011e4:	687b      	ldr	r3, [r7, #4]
 80011e6:	681b      	ldr	r3, [r3, #0]
 80011e8:	4a0b      	ldr	r2, [pc, #44]	@ (8001218 <HAL_TIM_PWM_MspInit+0x3c>)
 80011ea:	4293      	cmp	r3, r2
 80011ec:	d10e      	bne.n	800120c <HAL_TIM_PWM_MspInit+0x30>
  {
    /* USER CODE BEGIN TIM1_MspInit 0 */

    /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80011ee:	4b0b      	ldr	r3, [pc, #44]	@ (800121c <HAL_TIM_PWM_MspInit+0x40>)
 80011f0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80011f4:	4a09      	ldr	r2, [pc, #36]	@ (800121c <HAL_TIM_PWM_MspInit+0x40>)
 80011f6:	f043 0301 	orr.w	r3, r3, #1
 80011fa:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 80011fe:	4b07      	ldr	r3, [pc, #28]	@ (800121c <HAL_TIM_PWM_MspInit+0x40>)
 8001200:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8001204:	f003 0301 	and.w	r3, r3, #1
 8001208:	60fb      	str	r3, [r7, #12]
 800120a:	68fb      	ldr	r3, [r7, #12]

    /* USER CODE END TIM1_MspInit 1 */

  }

}
 800120c:	bf00      	nop
 800120e:	3714      	adds	r7, #20
 8001210:	46bd      	mov	sp, r7
 8001212:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001216:	4770      	bx	lr
 8001218:	40010000 	.word	0x40010000
 800121c:	58024400 	.word	0x58024400

08001220 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001220:	b580      	push	{r7, lr}
 8001222:	b088      	sub	sp, #32
 8001224:	af00      	add	r7, sp, #0
 8001226:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001228:	f107 030c 	add.w	r3, r7, #12
 800122c:	2200      	movs	r2, #0
 800122e:	601a      	str	r2, [r3, #0]
 8001230:	605a      	str	r2, [r3, #4]
 8001232:	609a      	str	r2, [r3, #8]
 8001234:	60da      	str	r2, [r3, #12]
 8001236:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8001238:	687b      	ldr	r3, [r7, #4]
 800123a:	681b      	ldr	r3, [r3, #0]
 800123c:	4a13      	ldr	r2, [pc, #76]	@ (800128c <HAL_TIM_MspPostInit+0x6c>)
 800123e:	4293      	cmp	r3, r2
 8001240:	d11f      	bne.n	8001282 <HAL_TIM_MspPostInit+0x62>
  {
    /* USER CODE BEGIN TIM1_MspPostInit 0 */

    /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8001242:	4b13      	ldr	r3, [pc, #76]	@ (8001290 <HAL_TIM_MspPostInit+0x70>)
 8001244:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001248:	4a11      	ldr	r2, [pc, #68]	@ (8001290 <HAL_TIM_MspPostInit+0x70>)
 800124a:	f043 0310 	orr.w	r3, r3, #16
 800124e:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001252:	4b0f      	ldr	r3, [pc, #60]	@ (8001290 <HAL_TIM_MspPostInit+0x70>)
 8001254:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001258:	f003 0310 	and.w	r3, r3, #16
 800125c:	60bb      	str	r3, [r7, #8]
 800125e:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration
    PE9     ------> TIM1_CH1
    PE11     ------> TIM1_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_11;
 8001260:	f44f 6320 	mov.w	r3, #2560	@ 0xa00
 8001264:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001266:	2302      	movs	r3, #2
 8001268:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800126a:	2300      	movs	r3, #0
 800126c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800126e:	2300      	movs	r3, #0
 8001270:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8001272:	2301      	movs	r3, #1
 8001274:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001276:	f107 030c 	add.w	r3, r7, #12
 800127a:	4619      	mov	r1, r3
 800127c:	4805      	ldr	r0, [pc, #20]	@ (8001294 <HAL_TIM_MspPostInit+0x74>)
 800127e:	f001 fa91 	bl	80027a4 <HAL_GPIO_Init>
    /* USER CODE BEGIN TIM1_MspPostInit 1 */

    /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8001282:	bf00      	nop
 8001284:	3720      	adds	r7, #32
 8001286:	46bd      	mov	sp, r7
 8001288:	bd80      	pop	{r7, pc}
 800128a:	bf00      	nop
 800128c:	40010000 	.word	0x40010000
 8001290:	58024400 	.word	0x58024400
 8001294:	58021000 	.word	0x58021000

08001298 <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001298:	b580      	push	{r7, lr}
 800129a:	b0bc      	sub	sp, #240	@ 0xf0
 800129c:	af00      	add	r7, sp, #0
 800129e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80012a0:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 80012a4:	2200      	movs	r2, #0
 80012a6:	601a      	str	r2, [r3, #0]
 80012a8:	605a      	str	r2, [r3, #4]
 80012aa:	609a      	str	r2, [r3, #8]
 80012ac:	60da      	str	r2, [r3, #12]
 80012ae:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80012b0:	f107 0320 	add.w	r3, r7, #32
 80012b4:	22b8      	movs	r2, #184	@ 0xb8
 80012b6:	2100      	movs	r1, #0
 80012b8:	4618      	mov	r0, r3
 80012ba:	f009 f8db 	bl	800a474 <memset>
  if(huart->Instance==USART1)
 80012be:	687b      	ldr	r3, [r7, #4]
 80012c0:	681b      	ldr	r3, [r3, #0]
 80012c2:	4a7f      	ldr	r2, [pc, #508]	@ (80014c0 <HAL_UART_MspInit+0x228>)
 80012c4:	4293      	cmp	r3, r2
 80012c6:	d14f      	bne.n	8001368 <HAL_UART_MspInit+0xd0>

    /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 80012c8:	f04f 0201 	mov.w	r2, #1
 80012cc:	f04f 0300 	mov.w	r3, #0
 80012d0:	e9c7 2308 	strd	r2, r3, [r7, #32]
    PeriphClkInitStruct.Usart16ClockSelection = RCC_USART16910CLKSOURCE_D2PCLK2;
 80012d4:	2300      	movs	r3, #0
 80012d6:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80012da:	f107 0320 	add.w	r3, r7, #32
 80012de:	4618      	mov	r0, r3
 80012e0:	f003 f87e 	bl	80043e0 <HAL_RCCEx_PeriphCLKConfig>
 80012e4:	4603      	mov	r3, r0
 80012e6:	2b00      	cmp	r3, #0
 80012e8:	d001      	beq.n	80012ee <HAL_UART_MspInit+0x56>
    {
      Error_Handler();
 80012ea:	f7ff fe7f 	bl	8000fec <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80012ee:	4b75      	ldr	r3, [pc, #468]	@ (80014c4 <HAL_UART_MspInit+0x22c>)
 80012f0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80012f4:	4a73      	ldr	r2, [pc, #460]	@ (80014c4 <HAL_UART_MspInit+0x22c>)
 80012f6:	f043 0310 	orr.w	r3, r3, #16
 80012fa:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 80012fe:	4b71      	ldr	r3, [pc, #452]	@ (80014c4 <HAL_UART_MspInit+0x22c>)
 8001300:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8001304:	f003 0310 	and.w	r3, r3, #16
 8001308:	61fb      	str	r3, [r7, #28]
 800130a:	69fb      	ldr	r3, [r7, #28]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800130c:	4b6d      	ldr	r3, [pc, #436]	@ (80014c4 <HAL_UART_MspInit+0x22c>)
 800130e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001312:	4a6c      	ldr	r2, [pc, #432]	@ (80014c4 <HAL_UART_MspInit+0x22c>)
 8001314:	f043 0301 	orr.w	r3, r3, #1
 8001318:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800131c:	4b69      	ldr	r3, [pc, #420]	@ (80014c4 <HAL_UART_MspInit+0x22c>)
 800131e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001322:	f003 0301 	and.w	r3, r3, #1
 8001326:	61bb      	str	r3, [r7, #24]
 8001328:	69bb      	ldr	r3, [r7, #24]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 800132a:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 800132e:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001332:	2302      	movs	r3, #2
 8001334:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001338:	2300      	movs	r3, #0
 800133a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800133e:	2300      	movs	r3, #0
 8001340:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001344:	2307      	movs	r3, #7
 8001346:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800134a:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 800134e:	4619      	mov	r1, r3
 8001350:	485d      	ldr	r0, [pc, #372]	@ (80014c8 <HAL_UART_MspInit+0x230>)
 8001352:	f001 fa27 	bl	80027a4 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8001356:	2200      	movs	r2, #0
 8001358:	2100      	movs	r1, #0
 800135a:	2025      	movs	r0, #37	@ 0x25
 800135c:	f000 fc11 	bl	8001b82 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8001360:	2025      	movs	r0, #37	@ 0x25
 8001362:	f000 fc28 	bl	8001bb6 <HAL_NVIC_EnableIRQ>
    /* USER CODE BEGIN USART3_MspInit 1 */

    /* USER CODE END USART3_MspInit 1 */
  }

}
 8001366:	e0a7      	b.n	80014b8 <HAL_UART_MspInit+0x220>
  else if(huart->Instance==USART2)
 8001368:	687b      	ldr	r3, [r7, #4]
 800136a:	681b      	ldr	r3, [r3, #0]
 800136c:	4a57      	ldr	r2, [pc, #348]	@ (80014cc <HAL_UART_MspInit+0x234>)
 800136e:	4293      	cmp	r3, r2
 8001370:	d14e      	bne.n	8001410 <HAL_UART_MspInit+0x178>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8001372:	f04f 0202 	mov.w	r2, #2
 8001376:	f04f 0300 	mov.w	r3, #0
 800137a:	e9c7 2308 	strd	r2, r3, [r7, #32]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 800137e:	2300      	movs	r3, #0
 8001380:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001384:	f107 0320 	add.w	r3, r7, #32
 8001388:	4618      	mov	r0, r3
 800138a:	f003 f829 	bl	80043e0 <HAL_RCCEx_PeriphCLKConfig>
 800138e:	4603      	mov	r3, r0
 8001390:	2b00      	cmp	r3, #0
 8001392:	d001      	beq.n	8001398 <HAL_UART_MspInit+0x100>
      Error_Handler();
 8001394:	f7ff fe2a 	bl	8000fec <Error_Handler>
    __HAL_RCC_USART2_CLK_ENABLE();
 8001398:	4b4a      	ldr	r3, [pc, #296]	@ (80014c4 <HAL_UART_MspInit+0x22c>)
 800139a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800139e:	4a49      	ldr	r2, [pc, #292]	@ (80014c4 <HAL_UART_MspInit+0x22c>)
 80013a0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80013a4:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 80013a8:	4b46      	ldr	r3, [pc, #280]	@ (80014c4 <HAL_UART_MspInit+0x22c>)
 80013aa:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80013ae:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80013b2:	617b      	str	r3, [r7, #20]
 80013b4:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80013b6:	4b43      	ldr	r3, [pc, #268]	@ (80014c4 <HAL_UART_MspInit+0x22c>)
 80013b8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80013bc:	4a41      	ldr	r2, [pc, #260]	@ (80014c4 <HAL_UART_MspInit+0x22c>)
 80013be:	f043 0308 	orr.w	r3, r3, #8
 80013c2:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80013c6:	4b3f      	ldr	r3, [pc, #252]	@ (80014c4 <HAL_UART_MspInit+0x22c>)
 80013c8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80013cc:	f003 0308 	and.w	r3, r3, #8
 80013d0:	613b      	str	r3, [r7, #16]
 80013d2:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 80013d4:	2360      	movs	r3, #96	@ 0x60
 80013d6:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80013da:	2302      	movs	r3, #2
 80013dc:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013e0:	2300      	movs	r3, #0
 80013e2:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80013e6:	2300      	movs	r3, #0
 80013e8:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80013ec:	2307      	movs	r3, #7
 80013ee:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80013f2:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 80013f6:	4619      	mov	r1, r3
 80013f8:	4835      	ldr	r0, [pc, #212]	@ (80014d0 <HAL_UART_MspInit+0x238>)
 80013fa:	f001 f9d3 	bl	80027a4 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 80013fe:	2200      	movs	r2, #0
 8001400:	2100      	movs	r1, #0
 8001402:	2026      	movs	r0, #38	@ 0x26
 8001404:	f000 fbbd 	bl	8001b82 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8001408:	2026      	movs	r0, #38	@ 0x26
 800140a:	f000 fbd4 	bl	8001bb6 <HAL_NVIC_EnableIRQ>
}
 800140e:	e053      	b.n	80014b8 <HAL_UART_MspInit+0x220>
  else if(huart->Instance==USART3)
 8001410:	687b      	ldr	r3, [r7, #4]
 8001412:	681b      	ldr	r3, [r3, #0]
 8001414:	4a2f      	ldr	r2, [pc, #188]	@ (80014d4 <HAL_UART_MspInit+0x23c>)
 8001416:	4293      	cmp	r3, r2
 8001418:	d14e      	bne.n	80014b8 <HAL_UART_MspInit+0x220>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 800141a:	f04f 0202 	mov.w	r2, #2
 800141e:	f04f 0300 	mov.w	r3, #0
 8001422:	e9c7 2308 	strd	r2, r3, [r7, #32]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8001426:	2300      	movs	r3, #0
 8001428:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800142c:	f107 0320 	add.w	r3, r7, #32
 8001430:	4618      	mov	r0, r3
 8001432:	f002 ffd5 	bl	80043e0 <HAL_RCCEx_PeriphCLKConfig>
 8001436:	4603      	mov	r3, r0
 8001438:	2b00      	cmp	r3, #0
 800143a:	d001      	beq.n	8001440 <HAL_UART_MspInit+0x1a8>
      Error_Handler();
 800143c:	f7ff fdd6 	bl	8000fec <Error_Handler>
    __HAL_RCC_USART3_CLK_ENABLE();
 8001440:	4b20      	ldr	r3, [pc, #128]	@ (80014c4 <HAL_UART_MspInit+0x22c>)
 8001442:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8001446:	4a1f      	ldr	r2, [pc, #124]	@ (80014c4 <HAL_UART_MspInit+0x22c>)
 8001448:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800144c:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8001450:	4b1c      	ldr	r3, [pc, #112]	@ (80014c4 <HAL_UART_MspInit+0x22c>)
 8001452:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8001456:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800145a:	60fb      	str	r3, [r7, #12]
 800145c:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 800145e:	4b19      	ldr	r3, [pc, #100]	@ (80014c4 <HAL_UART_MspInit+0x22c>)
 8001460:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001464:	4a17      	ldr	r2, [pc, #92]	@ (80014c4 <HAL_UART_MspInit+0x22c>)
 8001466:	f043 0308 	orr.w	r3, r3, #8
 800146a:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800146e:	4b15      	ldr	r3, [pc, #84]	@ (80014c4 <HAL_UART_MspInit+0x22c>)
 8001470:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001474:	f003 0308 	and.w	r3, r3, #8
 8001478:	60bb      	str	r3, [r7, #8]
 800147a:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 800147c:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8001480:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001484:	2302      	movs	r3, #2
 8001486:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800148a:	2300      	movs	r3, #0
 800148c:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001490:	2300      	movs	r3, #0
 8001492:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001496:	2307      	movs	r3, #7
 8001498:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800149c:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 80014a0:	4619      	mov	r1, r3
 80014a2:	480b      	ldr	r0, [pc, #44]	@ (80014d0 <HAL_UART_MspInit+0x238>)
 80014a4:	f001 f97e 	bl	80027a4 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 80014a8:	2200      	movs	r2, #0
 80014aa:	2100      	movs	r1, #0
 80014ac:	2027      	movs	r0, #39	@ 0x27
 80014ae:	f000 fb68 	bl	8001b82 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 80014b2:	2027      	movs	r0, #39	@ 0x27
 80014b4:	f000 fb7f 	bl	8001bb6 <HAL_NVIC_EnableIRQ>
}
 80014b8:	bf00      	nop
 80014ba:	37f0      	adds	r7, #240	@ 0xf0
 80014bc:	46bd      	mov	sp, r7
 80014be:	bd80      	pop	{r7, pc}
 80014c0:	40011000 	.word	0x40011000
 80014c4:	58024400 	.word	0x58024400
 80014c8:	58020000 	.word	0x58020000
 80014cc:	40004400 	.word	0x40004400
 80014d0:	58020c00 	.word	0x58020c00
 80014d4:	40004800 	.word	0x40004800

080014d8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80014d8:	b480      	push	{r7}
 80014da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80014dc:	bf00      	nop
 80014de:	e7fd      	b.n	80014dc <NMI_Handler+0x4>

080014e0 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80014e0:	b480      	push	{r7}
 80014e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80014e4:	bf00      	nop
 80014e6:	e7fd      	b.n	80014e4 <HardFault_Handler+0x4>

080014e8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80014e8:	b480      	push	{r7}
 80014ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80014ec:	bf00      	nop
 80014ee:	e7fd      	b.n	80014ec <MemManage_Handler+0x4>

080014f0 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80014f0:	b480      	push	{r7}
 80014f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80014f4:	bf00      	nop
 80014f6:	e7fd      	b.n	80014f4 <BusFault_Handler+0x4>

080014f8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80014f8:	b480      	push	{r7}
 80014fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80014fc:	bf00      	nop
 80014fe:	e7fd      	b.n	80014fc <UsageFault_Handler+0x4>

08001500 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001500:	b480      	push	{r7}
 8001502:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001504:	bf00      	nop
 8001506:	46bd      	mov	sp, r7
 8001508:	f85d 7b04 	ldr.w	r7, [sp], #4
 800150c:	4770      	bx	lr

0800150e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800150e:	b480      	push	{r7}
 8001510:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001512:	bf00      	nop
 8001514:	46bd      	mov	sp, r7
 8001516:	f85d 7b04 	ldr.w	r7, [sp], #4
 800151a:	4770      	bx	lr

0800151c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800151c:	b480      	push	{r7}
 800151e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001520:	bf00      	nop
 8001522:	46bd      	mov	sp, r7
 8001524:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001528:	4770      	bx	lr

0800152a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800152a:	b580      	push	{r7, lr}
 800152c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800152e:	f000 fa2d 	bl	800198c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001532:	bf00      	nop
 8001534:	bd80      	pop	{r7, pc}
	...

08001538 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8001538:	b580      	push	{r7, lr}
 800153a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 800153c:	4802      	ldr	r0, [pc, #8]	@ (8001548 <USART1_IRQHandler+0x10>)
 800153e:	f005 fd93 	bl	8007068 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8001542:	bf00      	nop
 8001544:	bd80      	pop	{r7, pc}
 8001546:	bf00      	nop
 8001548:	24000294 	.word	0x24000294

0800154c <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 800154c:	b580      	push	{r7, lr}
 800154e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8001550:	4802      	ldr	r0, [pc, #8]	@ (800155c <USART2_IRQHandler+0x10>)
 8001552:	f005 fd89 	bl	8007068 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8001556:	bf00      	nop
 8001558:	bd80      	pop	{r7, pc}
 800155a:	bf00      	nop
 800155c:	24000328 	.word	0x24000328

08001560 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8001560:	b580      	push	{r7, lr}
 8001562:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8001564:	4802      	ldr	r0, [pc, #8]	@ (8001570 <USART3_IRQHandler+0x10>)
 8001566:	f005 fd7f 	bl	8007068 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 800156a:	bf00      	nop
 800156c:	bd80      	pop	{r7, pc}
 800156e:	bf00      	nop
 8001570:	240003bc 	.word	0x240003bc

08001574 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001574:	b480      	push	{r7}
 8001576:	af00      	add	r7, sp, #0
  return 1;
 8001578:	2301      	movs	r3, #1
}
 800157a:	4618      	mov	r0, r3
 800157c:	46bd      	mov	sp, r7
 800157e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001582:	4770      	bx	lr

08001584 <_kill>:

int _kill(int pid, int sig)
{
 8001584:	b580      	push	{r7, lr}
 8001586:	b082      	sub	sp, #8
 8001588:	af00      	add	r7, sp, #0
 800158a:	6078      	str	r0, [r7, #4]
 800158c:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 800158e:	f008 ffc3 	bl	800a518 <__errno>
 8001592:	4603      	mov	r3, r0
 8001594:	2216      	movs	r2, #22
 8001596:	601a      	str	r2, [r3, #0]
  return -1;
 8001598:	f04f 33ff 	mov.w	r3, #4294967295
}
 800159c:	4618      	mov	r0, r3
 800159e:	3708      	adds	r7, #8
 80015a0:	46bd      	mov	sp, r7
 80015a2:	bd80      	pop	{r7, pc}

080015a4 <_exit>:

void _exit (int status)
{
 80015a4:	b580      	push	{r7, lr}
 80015a6:	b082      	sub	sp, #8
 80015a8:	af00      	add	r7, sp, #0
 80015aa:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 80015ac:	f04f 31ff 	mov.w	r1, #4294967295
 80015b0:	6878      	ldr	r0, [r7, #4]
 80015b2:	f7ff ffe7 	bl	8001584 <_kill>
  while (1) {}    /* Make sure we hang here */
 80015b6:	bf00      	nop
 80015b8:	e7fd      	b.n	80015b6 <_exit+0x12>

080015ba <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80015ba:	b580      	push	{r7, lr}
 80015bc:	b086      	sub	sp, #24
 80015be:	af00      	add	r7, sp, #0
 80015c0:	60f8      	str	r0, [r7, #12]
 80015c2:	60b9      	str	r1, [r7, #8]
 80015c4:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80015c6:	2300      	movs	r3, #0
 80015c8:	617b      	str	r3, [r7, #20]
 80015ca:	e00a      	b.n	80015e2 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80015cc:	f3af 8000 	nop.w
 80015d0:	4601      	mov	r1, r0
 80015d2:	68bb      	ldr	r3, [r7, #8]
 80015d4:	1c5a      	adds	r2, r3, #1
 80015d6:	60ba      	str	r2, [r7, #8]
 80015d8:	b2ca      	uxtb	r2, r1
 80015da:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80015dc:	697b      	ldr	r3, [r7, #20]
 80015de:	3301      	adds	r3, #1
 80015e0:	617b      	str	r3, [r7, #20]
 80015e2:	697a      	ldr	r2, [r7, #20]
 80015e4:	687b      	ldr	r3, [r7, #4]
 80015e6:	429a      	cmp	r2, r3
 80015e8:	dbf0      	blt.n	80015cc <_read+0x12>
  }

  return len;
 80015ea:	687b      	ldr	r3, [r7, #4]
}
 80015ec:	4618      	mov	r0, r3
 80015ee:	3718      	adds	r7, #24
 80015f0:	46bd      	mov	sp, r7
 80015f2:	bd80      	pop	{r7, pc}

080015f4 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80015f4:	b580      	push	{r7, lr}
 80015f6:	b086      	sub	sp, #24
 80015f8:	af00      	add	r7, sp, #0
 80015fa:	60f8      	str	r0, [r7, #12]
 80015fc:	60b9      	str	r1, [r7, #8]
 80015fe:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001600:	2300      	movs	r3, #0
 8001602:	617b      	str	r3, [r7, #20]
 8001604:	e009      	b.n	800161a <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001606:	68bb      	ldr	r3, [r7, #8]
 8001608:	1c5a      	adds	r2, r3, #1
 800160a:	60ba      	str	r2, [r7, #8]
 800160c:	781b      	ldrb	r3, [r3, #0]
 800160e:	4618      	mov	r0, r3
 8001610:	f7ff f8d2 	bl	80007b8 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001614:	697b      	ldr	r3, [r7, #20]
 8001616:	3301      	adds	r3, #1
 8001618:	617b      	str	r3, [r7, #20]
 800161a:	697a      	ldr	r2, [r7, #20]
 800161c:	687b      	ldr	r3, [r7, #4]
 800161e:	429a      	cmp	r2, r3
 8001620:	dbf1      	blt.n	8001606 <_write+0x12>
  }
  return len;
 8001622:	687b      	ldr	r3, [r7, #4]
}
 8001624:	4618      	mov	r0, r3
 8001626:	3718      	adds	r7, #24
 8001628:	46bd      	mov	sp, r7
 800162a:	bd80      	pop	{r7, pc}

0800162c <_close>:

int _close(int file)
{
 800162c:	b480      	push	{r7}
 800162e:	b083      	sub	sp, #12
 8001630:	af00      	add	r7, sp, #0
 8001632:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001634:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001638:	4618      	mov	r0, r3
 800163a:	370c      	adds	r7, #12
 800163c:	46bd      	mov	sp, r7
 800163e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001642:	4770      	bx	lr

08001644 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001644:	b480      	push	{r7}
 8001646:	b083      	sub	sp, #12
 8001648:	af00      	add	r7, sp, #0
 800164a:	6078      	str	r0, [r7, #4]
 800164c:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 800164e:	683b      	ldr	r3, [r7, #0]
 8001650:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001654:	605a      	str	r2, [r3, #4]
  return 0;
 8001656:	2300      	movs	r3, #0
}
 8001658:	4618      	mov	r0, r3
 800165a:	370c      	adds	r7, #12
 800165c:	46bd      	mov	sp, r7
 800165e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001662:	4770      	bx	lr

08001664 <_isatty>:

int _isatty(int file)
{
 8001664:	b480      	push	{r7}
 8001666:	b083      	sub	sp, #12
 8001668:	af00      	add	r7, sp, #0
 800166a:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 800166c:	2301      	movs	r3, #1
}
 800166e:	4618      	mov	r0, r3
 8001670:	370c      	adds	r7, #12
 8001672:	46bd      	mov	sp, r7
 8001674:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001678:	4770      	bx	lr

0800167a <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800167a:	b480      	push	{r7}
 800167c:	b085      	sub	sp, #20
 800167e:	af00      	add	r7, sp, #0
 8001680:	60f8      	str	r0, [r7, #12]
 8001682:	60b9      	str	r1, [r7, #8]
 8001684:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001686:	2300      	movs	r3, #0
}
 8001688:	4618      	mov	r0, r3
 800168a:	3714      	adds	r7, #20
 800168c:	46bd      	mov	sp, r7
 800168e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001692:	4770      	bx	lr

08001694 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001694:	b580      	push	{r7, lr}
 8001696:	b086      	sub	sp, #24
 8001698:	af00      	add	r7, sp, #0
 800169a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800169c:	4a14      	ldr	r2, [pc, #80]	@ (80016f0 <_sbrk+0x5c>)
 800169e:	4b15      	ldr	r3, [pc, #84]	@ (80016f4 <_sbrk+0x60>)
 80016a0:	1ad3      	subs	r3, r2, r3
 80016a2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80016a4:	697b      	ldr	r3, [r7, #20]
 80016a6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80016a8:	4b13      	ldr	r3, [pc, #76]	@ (80016f8 <_sbrk+0x64>)
 80016aa:	681b      	ldr	r3, [r3, #0]
 80016ac:	2b00      	cmp	r3, #0
 80016ae:	d102      	bne.n	80016b6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80016b0:	4b11      	ldr	r3, [pc, #68]	@ (80016f8 <_sbrk+0x64>)
 80016b2:	4a12      	ldr	r2, [pc, #72]	@ (80016fc <_sbrk+0x68>)
 80016b4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80016b6:	4b10      	ldr	r3, [pc, #64]	@ (80016f8 <_sbrk+0x64>)
 80016b8:	681a      	ldr	r2, [r3, #0]
 80016ba:	687b      	ldr	r3, [r7, #4]
 80016bc:	4413      	add	r3, r2
 80016be:	693a      	ldr	r2, [r7, #16]
 80016c0:	429a      	cmp	r2, r3
 80016c2:	d207      	bcs.n	80016d4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80016c4:	f008 ff28 	bl	800a518 <__errno>
 80016c8:	4603      	mov	r3, r0
 80016ca:	220c      	movs	r2, #12
 80016cc:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80016ce:	f04f 33ff 	mov.w	r3, #4294967295
 80016d2:	e009      	b.n	80016e8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80016d4:	4b08      	ldr	r3, [pc, #32]	@ (80016f8 <_sbrk+0x64>)
 80016d6:	681b      	ldr	r3, [r3, #0]
 80016d8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80016da:	4b07      	ldr	r3, [pc, #28]	@ (80016f8 <_sbrk+0x64>)
 80016dc:	681a      	ldr	r2, [r3, #0]
 80016de:	687b      	ldr	r3, [r7, #4]
 80016e0:	4413      	add	r3, r2
 80016e2:	4a05      	ldr	r2, [pc, #20]	@ (80016f8 <_sbrk+0x64>)
 80016e4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80016e6:	68fb      	ldr	r3, [r7, #12]
}
 80016e8:	4618      	mov	r0, r3
 80016ea:	3718      	adds	r7, #24
 80016ec:	46bd      	mov	sp, r7
 80016ee:	bd80      	pop	{r7, pc}
 80016f0:	24050000 	.word	0x24050000
 80016f4:	00000400 	.word	0x00000400
 80016f8:	24000598 	.word	0x24000598
 80016fc:	240006f0 	.word	0x240006f0

08001700 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001700:	b480      	push	{r7}
 8001702:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8001704:	4b3e      	ldr	r3, [pc, #248]	@ (8001800 <SystemInit+0x100>)
 8001706:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800170a:	4a3d      	ldr	r2, [pc, #244]	@ (8001800 <SystemInit+0x100>)
 800170c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001710:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8001714:	4b3b      	ldr	r3, [pc, #236]	@ (8001804 <SystemInit+0x104>)
 8001716:	681b      	ldr	r3, [r3, #0]
 8001718:	f003 030f 	and.w	r3, r3, #15
 800171c:	2b06      	cmp	r3, #6
 800171e:	d807      	bhi.n	8001730 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8001720:	4b38      	ldr	r3, [pc, #224]	@ (8001804 <SystemInit+0x104>)
 8001722:	681b      	ldr	r3, [r3, #0]
 8001724:	f023 030f 	bic.w	r3, r3, #15
 8001728:	4a36      	ldr	r2, [pc, #216]	@ (8001804 <SystemInit+0x104>)
 800172a:	f043 0307 	orr.w	r3, r3, #7
 800172e:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8001730:	4b35      	ldr	r3, [pc, #212]	@ (8001808 <SystemInit+0x108>)
 8001732:	681b      	ldr	r3, [r3, #0]
 8001734:	4a34      	ldr	r2, [pc, #208]	@ (8001808 <SystemInit+0x108>)
 8001736:	f043 0301 	orr.w	r3, r3, #1
 800173a:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 800173c:	4b32      	ldr	r3, [pc, #200]	@ (8001808 <SystemInit+0x108>)
 800173e:	2200      	movs	r2, #0
 8001740:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8001742:	4b31      	ldr	r3, [pc, #196]	@ (8001808 <SystemInit+0x108>)
 8001744:	681a      	ldr	r2, [r3, #0]
 8001746:	4930      	ldr	r1, [pc, #192]	@ (8001808 <SystemInit+0x108>)
 8001748:	4b30      	ldr	r3, [pc, #192]	@ (800180c <SystemInit+0x10c>)
 800174a:	4013      	ands	r3, r2
 800174c:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 800174e:	4b2d      	ldr	r3, [pc, #180]	@ (8001804 <SystemInit+0x104>)
 8001750:	681b      	ldr	r3, [r3, #0]
 8001752:	f003 0308 	and.w	r3, r3, #8
 8001756:	2b00      	cmp	r3, #0
 8001758:	d007      	beq.n	800176a <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 800175a:	4b2a      	ldr	r3, [pc, #168]	@ (8001804 <SystemInit+0x104>)
 800175c:	681b      	ldr	r3, [r3, #0]
 800175e:	f023 030f 	bic.w	r3, r3, #15
 8001762:	4a28      	ldr	r2, [pc, #160]	@ (8001804 <SystemInit+0x104>)
 8001764:	f043 0307 	orr.w	r3, r3, #7
 8001768:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 800176a:	4b27      	ldr	r3, [pc, #156]	@ (8001808 <SystemInit+0x108>)
 800176c:	2200      	movs	r2, #0
 800176e:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8001770:	4b25      	ldr	r3, [pc, #148]	@ (8001808 <SystemInit+0x108>)
 8001772:	2200      	movs	r2, #0
 8001774:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 8001776:	4b24      	ldr	r3, [pc, #144]	@ (8001808 <SystemInit+0x108>)
 8001778:	2200      	movs	r2, #0
 800177a:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 800177c:	4b22      	ldr	r3, [pc, #136]	@ (8001808 <SystemInit+0x108>)
 800177e:	4a24      	ldr	r2, [pc, #144]	@ (8001810 <SystemInit+0x110>)
 8001780:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8001782:	4b21      	ldr	r3, [pc, #132]	@ (8001808 <SystemInit+0x108>)
 8001784:	4a23      	ldr	r2, [pc, #140]	@ (8001814 <SystemInit+0x114>)
 8001786:	62da      	str	r2, [r3, #44]	@ 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8001788:	4b1f      	ldr	r3, [pc, #124]	@ (8001808 <SystemInit+0x108>)
 800178a:	4a23      	ldr	r2, [pc, #140]	@ (8001818 <SystemInit+0x118>)
 800178c:	631a      	str	r2, [r3, #48]	@ 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 800178e:	4b1e      	ldr	r3, [pc, #120]	@ (8001808 <SystemInit+0x108>)
 8001790:	2200      	movs	r2, #0
 8001792:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8001794:	4b1c      	ldr	r3, [pc, #112]	@ (8001808 <SystemInit+0x108>)
 8001796:	4a20      	ldr	r2, [pc, #128]	@ (8001818 <SystemInit+0x118>)
 8001798:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 800179a:	4b1b      	ldr	r3, [pc, #108]	@ (8001808 <SystemInit+0x108>)
 800179c:	2200      	movs	r2, #0
 800179e:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 80017a0:	4b19      	ldr	r3, [pc, #100]	@ (8001808 <SystemInit+0x108>)
 80017a2:	4a1d      	ldr	r2, [pc, #116]	@ (8001818 <SystemInit+0x118>)
 80017a4:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 80017a6:	4b18      	ldr	r3, [pc, #96]	@ (8001808 <SystemInit+0x108>)
 80017a8:	2200      	movs	r2, #0
 80017aa:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 80017ac:	4b16      	ldr	r3, [pc, #88]	@ (8001808 <SystemInit+0x108>)
 80017ae:	681b      	ldr	r3, [r3, #0]
 80017b0:	4a15      	ldr	r2, [pc, #84]	@ (8001808 <SystemInit+0x108>)
 80017b2:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80017b6:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 80017b8:	4b13      	ldr	r3, [pc, #76]	@ (8001808 <SystemInit+0x108>)
 80017ba:	2200      	movs	r2, #0
 80017bc:	661a      	str	r2, [r3, #96]	@ 0x60
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D2 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#else
  if(READ_BIT(RCC->AHB3ENR, RCC_AHB3ENR_FMCEN) == 0U)
 80017be:	4b12      	ldr	r3, [pc, #72]	@ (8001808 <SystemInit+0x108>)
 80017c0:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 80017c4:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80017c8:	2b00      	cmp	r3, #0
 80017ca:	d113      	bne.n	80017f4 <SystemInit+0xf4>
  {
    /* Enable the FMC interface clock */
    SET_BIT(RCC->AHB3ENR, RCC_AHB3ENR_FMCEN);
 80017cc:	4b0e      	ldr	r3, [pc, #56]	@ (8001808 <SystemInit+0x108>)
 80017ce:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 80017d2:	4a0d      	ldr	r2, [pc, #52]	@ (8001808 <SystemInit+0x108>)
 80017d4:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 80017d8:	f8c2 30d4 	str.w	r3, [r2, #212]	@ 0xd4
    /*
     * Disable the FMC bank1 (enabled after reset).
     * This, prevents CPU speculation access on this bank which blocks the use of FMC during
     * 24us. During this time the others FMC master (such as LTDC) cannot use it!
     */
    FMC_Bank1_R->BTCR[0] = 0x000030D2;
 80017dc:	4b0f      	ldr	r3, [pc, #60]	@ (800181c <SystemInit+0x11c>)
 80017de:	f243 02d2 	movw	r2, #12498	@ 0x30d2
 80017e2:	601a      	str	r2, [r3, #0]

    /* Disable the FMC interface clock */
    CLEAR_BIT(RCC->AHB3ENR, RCC_AHB3ENR_FMCEN);
 80017e4:	4b08      	ldr	r3, [pc, #32]	@ (8001808 <SystemInit+0x108>)
 80017e6:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 80017ea:	4a07      	ldr	r2, [pc, #28]	@ (8001808 <SystemInit+0x108>)
 80017ec:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80017f0:	f8c2 30d4 	str.w	r3, [r2, #212]	@ 0xd4
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 80017f4:	bf00      	nop
 80017f6:	46bd      	mov	sp, r7
 80017f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017fc:	4770      	bx	lr
 80017fe:	bf00      	nop
 8001800:	e000ed00 	.word	0xe000ed00
 8001804:	52002000 	.word	0x52002000
 8001808:	58024400 	.word	0x58024400
 800180c:	eaf6ed7f 	.word	0xeaf6ed7f
 8001810:	02020200 	.word	0x02020200
 8001814:	01ff0000 	.word	0x01ff0000
 8001818:	01010280 	.word	0x01010280
 800181c:	52004000 	.word	0x52004000

08001820 <ExitRun0Mode>:
  *
  * @param  None
  * @retval None
  */
void ExitRun0Mode(void)
{
 8001820:	b480      	push	{r7}
 8001822:	af00      	add	r7, sp, #0
  #if defined(SMPS)
    /* Exit Run* mode by disabling SMPS and enabling LDO */
    PWR->CR3 = (PWR->CR3 & ~PWR_CR3_SMPSEN) | PWR_CR3_LDOEN;
  #else
    /* Enable LDO mode */
    PWR->CR3 |= PWR_CR3_LDOEN;
 8001824:	4b09      	ldr	r3, [pc, #36]	@ (800184c <ExitRun0Mode+0x2c>)
 8001826:	68db      	ldr	r3, [r3, #12]
 8001828:	4a08      	ldr	r2, [pc, #32]	@ (800184c <ExitRun0Mode+0x2c>)
 800182a:	f043 0302 	orr.w	r3, r3, #2
 800182e:	60d3      	str	r3, [r2, #12]
  #endif /* SMPS */
  /* Wait till voltage level flag is set */
  while ((PWR->CSR1 & PWR_CSR1_ACTVOSRDY) == 0U)
 8001830:	bf00      	nop
 8001832:	4b06      	ldr	r3, [pc, #24]	@ (800184c <ExitRun0Mode+0x2c>)
 8001834:	685b      	ldr	r3, [r3, #4]
 8001836:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800183a:	2b00      	cmp	r3, #0
 800183c:	d0f9      	beq.n	8001832 <ExitRun0Mode+0x12>
  while ((PWR->CSR1 & PWR_CSR1_ACTVOSRDY) == 0U)
  {}
#else
  /* No system power supply configuration is selected at exit Run* mode */
#endif /* USE_PWR_LDO_SUPPLY */
}
 800183e:	bf00      	nop
 8001840:	bf00      	nop
 8001842:	46bd      	mov	sp, r7
 8001844:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001848:	4770      	bx	lr
 800184a:	bf00      	nop
 800184c:	58024800 	.word	0x58024800

08001850 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8001850:	f8df d038 	ldr.w	sp, [pc, #56]	@ 800188c <LoopFillZerobss+0xe>

/* Call the ExitRun0Mode function to configure the power supply */
  bl  ExitRun0Mode
 8001854:	f7ff ffe4 	bl	8001820 <ExitRun0Mode>
/* Call the clock system initialization function.*/
  bl  SystemInit
 8001858:	f7ff ff52 	bl	8001700 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800185c:	480c      	ldr	r0, [pc, #48]	@ (8001890 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800185e:	490d      	ldr	r1, [pc, #52]	@ (8001894 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001860:	4a0d      	ldr	r2, [pc, #52]	@ (8001898 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001862:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001864:	e002      	b.n	800186c <LoopCopyDataInit>

08001866 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001866:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001868:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800186a:	3304      	adds	r3, #4

0800186c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800186c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800186e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001870:	d3f9      	bcc.n	8001866 <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001872:	4a0a      	ldr	r2, [pc, #40]	@ (800189c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001874:	4c0a      	ldr	r4, [pc, #40]	@ (80018a0 <LoopFillZerobss+0x22>)
  movs r3, #0
 8001876:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001878:	e001      	b.n	800187e <LoopFillZerobss>

0800187a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800187a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800187c:	3204      	adds	r2, #4

0800187e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800187e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001880:	d3fb      	bcc.n	800187a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001882:	f008 fe4f 	bl	800a524 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001886:	f7ff f87d 	bl	8000984 <main>
  bx  lr
 800188a:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 800188c:	24050000 	.word	0x24050000
  ldr r0, =_sdata
 8001890:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8001894:	240001d8 	.word	0x240001d8
  ldr r2, =_sidata
 8001898:	0800c5a4 	.word	0x0800c5a4
  ldr r2, =_sbss
 800189c:	240001d8 	.word	0x240001d8
  ldr r4, =_ebss
 80018a0:	240006ec 	.word	0x240006ec

080018a4 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80018a4:	e7fe      	b.n	80018a4 <ADC3_IRQHandler>
	...

080018a8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80018a8:	b580      	push	{r7, lr}
 80018aa:	b082      	sub	sp, #8
 80018ac:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80018ae:	2003      	movs	r0, #3
 80018b0:	f000 f95c 	bl	8001b6c <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 80018b4:	f002 fbbe 	bl	8004034 <HAL_RCC_GetSysClockFreq>
 80018b8:	4602      	mov	r2, r0
 80018ba:	4b15      	ldr	r3, [pc, #84]	@ (8001910 <HAL_Init+0x68>)
 80018bc:	699b      	ldr	r3, [r3, #24]
 80018be:	0a1b      	lsrs	r3, r3, #8
 80018c0:	f003 030f 	and.w	r3, r3, #15
 80018c4:	4913      	ldr	r1, [pc, #76]	@ (8001914 <HAL_Init+0x6c>)
 80018c6:	5ccb      	ldrb	r3, [r1, r3]
 80018c8:	f003 031f 	and.w	r3, r3, #31
 80018cc:	fa22 f303 	lsr.w	r3, r2, r3
 80018d0:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80018d2:	4b0f      	ldr	r3, [pc, #60]	@ (8001910 <HAL_Init+0x68>)
 80018d4:	699b      	ldr	r3, [r3, #24]
 80018d6:	f003 030f 	and.w	r3, r3, #15
 80018da:	4a0e      	ldr	r2, [pc, #56]	@ (8001914 <HAL_Init+0x6c>)
 80018dc:	5cd3      	ldrb	r3, [r2, r3]
 80018de:	f003 031f 	and.w	r3, r3, #31
 80018e2:	687a      	ldr	r2, [r7, #4]
 80018e4:	fa22 f303 	lsr.w	r3, r2, r3
 80018e8:	4a0b      	ldr	r2, [pc, #44]	@ (8001918 <HAL_Init+0x70>)
 80018ea:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80018ec:	4a0b      	ldr	r2, [pc, #44]	@ (800191c <HAL_Init+0x74>)
 80018ee:	687b      	ldr	r3, [r7, #4]
 80018f0:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80018f2:	200f      	movs	r0, #15
 80018f4:	f000 f814 	bl	8001920 <HAL_InitTick>
 80018f8:	4603      	mov	r3, r0
 80018fa:	2b00      	cmp	r3, #0
 80018fc:	d001      	beq.n	8001902 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 80018fe:	2301      	movs	r3, #1
 8001900:	e002      	b.n	8001908 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8001902:	f7ff fbe7 	bl	80010d4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001906:	2300      	movs	r3, #0
}
 8001908:	4618      	mov	r0, r3
 800190a:	3708      	adds	r7, #8
 800190c:	46bd      	mov	sp, r7
 800190e:	bd80      	pop	{r7, pc}
 8001910:	58024400 	.word	0x58024400
 8001914:	0800c1e8 	.word	0x0800c1e8
 8001918:	24000004 	.word	0x24000004
 800191c:	24000000 	.word	0x24000000

08001920 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001920:	b580      	push	{r7, lr}
 8001922:	b082      	sub	sp, #8
 8001924:	af00      	add	r7, sp, #0
 8001926:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8001928:	4b15      	ldr	r3, [pc, #84]	@ (8001980 <HAL_InitTick+0x60>)
 800192a:	781b      	ldrb	r3, [r3, #0]
 800192c:	2b00      	cmp	r3, #0
 800192e:	d101      	bne.n	8001934 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8001930:	2301      	movs	r3, #1
 8001932:	e021      	b.n	8001978 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8001934:	4b13      	ldr	r3, [pc, #76]	@ (8001984 <HAL_InitTick+0x64>)
 8001936:	681a      	ldr	r2, [r3, #0]
 8001938:	4b11      	ldr	r3, [pc, #68]	@ (8001980 <HAL_InitTick+0x60>)
 800193a:	781b      	ldrb	r3, [r3, #0]
 800193c:	4619      	mov	r1, r3
 800193e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001942:	fbb3 f3f1 	udiv	r3, r3, r1
 8001946:	fbb2 f3f3 	udiv	r3, r2, r3
 800194a:	4618      	mov	r0, r3
 800194c:	f000 f941 	bl	8001bd2 <HAL_SYSTICK_Config>
 8001950:	4603      	mov	r3, r0
 8001952:	2b00      	cmp	r3, #0
 8001954:	d001      	beq.n	800195a <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 8001956:	2301      	movs	r3, #1
 8001958:	e00e      	b.n	8001978 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800195a:	687b      	ldr	r3, [r7, #4]
 800195c:	2b0f      	cmp	r3, #15
 800195e:	d80a      	bhi.n	8001976 <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001960:	2200      	movs	r2, #0
 8001962:	6879      	ldr	r1, [r7, #4]
 8001964:	f04f 30ff 	mov.w	r0, #4294967295
 8001968:	f000 f90b 	bl	8001b82 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800196c:	4a06      	ldr	r2, [pc, #24]	@ (8001988 <HAL_InitTick+0x68>)
 800196e:	687b      	ldr	r3, [r7, #4]
 8001970:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001972:	2300      	movs	r3, #0
 8001974:	e000      	b.n	8001978 <HAL_InitTick+0x58>
    return HAL_ERROR;
 8001976:	2301      	movs	r3, #1
}
 8001978:	4618      	mov	r0, r3
 800197a:	3708      	adds	r7, #8
 800197c:	46bd      	mov	sp, r7
 800197e:	bd80      	pop	{r7, pc}
 8001980:	2400000c 	.word	0x2400000c
 8001984:	24000000 	.word	0x24000000
 8001988:	24000008 	.word	0x24000008

0800198c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800198c:	b480      	push	{r7}
 800198e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001990:	4b06      	ldr	r3, [pc, #24]	@ (80019ac <HAL_IncTick+0x20>)
 8001992:	781b      	ldrb	r3, [r3, #0]
 8001994:	461a      	mov	r2, r3
 8001996:	4b06      	ldr	r3, [pc, #24]	@ (80019b0 <HAL_IncTick+0x24>)
 8001998:	681b      	ldr	r3, [r3, #0]
 800199a:	4413      	add	r3, r2
 800199c:	4a04      	ldr	r2, [pc, #16]	@ (80019b0 <HAL_IncTick+0x24>)
 800199e:	6013      	str	r3, [r2, #0]
}
 80019a0:	bf00      	nop
 80019a2:	46bd      	mov	sp, r7
 80019a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019a8:	4770      	bx	lr
 80019aa:	bf00      	nop
 80019ac:	2400000c 	.word	0x2400000c
 80019b0:	2400059c 	.word	0x2400059c

080019b4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80019b4:	b480      	push	{r7}
 80019b6:	af00      	add	r7, sp, #0
  return uwTick;
 80019b8:	4b03      	ldr	r3, [pc, #12]	@ (80019c8 <HAL_GetTick+0x14>)
 80019ba:	681b      	ldr	r3, [r3, #0]
}
 80019bc:	4618      	mov	r0, r3
 80019be:	46bd      	mov	sp, r7
 80019c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019c4:	4770      	bx	lr
 80019c6:	bf00      	nop
 80019c8:	2400059c 	.word	0x2400059c

080019cc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80019cc:	b480      	push	{r7}
 80019ce:	b085      	sub	sp, #20
 80019d0:	af00      	add	r7, sp, #0
 80019d2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	f003 0307 	and.w	r3, r3, #7
 80019da:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80019dc:	4b0b      	ldr	r3, [pc, #44]	@ (8001a0c <__NVIC_SetPriorityGrouping+0x40>)
 80019de:	68db      	ldr	r3, [r3, #12]
 80019e0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80019e2:	68ba      	ldr	r2, [r7, #8]
 80019e4:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80019e8:	4013      	ands	r3, r2
 80019ea:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80019ec:	68fb      	ldr	r3, [r7, #12]
 80019ee:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80019f0:	68bb      	ldr	r3, [r7, #8]
 80019f2:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 80019f4:	4b06      	ldr	r3, [pc, #24]	@ (8001a10 <__NVIC_SetPriorityGrouping+0x44>)
 80019f6:	4313      	orrs	r3, r2
 80019f8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80019fa:	4a04      	ldr	r2, [pc, #16]	@ (8001a0c <__NVIC_SetPriorityGrouping+0x40>)
 80019fc:	68bb      	ldr	r3, [r7, #8]
 80019fe:	60d3      	str	r3, [r2, #12]
}
 8001a00:	bf00      	nop
 8001a02:	3714      	adds	r7, #20
 8001a04:	46bd      	mov	sp, r7
 8001a06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a0a:	4770      	bx	lr
 8001a0c:	e000ed00 	.word	0xe000ed00
 8001a10:	05fa0000 	.word	0x05fa0000

08001a14 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001a14:	b480      	push	{r7}
 8001a16:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001a18:	4b04      	ldr	r3, [pc, #16]	@ (8001a2c <__NVIC_GetPriorityGrouping+0x18>)
 8001a1a:	68db      	ldr	r3, [r3, #12]
 8001a1c:	0a1b      	lsrs	r3, r3, #8
 8001a1e:	f003 0307 	and.w	r3, r3, #7
}
 8001a22:	4618      	mov	r0, r3
 8001a24:	46bd      	mov	sp, r7
 8001a26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a2a:	4770      	bx	lr
 8001a2c:	e000ed00 	.word	0xe000ed00

08001a30 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001a30:	b480      	push	{r7}
 8001a32:	b083      	sub	sp, #12
 8001a34:	af00      	add	r7, sp, #0
 8001a36:	4603      	mov	r3, r0
 8001a38:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8001a3a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001a3e:	2b00      	cmp	r3, #0
 8001a40:	db0b      	blt.n	8001a5a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001a42:	88fb      	ldrh	r3, [r7, #6]
 8001a44:	f003 021f 	and.w	r2, r3, #31
 8001a48:	4907      	ldr	r1, [pc, #28]	@ (8001a68 <__NVIC_EnableIRQ+0x38>)
 8001a4a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001a4e:	095b      	lsrs	r3, r3, #5
 8001a50:	2001      	movs	r0, #1
 8001a52:	fa00 f202 	lsl.w	r2, r0, r2
 8001a56:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001a5a:	bf00      	nop
 8001a5c:	370c      	adds	r7, #12
 8001a5e:	46bd      	mov	sp, r7
 8001a60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a64:	4770      	bx	lr
 8001a66:	bf00      	nop
 8001a68:	e000e100 	.word	0xe000e100

08001a6c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001a6c:	b480      	push	{r7}
 8001a6e:	b083      	sub	sp, #12
 8001a70:	af00      	add	r7, sp, #0
 8001a72:	4603      	mov	r3, r0
 8001a74:	6039      	str	r1, [r7, #0]
 8001a76:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8001a78:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001a7c:	2b00      	cmp	r3, #0
 8001a7e:	db0a      	blt.n	8001a96 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001a80:	683b      	ldr	r3, [r7, #0]
 8001a82:	b2da      	uxtb	r2, r3
 8001a84:	490c      	ldr	r1, [pc, #48]	@ (8001ab8 <__NVIC_SetPriority+0x4c>)
 8001a86:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001a8a:	0112      	lsls	r2, r2, #4
 8001a8c:	b2d2      	uxtb	r2, r2
 8001a8e:	440b      	add	r3, r1
 8001a90:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001a94:	e00a      	b.n	8001aac <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001a96:	683b      	ldr	r3, [r7, #0]
 8001a98:	b2da      	uxtb	r2, r3
 8001a9a:	4908      	ldr	r1, [pc, #32]	@ (8001abc <__NVIC_SetPriority+0x50>)
 8001a9c:	88fb      	ldrh	r3, [r7, #6]
 8001a9e:	f003 030f 	and.w	r3, r3, #15
 8001aa2:	3b04      	subs	r3, #4
 8001aa4:	0112      	lsls	r2, r2, #4
 8001aa6:	b2d2      	uxtb	r2, r2
 8001aa8:	440b      	add	r3, r1
 8001aaa:	761a      	strb	r2, [r3, #24]
}
 8001aac:	bf00      	nop
 8001aae:	370c      	adds	r7, #12
 8001ab0:	46bd      	mov	sp, r7
 8001ab2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ab6:	4770      	bx	lr
 8001ab8:	e000e100 	.word	0xe000e100
 8001abc:	e000ed00 	.word	0xe000ed00

08001ac0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001ac0:	b480      	push	{r7}
 8001ac2:	b089      	sub	sp, #36	@ 0x24
 8001ac4:	af00      	add	r7, sp, #0
 8001ac6:	60f8      	str	r0, [r7, #12]
 8001ac8:	60b9      	str	r1, [r7, #8]
 8001aca:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001acc:	68fb      	ldr	r3, [r7, #12]
 8001ace:	f003 0307 	and.w	r3, r3, #7
 8001ad2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001ad4:	69fb      	ldr	r3, [r7, #28]
 8001ad6:	f1c3 0307 	rsb	r3, r3, #7
 8001ada:	2b04      	cmp	r3, #4
 8001adc:	bf28      	it	cs
 8001ade:	2304      	movcs	r3, #4
 8001ae0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001ae2:	69fb      	ldr	r3, [r7, #28]
 8001ae4:	3304      	adds	r3, #4
 8001ae6:	2b06      	cmp	r3, #6
 8001ae8:	d902      	bls.n	8001af0 <NVIC_EncodePriority+0x30>
 8001aea:	69fb      	ldr	r3, [r7, #28]
 8001aec:	3b03      	subs	r3, #3
 8001aee:	e000      	b.n	8001af2 <NVIC_EncodePriority+0x32>
 8001af0:	2300      	movs	r3, #0
 8001af2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001af4:	f04f 32ff 	mov.w	r2, #4294967295
 8001af8:	69bb      	ldr	r3, [r7, #24]
 8001afa:	fa02 f303 	lsl.w	r3, r2, r3
 8001afe:	43da      	mvns	r2, r3
 8001b00:	68bb      	ldr	r3, [r7, #8]
 8001b02:	401a      	ands	r2, r3
 8001b04:	697b      	ldr	r3, [r7, #20]
 8001b06:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001b08:	f04f 31ff 	mov.w	r1, #4294967295
 8001b0c:	697b      	ldr	r3, [r7, #20]
 8001b0e:	fa01 f303 	lsl.w	r3, r1, r3
 8001b12:	43d9      	mvns	r1, r3
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001b18:	4313      	orrs	r3, r2
         );
}
 8001b1a:	4618      	mov	r0, r3
 8001b1c:	3724      	adds	r7, #36	@ 0x24
 8001b1e:	46bd      	mov	sp, r7
 8001b20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b24:	4770      	bx	lr
	...

08001b28 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001b28:	b580      	push	{r7, lr}
 8001b2a:	b082      	sub	sp, #8
 8001b2c:	af00      	add	r7, sp, #0
 8001b2e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	3b01      	subs	r3, #1
 8001b34:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001b38:	d301      	bcc.n	8001b3e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001b3a:	2301      	movs	r3, #1
 8001b3c:	e00f      	b.n	8001b5e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001b3e:	4a0a      	ldr	r2, [pc, #40]	@ (8001b68 <SysTick_Config+0x40>)
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	3b01      	subs	r3, #1
 8001b44:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001b46:	210f      	movs	r1, #15
 8001b48:	f04f 30ff 	mov.w	r0, #4294967295
 8001b4c:	f7ff ff8e 	bl	8001a6c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001b50:	4b05      	ldr	r3, [pc, #20]	@ (8001b68 <SysTick_Config+0x40>)
 8001b52:	2200      	movs	r2, #0
 8001b54:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001b56:	4b04      	ldr	r3, [pc, #16]	@ (8001b68 <SysTick_Config+0x40>)
 8001b58:	2207      	movs	r2, #7
 8001b5a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001b5c:	2300      	movs	r3, #0
}
 8001b5e:	4618      	mov	r0, r3
 8001b60:	3708      	adds	r7, #8
 8001b62:	46bd      	mov	sp, r7
 8001b64:	bd80      	pop	{r7, pc}
 8001b66:	bf00      	nop
 8001b68:	e000e010 	.word	0xe000e010

08001b6c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001b6c:	b580      	push	{r7, lr}
 8001b6e:	b082      	sub	sp, #8
 8001b70:	af00      	add	r7, sp, #0
 8001b72:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001b74:	6878      	ldr	r0, [r7, #4]
 8001b76:	f7ff ff29 	bl	80019cc <__NVIC_SetPriorityGrouping>
}
 8001b7a:	bf00      	nop
 8001b7c:	3708      	adds	r7, #8
 8001b7e:	46bd      	mov	sp, r7
 8001b80:	bd80      	pop	{r7, pc}

08001b82 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001b82:	b580      	push	{r7, lr}
 8001b84:	b086      	sub	sp, #24
 8001b86:	af00      	add	r7, sp, #0
 8001b88:	4603      	mov	r3, r0
 8001b8a:	60b9      	str	r1, [r7, #8]
 8001b8c:	607a      	str	r2, [r7, #4]
 8001b8e:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001b90:	f7ff ff40 	bl	8001a14 <__NVIC_GetPriorityGrouping>
 8001b94:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001b96:	687a      	ldr	r2, [r7, #4]
 8001b98:	68b9      	ldr	r1, [r7, #8]
 8001b9a:	6978      	ldr	r0, [r7, #20]
 8001b9c:	f7ff ff90 	bl	8001ac0 <NVIC_EncodePriority>
 8001ba0:	4602      	mov	r2, r0
 8001ba2:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001ba6:	4611      	mov	r1, r2
 8001ba8:	4618      	mov	r0, r3
 8001baa:	f7ff ff5f 	bl	8001a6c <__NVIC_SetPriority>
}
 8001bae:	bf00      	nop
 8001bb0:	3718      	adds	r7, #24
 8001bb2:	46bd      	mov	sp, r7
 8001bb4:	bd80      	pop	{r7, pc}

08001bb6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001bb6:	b580      	push	{r7, lr}
 8001bb8:	b082      	sub	sp, #8
 8001bba:	af00      	add	r7, sp, #0
 8001bbc:	4603      	mov	r3, r0
 8001bbe:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001bc0:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001bc4:	4618      	mov	r0, r3
 8001bc6:	f7ff ff33 	bl	8001a30 <__NVIC_EnableIRQ>
}
 8001bca:	bf00      	nop
 8001bcc:	3708      	adds	r7, #8
 8001bce:	46bd      	mov	sp, r7
 8001bd0:	bd80      	pop	{r7, pc}

08001bd2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001bd2:	b580      	push	{r7, lr}
 8001bd4:	b082      	sub	sp, #8
 8001bd6:	af00      	add	r7, sp, #0
 8001bd8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001bda:	6878      	ldr	r0, [r7, #4]
 8001bdc:	f7ff ffa4 	bl	8001b28 <SysTick_Config>
 8001be0:	4603      	mov	r3, r0
}
 8001be2:	4618      	mov	r0, r3
 8001be4:	3708      	adds	r7, #8
 8001be6:	46bd      	mov	sp, r7
 8001be8:	bd80      	pop	{r7, pc}
	...

08001bec <HAL_MPU_Disable>:
/**
  * @brief  Disables the MPU
  * @retval None
  */
void HAL_MPU_Disable(void)
{
 8001bec:	b480      	push	{r7}
 8001bee:	af00      	add	r7, sp, #0
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
 8001bf0:	f3bf 8f5f 	dmb	sy
}
 8001bf4:	bf00      	nop
  /* Make sure outstanding transfers are done */
  __DMB();

  /* Disable fault exceptions */
  SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTENA_Msk;
 8001bf6:	4b07      	ldr	r3, [pc, #28]	@ (8001c14 <HAL_MPU_Disable+0x28>)
 8001bf8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001bfa:	4a06      	ldr	r2, [pc, #24]	@ (8001c14 <HAL_MPU_Disable+0x28>)
 8001bfc:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001c00:	6253      	str	r3, [r2, #36]	@ 0x24

  /* Disable the MPU and clear the control register*/
  MPU->CTRL = 0;
 8001c02:	4b05      	ldr	r3, [pc, #20]	@ (8001c18 <HAL_MPU_Disable+0x2c>)
 8001c04:	2200      	movs	r2, #0
 8001c06:	605a      	str	r2, [r3, #4]
}
 8001c08:	bf00      	nop
 8001c0a:	46bd      	mov	sp, r7
 8001c0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c10:	4770      	bx	lr
 8001c12:	bf00      	nop
 8001c14:	e000ed00 	.word	0xe000ed00
 8001c18:	e000ed90 	.word	0xe000ed90

08001c1c <HAL_MPU_Enable>:
  *            @arg MPU_PRIVILEGED_DEFAULT
  *            @arg MPU_HFNMI_PRIVDEF
  * @retval None
  */
void HAL_MPU_Enable(uint32_t MPU_Control)
{
 8001c1c:	b480      	push	{r7}
 8001c1e:	b083      	sub	sp, #12
 8001c20:	af00      	add	r7, sp, #0
 8001c22:	6078      	str	r0, [r7, #4]
  /* Enable the MPU */
  MPU->CTRL = MPU_Control | MPU_CTRL_ENABLE_Msk;
 8001c24:	4a0b      	ldr	r2, [pc, #44]	@ (8001c54 <HAL_MPU_Enable+0x38>)
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	f043 0301 	orr.w	r3, r3, #1
 8001c2c:	6053      	str	r3, [r2, #4]

  /* Enable fault exceptions */
  SCB->SHCSR |= SCB_SHCSR_MEMFAULTENA_Msk;
 8001c2e:	4b0a      	ldr	r3, [pc, #40]	@ (8001c58 <HAL_MPU_Enable+0x3c>)
 8001c30:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001c32:	4a09      	ldr	r2, [pc, #36]	@ (8001c58 <HAL_MPU_Enable+0x3c>)
 8001c34:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001c38:	6253      	str	r3, [r2, #36]	@ 0x24
  __ASM volatile ("dsb 0xF":::"memory");
 8001c3a:	f3bf 8f4f 	dsb	sy
}
 8001c3e:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001c40:	f3bf 8f6f 	isb	sy
}
 8001c44:	bf00      	nop

  /* Ensure MPU setting take effects */
  __DSB();
  __ISB();
}
 8001c46:	bf00      	nop
 8001c48:	370c      	adds	r7, #12
 8001c4a:	46bd      	mov	sp, r7
 8001c4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c50:	4770      	bx	lr
 8001c52:	bf00      	nop
 8001c54:	e000ed90 	.word	0xe000ed90
 8001c58:	e000ed00 	.word	0xe000ed00

08001c5c <HAL_MPU_ConfigRegion>:
  * @param MPU_Init Pointer to a MPU_Region_InitTypeDef structure that contains
  *                the initialization and configuration information.
  * @retval None
  */
void HAL_MPU_ConfigRegion(const MPU_Region_InitTypeDef *MPU_Init)
{
 8001c5c:	b480      	push	{r7}
 8001c5e:	b083      	sub	sp, #12
 8001c60:	af00      	add	r7, sp, #0
 8001c62:	6078      	str	r0, [r7, #4]
  assert_param(IS_MPU_ACCESS_BUFFERABLE(MPU_Init->IsBufferable));
  assert_param(IS_MPU_SUB_REGION_DISABLE(MPU_Init->SubRegionDisable));
  assert_param(IS_MPU_REGION_SIZE(MPU_Init->Size));

  /* Set the Region number */
  MPU->RNR = MPU_Init->Number;
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	785a      	ldrb	r2, [r3, #1]
 8001c68:	4b1b      	ldr	r3, [pc, #108]	@ (8001cd8 <HAL_MPU_ConfigRegion+0x7c>)
 8001c6a:	609a      	str	r2, [r3, #8]

  /* Disable the Region */
  CLEAR_BIT(MPU->RASR, MPU_RASR_ENABLE_Msk);
 8001c6c:	4b1a      	ldr	r3, [pc, #104]	@ (8001cd8 <HAL_MPU_ConfigRegion+0x7c>)
 8001c6e:	691b      	ldr	r3, [r3, #16]
 8001c70:	4a19      	ldr	r2, [pc, #100]	@ (8001cd8 <HAL_MPU_ConfigRegion+0x7c>)
 8001c72:	f023 0301 	bic.w	r3, r3, #1
 8001c76:	6113      	str	r3, [r2, #16]

  /* Apply configuration */
  MPU->RBAR = MPU_Init->BaseAddress;
 8001c78:	4a17      	ldr	r2, [pc, #92]	@ (8001cd8 <HAL_MPU_ConfigRegion+0x7c>)
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	685b      	ldr	r3, [r3, #4]
 8001c7e:	60d3      	str	r3, [r2, #12]
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	7b1b      	ldrb	r3, [r3, #12]
 8001c84:	071a      	lsls	r2, r3, #28
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	7adb      	ldrb	r3, [r3, #11]
 8001c8a:	061b      	lsls	r3, r3, #24
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8001c8c:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	7a9b      	ldrb	r3, [r3, #10]
 8001c92:	04db      	lsls	r3, r3, #19
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 8001c94:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	7b5b      	ldrb	r3, [r3, #13]
 8001c9a:	049b      	lsls	r3, r3, #18
              ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 8001c9c:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	7b9b      	ldrb	r3, [r3, #14]
 8001ca2:	045b      	lsls	r3, r3, #17
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 8001ca4:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 8001ca6:	687b      	ldr	r3, [r7, #4]
 8001ca8:	7bdb      	ldrb	r3, [r3, #15]
 8001caa:	041b      	lsls	r3, r3, #16
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 8001cac:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	7a5b      	ldrb	r3, [r3, #9]
 8001cb2:	021b      	lsls	r3, r3, #8
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 8001cb4:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	7a1b      	ldrb	r3, [r3, #8]
 8001cba:	005b      	lsls	r3, r3, #1
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 8001cbc:	4313      	orrs	r3, r2
              ((uint32_t)MPU_Init->Enable                  << MPU_RASR_ENABLE_Pos);
 8001cbe:	687a      	ldr	r2, [r7, #4]
 8001cc0:	7812      	ldrb	r2, [r2, #0]
 8001cc2:	4611      	mov	r1, r2
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8001cc4:	4a04      	ldr	r2, [pc, #16]	@ (8001cd8 <HAL_MPU_ConfigRegion+0x7c>)
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8001cc6:	430b      	orrs	r3, r1
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8001cc8:	6113      	str	r3, [r2, #16]
}
 8001cca:	bf00      	nop
 8001ccc:	370c      	adds	r7, #12
 8001cce:	46bd      	mov	sp, r7
 8001cd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cd4:	4770      	bx	lr
 8001cd6:	bf00      	nop
 8001cd8:	e000ed90 	.word	0xe000ed90

08001cdc <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001cdc:	b580      	push	{r7, lr}
 8001cde:	b086      	sub	sp, #24
 8001ce0:	af00      	add	r7, sp, #0
 8001ce2:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;
  const __IO uint32_t *enableRegister;

  uint32_t tickstart = HAL_GetTick();
 8001ce4:	f7ff fe66 	bl	80019b4 <HAL_GetTick>
 8001ce8:	6138      	str	r0, [r7, #16]

 /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	2b00      	cmp	r3, #0
 8001cee:	d101      	bne.n	8001cf4 <HAL_DMA_Abort+0x18>
  {
    return HAL_ERROR;
 8001cf0:	2301      	movs	r3, #1
 8001cf2:	e2dc      	b.n	80022ae <HAL_DMA_Abort+0x5d2>
  }

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8001cfa:	b2db      	uxtb	r3, r3
 8001cfc:	2b02      	cmp	r3, #2
 8001cfe:	d008      	beq.n	8001d12 <HAL_DMA_Abort+0x36>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	2280      	movs	r2, #128	@ 0x80
 8001d04:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	2200      	movs	r2, #0
 8001d0a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    return HAL_ERROR;
 8001d0e:	2301      	movs	r3, #1
 8001d10:	e2cd      	b.n	80022ae <HAL_DMA_Abort+0x5d2>
  }
  else
  {
    /* Disable all the transfer interrupts */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	681b      	ldr	r3, [r3, #0]
 8001d16:	4a76      	ldr	r2, [pc, #472]	@ (8001ef0 <HAL_DMA_Abort+0x214>)
 8001d18:	4293      	cmp	r3, r2
 8001d1a:	d04a      	beq.n	8001db2 <HAL_DMA_Abort+0xd6>
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	681b      	ldr	r3, [r3, #0]
 8001d20:	4a74      	ldr	r2, [pc, #464]	@ (8001ef4 <HAL_DMA_Abort+0x218>)
 8001d22:	4293      	cmp	r3, r2
 8001d24:	d045      	beq.n	8001db2 <HAL_DMA_Abort+0xd6>
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	681b      	ldr	r3, [r3, #0]
 8001d2a:	4a73      	ldr	r2, [pc, #460]	@ (8001ef8 <HAL_DMA_Abort+0x21c>)
 8001d2c:	4293      	cmp	r3, r2
 8001d2e:	d040      	beq.n	8001db2 <HAL_DMA_Abort+0xd6>
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	681b      	ldr	r3, [r3, #0]
 8001d34:	4a71      	ldr	r2, [pc, #452]	@ (8001efc <HAL_DMA_Abort+0x220>)
 8001d36:	4293      	cmp	r3, r2
 8001d38:	d03b      	beq.n	8001db2 <HAL_DMA_Abort+0xd6>
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	681b      	ldr	r3, [r3, #0]
 8001d3e:	4a70      	ldr	r2, [pc, #448]	@ (8001f00 <HAL_DMA_Abort+0x224>)
 8001d40:	4293      	cmp	r3, r2
 8001d42:	d036      	beq.n	8001db2 <HAL_DMA_Abort+0xd6>
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	681b      	ldr	r3, [r3, #0]
 8001d48:	4a6e      	ldr	r2, [pc, #440]	@ (8001f04 <HAL_DMA_Abort+0x228>)
 8001d4a:	4293      	cmp	r3, r2
 8001d4c:	d031      	beq.n	8001db2 <HAL_DMA_Abort+0xd6>
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	681b      	ldr	r3, [r3, #0]
 8001d52:	4a6d      	ldr	r2, [pc, #436]	@ (8001f08 <HAL_DMA_Abort+0x22c>)
 8001d54:	4293      	cmp	r3, r2
 8001d56:	d02c      	beq.n	8001db2 <HAL_DMA_Abort+0xd6>
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	681b      	ldr	r3, [r3, #0]
 8001d5c:	4a6b      	ldr	r2, [pc, #428]	@ (8001f0c <HAL_DMA_Abort+0x230>)
 8001d5e:	4293      	cmp	r3, r2
 8001d60:	d027      	beq.n	8001db2 <HAL_DMA_Abort+0xd6>
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	681b      	ldr	r3, [r3, #0]
 8001d66:	4a6a      	ldr	r2, [pc, #424]	@ (8001f10 <HAL_DMA_Abort+0x234>)
 8001d68:	4293      	cmp	r3, r2
 8001d6a:	d022      	beq.n	8001db2 <HAL_DMA_Abort+0xd6>
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	681b      	ldr	r3, [r3, #0]
 8001d70:	4a68      	ldr	r2, [pc, #416]	@ (8001f14 <HAL_DMA_Abort+0x238>)
 8001d72:	4293      	cmp	r3, r2
 8001d74:	d01d      	beq.n	8001db2 <HAL_DMA_Abort+0xd6>
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	681b      	ldr	r3, [r3, #0]
 8001d7a:	4a67      	ldr	r2, [pc, #412]	@ (8001f18 <HAL_DMA_Abort+0x23c>)
 8001d7c:	4293      	cmp	r3, r2
 8001d7e:	d018      	beq.n	8001db2 <HAL_DMA_Abort+0xd6>
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	681b      	ldr	r3, [r3, #0]
 8001d84:	4a65      	ldr	r2, [pc, #404]	@ (8001f1c <HAL_DMA_Abort+0x240>)
 8001d86:	4293      	cmp	r3, r2
 8001d88:	d013      	beq.n	8001db2 <HAL_DMA_Abort+0xd6>
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	681b      	ldr	r3, [r3, #0]
 8001d8e:	4a64      	ldr	r2, [pc, #400]	@ (8001f20 <HAL_DMA_Abort+0x244>)
 8001d90:	4293      	cmp	r3, r2
 8001d92:	d00e      	beq.n	8001db2 <HAL_DMA_Abort+0xd6>
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	681b      	ldr	r3, [r3, #0]
 8001d98:	4a62      	ldr	r2, [pc, #392]	@ (8001f24 <HAL_DMA_Abort+0x248>)
 8001d9a:	4293      	cmp	r3, r2
 8001d9c:	d009      	beq.n	8001db2 <HAL_DMA_Abort+0xd6>
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	681b      	ldr	r3, [r3, #0]
 8001da2:	4a61      	ldr	r2, [pc, #388]	@ (8001f28 <HAL_DMA_Abort+0x24c>)
 8001da4:	4293      	cmp	r3, r2
 8001da6:	d004      	beq.n	8001db2 <HAL_DMA_Abort+0xd6>
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	681b      	ldr	r3, [r3, #0]
 8001dac:	4a5f      	ldr	r2, [pc, #380]	@ (8001f2c <HAL_DMA_Abort+0x250>)
 8001dae:	4293      	cmp	r3, r2
 8001db0:	d101      	bne.n	8001db6 <HAL_DMA_Abort+0xda>
 8001db2:	2301      	movs	r3, #1
 8001db4:	e000      	b.n	8001db8 <HAL_DMA_Abort+0xdc>
 8001db6:	2300      	movs	r3, #0
 8001db8:	2b00      	cmp	r3, #0
 8001dba:	d013      	beq.n	8001de4 <HAL_DMA_Abort+0x108>
    {
       /* Disable DMA All Interrupts  */
      ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT);
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	681b      	ldr	r3, [r3, #0]
 8001dc0:	681a      	ldr	r2, [r3, #0]
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	681b      	ldr	r3, [r3, #0]
 8001dc6:	f022 021e 	bic.w	r2, r2, #30
 8001dca:	601a      	str	r2, [r3, #0]
      ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	681b      	ldr	r3, [r3, #0]
 8001dd0:	695a      	ldr	r2, [r3, #20]
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	681b      	ldr	r3, [r3, #0]
 8001dd6:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8001dda:	615a      	str	r2, [r3, #20]

      enableRegister = (__IO uint32_t *)(&(((DMA_Stream_TypeDef   *)hdma->Instance)->CR));
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	681b      	ldr	r3, [r3, #0]
 8001de0:	617b      	str	r3, [r7, #20]
 8001de2:	e00a      	b.n	8001dfa <HAL_DMA_Abort+0x11e>
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	681b      	ldr	r3, [r3, #0]
 8001de8:	681a      	ldr	r2, [r3, #0]
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	681b      	ldr	r3, [r3, #0]
 8001dee:	f022 020e 	bic.w	r2, r2, #14
 8001df2:	601a      	str	r2, [r3, #0]

      enableRegister = (__IO uint32_t *)(&(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR));
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	681b      	ldr	r3, [r3, #0]
 8001df8:	617b      	str	r3, [r7, #20]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	681b      	ldr	r3, [r3, #0]
 8001dfe:	4a3c      	ldr	r2, [pc, #240]	@ (8001ef0 <HAL_DMA_Abort+0x214>)
 8001e00:	4293      	cmp	r3, r2
 8001e02:	d072      	beq.n	8001eea <HAL_DMA_Abort+0x20e>
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	681b      	ldr	r3, [r3, #0]
 8001e08:	4a3a      	ldr	r2, [pc, #232]	@ (8001ef4 <HAL_DMA_Abort+0x218>)
 8001e0a:	4293      	cmp	r3, r2
 8001e0c:	d06d      	beq.n	8001eea <HAL_DMA_Abort+0x20e>
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	681b      	ldr	r3, [r3, #0]
 8001e12:	4a39      	ldr	r2, [pc, #228]	@ (8001ef8 <HAL_DMA_Abort+0x21c>)
 8001e14:	4293      	cmp	r3, r2
 8001e16:	d068      	beq.n	8001eea <HAL_DMA_Abort+0x20e>
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	681b      	ldr	r3, [r3, #0]
 8001e1c:	4a37      	ldr	r2, [pc, #220]	@ (8001efc <HAL_DMA_Abort+0x220>)
 8001e1e:	4293      	cmp	r3, r2
 8001e20:	d063      	beq.n	8001eea <HAL_DMA_Abort+0x20e>
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	681b      	ldr	r3, [r3, #0]
 8001e26:	4a36      	ldr	r2, [pc, #216]	@ (8001f00 <HAL_DMA_Abort+0x224>)
 8001e28:	4293      	cmp	r3, r2
 8001e2a:	d05e      	beq.n	8001eea <HAL_DMA_Abort+0x20e>
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	681b      	ldr	r3, [r3, #0]
 8001e30:	4a34      	ldr	r2, [pc, #208]	@ (8001f04 <HAL_DMA_Abort+0x228>)
 8001e32:	4293      	cmp	r3, r2
 8001e34:	d059      	beq.n	8001eea <HAL_DMA_Abort+0x20e>
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	681b      	ldr	r3, [r3, #0]
 8001e3a:	4a33      	ldr	r2, [pc, #204]	@ (8001f08 <HAL_DMA_Abort+0x22c>)
 8001e3c:	4293      	cmp	r3, r2
 8001e3e:	d054      	beq.n	8001eea <HAL_DMA_Abort+0x20e>
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	681b      	ldr	r3, [r3, #0]
 8001e44:	4a31      	ldr	r2, [pc, #196]	@ (8001f0c <HAL_DMA_Abort+0x230>)
 8001e46:	4293      	cmp	r3, r2
 8001e48:	d04f      	beq.n	8001eea <HAL_DMA_Abort+0x20e>
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	681b      	ldr	r3, [r3, #0]
 8001e4e:	4a30      	ldr	r2, [pc, #192]	@ (8001f10 <HAL_DMA_Abort+0x234>)
 8001e50:	4293      	cmp	r3, r2
 8001e52:	d04a      	beq.n	8001eea <HAL_DMA_Abort+0x20e>
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	681b      	ldr	r3, [r3, #0]
 8001e58:	4a2e      	ldr	r2, [pc, #184]	@ (8001f14 <HAL_DMA_Abort+0x238>)
 8001e5a:	4293      	cmp	r3, r2
 8001e5c:	d045      	beq.n	8001eea <HAL_DMA_Abort+0x20e>
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	681b      	ldr	r3, [r3, #0]
 8001e62:	4a2d      	ldr	r2, [pc, #180]	@ (8001f18 <HAL_DMA_Abort+0x23c>)
 8001e64:	4293      	cmp	r3, r2
 8001e66:	d040      	beq.n	8001eea <HAL_DMA_Abort+0x20e>
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	681b      	ldr	r3, [r3, #0]
 8001e6c:	4a2b      	ldr	r2, [pc, #172]	@ (8001f1c <HAL_DMA_Abort+0x240>)
 8001e6e:	4293      	cmp	r3, r2
 8001e70:	d03b      	beq.n	8001eea <HAL_DMA_Abort+0x20e>
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	681b      	ldr	r3, [r3, #0]
 8001e76:	4a2a      	ldr	r2, [pc, #168]	@ (8001f20 <HAL_DMA_Abort+0x244>)
 8001e78:	4293      	cmp	r3, r2
 8001e7a:	d036      	beq.n	8001eea <HAL_DMA_Abort+0x20e>
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	681b      	ldr	r3, [r3, #0]
 8001e80:	4a28      	ldr	r2, [pc, #160]	@ (8001f24 <HAL_DMA_Abort+0x248>)
 8001e82:	4293      	cmp	r3, r2
 8001e84:	d031      	beq.n	8001eea <HAL_DMA_Abort+0x20e>
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	681b      	ldr	r3, [r3, #0]
 8001e8a:	4a27      	ldr	r2, [pc, #156]	@ (8001f28 <HAL_DMA_Abort+0x24c>)
 8001e8c:	4293      	cmp	r3, r2
 8001e8e:	d02c      	beq.n	8001eea <HAL_DMA_Abort+0x20e>
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	681b      	ldr	r3, [r3, #0]
 8001e94:	4a25      	ldr	r2, [pc, #148]	@ (8001f2c <HAL_DMA_Abort+0x250>)
 8001e96:	4293      	cmp	r3, r2
 8001e98:	d027      	beq.n	8001eea <HAL_DMA_Abort+0x20e>
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	681b      	ldr	r3, [r3, #0]
 8001e9e:	4a24      	ldr	r2, [pc, #144]	@ (8001f30 <HAL_DMA_Abort+0x254>)
 8001ea0:	4293      	cmp	r3, r2
 8001ea2:	d022      	beq.n	8001eea <HAL_DMA_Abort+0x20e>
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	681b      	ldr	r3, [r3, #0]
 8001ea8:	4a22      	ldr	r2, [pc, #136]	@ (8001f34 <HAL_DMA_Abort+0x258>)
 8001eaa:	4293      	cmp	r3, r2
 8001eac:	d01d      	beq.n	8001eea <HAL_DMA_Abort+0x20e>
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	681b      	ldr	r3, [r3, #0]
 8001eb2:	4a21      	ldr	r2, [pc, #132]	@ (8001f38 <HAL_DMA_Abort+0x25c>)
 8001eb4:	4293      	cmp	r3, r2
 8001eb6:	d018      	beq.n	8001eea <HAL_DMA_Abort+0x20e>
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	681b      	ldr	r3, [r3, #0]
 8001ebc:	4a1f      	ldr	r2, [pc, #124]	@ (8001f3c <HAL_DMA_Abort+0x260>)
 8001ebe:	4293      	cmp	r3, r2
 8001ec0:	d013      	beq.n	8001eea <HAL_DMA_Abort+0x20e>
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	681b      	ldr	r3, [r3, #0]
 8001ec6:	4a1e      	ldr	r2, [pc, #120]	@ (8001f40 <HAL_DMA_Abort+0x264>)
 8001ec8:	4293      	cmp	r3, r2
 8001eca:	d00e      	beq.n	8001eea <HAL_DMA_Abort+0x20e>
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	681b      	ldr	r3, [r3, #0]
 8001ed0:	4a1c      	ldr	r2, [pc, #112]	@ (8001f44 <HAL_DMA_Abort+0x268>)
 8001ed2:	4293      	cmp	r3, r2
 8001ed4:	d009      	beq.n	8001eea <HAL_DMA_Abort+0x20e>
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	681b      	ldr	r3, [r3, #0]
 8001eda:	4a1b      	ldr	r2, [pc, #108]	@ (8001f48 <HAL_DMA_Abort+0x26c>)
 8001edc:	4293      	cmp	r3, r2
 8001ede:	d004      	beq.n	8001eea <HAL_DMA_Abort+0x20e>
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	681b      	ldr	r3, [r3, #0]
 8001ee4:	4a19      	ldr	r2, [pc, #100]	@ (8001f4c <HAL_DMA_Abort+0x270>)
 8001ee6:	4293      	cmp	r3, r2
 8001ee8:	d132      	bne.n	8001f50 <HAL_DMA_Abort+0x274>
 8001eea:	2301      	movs	r3, #1
 8001eec:	e031      	b.n	8001f52 <HAL_DMA_Abort+0x276>
 8001eee:	bf00      	nop
 8001ef0:	40020010 	.word	0x40020010
 8001ef4:	40020028 	.word	0x40020028
 8001ef8:	40020040 	.word	0x40020040
 8001efc:	40020058 	.word	0x40020058
 8001f00:	40020070 	.word	0x40020070
 8001f04:	40020088 	.word	0x40020088
 8001f08:	400200a0 	.word	0x400200a0
 8001f0c:	400200b8 	.word	0x400200b8
 8001f10:	40020410 	.word	0x40020410
 8001f14:	40020428 	.word	0x40020428
 8001f18:	40020440 	.word	0x40020440
 8001f1c:	40020458 	.word	0x40020458
 8001f20:	40020470 	.word	0x40020470
 8001f24:	40020488 	.word	0x40020488
 8001f28:	400204a0 	.word	0x400204a0
 8001f2c:	400204b8 	.word	0x400204b8
 8001f30:	58025408 	.word	0x58025408
 8001f34:	5802541c 	.word	0x5802541c
 8001f38:	58025430 	.word	0x58025430
 8001f3c:	58025444 	.word	0x58025444
 8001f40:	58025458 	.word	0x58025458
 8001f44:	5802546c 	.word	0x5802546c
 8001f48:	58025480 	.word	0x58025480
 8001f4c:	58025494 	.word	0x58025494
 8001f50:	2300      	movs	r3, #0
 8001f52:	2b00      	cmp	r3, #0
 8001f54:	d007      	beq.n	8001f66 <HAL_DMA_Abort+0x28a>
    {
      /* disable the DMAMUX sync overrun IT */
      hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001f5a:	681a      	ldr	r2, [r3, #0]
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001f60:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8001f64:	601a      	str	r2, [r3, #0]
    }

    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	681b      	ldr	r3, [r3, #0]
 8001f6a:	4a6d      	ldr	r2, [pc, #436]	@ (8002120 <HAL_DMA_Abort+0x444>)
 8001f6c:	4293      	cmp	r3, r2
 8001f6e:	d04a      	beq.n	8002006 <HAL_DMA_Abort+0x32a>
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	681b      	ldr	r3, [r3, #0]
 8001f74:	4a6b      	ldr	r2, [pc, #428]	@ (8002124 <HAL_DMA_Abort+0x448>)
 8001f76:	4293      	cmp	r3, r2
 8001f78:	d045      	beq.n	8002006 <HAL_DMA_Abort+0x32a>
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	681b      	ldr	r3, [r3, #0]
 8001f7e:	4a6a      	ldr	r2, [pc, #424]	@ (8002128 <HAL_DMA_Abort+0x44c>)
 8001f80:	4293      	cmp	r3, r2
 8001f82:	d040      	beq.n	8002006 <HAL_DMA_Abort+0x32a>
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	681b      	ldr	r3, [r3, #0]
 8001f88:	4a68      	ldr	r2, [pc, #416]	@ (800212c <HAL_DMA_Abort+0x450>)
 8001f8a:	4293      	cmp	r3, r2
 8001f8c:	d03b      	beq.n	8002006 <HAL_DMA_Abort+0x32a>
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	681b      	ldr	r3, [r3, #0]
 8001f92:	4a67      	ldr	r2, [pc, #412]	@ (8002130 <HAL_DMA_Abort+0x454>)
 8001f94:	4293      	cmp	r3, r2
 8001f96:	d036      	beq.n	8002006 <HAL_DMA_Abort+0x32a>
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	681b      	ldr	r3, [r3, #0]
 8001f9c:	4a65      	ldr	r2, [pc, #404]	@ (8002134 <HAL_DMA_Abort+0x458>)
 8001f9e:	4293      	cmp	r3, r2
 8001fa0:	d031      	beq.n	8002006 <HAL_DMA_Abort+0x32a>
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	681b      	ldr	r3, [r3, #0]
 8001fa6:	4a64      	ldr	r2, [pc, #400]	@ (8002138 <HAL_DMA_Abort+0x45c>)
 8001fa8:	4293      	cmp	r3, r2
 8001faa:	d02c      	beq.n	8002006 <HAL_DMA_Abort+0x32a>
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	681b      	ldr	r3, [r3, #0]
 8001fb0:	4a62      	ldr	r2, [pc, #392]	@ (800213c <HAL_DMA_Abort+0x460>)
 8001fb2:	4293      	cmp	r3, r2
 8001fb4:	d027      	beq.n	8002006 <HAL_DMA_Abort+0x32a>
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	681b      	ldr	r3, [r3, #0]
 8001fba:	4a61      	ldr	r2, [pc, #388]	@ (8002140 <HAL_DMA_Abort+0x464>)
 8001fbc:	4293      	cmp	r3, r2
 8001fbe:	d022      	beq.n	8002006 <HAL_DMA_Abort+0x32a>
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	681b      	ldr	r3, [r3, #0]
 8001fc4:	4a5f      	ldr	r2, [pc, #380]	@ (8002144 <HAL_DMA_Abort+0x468>)
 8001fc6:	4293      	cmp	r3, r2
 8001fc8:	d01d      	beq.n	8002006 <HAL_DMA_Abort+0x32a>
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	681b      	ldr	r3, [r3, #0]
 8001fce:	4a5e      	ldr	r2, [pc, #376]	@ (8002148 <HAL_DMA_Abort+0x46c>)
 8001fd0:	4293      	cmp	r3, r2
 8001fd2:	d018      	beq.n	8002006 <HAL_DMA_Abort+0x32a>
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	681b      	ldr	r3, [r3, #0]
 8001fd8:	4a5c      	ldr	r2, [pc, #368]	@ (800214c <HAL_DMA_Abort+0x470>)
 8001fda:	4293      	cmp	r3, r2
 8001fdc:	d013      	beq.n	8002006 <HAL_DMA_Abort+0x32a>
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	681b      	ldr	r3, [r3, #0]
 8001fe2:	4a5b      	ldr	r2, [pc, #364]	@ (8002150 <HAL_DMA_Abort+0x474>)
 8001fe4:	4293      	cmp	r3, r2
 8001fe6:	d00e      	beq.n	8002006 <HAL_DMA_Abort+0x32a>
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	681b      	ldr	r3, [r3, #0]
 8001fec:	4a59      	ldr	r2, [pc, #356]	@ (8002154 <HAL_DMA_Abort+0x478>)
 8001fee:	4293      	cmp	r3, r2
 8001ff0:	d009      	beq.n	8002006 <HAL_DMA_Abort+0x32a>
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	681b      	ldr	r3, [r3, #0]
 8001ff6:	4a58      	ldr	r2, [pc, #352]	@ (8002158 <HAL_DMA_Abort+0x47c>)
 8001ff8:	4293      	cmp	r3, r2
 8001ffa:	d004      	beq.n	8002006 <HAL_DMA_Abort+0x32a>
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	681b      	ldr	r3, [r3, #0]
 8002000:	4a56      	ldr	r2, [pc, #344]	@ (800215c <HAL_DMA_Abort+0x480>)
 8002002:	4293      	cmp	r3, r2
 8002004:	d108      	bne.n	8002018 <HAL_DMA_Abort+0x33c>
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	681b      	ldr	r3, [r3, #0]
 800200a:	681a      	ldr	r2, [r3, #0]
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	681b      	ldr	r3, [r3, #0]
 8002010:	f022 0201 	bic.w	r2, r2, #1
 8002014:	601a      	str	r2, [r3, #0]
 8002016:	e007      	b.n	8002028 <HAL_DMA_Abort+0x34c>
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	681b      	ldr	r3, [r3, #0]
 800201c:	681a      	ldr	r2, [r3, #0]
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	681b      	ldr	r3, [r3, #0]
 8002022:	f022 0201 	bic.w	r2, r2, #1
 8002026:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 8002028:	e013      	b.n	8002052 <HAL_DMA_Abort+0x376>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800202a:	f7ff fcc3 	bl	80019b4 <HAL_GetTick>
 800202e:	4602      	mov	r2, r0
 8002030:	693b      	ldr	r3, [r7, #16]
 8002032:	1ad3      	subs	r3, r2, r3
 8002034:	2b05      	cmp	r3, #5
 8002036:	d90c      	bls.n	8002052 <HAL_DMA_Abort+0x376>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	2220      	movs	r2, #32
 800203c:	655a      	str	r2, [r3, #84]	@ 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	2203      	movs	r2, #3
 8002042:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	2200      	movs	r2, #0
 800204a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        return HAL_ERROR;
 800204e:	2301      	movs	r3, #1
 8002050:	e12d      	b.n	80022ae <HAL_DMA_Abort+0x5d2>
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 8002052:	697b      	ldr	r3, [r7, #20]
 8002054:	681b      	ldr	r3, [r3, #0]
 8002056:	f003 0301 	and.w	r3, r3, #1
 800205a:	2b00      	cmp	r3, #0
 800205c:	d1e5      	bne.n	800202a <HAL_DMA_Abort+0x34e>
      }
    }

    /* Clear all interrupt flags at correct offset within the register */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	681b      	ldr	r3, [r3, #0]
 8002062:	4a2f      	ldr	r2, [pc, #188]	@ (8002120 <HAL_DMA_Abort+0x444>)
 8002064:	4293      	cmp	r3, r2
 8002066:	d04a      	beq.n	80020fe <HAL_DMA_Abort+0x422>
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	681b      	ldr	r3, [r3, #0]
 800206c:	4a2d      	ldr	r2, [pc, #180]	@ (8002124 <HAL_DMA_Abort+0x448>)
 800206e:	4293      	cmp	r3, r2
 8002070:	d045      	beq.n	80020fe <HAL_DMA_Abort+0x422>
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	681b      	ldr	r3, [r3, #0]
 8002076:	4a2c      	ldr	r2, [pc, #176]	@ (8002128 <HAL_DMA_Abort+0x44c>)
 8002078:	4293      	cmp	r3, r2
 800207a:	d040      	beq.n	80020fe <HAL_DMA_Abort+0x422>
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	681b      	ldr	r3, [r3, #0]
 8002080:	4a2a      	ldr	r2, [pc, #168]	@ (800212c <HAL_DMA_Abort+0x450>)
 8002082:	4293      	cmp	r3, r2
 8002084:	d03b      	beq.n	80020fe <HAL_DMA_Abort+0x422>
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	681b      	ldr	r3, [r3, #0]
 800208a:	4a29      	ldr	r2, [pc, #164]	@ (8002130 <HAL_DMA_Abort+0x454>)
 800208c:	4293      	cmp	r3, r2
 800208e:	d036      	beq.n	80020fe <HAL_DMA_Abort+0x422>
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	681b      	ldr	r3, [r3, #0]
 8002094:	4a27      	ldr	r2, [pc, #156]	@ (8002134 <HAL_DMA_Abort+0x458>)
 8002096:	4293      	cmp	r3, r2
 8002098:	d031      	beq.n	80020fe <HAL_DMA_Abort+0x422>
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	681b      	ldr	r3, [r3, #0]
 800209e:	4a26      	ldr	r2, [pc, #152]	@ (8002138 <HAL_DMA_Abort+0x45c>)
 80020a0:	4293      	cmp	r3, r2
 80020a2:	d02c      	beq.n	80020fe <HAL_DMA_Abort+0x422>
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	681b      	ldr	r3, [r3, #0]
 80020a8:	4a24      	ldr	r2, [pc, #144]	@ (800213c <HAL_DMA_Abort+0x460>)
 80020aa:	4293      	cmp	r3, r2
 80020ac:	d027      	beq.n	80020fe <HAL_DMA_Abort+0x422>
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	681b      	ldr	r3, [r3, #0]
 80020b2:	4a23      	ldr	r2, [pc, #140]	@ (8002140 <HAL_DMA_Abort+0x464>)
 80020b4:	4293      	cmp	r3, r2
 80020b6:	d022      	beq.n	80020fe <HAL_DMA_Abort+0x422>
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	681b      	ldr	r3, [r3, #0]
 80020bc:	4a21      	ldr	r2, [pc, #132]	@ (8002144 <HAL_DMA_Abort+0x468>)
 80020be:	4293      	cmp	r3, r2
 80020c0:	d01d      	beq.n	80020fe <HAL_DMA_Abort+0x422>
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	681b      	ldr	r3, [r3, #0]
 80020c6:	4a20      	ldr	r2, [pc, #128]	@ (8002148 <HAL_DMA_Abort+0x46c>)
 80020c8:	4293      	cmp	r3, r2
 80020ca:	d018      	beq.n	80020fe <HAL_DMA_Abort+0x422>
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	681b      	ldr	r3, [r3, #0]
 80020d0:	4a1e      	ldr	r2, [pc, #120]	@ (800214c <HAL_DMA_Abort+0x470>)
 80020d2:	4293      	cmp	r3, r2
 80020d4:	d013      	beq.n	80020fe <HAL_DMA_Abort+0x422>
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	681b      	ldr	r3, [r3, #0]
 80020da:	4a1d      	ldr	r2, [pc, #116]	@ (8002150 <HAL_DMA_Abort+0x474>)
 80020dc:	4293      	cmp	r3, r2
 80020de:	d00e      	beq.n	80020fe <HAL_DMA_Abort+0x422>
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	681b      	ldr	r3, [r3, #0]
 80020e4:	4a1b      	ldr	r2, [pc, #108]	@ (8002154 <HAL_DMA_Abort+0x478>)
 80020e6:	4293      	cmp	r3, r2
 80020e8:	d009      	beq.n	80020fe <HAL_DMA_Abort+0x422>
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	681b      	ldr	r3, [r3, #0]
 80020ee:	4a1a      	ldr	r2, [pc, #104]	@ (8002158 <HAL_DMA_Abort+0x47c>)
 80020f0:	4293      	cmp	r3, r2
 80020f2:	d004      	beq.n	80020fe <HAL_DMA_Abort+0x422>
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	681b      	ldr	r3, [r3, #0]
 80020f8:	4a18      	ldr	r2, [pc, #96]	@ (800215c <HAL_DMA_Abort+0x480>)
 80020fa:	4293      	cmp	r3, r2
 80020fc:	d101      	bne.n	8002102 <HAL_DMA_Abort+0x426>
 80020fe:	2301      	movs	r3, #1
 8002100:	e000      	b.n	8002104 <HAL_DMA_Abort+0x428>
 8002102:	2300      	movs	r3, #0
 8002104:	2b00      	cmp	r3, #0
 8002106:	d02b      	beq.n	8002160 <HAL_DMA_Abort+0x484>
    {
      regs_dma = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800210c:	60bb      	str	r3, [r7, #8]
      regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002112:	f003 031f 	and.w	r3, r3, #31
 8002116:	223f      	movs	r2, #63	@ 0x3f
 8002118:	409a      	lsls	r2, r3
 800211a:	68bb      	ldr	r3, [r7, #8]
 800211c:	609a      	str	r2, [r3, #8]
 800211e:	e02a      	b.n	8002176 <HAL_DMA_Abort+0x49a>
 8002120:	40020010 	.word	0x40020010
 8002124:	40020028 	.word	0x40020028
 8002128:	40020040 	.word	0x40020040
 800212c:	40020058 	.word	0x40020058
 8002130:	40020070 	.word	0x40020070
 8002134:	40020088 	.word	0x40020088
 8002138:	400200a0 	.word	0x400200a0
 800213c:	400200b8 	.word	0x400200b8
 8002140:	40020410 	.word	0x40020410
 8002144:	40020428 	.word	0x40020428
 8002148:	40020440 	.word	0x40020440
 800214c:	40020458 	.word	0x40020458
 8002150:	40020470 	.word	0x40020470
 8002154:	40020488 	.word	0x40020488
 8002158:	400204a0 	.word	0x400204a0
 800215c:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002164:	60fb      	str	r3, [r7, #12]
      regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800216a:	f003 031f 	and.w	r3, r3, #31
 800216e:	2201      	movs	r2, #1
 8002170:	409a      	lsls	r2, r3
 8002172:	68fb      	ldr	r3, [r7, #12]
 8002174:	605a      	str	r2, [r3, #4]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	681b      	ldr	r3, [r3, #0]
 800217a:	4a4f      	ldr	r2, [pc, #316]	@ (80022b8 <HAL_DMA_Abort+0x5dc>)
 800217c:	4293      	cmp	r3, r2
 800217e:	d072      	beq.n	8002266 <HAL_DMA_Abort+0x58a>
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	681b      	ldr	r3, [r3, #0]
 8002184:	4a4d      	ldr	r2, [pc, #308]	@ (80022bc <HAL_DMA_Abort+0x5e0>)
 8002186:	4293      	cmp	r3, r2
 8002188:	d06d      	beq.n	8002266 <HAL_DMA_Abort+0x58a>
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	681b      	ldr	r3, [r3, #0]
 800218e:	4a4c      	ldr	r2, [pc, #304]	@ (80022c0 <HAL_DMA_Abort+0x5e4>)
 8002190:	4293      	cmp	r3, r2
 8002192:	d068      	beq.n	8002266 <HAL_DMA_Abort+0x58a>
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	681b      	ldr	r3, [r3, #0]
 8002198:	4a4a      	ldr	r2, [pc, #296]	@ (80022c4 <HAL_DMA_Abort+0x5e8>)
 800219a:	4293      	cmp	r3, r2
 800219c:	d063      	beq.n	8002266 <HAL_DMA_Abort+0x58a>
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	681b      	ldr	r3, [r3, #0]
 80021a2:	4a49      	ldr	r2, [pc, #292]	@ (80022c8 <HAL_DMA_Abort+0x5ec>)
 80021a4:	4293      	cmp	r3, r2
 80021a6:	d05e      	beq.n	8002266 <HAL_DMA_Abort+0x58a>
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	681b      	ldr	r3, [r3, #0]
 80021ac:	4a47      	ldr	r2, [pc, #284]	@ (80022cc <HAL_DMA_Abort+0x5f0>)
 80021ae:	4293      	cmp	r3, r2
 80021b0:	d059      	beq.n	8002266 <HAL_DMA_Abort+0x58a>
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	681b      	ldr	r3, [r3, #0]
 80021b6:	4a46      	ldr	r2, [pc, #280]	@ (80022d0 <HAL_DMA_Abort+0x5f4>)
 80021b8:	4293      	cmp	r3, r2
 80021ba:	d054      	beq.n	8002266 <HAL_DMA_Abort+0x58a>
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	681b      	ldr	r3, [r3, #0]
 80021c0:	4a44      	ldr	r2, [pc, #272]	@ (80022d4 <HAL_DMA_Abort+0x5f8>)
 80021c2:	4293      	cmp	r3, r2
 80021c4:	d04f      	beq.n	8002266 <HAL_DMA_Abort+0x58a>
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	681b      	ldr	r3, [r3, #0]
 80021ca:	4a43      	ldr	r2, [pc, #268]	@ (80022d8 <HAL_DMA_Abort+0x5fc>)
 80021cc:	4293      	cmp	r3, r2
 80021ce:	d04a      	beq.n	8002266 <HAL_DMA_Abort+0x58a>
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	681b      	ldr	r3, [r3, #0]
 80021d4:	4a41      	ldr	r2, [pc, #260]	@ (80022dc <HAL_DMA_Abort+0x600>)
 80021d6:	4293      	cmp	r3, r2
 80021d8:	d045      	beq.n	8002266 <HAL_DMA_Abort+0x58a>
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	681b      	ldr	r3, [r3, #0]
 80021de:	4a40      	ldr	r2, [pc, #256]	@ (80022e0 <HAL_DMA_Abort+0x604>)
 80021e0:	4293      	cmp	r3, r2
 80021e2:	d040      	beq.n	8002266 <HAL_DMA_Abort+0x58a>
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	681b      	ldr	r3, [r3, #0]
 80021e8:	4a3e      	ldr	r2, [pc, #248]	@ (80022e4 <HAL_DMA_Abort+0x608>)
 80021ea:	4293      	cmp	r3, r2
 80021ec:	d03b      	beq.n	8002266 <HAL_DMA_Abort+0x58a>
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	681b      	ldr	r3, [r3, #0]
 80021f2:	4a3d      	ldr	r2, [pc, #244]	@ (80022e8 <HAL_DMA_Abort+0x60c>)
 80021f4:	4293      	cmp	r3, r2
 80021f6:	d036      	beq.n	8002266 <HAL_DMA_Abort+0x58a>
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	681b      	ldr	r3, [r3, #0]
 80021fc:	4a3b      	ldr	r2, [pc, #236]	@ (80022ec <HAL_DMA_Abort+0x610>)
 80021fe:	4293      	cmp	r3, r2
 8002200:	d031      	beq.n	8002266 <HAL_DMA_Abort+0x58a>
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	681b      	ldr	r3, [r3, #0]
 8002206:	4a3a      	ldr	r2, [pc, #232]	@ (80022f0 <HAL_DMA_Abort+0x614>)
 8002208:	4293      	cmp	r3, r2
 800220a:	d02c      	beq.n	8002266 <HAL_DMA_Abort+0x58a>
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	681b      	ldr	r3, [r3, #0]
 8002210:	4a38      	ldr	r2, [pc, #224]	@ (80022f4 <HAL_DMA_Abort+0x618>)
 8002212:	4293      	cmp	r3, r2
 8002214:	d027      	beq.n	8002266 <HAL_DMA_Abort+0x58a>
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	681b      	ldr	r3, [r3, #0]
 800221a:	4a37      	ldr	r2, [pc, #220]	@ (80022f8 <HAL_DMA_Abort+0x61c>)
 800221c:	4293      	cmp	r3, r2
 800221e:	d022      	beq.n	8002266 <HAL_DMA_Abort+0x58a>
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	681b      	ldr	r3, [r3, #0]
 8002224:	4a35      	ldr	r2, [pc, #212]	@ (80022fc <HAL_DMA_Abort+0x620>)
 8002226:	4293      	cmp	r3, r2
 8002228:	d01d      	beq.n	8002266 <HAL_DMA_Abort+0x58a>
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	681b      	ldr	r3, [r3, #0]
 800222e:	4a34      	ldr	r2, [pc, #208]	@ (8002300 <HAL_DMA_Abort+0x624>)
 8002230:	4293      	cmp	r3, r2
 8002232:	d018      	beq.n	8002266 <HAL_DMA_Abort+0x58a>
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	681b      	ldr	r3, [r3, #0]
 8002238:	4a32      	ldr	r2, [pc, #200]	@ (8002304 <HAL_DMA_Abort+0x628>)
 800223a:	4293      	cmp	r3, r2
 800223c:	d013      	beq.n	8002266 <HAL_DMA_Abort+0x58a>
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	681b      	ldr	r3, [r3, #0]
 8002242:	4a31      	ldr	r2, [pc, #196]	@ (8002308 <HAL_DMA_Abort+0x62c>)
 8002244:	4293      	cmp	r3, r2
 8002246:	d00e      	beq.n	8002266 <HAL_DMA_Abort+0x58a>
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	681b      	ldr	r3, [r3, #0]
 800224c:	4a2f      	ldr	r2, [pc, #188]	@ (800230c <HAL_DMA_Abort+0x630>)
 800224e:	4293      	cmp	r3, r2
 8002250:	d009      	beq.n	8002266 <HAL_DMA_Abort+0x58a>
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	681b      	ldr	r3, [r3, #0]
 8002256:	4a2e      	ldr	r2, [pc, #184]	@ (8002310 <HAL_DMA_Abort+0x634>)
 8002258:	4293      	cmp	r3, r2
 800225a:	d004      	beq.n	8002266 <HAL_DMA_Abort+0x58a>
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	681b      	ldr	r3, [r3, #0]
 8002260:	4a2c      	ldr	r2, [pc, #176]	@ (8002314 <HAL_DMA_Abort+0x638>)
 8002262:	4293      	cmp	r3, r2
 8002264:	d101      	bne.n	800226a <HAL_DMA_Abort+0x58e>
 8002266:	2301      	movs	r3, #1
 8002268:	e000      	b.n	800226c <HAL_DMA_Abort+0x590>
 800226a:	2300      	movs	r3, #0
 800226c:	2b00      	cmp	r3, #0
 800226e:	d015      	beq.n	800229c <HAL_DMA_Abort+0x5c0>
    {
      /* Clear the DMAMUX synchro overrun flag */
      hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8002274:	687a      	ldr	r2, [r7, #4]
 8002276:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 8002278:	605a      	str	r2, [r3, #4]

      if(hdma->DMAmuxRequestGen != 0U)
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800227e:	2b00      	cmp	r3, #0
 8002280:	d00c      	beq.n	800229c <HAL_DMA_Abort+0x5c0>
      {
        /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT */
        /* disable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002286:	681a      	ldr	r2, [r3, #0]
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800228c:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8002290:	601a      	str	r2, [r3, #0]

        /* Clear the DMAMUX request generator overrun flag */
        hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002296:	687a      	ldr	r2, [r7, #4]
 8002298:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 800229a:	605a      	str	r2, [r3, #4]
      }
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	2201      	movs	r2, #1
 80022a0:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	2200      	movs	r2, #0
 80022a8:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }

  return HAL_OK;
 80022ac:	2300      	movs	r3, #0
}
 80022ae:	4618      	mov	r0, r3
 80022b0:	3718      	adds	r7, #24
 80022b2:	46bd      	mov	sp, r7
 80022b4:	bd80      	pop	{r7, pc}
 80022b6:	bf00      	nop
 80022b8:	40020010 	.word	0x40020010
 80022bc:	40020028 	.word	0x40020028
 80022c0:	40020040 	.word	0x40020040
 80022c4:	40020058 	.word	0x40020058
 80022c8:	40020070 	.word	0x40020070
 80022cc:	40020088 	.word	0x40020088
 80022d0:	400200a0 	.word	0x400200a0
 80022d4:	400200b8 	.word	0x400200b8
 80022d8:	40020410 	.word	0x40020410
 80022dc:	40020428 	.word	0x40020428
 80022e0:	40020440 	.word	0x40020440
 80022e4:	40020458 	.word	0x40020458
 80022e8:	40020470 	.word	0x40020470
 80022ec:	40020488 	.word	0x40020488
 80022f0:	400204a0 	.word	0x400204a0
 80022f4:	400204b8 	.word	0x400204b8
 80022f8:	58025408 	.word	0x58025408
 80022fc:	5802541c 	.word	0x5802541c
 8002300:	58025430 	.word	0x58025430
 8002304:	58025444 	.word	0x58025444
 8002308:	58025458 	.word	0x58025458
 800230c:	5802546c 	.word	0x5802546c
 8002310:	58025480 	.word	0x58025480
 8002314:	58025494 	.word	0x58025494

08002318 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002318:	b580      	push	{r7, lr}
 800231a:	b084      	sub	sp, #16
 800231c:	af00      	add	r7, sp, #0
 800231e:	6078      	str	r0, [r7, #4]
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	2b00      	cmp	r3, #0
 8002324:	d101      	bne.n	800232a <HAL_DMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
 8002326:	2301      	movs	r3, #1
 8002328:	e237      	b.n	800279a <HAL_DMA_Abort_IT+0x482>
  }

  if(hdma->State != HAL_DMA_STATE_BUSY)
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8002330:	b2db      	uxtb	r3, r3
 8002332:	2b02      	cmp	r3, #2
 8002334:	d004      	beq.n	8002340 <HAL_DMA_Abort_IT+0x28>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	2280      	movs	r2, #128	@ 0x80
 800233a:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 800233c:	2301      	movs	r3, #1
 800233e:	e22c      	b.n	800279a <HAL_DMA_Abort_IT+0x482>
  }
  else
  {
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	681b      	ldr	r3, [r3, #0]
 8002344:	4a5c      	ldr	r2, [pc, #368]	@ (80024b8 <HAL_DMA_Abort_IT+0x1a0>)
 8002346:	4293      	cmp	r3, r2
 8002348:	d04a      	beq.n	80023e0 <HAL_DMA_Abort_IT+0xc8>
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	681b      	ldr	r3, [r3, #0]
 800234e:	4a5b      	ldr	r2, [pc, #364]	@ (80024bc <HAL_DMA_Abort_IT+0x1a4>)
 8002350:	4293      	cmp	r3, r2
 8002352:	d045      	beq.n	80023e0 <HAL_DMA_Abort_IT+0xc8>
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	681b      	ldr	r3, [r3, #0]
 8002358:	4a59      	ldr	r2, [pc, #356]	@ (80024c0 <HAL_DMA_Abort_IT+0x1a8>)
 800235a:	4293      	cmp	r3, r2
 800235c:	d040      	beq.n	80023e0 <HAL_DMA_Abort_IT+0xc8>
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	681b      	ldr	r3, [r3, #0]
 8002362:	4a58      	ldr	r2, [pc, #352]	@ (80024c4 <HAL_DMA_Abort_IT+0x1ac>)
 8002364:	4293      	cmp	r3, r2
 8002366:	d03b      	beq.n	80023e0 <HAL_DMA_Abort_IT+0xc8>
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	681b      	ldr	r3, [r3, #0]
 800236c:	4a56      	ldr	r2, [pc, #344]	@ (80024c8 <HAL_DMA_Abort_IT+0x1b0>)
 800236e:	4293      	cmp	r3, r2
 8002370:	d036      	beq.n	80023e0 <HAL_DMA_Abort_IT+0xc8>
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	681b      	ldr	r3, [r3, #0]
 8002376:	4a55      	ldr	r2, [pc, #340]	@ (80024cc <HAL_DMA_Abort_IT+0x1b4>)
 8002378:	4293      	cmp	r3, r2
 800237a:	d031      	beq.n	80023e0 <HAL_DMA_Abort_IT+0xc8>
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	681b      	ldr	r3, [r3, #0]
 8002380:	4a53      	ldr	r2, [pc, #332]	@ (80024d0 <HAL_DMA_Abort_IT+0x1b8>)
 8002382:	4293      	cmp	r3, r2
 8002384:	d02c      	beq.n	80023e0 <HAL_DMA_Abort_IT+0xc8>
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	681b      	ldr	r3, [r3, #0]
 800238a:	4a52      	ldr	r2, [pc, #328]	@ (80024d4 <HAL_DMA_Abort_IT+0x1bc>)
 800238c:	4293      	cmp	r3, r2
 800238e:	d027      	beq.n	80023e0 <HAL_DMA_Abort_IT+0xc8>
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	681b      	ldr	r3, [r3, #0]
 8002394:	4a50      	ldr	r2, [pc, #320]	@ (80024d8 <HAL_DMA_Abort_IT+0x1c0>)
 8002396:	4293      	cmp	r3, r2
 8002398:	d022      	beq.n	80023e0 <HAL_DMA_Abort_IT+0xc8>
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	681b      	ldr	r3, [r3, #0]
 800239e:	4a4f      	ldr	r2, [pc, #316]	@ (80024dc <HAL_DMA_Abort_IT+0x1c4>)
 80023a0:	4293      	cmp	r3, r2
 80023a2:	d01d      	beq.n	80023e0 <HAL_DMA_Abort_IT+0xc8>
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	681b      	ldr	r3, [r3, #0]
 80023a8:	4a4d      	ldr	r2, [pc, #308]	@ (80024e0 <HAL_DMA_Abort_IT+0x1c8>)
 80023aa:	4293      	cmp	r3, r2
 80023ac:	d018      	beq.n	80023e0 <HAL_DMA_Abort_IT+0xc8>
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	681b      	ldr	r3, [r3, #0]
 80023b2:	4a4c      	ldr	r2, [pc, #304]	@ (80024e4 <HAL_DMA_Abort_IT+0x1cc>)
 80023b4:	4293      	cmp	r3, r2
 80023b6:	d013      	beq.n	80023e0 <HAL_DMA_Abort_IT+0xc8>
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	681b      	ldr	r3, [r3, #0]
 80023bc:	4a4a      	ldr	r2, [pc, #296]	@ (80024e8 <HAL_DMA_Abort_IT+0x1d0>)
 80023be:	4293      	cmp	r3, r2
 80023c0:	d00e      	beq.n	80023e0 <HAL_DMA_Abort_IT+0xc8>
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	681b      	ldr	r3, [r3, #0]
 80023c6:	4a49      	ldr	r2, [pc, #292]	@ (80024ec <HAL_DMA_Abort_IT+0x1d4>)
 80023c8:	4293      	cmp	r3, r2
 80023ca:	d009      	beq.n	80023e0 <HAL_DMA_Abort_IT+0xc8>
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	681b      	ldr	r3, [r3, #0]
 80023d0:	4a47      	ldr	r2, [pc, #284]	@ (80024f0 <HAL_DMA_Abort_IT+0x1d8>)
 80023d2:	4293      	cmp	r3, r2
 80023d4:	d004      	beq.n	80023e0 <HAL_DMA_Abort_IT+0xc8>
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	681b      	ldr	r3, [r3, #0]
 80023da:	4a46      	ldr	r2, [pc, #280]	@ (80024f4 <HAL_DMA_Abort_IT+0x1dc>)
 80023dc:	4293      	cmp	r3, r2
 80023de:	d101      	bne.n	80023e4 <HAL_DMA_Abort_IT+0xcc>
 80023e0:	2301      	movs	r3, #1
 80023e2:	e000      	b.n	80023e6 <HAL_DMA_Abort_IT+0xce>
 80023e4:	2300      	movs	r3, #0
 80023e6:	2b00      	cmp	r3, #0
 80023e8:	f000 8086 	beq.w	80024f8 <HAL_DMA_Abort_IT+0x1e0>
    {
      /* Set Abort State  */
      hdma->State = HAL_DMA_STATE_ABORT;
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	2204      	movs	r2, #4
 80023f0:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	681b      	ldr	r3, [r3, #0]
 80023f8:	4a2f      	ldr	r2, [pc, #188]	@ (80024b8 <HAL_DMA_Abort_IT+0x1a0>)
 80023fa:	4293      	cmp	r3, r2
 80023fc:	d04a      	beq.n	8002494 <HAL_DMA_Abort_IT+0x17c>
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	681b      	ldr	r3, [r3, #0]
 8002402:	4a2e      	ldr	r2, [pc, #184]	@ (80024bc <HAL_DMA_Abort_IT+0x1a4>)
 8002404:	4293      	cmp	r3, r2
 8002406:	d045      	beq.n	8002494 <HAL_DMA_Abort_IT+0x17c>
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	681b      	ldr	r3, [r3, #0]
 800240c:	4a2c      	ldr	r2, [pc, #176]	@ (80024c0 <HAL_DMA_Abort_IT+0x1a8>)
 800240e:	4293      	cmp	r3, r2
 8002410:	d040      	beq.n	8002494 <HAL_DMA_Abort_IT+0x17c>
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	681b      	ldr	r3, [r3, #0]
 8002416:	4a2b      	ldr	r2, [pc, #172]	@ (80024c4 <HAL_DMA_Abort_IT+0x1ac>)
 8002418:	4293      	cmp	r3, r2
 800241a:	d03b      	beq.n	8002494 <HAL_DMA_Abort_IT+0x17c>
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	681b      	ldr	r3, [r3, #0]
 8002420:	4a29      	ldr	r2, [pc, #164]	@ (80024c8 <HAL_DMA_Abort_IT+0x1b0>)
 8002422:	4293      	cmp	r3, r2
 8002424:	d036      	beq.n	8002494 <HAL_DMA_Abort_IT+0x17c>
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	681b      	ldr	r3, [r3, #0]
 800242a:	4a28      	ldr	r2, [pc, #160]	@ (80024cc <HAL_DMA_Abort_IT+0x1b4>)
 800242c:	4293      	cmp	r3, r2
 800242e:	d031      	beq.n	8002494 <HAL_DMA_Abort_IT+0x17c>
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	681b      	ldr	r3, [r3, #0]
 8002434:	4a26      	ldr	r2, [pc, #152]	@ (80024d0 <HAL_DMA_Abort_IT+0x1b8>)
 8002436:	4293      	cmp	r3, r2
 8002438:	d02c      	beq.n	8002494 <HAL_DMA_Abort_IT+0x17c>
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	681b      	ldr	r3, [r3, #0]
 800243e:	4a25      	ldr	r2, [pc, #148]	@ (80024d4 <HAL_DMA_Abort_IT+0x1bc>)
 8002440:	4293      	cmp	r3, r2
 8002442:	d027      	beq.n	8002494 <HAL_DMA_Abort_IT+0x17c>
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	681b      	ldr	r3, [r3, #0]
 8002448:	4a23      	ldr	r2, [pc, #140]	@ (80024d8 <HAL_DMA_Abort_IT+0x1c0>)
 800244a:	4293      	cmp	r3, r2
 800244c:	d022      	beq.n	8002494 <HAL_DMA_Abort_IT+0x17c>
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	681b      	ldr	r3, [r3, #0]
 8002452:	4a22      	ldr	r2, [pc, #136]	@ (80024dc <HAL_DMA_Abort_IT+0x1c4>)
 8002454:	4293      	cmp	r3, r2
 8002456:	d01d      	beq.n	8002494 <HAL_DMA_Abort_IT+0x17c>
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	681b      	ldr	r3, [r3, #0]
 800245c:	4a20      	ldr	r2, [pc, #128]	@ (80024e0 <HAL_DMA_Abort_IT+0x1c8>)
 800245e:	4293      	cmp	r3, r2
 8002460:	d018      	beq.n	8002494 <HAL_DMA_Abort_IT+0x17c>
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	681b      	ldr	r3, [r3, #0]
 8002466:	4a1f      	ldr	r2, [pc, #124]	@ (80024e4 <HAL_DMA_Abort_IT+0x1cc>)
 8002468:	4293      	cmp	r3, r2
 800246a:	d013      	beq.n	8002494 <HAL_DMA_Abort_IT+0x17c>
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	681b      	ldr	r3, [r3, #0]
 8002470:	4a1d      	ldr	r2, [pc, #116]	@ (80024e8 <HAL_DMA_Abort_IT+0x1d0>)
 8002472:	4293      	cmp	r3, r2
 8002474:	d00e      	beq.n	8002494 <HAL_DMA_Abort_IT+0x17c>
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	681b      	ldr	r3, [r3, #0]
 800247a:	4a1c      	ldr	r2, [pc, #112]	@ (80024ec <HAL_DMA_Abort_IT+0x1d4>)
 800247c:	4293      	cmp	r3, r2
 800247e:	d009      	beq.n	8002494 <HAL_DMA_Abort_IT+0x17c>
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	681b      	ldr	r3, [r3, #0]
 8002484:	4a1a      	ldr	r2, [pc, #104]	@ (80024f0 <HAL_DMA_Abort_IT+0x1d8>)
 8002486:	4293      	cmp	r3, r2
 8002488:	d004      	beq.n	8002494 <HAL_DMA_Abort_IT+0x17c>
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	681b      	ldr	r3, [r3, #0]
 800248e:	4a19      	ldr	r2, [pc, #100]	@ (80024f4 <HAL_DMA_Abort_IT+0x1dc>)
 8002490:	4293      	cmp	r3, r2
 8002492:	d108      	bne.n	80024a6 <HAL_DMA_Abort_IT+0x18e>
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	681b      	ldr	r3, [r3, #0]
 8002498:	681a      	ldr	r2, [r3, #0]
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	681b      	ldr	r3, [r3, #0]
 800249e:	f022 0201 	bic.w	r2, r2, #1
 80024a2:	601a      	str	r2, [r3, #0]
 80024a4:	e178      	b.n	8002798 <HAL_DMA_Abort_IT+0x480>
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	681b      	ldr	r3, [r3, #0]
 80024aa:	681a      	ldr	r2, [r3, #0]
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	681b      	ldr	r3, [r3, #0]
 80024b0:	f022 0201 	bic.w	r2, r2, #1
 80024b4:	601a      	str	r2, [r3, #0]
 80024b6:	e16f      	b.n	8002798 <HAL_DMA_Abort_IT+0x480>
 80024b8:	40020010 	.word	0x40020010
 80024bc:	40020028 	.word	0x40020028
 80024c0:	40020040 	.word	0x40020040
 80024c4:	40020058 	.word	0x40020058
 80024c8:	40020070 	.word	0x40020070
 80024cc:	40020088 	.word	0x40020088
 80024d0:	400200a0 	.word	0x400200a0
 80024d4:	400200b8 	.word	0x400200b8
 80024d8:	40020410 	.word	0x40020410
 80024dc:	40020428 	.word	0x40020428
 80024e0:	40020440 	.word	0x40020440
 80024e4:	40020458 	.word	0x40020458
 80024e8:	40020470 	.word	0x40020470
 80024ec:	40020488 	.word	0x40020488
 80024f0:	400204a0 	.word	0x400204a0
 80024f4:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts  */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	681b      	ldr	r3, [r3, #0]
 80024fc:	681a      	ldr	r2, [r3, #0]
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	681b      	ldr	r3, [r3, #0]
 8002502:	f022 020e 	bic.w	r2, r2, #14
 8002506:	601a      	str	r2, [r3, #0]

      /* Disable the channel */
      __HAL_DMA_DISABLE(hdma);
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	681b      	ldr	r3, [r3, #0]
 800250c:	4a6c      	ldr	r2, [pc, #432]	@ (80026c0 <HAL_DMA_Abort_IT+0x3a8>)
 800250e:	4293      	cmp	r3, r2
 8002510:	d04a      	beq.n	80025a8 <HAL_DMA_Abort_IT+0x290>
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	681b      	ldr	r3, [r3, #0]
 8002516:	4a6b      	ldr	r2, [pc, #428]	@ (80026c4 <HAL_DMA_Abort_IT+0x3ac>)
 8002518:	4293      	cmp	r3, r2
 800251a:	d045      	beq.n	80025a8 <HAL_DMA_Abort_IT+0x290>
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	681b      	ldr	r3, [r3, #0]
 8002520:	4a69      	ldr	r2, [pc, #420]	@ (80026c8 <HAL_DMA_Abort_IT+0x3b0>)
 8002522:	4293      	cmp	r3, r2
 8002524:	d040      	beq.n	80025a8 <HAL_DMA_Abort_IT+0x290>
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	681b      	ldr	r3, [r3, #0]
 800252a:	4a68      	ldr	r2, [pc, #416]	@ (80026cc <HAL_DMA_Abort_IT+0x3b4>)
 800252c:	4293      	cmp	r3, r2
 800252e:	d03b      	beq.n	80025a8 <HAL_DMA_Abort_IT+0x290>
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	681b      	ldr	r3, [r3, #0]
 8002534:	4a66      	ldr	r2, [pc, #408]	@ (80026d0 <HAL_DMA_Abort_IT+0x3b8>)
 8002536:	4293      	cmp	r3, r2
 8002538:	d036      	beq.n	80025a8 <HAL_DMA_Abort_IT+0x290>
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	681b      	ldr	r3, [r3, #0]
 800253e:	4a65      	ldr	r2, [pc, #404]	@ (80026d4 <HAL_DMA_Abort_IT+0x3bc>)
 8002540:	4293      	cmp	r3, r2
 8002542:	d031      	beq.n	80025a8 <HAL_DMA_Abort_IT+0x290>
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	681b      	ldr	r3, [r3, #0]
 8002548:	4a63      	ldr	r2, [pc, #396]	@ (80026d8 <HAL_DMA_Abort_IT+0x3c0>)
 800254a:	4293      	cmp	r3, r2
 800254c:	d02c      	beq.n	80025a8 <HAL_DMA_Abort_IT+0x290>
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	681b      	ldr	r3, [r3, #0]
 8002552:	4a62      	ldr	r2, [pc, #392]	@ (80026dc <HAL_DMA_Abort_IT+0x3c4>)
 8002554:	4293      	cmp	r3, r2
 8002556:	d027      	beq.n	80025a8 <HAL_DMA_Abort_IT+0x290>
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	681b      	ldr	r3, [r3, #0]
 800255c:	4a60      	ldr	r2, [pc, #384]	@ (80026e0 <HAL_DMA_Abort_IT+0x3c8>)
 800255e:	4293      	cmp	r3, r2
 8002560:	d022      	beq.n	80025a8 <HAL_DMA_Abort_IT+0x290>
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	681b      	ldr	r3, [r3, #0]
 8002566:	4a5f      	ldr	r2, [pc, #380]	@ (80026e4 <HAL_DMA_Abort_IT+0x3cc>)
 8002568:	4293      	cmp	r3, r2
 800256a:	d01d      	beq.n	80025a8 <HAL_DMA_Abort_IT+0x290>
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	681b      	ldr	r3, [r3, #0]
 8002570:	4a5d      	ldr	r2, [pc, #372]	@ (80026e8 <HAL_DMA_Abort_IT+0x3d0>)
 8002572:	4293      	cmp	r3, r2
 8002574:	d018      	beq.n	80025a8 <HAL_DMA_Abort_IT+0x290>
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	681b      	ldr	r3, [r3, #0]
 800257a:	4a5c      	ldr	r2, [pc, #368]	@ (80026ec <HAL_DMA_Abort_IT+0x3d4>)
 800257c:	4293      	cmp	r3, r2
 800257e:	d013      	beq.n	80025a8 <HAL_DMA_Abort_IT+0x290>
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	681b      	ldr	r3, [r3, #0]
 8002584:	4a5a      	ldr	r2, [pc, #360]	@ (80026f0 <HAL_DMA_Abort_IT+0x3d8>)
 8002586:	4293      	cmp	r3, r2
 8002588:	d00e      	beq.n	80025a8 <HAL_DMA_Abort_IT+0x290>
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	681b      	ldr	r3, [r3, #0]
 800258e:	4a59      	ldr	r2, [pc, #356]	@ (80026f4 <HAL_DMA_Abort_IT+0x3dc>)
 8002590:	4293      	cmp	r3, r2
 8002592:	d009      	beq.n	80025a8 <HAL_DMA_Abort_IT+0x290>
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	681b      	ldr	r3, [r3, #0]
 8002598:	4a57      	ldr	r2, [pc, #348]	@ (80026f8 <HAL_DMA_Abort_IT+0x3e0>)
 800259a:	4293      	cmp	r3, r2
 800259c:	d004      	beq.n	80025a8 <HAL_DMA_Abort_IT+0x290>
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	681b      	ldr	r3, [r3, #0]
 80025a2:	4a56      	ldr	r2, [pc, #344]	@ (80026fc <HAL_DMA_Abort_IT+0x3e4>)
 80025a4:	4293      	cmp	r3, r2
 80025a6:	d108      	bne.n	80025ba <HAL_DMA_Abort_IT+0x2a2>
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	681b      	ldr	r3, [r3, #0]
 80025ac:	681a      	ldr	r2, [r3, #0]
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	681b      	ldr	r3, [r3, #0]
 80025b2:	f022 0201 	bic.w	r2, r2, #1
 80025b6:	601a      	str	r2, [r3, #0]
 80025b8:	e007      	b.n	80025ca <HAL_DMA_Abort_IT+0x2b2>
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	681b      	ldr	r3, [r3, #0]
 80025be:	681a      	ldr	r2, [r3, #0]
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	681b      	ldr	r3, [r3, #0]
 80025c4:	f022 0201 	bic.w	r2, r2, #1
 80025c8:	601a      	str	r2, [r3, #0]

      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	681b      	ldr	r3, [r3, #0]
 80025ce:	4a3c      	ldr	r2, [pc, #240]	@ (80026c0 <HAL_DMA_Abort_IT+0x3a8>)
 80025d0:	4293      	cmp	r3, r2
 80025d2:	d072      	beq.n	80026ba <HAL_DMA_Abort_IT+0x3a2>
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	681b      	ldr	r3, [r3, #0]
 80025d8:	4a3a      	ldr	r2, [pc, #232]	@ (80026c4 <HAL_DMA_Abort_IT+0x3ac>)
 80025da:	4293      	cmp	r3, r2
 80025dc:	d06d      	beq.n	80026ba <HAL_DMA_Abort_IT+0x3a2>
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	681b      	ldr	r3, [r3, #0]
 80025e2:	4a39      	ldr	r2, [pc, #228]	@ (80026c8 <HAL_DMA_Abort_IT+0x3b0>)
 80025e4:	4293      	cmp	r3, r2
 80025e6:	d068      	beq.n	80026ba <HAL_DMA_Abort_IT+0x3a2>
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	681b      	ldr	r3, [r3, #0]
 80025ec:	4a37      	ldr	r2, [pc, #220]	@ (80026cc <HAL_DMA_Abort_IT+0x3b4>)
 80025ee:	4293      	cmp	r3, r2
 80025f0:	d063      	beq.n	80026ba <HAL_DMA_Abort_IT+0x3a2>
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	681b      	ldr	r3, [r3, #0]
 80025f6:	4a36      	ldr	r2, [pc, #216]	@ (80026d0 <HAL_DMA_Abort_IT+0x3b8>)
 80025f8:	4293      	cmp	r3, r2
 80025fa:	d05e      	beq.n	80026ba <HAL_DMA_Abort_IT+0x3a2>
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	681b      	ldr	r3, [r3, #0]
 8002600:	4a34      	ldr	r2, [pc, #208]	@ (80026d4 <HAL_DMA_Abort_IT+0x3bc>)
 8002602:	4293      	cmp	r3, r2
 8002604:	d059      	beq.n	80026ba <HAL_DMA_Abort_IT+0x3a2>
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	681b      	ldr	r3, [r3, #0]
 800260a:	4a33      	ldr	r2, [pc, #204]	@ (80026d8 <HAL_DMA_Abort_IT+0x3c0>)
 800260c:	4293      	cmp	r3, r2
 800260e:	d054      	beq.n	80026ba <HAL_DMA_Abort_IT+0x3a2>
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	681b      	ldr	r3, [r3, #0]
 8002614:	4a31      	ldr	r2, [pc, #196]	@ (80026dc <HAL_DMA_Abort_IT+0x3c4>)
 8002616:	4293      	cmp	r3, r2
 8002618:	d04f      	beq.n	80026ba <HAL_DMA_Abort_IT+0x3a2>
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	681b      	ldr	r3, [r3, #0]
 800261e:	4a30      	ldr	r2, [pc, #192]	@ (80026e0 <HAL_DMA_Abort_IT+0x3c8>)
 8002620:	4293      	cmp	r3, r2
 8002622:	d04a      	beq.n	80026ba <HAL_DMA_Abort_IT+0x3a2>
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	681b      	ldr	r3, [r3, #0]
 8002628:	4a2e      	ldr	r2, [pc, #184]	@ (80026e4 <HAL_DMA_Abort_IT+0x3cc>)
 800262a:	4293      	cmp	r3, r2
 800262c:	d045      	beq.n	80026ba <HAL_DMA_Abort_IT+0x3a2>
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	681b      	ldr	r3, [r3, #0]
 8002632:	4a2d      	ldr	r2, [pc, #180]	@ (80026e8 <HAL_DMA_Abort_IT+0x3d0>)
 8002634:	4293      	cmp	r3, r2
 8002636:	d040      	beq.n	80026ba <HAL_DMA_Abort_IT+0x3a2>
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	681b      	ldr	r3, [r3, #0]
 800263c:	4a2b      	ldr	r2, [pc, #172]	@ (80026ec <HAL_DMA_Abort_IT+0x3d4>)
 800263e:	4293      	cmp	r3, r2
 8002640:	d03b      	beq.n	80026ba <HAL_DMA_Abort_IT+0x3a2>
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	681b      	ldr	r3, [r3, #0]
 8002646:	4a2a      	ldr	r2, [pc, #168]	@ (80026f0 <HAL_DMA_Abort_IT+0x3d8>)
 8002648:	4293      	cmp	r3, r2
 800264a:	d036      	beq.n	80026ba <HAL_DMA_Abort_IT+0x3a2>
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	681b      	ldr	r3, [r3, #0]
 8002650:	4a28      	ldr	r2, [pc, #160]	@ (80026f4 <HAL_DMA_Abort_IT+0x3dc>)
 8002652:	4293      	cmp	r3, r2
 8002654:	d031      	beq.n	80026ba <HAL_DMA_Abort_IT+0x3a2>
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	681b      	ldr	r3, [r3, #0]
 800265a:	4a27      	ldr	r2, [pc, #156]	@ (80026f8 <HAL_DMA_Abort_IT+0x3e0>)
 800265c:	4293      	cmp	r3, r2
 800265e:	d02c      	beq.n	80026ba <HAL_DMA_Abort_IT+0x3a2>
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	681b      	ldr	r3, [r3, #0]
 8002664:	4a25      	ldr	r2, [pc, #148]	@ (80026fc <HAL_DMA_Abort_IT+0x3e4>)
 8002666:	4293      	cmp	r3, r2
 8002668:	d027      	beq.n	80026ba <HAL_DMA_Abort_IT+0x3a2>
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	681b      	ldr	r3, [r3, #0]
 800266e:	4a24      	ldr	r2, [pc, #144]	@ (8002700 <HAL_DMA_Abort_IT+0x3e8>)
 8002670:	4293      	cmp	r3, r2
 8002672:	d022      	beq.n	80026ba <HAL_DMA_Abort_IT+0x3a2>
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	681b      	ldr	r3, [r3, #0]
 8002678:	4a22      	ldr	r2, [pc, #136]	@ (8002704 <HAL_DMA_Abort_IT+0x3ec>)
 800267a:	4293      	cmp	r3, r2
 800267c:	d01d      	beq.n	80026ba <HAL_DMA_Abort_IT+0x3a2>
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	681b      	ldr	r3, [r3, #0]
 8002682:	4a21      	ldr	r2, [pc, #132]	@ (8002708 <HAL_DMA_Abort_IT+0x3f0>)
 8002684:	4293      	cmp	r3, r2
 8002686:	d018      	beq.n	80026ba <HAL_DMA_Abort_IT+0x3a2>
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	681b      	ldr	r3, [r3, #0]
 800268c:	4a1f      	ldr	r2, [pc, #124]	@ (800270c <HAL_DMA_Abort_IT+0x3f4>)
 800268e:	4293      	cmp	r3, r2
 8002690:	d013      	beq.n	80026ba <HAL_DMA_Abort_IT+0x3a2>
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	681b      	ldr	r3, [r3, #0]
 8002696:	4a1e      	ldr	r2, [pc, #120]	@ (8002710 <HAL_DMA_Abort_IT+0x3f8>)
 8002698:	4293      	cmp	r3, r2
 800269a:	d00e      	beq.n	80026ba <HAL_DMA_Abort_IT+0x3a2>
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	681b      	ldr	r3, [r3, #0]
 80026a0:	4a1c      	ldr	r2, [pc, #112]	@ (8002714 <HAL_DMA_Abort_IT+0x3fc>)
 80026a2:	4293      	cmp	r3, r2
 80026a4:	d009      	beq.n	80026ba <HAL_DMA_Abort_IT+0x3a2>
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	681b      	ldr	r3, [r3, #0]
 80026aa:	4a1b      	ldr	r2, [pc, #108]	@ (8002718 <HAL_DMA_Abort_IT+0x400>)
 80026ac:	4293      	cmp	r3, r2
 80026ae:	d004      	beq.n	80026ba <HAL_DMA_Abort_IT+0x3a2>
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	681b      	ldr	r3, [r3, #0]
 80026b4:	4a19      	ldr	r2, [pc, #100]	@ (800271c <HAL_DMA_Abort_IT+0x404>)
 80026b6:	4293      	cmp	r3, r2
 80026b8:	d132      	bne.n	8002720 <HAL_DMA_Abort_IT+0x408>
 80026ba:	2301      	movs	r3, #1
 80026bc:	e031      	b.n	8002722 <HAL_DMA_Abort_IT+0x40a>
 80026be:	bf00      	nop
 80026c0:	40020010 	.word	0x40020010
 80026c4:	40020028 	.word	0x40020028
 80026c8:	40020040 	.word	0x40020040
 80026cc:	40020058 	.word	0x40020058
 80026d0:	40020070 	.word	0x40020070
 80026d4:	40020088 	.word	0x40020088
 80026d8:	400200a0 	.word	0x400200a0
 80026dc:	400200b8 	.word	0x400200b8
 80026e0:	40020410 	.word	0x40020410
 80026e4:	40020428 	.word	0x40020428
 80026e8:	40020440 	.word	0x40020440
 80026ec:	40020458 	.word	0x40020458
 80026f0:	40020470 	.word	0x40020470
 80026f4:	40020488 	.word	0x40020488
 80026f8:	400204a0 	.word	0x400204a0
 80026fc:	400204b8 	.word	0x400204b8
 8002700:	58025408 	.word	0x58025408
 8002704:	5802541c 	.word	0x5802541c
 8002708:	58025430 	.word	0x58025430
 800270c:	58025444 	.word	0x58025444
 8002710:	58025458 	.word	0x58025458
 8002714:	5802546c 	.word	0x5802546c
 8002718:	58025480 	.word	0x58025480
 800271c:	58025494 	.word	0x58025494
 8002720:	2300      	movs	r3, #0
 8002722:	2b00      	cmp	r3, #0
 8002724:	d028      	beq.n	8002778 <HAL_DMA_Abort_IT+0x460>
      {
        /* disable the DMAMUX sync overrun IT */
        hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800272a:	681a      	ldr	r2, [r3, #0]
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002730:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8002734:	601a      	str	r2, [r3, #0]

        /* Clear all flags */
        regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800273a:	60fb      	str	r3, [r7, #12]
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002740:	f003 031f 	and.w	r3, r3, #31
 8002744:	2201      	movs	r2, #1
 8002746:	409a      	lsls	r2, r3
 8002748:	68fb      	ldr	r3, [r7, #12]
 800274a:	605a      	str	r2, [r3, #4]

        /* Clear the DMAMUX synchro overrun flag */
        hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8002750:	687a      	ldr	r2, [r7, #4]
 8002752:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 8002754:	605a      	str	r2, [r3, #4]

        if(hdma->DMAmuxRequestGen != 0U)
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800275a:	2b00      	cmp	r3, #0
 800275c:	d00c      	beq.n	8002778 <HAL_DMA_Abort_IT+0x460>
        {
          /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
          /* disable the request gen overrun IT */
          hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002762:	681a      	ldr	r2, [r3, #0]
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002768:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800276c:	601a      	str	r2, [r3, #0]

          /* Clear the DMAMUX request generator overrun flag */
          hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002772:	687a      	ldr	r2, [r7, #4]
 8002774:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 8002776:	605a      	str	r2, [r3, #4]
        }
      }

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	2201      	movs	r2, #1
 800277c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	2200      	movs	r2, #0
 8002784:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

      /* Call User Abort callback */
      if(hdma->XferAbortCallback != NULL)
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800278c:	2b00      	cmp	r3, #0
 800278e:	d003      	beq.n	8002798 <HAL_DMA_Abort_IT+0x480>
      {
        hdma->XferAbortCallback(hdma);
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002794:	6878      	ldr	r0, [r7, #4]
 8002796:	4798      	blx	r3
      }
    }
  }

  return HAL_OK;
 8002798:	2300      	movs	r3, #0
}
 800279a:	4618      	mov	r0, r3
 800279c:	3710      	adds	r7, #16
 800279e:	46bd      	mov	sp, r7
 80027a0:	bd80      	pop	{r7, pc}
 80027a2:	bf00      	nop

080027a4 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, const GPIO_InitTypeDef *GPIO_Init)
{
 80027a4:	b480      	push	{r7}
 80027a6:	b089      	sub	sp, #36	@ 0x24
 80027a8:	af00      	add	r7, sp, #0
 80027aa:	6078      	str	r0, [r7, #4]
 80027ac:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 80027ae:	2300      	movs	r3, #0
 80027b0:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 80027b2:	4b86      	ldr	r3, [pc, #536]	@ (80029cc <HAL_GPIO_Init+0x228>)
 80027b4:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 80027b6:	e18c      	b.n	8002ad2 <HAL_GPIO_Init+0x32e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 80027b8:	683b      	ldr	r3, [r7, #0]
 80027ba:	681a      	ldr	r2, [r3, #0]
 80027bc:	2101      	movs	r1, #1
 80027be:	69fb      	ldr	r3, [r7, #28]
 80027c0:	fa01 f303 	lsl.w	r3, r1, r3
 80027c4:	4013      	ands	r3, r2
 80027c6:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 80027c8:	693b      	ldr	r3, [r7, #16]
 80027ca:	2b00      	cmp	r3, #0
 80027cc:	f000 817e 	beq.w	8002acc <HAL_GPIO_Init+0x328>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80027d0:	683b      	ldr	r3, [r7, #0]
 80027d2:	685b      	ldr	r3, [r3, #4]
 80027d4:	f003 0303 	and.w	r3, r3, #3
 80027d8:	2b01      	cmp	r3, #1
 80027da:	d005      	beq.n	80027e8 <HAL_GPIO_Init+0x44>
 80027dc:	683b      	ldr	r3, [r7, #0]
 80027de:	685b      	ldr	r3, [r3, #4]
 80027e0:	f003 0303 	and.w	r3, r3, #3
 80027e4:	2b02      	cmp	r3, #2
 80027e6:	d130      	bne.n	800284a <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	689b      	ldr	r3, [r3, #8]
 80027ec:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80027ee:	69fb      	ldr	r3, [r7, #28]
 80027f0:	005b      	lsls	r3, r3, #1
 80027f2:	2203      	movs	r2, #3
 80027f4:	fa02 f303 	lsl.w	r3, r2, r3
 80027f8:	43db      	mvns	r3, r3
 80027fa:	69ba      	ldr	r2, [r7, #24]
 80027fc:	4013      	ands	r3, r2
 80027fe:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002800:	683b      	ldr	r3, [r7, #0]
 8002802:	68da      	ldr	r2, [r3, #12]
 8002804:	69fb      	ldr	r3, [r7, #28]
 8002806:	005b      	lsls	r3, r3, #1
 8002808:	fa02 f303 	lsl.w	r3, r2, r3
 800280c:	69ba      	ldr	r2, [r7, #24]
 800280e:	4313      	orrs	r3, r2
 8002810:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	69ba      	ldr	r2, [r7, #24]
 8002816:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	685b      	ldr	r3, [r3, #4]
 800281c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800281e:	2201      	movs	r2, #1
 8002820:	69fb      	ldr	r3, [r7, #28]
 8002822:	fa02 f303 	lsl.w	r3, r2, r3
 8002826:	43db      	mvns	r3, r3
 8002828:	69ba      	ldr	r2, [r7, #24]
 800282a:	4013      	ands	r3, r2
 800282c:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800282e:	683b      	ldr	r3, [r7, #0]
 8002830:	685b      	ldr	r3, [r3, #4]
 8002832:	091b      	lsrs	r3, r3, #4
 8002834:	f003 0201 	and.w	r2, r3, #1
 8002838:	69fb      	ldr	r3, [r7, #28]
 800283a:	fa02 f303 	lsl.w	r3, r2, r3
 800283e:	69ba      	ldr	r2, [r7, #24]
 8002840:	4313      	orrs	r3, r2
 8002842:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	69ba      	ldr	r2, [r7, #24]
 8002848:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800284a:	683b      	ldr	r3, [r7, #0]
 800284c:	685b      	ldr	r3, [r3, #4]
 800284e:	f003 0303 	and.w	r3, r3, #3
 8002852:	2b03      	cmp	r3, #3
 8002854:	d017      	beq.n	8002886 <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	68db      	ldr	r3, [r3, #12]
 800285a:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800285c:	69fb      	ldr	r3, [r7, #28]
 800285e:	005b      	lsls	r3, r3, #1
 8002860:	2203      	movs	r2, #3
 8002862:	fa02 f303 	lsl.w	r3, r2, r3
 8002866:	43db      	mvns	r3, r3
 8002868:	69ba      	ldr	r2, [r7, #24]
 800286a:	4013      	ands	r3, r2
 800286c:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 800286e:	683b      	ldr	r3, [r7, #0]
 8002870:	689a      	ldr	r2, [r3, #8]
 8002872:	69fb      	ldr	r3, [r7, #28]
 8002874:	005b      	lsls	r3, r3, #1
 8002876:	fa02 f303 	lsl.w	r3, r2, r3
 800287a:	69ba      	ldr	r2, [r7, #24]
 800287c:	4313      	orrs	r3, r2
 800287e:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	69ba      	ldr	r2, [r7, #24]
 8002884:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002886:	683b      	ldr	r3, [r7, #0]
 8002888:	685b      	ldr	r3, [r3, #4]
 800288a:	f003 0303 	and.w	r3, r3, #3
 800288e:	2b02      	cmp	r3, #2
 8002890:	d123      	bne.n	80028da <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002892:	69fb      	ldr	r3, [r7, #28]
 8002894:	08da      	lsrs	r2, r3, #3
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	3208      	adds	r2, #8
 800289a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800289e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 80028a0:	69fb      	ldr	r3, [r7, #28]
 80028a2:	f003 0307 	and.w	r3, r3, #7
 80028a6:	009b      	lsls	r3, r3, #2
 80028a8:	220f      	movs	r2, #15
 80028aa:	fa02 f303 	lsl.w	r3, r2, r3
 80028ae:	43db      	mvns	r3, r3
 80028b0:	69ba      	ldr	r2, [r7, #24]
 80028b2:	4013      	ands	r3, r2
 80028b4:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 80028b6:	683b      	ldr	r3, [r7, #0]
 80028b8:	691a      	ldr	r2, [r3, #16]
 80028ba:	69fb      	ldr	r3, [r7, #28]
 80028bc:	f003 0307 	and.w	r3, r3, #7
 80028c0:	009b      	lsls	r3, r3, #2
 80028c2:	fa02 f303 	lsl.w	r3, r2, r3
 80028c6:	69ba      	ldr	r2, [r7, #24]
 80028c8:	4313      	orrs	r3, r2
 80028ca:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80028cc:	69fb      	ldr	r3, [r7, #28]
 80028ce:	08da      	lsrs	r2, r3, #3
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	3208      	adds	r2, #8
 80028d4:	69b9      	ldr	r1, [r7, #24]
 80028d6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	681b      	ldr	r3, [r3, #0]
 80028de:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80028e0:	69fb      	ldr	r3, [r7, #28]
 80028e2:	005b      	lsls	r3, r3, #1
 80028e4:	2203      	movs	r2, #3
 80028e6:	fa02 f303 	lsl.w	r3, r2, r3
 80028ea:	43db      	mvns	r3, r3
 80028ec:	69ba      	ldr	r2, [r7, #24]
 80028ee:	4013      	ands	r3, r2
 80028f0:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80028f2:	683b      	ldr	r3, [r7, #0]
 80028f4:	685b      	ldr	r3, [r3, #4]
 80028f6:	f003 0203 	and.w	r2, r3, #3
 80028fa:	69fb      	ldr	r3, [r7, #28]
 80028fc:	005b      	lsls	r3, r3, #1
 80028fe:	fa02 f303 	lsl.w	r3, r2, r3
 8002902:	69ba      	ldr	r2, [r7, #24]
 8002904:	4313      	orrs	r3, r2
 8002906:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	69ba      	ldr	r2, [r7, #24]
 800290c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800290e:	683b      	ldr	r3, [r7, #0]
 8002910:	685b      	ldr	r3, [r3, #4]
 8002912:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8002916:	2b00      	cmp	r3, #0
 8002918:	f000 80d8 	beq.w	8002acc <HAL_GPIO_Init+0x328>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800291c:	4b2c      	ldr	r3, [pc, #176]	@ (80029d0 <HAL_GPIO_Init+0x22c>)
 800291e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8002922:	4a2b      	ldr	r2, [pc, #172]	@ (80029d0 <HAL_GPIO_Init+0x22c>)
 8002924:	f043 0302 	orr.w	r3, r3, #2
 8002928:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 800292c:	4b28      	ldr	r3, [pc, #160]	@ (80029d0 <HAL_GPIO_Init+0x22c>)
 800292e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8002932:	f003 0302 	and.w	r3, r3, #2
 8002936:	60fb      	str	r3, [r7, #12]
 8002938:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800293a:	4a26      	ldr	r2, [pc, #152]	@ (80029d4 <HAL_GPIO_Init+0x230>)
 800293c:	69fb      	ldr	r3, [r7, #28]
 800293e:	089b      	lsrs	r3, r3, #2
 8002940:	3302      	adds	r3, #2
 8002942:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002946:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8002948:	69fb      	ldr	r3, [r7, #28]
 800294a:	f003 0303 	and.w	r3, r3, #3
 800294e:	009b      	lsls	r3, r3, #2
 8002950:	220f      	movs	r2, #15
 8002952:	fa02 f303 	lsl.w	r3, r2, r3
 8002956:	43db      	mvns	r3, r3
 8002958:	69ba      	ldr	r2, [r7, #24]
 800295a:	4013      	ands	r3, r2
 800295c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	4a1d      	ldr	r2, [pc, #116]	@ (80029d8 <HAL_GPIO_Init+0x234>)
 8002962:	4293      	cmp	r3, r2
 8002964:	d04a      	beq.n	80029fc <HAL_GPIO_Init+0x258>
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	4a1c      	ldr	r2, [pc, #112]	@ (80029dc <HAL_GPIO_Init+0x238>)
 800296a:	4293      	cmp	r3, r2
 800296c:	d02b      	beq.n	80029c6 <HAL_GPIO_Init+0x222>
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	4a1b      	ldr	r2, [pc, #108]	@ (80029e0 <HAL_GPIO_Init+0x23c>)
 8002972:	4293      	cmp	r3, r2
 8002974:	d025      	beq.n	80029c2 <HAL_GPIO_Init+0x21e>
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	4a1a      	ldr	r2, [pc, #104]	@ (80029e4 <HAL_GPIO_Init+0x240>)
 800297a:	4293      	cmp	r3, r2
 800297c:	d01f      	beq.n	80029be <HAL_GPIO_Init+0x21a>
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	4a19      	ldr	r2, [pc, #100]	@ (80029e8 <HAL_GPIO_Init+0x244>)
 8002982:	4293      	cmp	r3, r2
 8002984:	d019      	beq.n	80029ba <HAL_GPIO_Init+0x216>
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	4a18      	ldr	r2, [pc, #96]	@ (80029ec <HAL_GPIO_Init+0x248>)
 800298a:	4293      	cmp	r3, r2
 800298c:	d013      	beq.n	80029b6 <HAL_GPIO_Init+0x212>
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	4a17      	ldr	r2, [pc, #92]	@ (80029f0 <HAL_GPIO_Init+0x24c>)
 8002992:	4293      	cmp	r3, r2
 8002994:	d00d      	beq.n	80029b2 <HAL_GPIO_Init+0x20e>
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	4a16      	ldr	r2, [pc, #88]	@ (80029f4 <HAL_GPIO_Init+0x250>)
 800299a:	4293      	cmp	r3, r2
 800299c:	d007      	beq.n	80029ae <HAL_GPIO_Init+0x20a>
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	4a15      	ldr	r2, [pc, #84]	@ (80029f8 <HAL_GPIO_Init+0x254>)
 80029a2:	4293      	cmp	r3, r2
 80029a4:	d101      	bne.n	80029aa <HAL_GPIO_Init+0x206>
 80029a6:	2309      	movs	r3, #9
 80029a8:	e029      	b.n	80029fe <HAL_GPIO_Init+0x25a>
 80029aa:	230a      	movs	r3, #10
 80029ac:	e027      	b.n	80029fe <HAL_GPIO_Init+0x25a>
 80029ae:	2307      	movs	r3, #7
 80029b0:	e025      	b.n	80029fe <HAL_GPIO_Init+0x25a>
 80029b2:	2306      	movs	r3, #6
 80029b4:	e023      	b.n	80029fe <HAL_GPIO_Init+0x25a>
 80029b6:	2305      	movs	r3, #5
 80029b8:	e021      	b.n	80029fe <HAL_GPIO_Init+0x25a>
 80029ba:	2304      	movs	r3, #4
 80029bc:	e01f      	b.n	80029fe <HAL_GPIO_Init+0x25a>
 80029be:	2303      	movs	r3, #3
 80029c0:	e01d      	b.n	80029fe <HAL_GPIO_Init+0x25a>
 80029c2:	2302      	movs	r3, #2
 80029c4:	e01b      	b.n	80029fe <HAL_GPIO_Init+0x25a>
 80029c6:	2301      	movs	r3, #1
 80029c8:	e019      	b.n	80029fe <HAL_GPIO_Init+0x25a>
 80029ca:	bf00      	nop
 80029cc:	58000080 	.word	0x58000080
 80029d0:	58024400 	.word	0x58024400
 80029d4:	58000400 	.word	0x58000400
 80029d8:	58020000 	.word	0x58020000
 80029dc:	58020400 	.word	0x58020400
 80029e0:	58020800 	.word	0x58020800
 80029e4:	58020c00 	.word	0x58020c00
 80029e8:	58021000 	.word	0x58021000
 80029ec:	58021400 	.word	0x58021400
 80029f0:	58021800 	.word	0x58021800
 80029f4:	58021c00 	.word	0x58021c00
 80029f8:	58022400 	.word	0x58022400
 80029fc:	2300      	movs	r3, #0
 80029fe:	69fa      	ldr	r2, [r7, #28]
 8002a00:	f002 0203 	and.w	r2, r2, #3
 8002a04:	0092      	lsls	r2, r2, #2
 8002a06:	4093      	lsls	r3, r2
 8002a08:	69ba      	ldr	r2, [r7, #24]
 8002a0a:	4313      	orrs	r3, r2
 8002a0c:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002a0e:	4938      	ldr	r1, [pc, #224]	@ (8002af0 <HAL_GPIO_Init+0x34c>)
 8002a10:	69fb      	ldr	r3, [r7, #28]
 8002a12:	089b      	lsrs	r3, r3, #2
 8002a14:	3302      	adds	r3, #2
 8002a16:	69ba      	ldr	r2, [r7, #24]
 8002a18:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8002a1c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002a20:	681b      	ldr	r3, [r3, #0]
 8002a22:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8002a24:	693b      	ldr	r3, [r7, #16]
 8002a26:	43db      	mvns	r3, r3
 8002a28:	69ba      	ldr	r2, [r7, #24]
 8002a2a:	4013      	ands	r3, r2
 8002a2c:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002a2e:	683b      	ldr	r3, [r7, #0]
 8002a30:	685b      	ldr	r3, [r3, #4]
 8002a32:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002a36:	2b00      	cmp	r3, #0
 8002a38:	d003      	beq.n	8002a42 <HAL_GPIO_Init+0x29e>
        {
          temp |= iocurrent;
 8002a3a:	69ba      	ldr	r2, [r7, #24]
 8002a3c:	693b      	ldr	r3, [r7, #16]
 8002a3e:	4313      	orrs	r3, r2
 8002a40:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8002a42:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8002a46:	69bb      	ldr	r3, [r7, #24]
 8002a48:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8002a4a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002a4e:	685b      	ldr	r3, [r3, #4]
 8002a50:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8002a52:	693b      	ldr	r3, [r7, #16]
 8002a54:	43db      	mvns	r3, r3
 8002a56:	69ba      	ldr	r2, [r7, #24]
 8002a58:	4013      	ands	r3, r2
 8002a5a:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002a5c:	683b      	ldr	r3, [r7, #0]
 8002a5e:	685b      	ldr	r3, [r3, #4]
 8002a60:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002a64:	2b00      	cmp	r3, #0
 8002a66:	d003      	beq.n	8002a70 <HAL_GPIO_Init+0x2cc>
        {
          temp |= iocurrent;
 8002a68:	69ba      	ldr	r2, [r7, #24]
 8002a6a:	693b      	ldr	r3, [r7, #16]
 8002a6c:	4313      	orrs	r3, r2
 8002a6e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8002a70:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8002a74:	69bb      	ldr	r3, [r7, #24]
 8002a76:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8002a78:	697b      	ldr	r3, [r7, #20]
 8002a7a:	685b      	ldr	r3, [r3, #4]
 8002a7c:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8002a7e:	693b      	ldr	r3, [r7, #16]
 8002a80:	43db      	mvns	r3, r3
 8002a82:	69ba      	ldr	r2, [r7, #24]
 8002a84:	4013      	ands	r3, r2
 8002a86:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002a88:	683b      	ldr	r3, [r7, #0]
 8002a8a:	685b      	ldr	r3, [r3, #4]
 8002a8c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002a90:	2b00      	cmp	r3, #0
 8002a92:	d003      	beq.n	8002a9c <HAL_GPIO_Init+0x2f8>
        {
          temp |= iocurrent;
 8002a94:	69ba      	ldr	r2, [r7, #24]
 8002a96:	693b      	ldr	r3, [r7, #16]
 8002a98:	4313      	orrs	r3, r2
 8002a9a:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8002a9c:	697b      	ldr	r3, [r7, #20]
 8002a9e:	69ba      	ldr	r2, [r7, #24]
 8002aa0:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8002aa2:	697b      	ldr	r3, [r7, #20]
 8002aa4:	681b      	ldr	r3, [r3, #0]
 8002aa6:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8002aa8:	693b      	ldr	r3, [r7, #16]
 8002aaa:	43db      	mvns	r3, r3
 8002aac:	69ba      	ldr	r2, [r7, #24]
 8002aae:	4013      	ands	r3, r2
 8002ab0:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002ab2:	683b      	ldr	r3, [r7, #0]
 8002ab4:	685b      	ldr	r3, [r3, #4]
 8002ab6:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002aba:	2b00      	cmp	r3, #0
 8002abc:	d003      	beq.n	8002ac6 <HAL_GPIO_Init+0x322>
        {
          temp |= iocurrent;
 8002abe:	69ba      	ldr	r2, [r7, #24]
 8002ac0:	693b      	ldr	r3, [r7, #16]
 8002ac2:	4313      	orrs	r3, r2
 8002ac4:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8002ac6:	697b      	ldr	r3, [r7, #20]
 8002ac8:	69ba      	ldr	r2, [r7, #24]
 8002aca:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8002acc:	69fb      	ldr	r3, [r7, #28]
 8002ace:	3301      	adds	r3, #1
 8002ad0:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8002ad2:	683b      	ldr	r3, [r7, #0]
 8002ad4:	681a      	ldr	r2, [r3, #0]
 8002ad6:	69fb      	ldr	r3, [r7, #28]
 8002ad8:	fa22 f303 	lsr.w	r3, r2, r3
 8002adc:	2b00      	cmp	r3, #0
 8002ade:	f47f ae6b 	bne.w	80027b8 <HAL_GPIO_Init+0x14>
  }
}
 8002ae2:	bf00      	nop
 8002ae4:	bf00      	nop
 8002ae6:	3724      	adds	r7, #36	@ 0x24
 8002ae8:	46bd      	mov	sp, r7
 8002aea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aee:	4770      	bx	lr
 8002af0:	58000400 	.word	0x58000400

08002af4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002af4:	b480      	push	{r7}
 8002af6:	b083      	sub	sp, #12
 8002af8:	af00      	add	r7, sp, #0
 8002afa:	6078      	str	r0, [r7, #4]
 8002afc:	460b      	mov	r3, r1
 8002afe:	807b      	strh	r3, [r7, #2]
 8002b00:	4613      	mov	r3, r2
 8002b02:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002b04:	787b      	ldrb	r3, [r7, #1]
 8002b06:	2b00      	cmp	r3, #0
 8002b08:	d003      	beq.n	8002b12 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002b0a:	887a      	ldrh	r2, [r7, #2]
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8002b10:	e003      	b.n	8002b1a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8002b12:	887b      	ldrh	r3, [r7, #2]
 8002b14:	041a      	lsls	r2, r3, #16
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	619a      	str	r2, [r3, #24]
}
 8002b1a:	bf00      	nop
 8002b1c:	370c      	adds	r7, #12
 8002b1e:	46bd      	mov	sp, r7
 8002b20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b24:	4770      	bx	lr
	...

08002b28 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002b28:	b580      	push	{r7, lr}
 8002b2a:	b082      	sub	sp, #8
 8002b2c:	af00      	add	r7, sp, #0
 8002b2e:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	2b00      	cmp	r3, #0
 8002b34:	d101      	bne.n	8002b3a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002b36:	2301      	movs	r3, #1
 8002b38:	e08b      	b.n	8002c52 <HAL_I2C_Init+0x12a>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002b40:	b2db      	uxtb	r3, r3
 8002b42:	2b00      	cmp	r3, #0
 8002b44:	d106      	bne.n	8002b54 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	2200      	movs	r2, #0
 8002b4a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8002b4e:	6878      	ldr	r0, [r7, #4]
 8002b50:	f7fe fada 	bl	8001108 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	2224      	movs	r2, #36	@ 0x24
 8002b58:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	681b      	ldr	r3, [r3, #0]
 8002b60:	681a      	ldr	r2, [r3, #0]
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	681b      	ldr	r3, [r3, #0]
 8002b66:	f022 0201 	bic.w	r2, r2, #1
 8002b6a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	685a      	ldr	r2, [r3, #4]
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	681b      	ldr	r3, [r3, #0]
 8002b74:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8002b78:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	681b      	ldr	r3, [r3, #0]
 8002b7e:	689a      	ldr	r2, [r3, #8]
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	681b      	ldr	r3, [r3, #0]
 8002b84:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8002b88:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	68db      	ldr	r3, [r3, #12]
 8002b8e:	2b01      	cmp	r3, #1
 8002b90:	d107      	bne.n	8002ba2 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	689a      	ldr	r2, [r3, #8]
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	681b      	ldr	r3, [r3, #0]
 8002b9a:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8002b9e:	609a      	str	r2, [r3, #8]
 8002ba0:	e006      	b.n	8002bb0 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	689a      	ldr	r2, [r3, #8]
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	681b      	ldr	r3, [r3, #0]
 8002baa:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 8002bae:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	68db      	ldr	r3, [r3, #12]
 8002bb4:	2b02      	cmp	r3, #2
 8002bb6:	d108      	bne.n	8002bca <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	681b      	ldr	r3, [r3, #0]
 8002bbc:	685a      	ldr	r2, [r3, #4]
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	681b      	ldr	r3, [r3, #0]
 8002bc2:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8002bc6:	605a      	str	r2, [r3, #4]
 8002bc8:	e007      	b.n	8002bda <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	681b      	ldr	r3, [r3, #0]
 8002bce:	685a      	ldr	r2, [r3, #4]
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	681b      	ldr	r3, [r3, #0]
 8002bd4:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002bd8:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	681b      	ldr	r3, [r3, #0]
 8002bde:	6859      	ldr	r1, [r3, #4]
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	681a      	ldr	r2, [r3, #0]
 8002be4:	4b1d      	ldr	r3, [pc, #116]	@ (8002c5c <HAL_I2C_Init+0x134>)
 8002be6:	430b      	orrs	r3, r1
 8002be8:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	681b      	ldr	r3, [r3, #0]
 8002bee:	68da      	ldr	r2, [r3, #12]
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	681b      	ldr	r3, [r3, #0]
 8002bf4:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8002bf8:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	691a      	ldr	r2, [r3, #16]
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	695b      	ldr	r3, [r3, #20]
 8002c02:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	699b      	ldr	r3, [r3, #24]
 8002c0a:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	681b      	ldr	r3, [r3, #0]
 8002c10:	430a      	orrs	r2, r1
 8002c12:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	69d9      	ldr	r1, [r3, #28]
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	6a1a      	ldr	r2, [r3, #32]
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	681b      	ldr	r3, [r3, #0]
 8002c20:	430a      	orrs	r2, r1
 8002c22:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	681b      	ldr	r3, [r3, #0]
 8002c28:	681a      	ldr	r2, [r3, #0]
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	681b      	ldr	r3, [r3, #0]
 8002c2e:	f042 0201 	orr.w	r2, r2, #1
 8002c32:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	2200      	movs	r2, #0
 8002c38:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	2220      	movs	r2, #32
 8002c3e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	2200      	movs	r2, #0
 8002c46:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	2200      	movs	r2, #0
 8002c4c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 8002c50:	2300      	movs	r3, #0
}
 8002c52:	4618      	mov	r0, r3
 8002c54:	3708      	adds	r7, #8
 8002c56:	46bd      	mov	sp, r7
 8002c58:	bd80      	pop	{r7, pc}
 8002c5a:	bf00      	nop
 8002c5c:	02008000 	.word	0x02008000

08002c60 <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002c60:	b580      	push	{r7, lr}
 8002c62:	b088      	sub	sp, #32
 8002c64:	af02      	add	r7, sp, #8
 8002c66:	60f8      	str	r0, [r7, #12]
 8002c68:	4608      	mov	r0, r1
 8002c6a:	4611      	mov	r1, r2
 8002c6c:	461a      	mov	r2, r3
 8002c6e:	4603      	mov	r3, r0
 8002c70:	817b      	strh	r3, [r7, #10]
 8002c72:	460b      	mov	r3, r1
 8002c74:	813b      	strh	r3, [r7, #8]
 8002c76:	4613      	mov	r3, r2
 8002c78:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002c7a:	68fb      	ldr	r3, [r7, #12]
 8002c7c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002c80:	b2db      	uxtb	r3, r3
 8002c82:	2b20      	cmp	r3, #32
 8002c84:	f040 80fd 	bne.w	8002e82 <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 8002c88:	6a3b      	ldr	r3, [r7, #32]
 8002c8a:	2b00      	cmp	r3, #0
 8002c8c:	d002      	beq.n	8002c94 <HAL_I2C_Mem_Read+0x34>
 8002c8e:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8002c90:	2b00      	cmp	r3, #0
 8002c92:	d105      	bne.n	8002ca0 <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8002c94:	68fb      	ldr	r3, [r7, #12]
 8002c96:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002c9a:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 8002c9c:	2301      	movs	r3, #1
 8002c9e:	e0f1      	b.n	8002e84 <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002ca0:	68fb      	ldr	r3, [r7, #12]
 8002ca2:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8002ca6:	2b01      	cmp	r3, #1
 8002ca8:	d101      	bne.n	8002cae <HAL_I2C_Mem_Read+0x4e>
 8002caa:	2302      	movs	r3, #2
 8002cac:	e0ea      	b.n	8002e84 <HAL_I2C_Mem_Read+0x224>
 8002cae:	68fb      	ldr	r3, [r7, #12]
 8002cb0:	2201      	movs	r2, #1
 8002cb2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8002cb6:	f7fe fe7d 	bl	80019b4 <HAL_GetTick>
 8002cba:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8002cbc:	697b      	ldr	r3, [r7, #20]
 8002cbe:	9300      	str	r3, [sp, #0]
 8002cc0:	2319      	movs	r3, #25
 8002cc2:	2201      	movs	r2, #1
 8002cc4:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8002cc8:	68f8      	ldr	r0, [r7, #12]
 8002cca:	f000 f95b 	bl	8002f84 <I2C_WaitOnFlagUntilTimeout>
 8002cce:	4603      	mov	r3, r0
 8002cd0:	2b00      	cmp	r3, #0
 8002cd2:	d001      	beq.n	8002cd8 <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 8002cd4:	2301      	movs	r3, #1
 8002cd6:	e0d5      	b.n	8002e84 <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8002cd8:	68fb      	ldr	r3, [r7, #12]
 8002cda:	2222      	movs	r2, #34	@ 0x22
 8002cdc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8002ce0:	68fb      	ldr	r3, [r7, #12]
 8002ce2:	2240      	movs	r2, #64	@ 0x40
 8002ce4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002ce8:	68fb      	ldr	r3, [r7, #12]
 8002cea:	2200      	movs	r2, #0
 8002cec:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8002cee:	68fb      	ldr	r3, [r7, #12]
 8002cf0:	6a3a      	ldr	r2, [r7, #32]
 8002cf2:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8002cf4:	68fb      	ldr	r3, [r7, #12]
 8002cf6:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8002cf8:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 8002cfa:	68fb      	ldr	r3, [r7, #12]
 8002cfc:	2200      	movs	r2, #0
 8002cfe:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8002d00:	88f8      	ldrh	r0, [r7, #6]
 8002d02:	893a      	ldrh	r2, [r7, #8]
 8002d04:	8979      	ldrh	r1, [r7, #10]
 8002d06:	697b      	ldr	r3, [r7, #20]
 8002d08:	9301      	str	r3, [sp, #4]
 8002d0a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002d0c:	9300      	str	r3, [sp, #0]
 8002d0e:	4603      	mov	r3, r0
 8002d10:	68f8      	ldr	r0, [r7, #12]
 8002d12:	f000 f8bf 	bl	8002e94 <I2C_RequestMemoryRead>
 8002d16:	4603      	mov	r3, r0
 8002d18:	2b00      	cmp	r3, #0
 8002d1a:	d005      	beq.n	8002d28 <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002d1c:	68fb      	ldr	r3, [r7, #12]
 8002d1e:	2200      	movs	r2, #0
 8002d20:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      return HAL_ERROR;
 8002d24:	2301      	movs	r3, #1
 8002d26:	e0ad      	b.n	8002e84 <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002d28:	68fb      	ldr	r3, [r7, #12]
 8002d2a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002d2c:	b29b      	uxth	r3, r3
 8002d2e:	2bff      	cmp	r3, #255	@ 0xff
 8002d30:	d90e      	bls.n	8002d50 <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8002d32:	68fb      	ldr	r3, [r7, #12]
 8002d34:	22ff      	movs	r2, #255	@ 0xff
 8002d36:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8002d38:	68fb      	ldr	r3, [r7, #12]
 8002d3a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002d3c:	b2da      	uxtb	r2, r3
 8002d3e:	8979      	ldrh	r1, [r7, #10]
 8002d40:	4b52      	ldr	r3, [pc, #328]	@ (8002e8c <HAL_I2C_Mem_Read+0x22c>)
 8002d42:	9300      	str	r3, [sp, #0]
 8002d44:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8002d48:	68f8      	ldr	r0, [r7, #12]
 8002d4a:	f000 fadf 	bl	800330c <I2C_TransferConfig>
 8002d4e:	e00f      	b.n	8002d70 <HAL_I2C_Mem_Read+0x110>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8002d50:	68fb      	ldr	r3, [r7, #12]
 8002d52:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002d54:	b29a      	uxth	r2, r3
 8002d56:	68fb      	ldr	r3, [r7, #12]
 8002d58:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8002d5a:	68fb      	ldr	r3, [r7, #12]
 8002d5c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002d5e:	b2da      	uxtb	r2, r3
 8002d60:	8979      	ldrh	r1, [r7, #10]
 8002d62:	4b4a      	ldr	r3, [pc, #296]	@ (8002e8c <HAL_I2C_Mem_Read+0x22c>)
 8002d64:	9300      	str	r3, [sp, #0]
 8002d66:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8002d6a:	68f8      	ldr	r0, [r7, #12]
 8002d6c:	f000 face 	bl	800330c <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 8002d70:	697b      	ldr	r3, [r7, #20]
 8002d72:	9300      	str	r3, [sp, #0]
 8002d74:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002d76:	2200      	movs	r2, #0
 8002d78:	2104      	movs	r1, #4
 8002d7a:	68f8      	ldr	r0, [r7, #12]
 8002d7c:	f000 f902 	bl	8002f84 <I2C_WaitOnFlagUntilTimeout>
 8002d80:	4603      	mov	r3, r0
 8002d82:	2b00      	cmp	r3, #0
 8002d84:	d001      	beq.n	8002d8a <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 8002d86:	2301      	movs	r3, #1
 8002d88:	e07c      	b.n	8002e84 <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8002d8a:	68fb      	ldr	r3, [r7, #12]
 8002d8c:	681b      	ldr	r3, [r3, #0]
 8002d8e:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8002d90:	68fb      	ldr	r3, [r7, #12]
 8002d92:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002d94:	b2d2      	uxtb	r2, r2
 8002d96:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002d98:	68fb      	ldr	r3, [r7, #12]
 8002d9a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002d9c:	1c5a      	adds	r2, r3, #1
 8002d9e:	68fb      	ldr	r3, [r7, #12]
 8002da0:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 8002da2:	68fb      	ldr	r3, [r7, #12]
 8002da4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002da6:	3b01      	subs	r3, #1
 8002da8:	b29a      	uxth	r2, r3
 8002daa:	68fb      	ldr	r3, [r7, #12]
 8002dac:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8002dae:	68fb      	ldr	r3, [r7, #12]
 8002db0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002db2:	b29b      	uxth	r3, r3
 8002db4:	3b01      	subs	r3, #1
 8002db6:	b29a      	uxth	r2, r3
 8002db8:	68fb      	ldr	r3, [r7, #12]
 8002dba:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8002dbc:	68fb      	ldr	r3, [r7, #12]
 8002dbe:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002dc0:	b29b      	uxth	r3, r3
 8002dc2:	2b00      	cmp	r3, #0
 8002dc4:	d034      	beq.n	8002e30 <HAL_I2C_Mem_Read+0x1d0>
 8002dc6:	68fb      	ldr	r3, [r7, #12]
 8002dc8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002dca:	2b00      	cmp	r3, #0
 8002dcc:	d130      	bne.n	8002e30 <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8002dce:	697b      	ldr	r3, [r7, #20]
 8002dd0:	9300      	str	r3, [sp, #0]
 8002dd2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002dd4:	2200      	movs	r2, #0
 8002dd6:	2180      	movs	r1, #128	@ 0x80
 8002dd8:	68f8      	ldr	r0, [r7, #12]
 8002dda:	f000 f8d3 	bl	8002f84 <I2C_WaitOnFlagUntilTimeout>
 8002dde:	4603      	mov	r3, r0
 8002de0:	2b00      	cmp	r3, #0
 8002de2:	d001      	beq.n	8002de8 <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 8002de4:	2301      	movs	r3, #1
 8002de6:	e04d      	b.n	8002e84 <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002de8:	68fb      	ldr	r3, [r7, #12]
 8002dea:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002dec:	b29b      	uxth	r3, r3
 8002dee:	2bff      	cmp	r3, #255	@ 0xff
 8002df0:	d90e      	bls.n	8002e10 <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8002df2:	68fb      	ldr	r3, [r7, #12]
 8002df4:	22ff      	movs	r2, #255	@ 0xff
 8002df6:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 8002df8:	68fb      	ldr	r3, [r7, #12]
 8002dfa:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002dfc:	b2da      	uxtb	r2, r3
 8002dfe:	8979      	ldrh	r1, [r7, #10]
 8002e00:	2300      	movs	r3, #0
 8002e02:	9300      	str	r3, [sp, #0]
 8002e04:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8002e08:	68f8      	ldr	r0, [r7, #12]
 8002e0a:	f000 fa7f 	bl	800330c <I2C_TransferConfig>
 8002e0e:	e00f      	b.n	8002e30 <HAL_I2C_Mem_Read+0x1d0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8002e10:	68fb      	ldr	r3, [r7, #12]
 8002e12:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002e14:	b29a      	uxth	r2, r3
 8002e16:	68fb      	ldr	r3, [r7, #12]
 8002e18:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8002e1a:	68fb      	ldr	r3, [r7, #12]
 8002e1c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002e1e:	b2da      	uxtb	r2, r3
 8002e20:	8979      	ldrh	r1, [r7, #10]
 8002e22:	2300      	movs	r3, #0
 8002e24:	9300      	str	r3, [sp, #0]
 8002e26:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8002e2a:	68f8      	ldr	r0, [r7, #12]
 8002e2c:	f000 fa6e 	bl	800330c <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 8002e30:	68fb      	ldr	r3, [r7, #12]
 8002e32:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002e34:	b29b      	uxth	r3, r3
 8002e36:	2b00      	cmp	r3, #0
 8002e38:	d19a      	bne.n	8002d70 <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002e3a:	697a      	ldr	r2, [r7, #20]
 8002e3c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8002e3e:	68f8      	ldr	r0, [r7, #12]
 8002e40:	f000 f940 	bl	80030c4 <I2C_WaitOnSTOPFlagUntilTimeout>
 8002e44:	4603      	mov	r3, r0
 8002e46:	2b00      	cmp	r3, #0
 8002e48:	d001      	beq.n	8002e4e <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 8002e4a:	2301      	movs	r3, #1
 8002e4c:	e01a      	b.n	8002e84 <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002e4e:	68fb      	ldr	r3, [r7, #12]
 8002e50:	681b      	ldr	r3, [r3, #0]
 8002e52:	2220      	movs	r2, #32
 8002e54:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8002e56:	68fb      	ldr	r3, [r7, #12]
 8002e58:	681b      	ldr	r3, [r3, #0]
 8002e5a:	6859      	ldr	r1, [r3, #4]
 8002e5c:	68fb      	ldr	r3, [r7, #12]
 8002e5e:	681a      	ldr	r2, [r3, #0]
 8002e60:	4b0b      	ldr	r3, [pc, #44]	@ (8002e90 <HAL_I2C_Mem_Read+0x230>)
 8002e62:	400b      	ands	r3, r1
 8002e64:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8002e66:	68fb      	ldr	r3, [r7, #12]
 8002e68:	2220      	movs	r2, #32
 8002e6a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8002e6e:	68fb      	ldr	r3, [r7, #12]
 8002e70:	2200      	movs	r2, #0
 8002e72:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002e76:	68fb      	ldr	r3, [r7, #12]
 8002e78:	2200      	movs	r2, #0
 8002e7a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8002e7e:	2300      	movs	r3, #0
 8002e80:	e000      	b.n	8002e84 <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 8002e82:	2302      	movs	r3, #2
  }
}
 8002e84:	4618      	mov	r0, r3
 8002e86:	3718      	adds	r7, #24
 8002e88:	46bd      	mov	sp, r7
 8002e8a:	bd80      	pop	{r7, pc}
 8002e8c:	80002400 	.word	0x80002400
 8002e90:	fe00e800 	.word	0xfe00e800

08002e94 <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 8002e94:	b580      	push	{r7, lr}
 8002e96:	b086      	sub	sp, #24
 8002e98:	af02      	add	r7, sp, #8
 8002e9a:	60f8      	str	r0, [r7, #12]
 8002e9c:	4608      	mov	r0, r1
 8002e9e:	4611      	mov	r1, r2
 8002ea0:	461a      	mov	r2, r3
 8002ea2:	4603      	mov	r3, r0
 8002ea4:	817b      	strh	r3, [r7, #10]
 8002ea6:	460b      	mov	r3, r1
 8002ea8:	813b      	strh	r3, [r7, #8]
 8002eaa:	4613      	mov	r3, r2
 8002eac:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8002eae:	88fb      	ldrh	r3, [r7, #6]
 8002eb0:	b2da      	uxtb	r2, r3
 8002eb2:	8979      	ldrh	r1, [r7, #10]
 8002eb4:	4b20      	ldr	r3, [pc, #128]	@ (8002f38 <I2C_RequestMemoryRead+0xa4>)
 8002eb6:	9300      	str	r3, [sp, #0]
 8002eb8:	2300      	movs	r3, #0
 8002eba:	68f8      	ldr	r0, [r7, #12]
 8002ebc:	f000 fa26 	bl	800330c <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002ec0:	69fa      	ldr	r2, [r7, #28]
 8002ec2:	69b9      	ldr	r1, [r7, #24]
 8002ec4:	68f8      	ldr	r0, [r7, #12]
 8002ec6:	f000 f8b6 	bl	8003036 <I2C_WaitOnTXISFlagUntilTimeout>
 8002eca:	4603      	mov	r3, r0
 8002ecc:	2b00      	cmp	r3, #0
 8002ece:	d001      	beq.n	8002ed4 <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 8002ed0:	2301      	movs	r3, #1
 8002ed2:	e02c      	b.n	8002f2e <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8002ed4:	88fb      	ldrh	r3, [r7, #6]
 8002ed6:	2b01      	cmp	r3, #1
 8002ed8:	d105      	bne.n	8002ee6 <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8002eda:	893b      	ldrh	r3, [r7, #8]
 8002edc:	b2da      	uxtb	r2, r3
 8002ede:	68fb      	ldr	r3, [r7, #12]
 8002ee0:	681b      	ldr	r3, [r3, #0]
 8002ee2:	629a      	str	r2, [r3, #40]	@ 0x28
 8002ee4:	e015      	b.n	8002f12 <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8002ee6:	893b      	ldrh	r3, [r7, #8]
 8002ee8:	0a1b      	lsrs	r3, r3, #8
 8002eea:	b29b      	uxth	r3, r3
 8002eec:	b2da      	uxtb	r2, r3
 8002eee:	68fb      	ldr	r3, [r7, #12]
 8002ef0:	681b      	ldr	r3, [r3, #0]
 8002ef2:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002ef4:	69fa      	ldr	r2, [r7, #28]
 8002ef6:	69b9      	ldr	r1, [r7, #24]
 8002ef8:	68f8      	ldr	r0, [r7, #12]
 8002efa:	f000 f89c 	bl	8003036 <I2C_WaitOnTXISFlagUntilTimeout>
 8002efe:	4603      	mov	r3, r0
 8002f00:	2b00      	cmp	r3, #0
 8002f02:	d001      	beq.n	8002f08 <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 8002f04:	2301      	movs	r3, #1
 8002f06:	e012      	b.n	8002f2e <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8002f08:	893b      	ldrh	r3, [r7, #8]
 8002f0a:	b2da      	uxtb	r2, r3
 8002f0c:	68fb      	ldr	r3, [r7, #12]
 8002f0e:	681b      	ldr	r3, [r3, #0]
 8002f10:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 8002f12:	69fb      	ldr	r3, [r7, #28]
 8002f14:	9300      	str	r3, [sp, #0]
 8002f16:	69bb      	ldr	r3, [r7, #24]
 8002f18:	2200      	movs	r2, #0
 8002f1a:	2140      	movs	r1, #64	@ 0x40
 8002f1c:	68f8      	ldr	r0, [r7, #12]
 8002f1e:	f000 f831 	bl	8002f84 <I2C_WaitOnFlagUntilTimeout>
 8002f22:	4603      	mov	r3, r0
 8002f24:	2b00      	cmp	r3, #0
 8002f26:	d001      	beq.n	8002f2c <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 8002f28:	2301      	movs	r3, #1
 8002f2a:	e000      	b.n	8002f2e <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 8002f2c:	2300      	movs	r3, #0
}
 8002f2e:	4618      	mov	r0, r3
 8002f30:	3710      	adds	r7, #16
 8002f32:	46bd      	mov	sp, r7
 8002f34:	bd80      	pop	{r7, pc}
 8002f36:	bf00      	nop
 8002f38:	80002000 	.word	0x80002000

08002f3c <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8002f3c:	b480      	push	{r7}
 8002f3e:	b083      	sub	sp, #12
 8002f40:	af00      	add	r7, sp, #0
 8002f42:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	681b      	ldr	r3, [r3, #0]
 8002f48:	699b      	ldr	r3, [r3, #24]
 8002f4a:	f003 0302 	and.w	r3, r3, #2
 8002f4e:	2b02      	cmp	r3, #2
 8002f50:	d103      	bne.n	8002f5a <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	681b      	ldr	r3, [r3, #0]
 8002f56:	2200      	movs	r2, #0
 8002f58:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	681b      	ldr	r3, [r3, #0]
 8002f5e:	699b      	ldr	r3, [r3, #24]
 8002f60:	f003 0301 	and.w	r3, r3, #1
 8002f64:	2b01      	cmp	r3, #1
 8002f66:	d007      	beq.n	8002f78 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	681b      	ldr	r3, [r3, #0]
 8002f6c:	699a      	ldr	r2, [r3, #24]
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	681b      	ldr	r3, [r3, #0]
 8002f72:	f042 0201 	orr.w	r2, r2, #1
 8002f76:	619a      	str	r2, [r3, #24]
  }
}
 8002f78:	bf00      	nop
 8002f7a:	370c      	adds	r7, #12
 8002f7c:	46bd      	mov	sp, r7
 8002f7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f82:	4770      	bx	lr

08002f84 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8002f84:	b580      	push	{r7, lr}
 8002f86:	b084      	sub	sp, #16
 8002f88:	af00      	add	r7, sp, #0
 8002f8a:	60f8      	str	r0, [r7, #12]
 8002f8c:	60b9      	str	r1, [r7, #8]
 8002f8e:	603b      	str	r3, [r7, #0]
 8002f90:	4613      	mov	r3, r2
 8002f92:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002f94:	e03b      	b.n	800300e <I2C_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8002f96:	69ba      	ldr	r2, [r7, #24]
 8002f98:	6839      	ldr	r1, [r7, #0]
 8002f9a:	68f8      	ldr	r0, [r7, #12]
 8002f9c:	f000 f8d6 	bl	800314c <I2C_IsErrorOccurred>
 8002fa0:	4603      	mov	r3, r0
 8002fa2:	2b00      	cmp	r3, #0
 8002fa4:	d001      	beq.n	8002faa <I2C_WaitOnFlagUntilTimeout+0x26>
    {
      return HAL_ERROR;
 8002fa6:	2301      	movs	r3, #1
 8002fa8:	e041      	b.n	800302e <I2C_WaitOnFlagUntilTimeout+0xaa>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002faa:	683b      	ldr	r3, [r7, #0]
 8002fac:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002fb0:	d02d      	beq.n	800300e <I2C_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002fb2:	f7fe fcff 	bl	80019b4 <HAL_GetTick>
 8002fb6:	4602      	mov	r2, r0
 8002fb8:	69bb      	ldr	r3, [r7, #24]
 8002fba:	1ad3      	subs	r3, r2, r3
 8002fbc:	683a      	ldr	r2, [r7, #0]
 8002fbe:	429a      	cmp	r2, r3
 8002fc0:	d302      	bcc.n	8002fc8 <I2C_WaitOnFlagUntilTimeout+0x44>
 8002fc2:	683b      	ldr	r3, [r7, #0]
 8002fc4:	2b00      	cmp	r3, #0
 8002fc6:	d122      	bne.n	800300e <I2C_WaitOnFlagUntilTimeout+0x8a>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8002fc8:	68fb      	ldr	r3, [r7, #12]
 8002fca:	681b      	ldr	r3, [r3, #0]
 8002fcc:	699a      	ldr	r2, [r3, #24]
 8002fce:	68bb      	ldr	r3, [r7, #8]
 8002fd0:	4013      	ands	r3, r2
 8002fd2:	68ba      	ldr	r2, [r7, #8]
 8002fd4:	429a      	cmp	r2, r3
 8002fd6:	bf0c      	ite	eq
 8002fd8:	2301      	moveq	r3, #1
 8002fda:	2300      	movne	r3, #0
 8002fdc:	b2db      	uxtb	r3, r3
 8002fde:	461a      	mov	r2, r3
 8002fe0:	79fb      	ldrb	r3, [r7, #7]
 8002fe2:	429a      	cmp	r2, r3
 8002fe4:	d113      	bne.n	800300e <I2C_WaitOnFlagUntilTimeout+0x8a>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002fe6:	68fb      	ldr	r3, [r7, #12]
 8002fe8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002fea:	f043 0220 	orr.w	r2, r3, #32
 8002fee:	68fb      	ldr	r3, [r7, #12]
 8002ff0:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8002ff2:	68fb      	ldr	r3, [r7, #12]
 8002ff4:	2220      	movs	r2, #32
 8002ff6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8002ffa:	68fb      	ldr	r3, [r7, #12]
 8002ffc:	2200      	movs	r2, #0
 8002ffe:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003002:	68fb      	ldr	r3, [r7, #12]
 8003004:	2200      	movs	r2, #0
 8003006:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
          return HAL_ERROR;
 800300a:	2301      	movs	r3, #1
 800300c:	e00f      	b.n	800302e <I2C_WaitOnFlagUntilTimeout+0xaa>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800300e:	68fb      	ldr	r3, [r7, #12]
 8003010:	681b      	ldr	r3, [r3, #0]
 8003012:	699a      	ldr	r2, [r3, #24]
 8003014:	68bb      	ldr	r3, [r7, #8]
 8003016:	4013      	ands	r3, r2
 8003018:	68ba      	ldr	r2, [r7, #8]
 800301a:	429a      	cmp	r2, r3
 800301c:	bf0c      	ite	eq
 800301e:	2301      	moveq	r3, #1
 8003020:	2300      	movne	r3, #0
 8003022:	b2db      	uxtb	r3, r3
 8003024:	461a      	mov	r2, r3
 8003026:	79fb      	ldrb	r3, [r7, #7]
 8003028:	429a      	cmp	r2, r3
 800302a:	d0b4      	beq.n	8002f96 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800302c:	2300      	movs	r3, #0
}
 800302e:	4618      	mov	r0, r3
 8003030:	3710      	adds	r7, #16
 8003032:	46bd      	mov	sp, r7
 8003034:	bd80      	pop	{r7, pc}

08003036 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8003036:	b580      	push	{r7, lr}
 8003038:	b084      	sub	sp, #16
 800303a:	af00      	add	r7, sp, #0
 800303c:	60f8      	str	r0, [r7, #12]
 800303e:	60b9      	str	r1, [r7, #8]
 8003040:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8003042:	e033      	b.n	80030ac <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8003044:	687a      	ldr	r2, [r7, #4]
 8003046:	68b9      	ldr	r1, [r7, #8]
 8003048:	68f8      	ldr	r0, [r7, #12]
 800304a:	f000 f87f 	bl	800314c <I2C_IsErrorOccurred>
 800304e:	4603      	mov	r3, r0
 8003050:	2b00      	cmp	r3, #0
 8003052:	d001      	beq.n	8003058 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8003054:	2301      	movs	r3, #1
 8003056:	e031      	b.n	80030bc <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003058:	68bb      	ldr	r3, [r7, #8]
 800305a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800305e:	d025      	beq.n	80030ac <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003060:	f7fe fca8 	bl	80019b4 <HAL_GetTick>
 8003064:	4602      	mov	r2, r0
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	1ad3      	subs	r3, r2, r3
 800306a:	68ba      	ldr	r2, [r7, #8]
 800306c:	429a      	cmp	r2, r3
 800306e:	d302      	bcc.n	8003076 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8003070:	68bb      	ldr	r3, [r7, #8]
 8003072:	2b00      	cmp	r3, #0
 8003074:	d11a      	bne.n	80030ac <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 8003076:	68fb      	ldr	r3, [r7, #12]
 8003078:	681b      	ldr	r3, [r3, #0]
 800307a:	699b      	ldr	r3, [r3, #24]
 800307c:	f003 0302 	and.w	r3, r3, #2
 8003080:	2b02      	cmp	r3, #2
 8003082:	d013      	beq.n	80030ac <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003084:	68fb      	ldr	r3, [r7, #12]
 8003086:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003088:	f043 0220 	orr.w	r2, r3, #32
 800308c:	68fb      	ldr	r3, [r7, #12]
 800308e:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8003090:	68fb      	ldr	r3, [r7, #12]
 8003092:	2220      	movs	r2, #32
 8003094:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8003098:	68fb      	ldr	r3, [r7, #12]
 800309a:	2200      	movs	r2, #0
 800309c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80030a0:	68fb      	ldr	r3, [r7, #12]
 80030a2:	2200      	movs	r2, #0
 80030a4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 80030a8:	2301      	movs	r3, #1
 80030aa:	e007      	b.n	80030bc <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80030ac:	68fb      	ldr	r3, [r7, #12]
 80030ae:	681b      	ldr	r3, [r3, #0]
 80030b0:	699b      	ldr	r3, [r3, #24]
 80030b2:	f003 0302 	and.w	r3, r3, #2
 80030b6:	2b02      	cmp	r3, #2
 80030b8:	d1c4      	bne.n	8003044 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80030ba:	2300      	movs	r3, #0
}
 80030bc:	4618      	mov	r0, r3
 80030be:	3710      	adds	r7, #16
 80030c0:	46bd      	mov	sp, r7
 80030c2:	bd80      	pop	{r7, pc}

080030c4 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80030c4:	b580      	push	{r7, lr}
 80030c6:	b084      	sub	sp, #16
 80030c8:	af00      	add	r7, sp, #0
 80030ca:	60f8      	str	r0, [r7, #12]
 80030cc:	60b9      	str	r1, [r7, #8]
 80030ce:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80030d0:	e02f      	b.n	8003132 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80030d2:	687a      	ldr	r2, [r7, #4]
 80030d4:	68b9      	ldr	r1, [r7, #8]
 80030d6:	68f8      	ldr	r0, [r7, #12]
 80030d8:	f000 f838 	bl	800314c <I2C_IsErrorOccurred>
 80030dc:	4603      	mov	r3, r0
 80030de:	2b00      	cmp	r3, #0
 80030e0:	d001      	beq.n	80030e6 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80030e2:	2301      	movs	r3, #1
 80030e4:	e02d      	b.n	8003142 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80030e6:	f7fe fc65 	bl	80019b4 <HAL_GetTick>
 80030ea:	4602      	mov	r2, r0
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	1ad3      	subs	r3, r2, r3
 80030f0:	68ba      	ldr	r2, [r7, #8]
 80030f2:	429a      	cmp	r2, r3
 80030f4:	d302      	bcc.n	80030fc <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 80030f6:	68bb      	ldr	r3, [r7, #8]
 80030f8:	2b00      	cmp	r3, #0
 80030fa:	d11a      	bne.n	8003132 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 80030fc:	68fb      	ldr	r3, [r7, #12]
 80030fe:	681b      	ldr	r3, [r3, #0]
 8003100:	699b      	ldr	r3, [r3, #24]
 8003102:	f003 0320 	and.w	r3, r3, #32
 8003106:	2b20      	cmp	r3, #32
 8003108:	d013      	beq.n	8003132 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800310a:	68fb      	ldr	r3, [r7, #12]
 800310c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800310e:	f043 0220 	orr.w	r2, r3, #32
 8003112:	68fb      	ldr	r3, [r7, #12]
 8003114:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8003116:	68fb      	ldr	r3, [r7, #12]
 8003118:	2220      	movs	r2, #32
 800311a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800311e:	68fb      	ldr	r3, [r7, #12]
 8003120:	2200      	movs	r2, #0
 8003122:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003126:	68fb      	ldr	r3, [r7, #12]
 8003128:	2200      	movs	r2, #0
 800312a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_ERROR;
 800312e:	2301      	movs	r3, #1
 8003130:	e007      	b.n	8003142 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003132:	68fb      	ldr	r3, [r7, #12]
 8003134:	681b      	ldr	r3, [r3, #0]
 8003136:	699b      	ldr	r3, [r3, #24]
 8003138:	f003 0320 	and.w	r3, r3, #32
 800313c:	2b20      	cmp	r3, #32
 800313e:	d1c8      	bne.n	80030d2 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003140:	2300      	movs	r3, #0
}
 8003142:	4618      	mov	r0, r3
 8003144:	3710      	adds	r7, #16
 8003146:	46bd      	mov	sp, r7
 8003148:	bd80      	pop	{r7, pc}
	...

0800314c <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800314c:	b580      	push	{r7, lr}
 800314e:	b08a      	sub	sp, #40	@ 0x28
 8003150:	af00      	add	r7, sp, #0
 8003152:	60f8      	str	r0, [r7, #12]
 8003154:	60b9      	str	r1, [r7, #8]
 8003156:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003158:	2300      	movs	r3, #0
 800315a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 800315e:	68fb      	ldr	r3, [r7, #12]
 8003160:	681b      	ldr	r3, [r3, #0]
 8003162:	699b      	ldr	r3, [r3, #24]
 8003164:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8003166:	2300      	movs	r3, #0
 8003168:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 800316e:	69bb      	ldr	r3, [r7, #24]
 8003170:	f003 0310 	and.w	r3, r3, #16
 8003174:	2b00      	cmp	r3, #0
 8003176:	d068      	beq.n	800324a <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003178:	68fb      	ldr	r3, [r7, #12]
 800317a:	681b      	ldr	r3, [r3, #0]
 800317c:	2210      	movs	r2, #16
 800317e:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8003180:	e049      	b.n	8003216 <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8003182:	68bb      	ldr	r3, [r7, #8]
 8003184:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003188:	d045      	beq.n	8003216 <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 800318a:	f7fe fc13 	bl	80019b4 <HAL_GetTick>
 800318e:	4602      	mov	r2, r0
 8003190:	69fb      	ldr	r3, [r7, #28]
 8003192:	1ad3      	subs	r3, r2, r3
 8003194:	68ba      	ldr	r2, [r7, #8]
 8003196:	429a      	cmp	r2, r3
 8003198:	d302      	bcc.n	80031a0 <I2C_IsErrorOccurred+0x54>
 800319a:	68bb      	ldr	r3, [r7, #8]
 800319c:	2b00      	cmp	r3, #0
 800319e:	d13a      	bne.n	8003216 <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 80031a0:	68fb      	ldr	r3, [r7, #12]
 80031a2:	681b      	ldr	r3, [r3, #0]
 80031a4:	685b      	ldr	r3, [r3, #4]
 80031a6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80031aa:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 80031ac:	68fb      	ldr	r3, [r7, #12]
 80031ae:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80031b2:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 80031b4:	68fb      	ldr	r3, [r7, #12]
 80031b6:	681b      	ldr	r3, [r3, #0]
 80031b8:	699b      	ldr	r3, [r3, #24]
 80031ba:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80031be:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80031c2:	d121      	bne.n	8003208 <I2C_IsErrorOccurred+0xbc>
 80031c4:	697b      	ldr	r3, [r7, #20]
 80031c6:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80031ca:	d01d      	beq.n	8003208 <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 80031cc:	7cfb      	ldrb	r3, [r7, #19]
 80031ce:	2b20      	cmp	r3, #32
 80031d0:	d01a      	beq.n	8003208 <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 80031d2:	68fb      	ldr	r3, [r7, #12]
 80031d4:	681b      	ldr	r3, [r3, #0]
 80031d6:	685a      	ldr	r2, [r3, #4]
 80031d8:	68fb      	ldr	r3, [r7, #12]
 80031da:	681b      	ldr	r3, [r3, #0]
 80031dc:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80031e0:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 80031e2:	f7fe fbe7 	bl	80019b4 <HAL_GetTick>
 80031e6:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80031e8:	e00e      	b.n	8003208 <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 80031ea:	f7fe fbe3 	bl	80019b4 <HAL_GetTick>
 80031ee:	4602      	mov	r2, r0
 80031f0:	69fb      	ldr	r3, [r7, #28]
 80031f2:	1ad3      	subs	r3, r2, r3
 80031f4:	2b19      	cmp	r3, #25
 80031f6:	d907      	bls.n	8003208 <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 80031f8:	6a3b      	ldr	r3, [r7, #32]
 80031fa:	f043 0320 	orr.w	r3, r3, #32
 80031fe:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8003200:	2301      	movs	r3, #1
 8003202:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

              break;
 8003206:	e006      	b.n	8003216 <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003208:	68fb      	ldr	r3, [r7, #12]
 800320a:	681b      	ldr	r3, [r3, #0]
 800320c:	699b      	ldr	r3, [r3, #24]
 800320e:	f003 0320 	and.w	r3, r3, #32
 8003212:	2b20      	cmp	r3, #32
 8003214:	d1e9      	bne.n	80031ea <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8003216:	68fb      	ldr	r3, [r7, #12]
 8003218:	681b      	ldr	r3, [r3, #0]
 800321a:	699b      	ldr	r3, [r3, #24]
 800321c:	f003 0320 	and.w	r3, r3, #32
 8003220:	2b20      	cmp	r3, #32
 8003222:	d003      	beq.n	800322c <I2C_IsErrorOccurred+0xe0>
 8003224:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8003228:	2b00      	cmp	r3, #0
 800322a:	d0aa      	beq.n	8003182 <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 800322c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8003230:	2b00      	cmp	r3, #0
 8003232:	d103      	bne.n	800323c <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003234:	68fb      	ldr	r3, [r7, #12]
 8003236:	681b      	ldr	r3, [r3, #0]
 8003238:	2220      	movs	r2, #32
 800323a:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 800323c:	6a3b      	ldr	r3, [r7, #32]
 800323e:	f043 0304 	orr.w	r3, r3, #4
 8003242:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8003244:	2301      	movs	r3, #1
 8003246:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 800324a:	68fb      	ldr	r3, [r7, #12]
 800324c:	681b      	ldr	r3, [r3, #0]
 800324e:	699b      	ldr	r3, [r3, #24]
 8003250:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8003252:	69bb      	ldr	r3, [r7, #24]
 8003254:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003258:	2b00      	cmp	r3, #0
 800325a:	d00b      	beq.n	8003274 <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 800325c:	6a3b      	ldr	r3, [r7, #32]
 800325e:	f043 0301 	orr.w	r3, r3, #1
 8003262:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8003264:	68fb      	ldr	r3, [r7, #12]
 8003266:	681b      	ldr	r3, [r3, #0]
 8003268:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800326c:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800326e:	2301      	movs	r3, #1
 8003270:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8003274:	69bb      	ldr	r3, [r7, #24]
 8003276:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800327a:	2b00      	cmp	r3, #0
 800327c:	d00b      	beq.n	8003296 <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 800327e:	6a3b      	ldr	r3, [r7, #32]
 8003280:	f043 0308 	orr.w	r3, r3, #8
 8003284:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8003286:	68fb      	ldr	r3, [r7, #12]
 8003288:	681b      	ldr	r3, [r3, #0]
 800328a:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800328e:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8003290:	2301      	movs	r3, #1
 8003292:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8003296:	69bb      	ldr	r3, [r7, #24]
 8003298:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800329c:	2b00      	cmp	r3, #0
 800329e:	d00b      	beq.n	80032b8 <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 80032a0:	6a3b      	ldr	r3, [r7, #32]
 80032a2:	f043 0302 	orr.w	r3, r3, #2
 80032a6:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 80032a8:	68fb      	ldr	r3, [r7, #12]
 80032aa:	681b      	ldr	r3, [r3, #0]
 80032ac:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80032b0:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80032b2:	2301      	movs	r3, #1
 80032b4:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  if (status != HAL_OK)
 80032b8:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80032bc:	2b00      	cmp	r3, #0
 80032be:	d01c      	beq.n	80032fa <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 80032c0:	68f8      	ldr	r0, [r7, #12]
 80032c2:	f7ff fe3b 	bl	8002f3c <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80032c6:	68fb      	ldr	r3, [r7, #12]
 80032c8:	681b      	ldr	r3, [r3, #0]
 80032ca:	6859      	ldr	r1, [r3, #4]
 80032cc:	68fb      	ldr	r3, [r7, #12]
 80032ce:	681a      	ldr	r2, [r3, #0]
 80032d0:	4b0d      	ldr	r3, [pc, #52]	@ (8003308 <I2C_IsErrorOccurred+0x1bc>)
 80032d2:	400b      	ands	r3, r1
 80032d4:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 80032d6:	68fb      	ldr	r3, [r7, #12]
 80032d8:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80032da:	6a3b      	ldr	r3, [r7, #32]
 80032dc:	431a      	orrs	r2, r3
 80032de:	68fb      	ldr	r3, [r7, #12]
 80032e0:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 80032e2:	68fb      	ldr	r3, [r7, #12]
 80032e4:	2220      	movs	r2, #32
 80032e6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80032ea:	68fb      	ldr	r3, [r7, #12]
 80032ec:	2200      	movs	r2, #0
 80032ee:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80032f2:	68fb      	ldr	r3, [r7, #12]
 80032f4:	2200      	movs	r2, #0
 80032f6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  }

  return status;
 80032fa:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 80032fe:	4618      	mov	r0, r3
 8003300:	3728      	adds	r7, #40	@ 0x28
 8003302:	46bd      	mov	sp, r7
 8003304:	bd80      	pop	{r7, pc}
 8003306:	bf00      	nop
 8003308:	fe00e800 	.word	0xfe00e800

0800330c <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 800330c:	b480      	push	{r7}
 800330e:	b087      	sub	sp, #28
 8003310:	af00      	add	r7, sp, #0
 8003312:	60f8      	str	r0, [r7, #12]
 8003314:	607b      	str	r3, [r7, #4]
 8003316:	460b      	mov	r3, r1
 8003318:	817b      	strh	r3, [r7, #10]
 800331a:	4613      	mov	r3, r2
 800331c:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800331e:	897b      	ldrh	r3, [r7, #10]
 8003320:	f3c3 0209 	ubfx	r2, r3, #0, #10
                    (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8003324:	7a7b      	ldrb	r3, [r7, #9]
 8003326:	041b      	lsls	r3, r3, #16
 8003328:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
  tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800332c:	431a      	orrs	r2, r3
                    (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	431a      	orrs	r2, r3
  tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8003332:	6a3b      	ldr	r3, [r7, #32]
 8003334:	4313      	orrs	r3, r2
 8003336:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800333a:	617b      	str	r3, [r7, #20]
                    (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 800333c:	68fb      	ldr	r3, [r7, #12]
 800333e:	681b      	ldr	r3, [r3, #0]
 8003340:	685a      	ldr	r2, [r3, #4]
 8003342:	6a3b      	ldr	r3, [r7, #32]
 8003344:	0d5b      	lsrs	r3, r3, #21
 8003346:	f403 6180 	and.w	r1, r3, #1024	@ 0x400
 800334a:	4b08      	ldr	r3, [pc, #32]	@ (800336c <I2C_TransferConfig+0x60>)
 800334c:	430b      	orrs	r3, r1
 800334e:	43db      	mvns	r3, r3
 8003350:	ea02 0103 	and.w	r1, r2, r3
 8003354:	68fb      	ldr	r3, [r7, #12]
 8003356:	681b      	ldr	r3, [r3, #0]
 8003358:	697a      	ldr	r2, [r7, #20]
 800335a:	430a      	orrs	r2, r1
 800335c:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 800335e:	bf00      	nop
 8003360:	371c      	adds	r7, #28
 8003362:	46bd      	mov	sp, r7
 8003364:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003368:	4770      	bx	lr
 800336a:	bf00      	nop
 800336c:	03ff63ff 	.word	0x03ff63ff

08003370 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8003370:	b480      	push	{r7}
 8003372:	b083      	sub	sp, #12
 8003374:	af00      	add	r7, sp, #0
 8003376:	6078      	str	r0, [r7, #4]
 8003378:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003380:	b2db      	uxtb	r3, r3
 8003382:	2b20      	cmp	r3, #32
 8003384:	d138      	bne.n	80033f8 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800338c:	2b01      	cmp	r3, #1
 800338e:	d101      	bne.n	8003394 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8003390:	2302      	movs	r3, #2
 8003392:	e032      	b.n	80033fa <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	2201      	movs	r2, #1
 8003398:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	2224      	movs	r2, #36	@ 0x24
 80033a0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	681b      	ldr	r3, [r3, #0]
 80033a8:	681a      	ldr	r2, [r3, #0]
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	681b      	ldr	r3, [r3, #0]
 80033ae:	f022 0201 	bic.w	r2, r2, #1
 80033b2:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	681b      	ldr	r3, [r3, #0]
 80033b8:	681a      	ldr	r2, [r3, #0]
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	681b      	ldr	r3, [r3, #0]
 80033be:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 80033c2:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	681b      	ldr	r3, [r3, #0]
 80033c8:	6819      	ldr	r1, [r3, #0]
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	681b      	ldr	r3, [r3, #0]
 80033ce:	683a      	ldr	r2, [r7, #0]
 80033d0:	430a      	orrs	r2, r1
 80033d2:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	681b      	ldr	r3, [r3, #0]
 80033d8:	681a      	ldr	r2, [r3, #0]
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	681b      	ldr	r3, [r3, #0]
 80033de:	f042 0201 	orr.w	r2, r2, #1
 80033e2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	2220      	movs	r2, #32
 80033e8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	2200      	movs	r2, #0
 80033f0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 80033f4:	2300      	movs	r3, #0
 80033f6:	e000      	b.n	80033fa <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80033f8:	2302      	movs	r3, #2
  }
}
 80033fa:	4618      	mov	r0, r3
 80033fc:	370c      	adds	r7, #12
 80033fe:	46bd      	mov	sp, r7
 8003400:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003404:	4770      	bx	lr

08003406 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8003406:	b480      	push	{r7}
 8003408:	b085      	sub	sp, #20
 800340a:	af00      	add	r7, sp, #0
 800340c:	6078      	str	r0, [r7, #4]
 800340e:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003416:	b2db      	uxtb	r3, r3
 8003418:	2b20      	cmp	r3, #32
 800341a:	d139      	bne.n	8003490 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8003422:	2b01      	cmp	r3, #1
 8003424:	d101      	bne.n	800342a <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8003426:	2302      	movs	r3, #2
 8003428:	e033      	b.n	8003492 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	2201      	movs	r2, #1
 800342e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	2224      	movs	r2, #36	@ 0x24
 8003436:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	681b      	ldr	r3, [r3, #0]
 800343e:	681a      	ldr	r2, [r3, #0]
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	681b      	ldr	r3, [r3, #0]
 8003444:	f022 0201 	bic.w	r2, r2, #1
 8003448:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	681b      	ldr	r3, [r3, #0]
 800344e:	681b      	ldr	r3, [r3, #0]
 8003450:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8003452:	68fb      	ldr	r3, [r7, #12]
 8003454:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8003458:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 800345a:	683b      	ldr	r3, [r7, #0]
 800345c:	021b      	lsls	r3, r3, #8
 800345e:	68fa      	ldr	r2, [r7, #12]
 8003460:	4313      	orrs	r3, r2
 8003462:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	681b      	ldr	r3, [r3, #0]
 8003468:	68fa      	ldr	r2, [r7, #12]
 800346a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	681b      	ldr	r3, [r3, #0]
 8003470:	681a      	ldr	r2, [r3, #0]
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	681b      	ldr	r3, [r3, #0]
 8003476:	f042 0201 	orr.w	r2, r2, #1
 800347a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	2220      	movs	r2, #32
 8003480:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	2200      	movs	r2, #0
 8003488:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 800348c:	2300      	movs	r3, #0
 800348e:	e000      	b.n	8003492 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8003490:	2302      	movs	r3, #2
  }
}
 8003492:	4618      	mov	r0, r3
 8003494:	3714      	adds	r7, #20
 8003496:	46bd      	mov	sp, r7
 8003498:	f85d 7b04 	ldr.w	r7, [sp], #4
 800349c:	4770      	bx	lr
	...

080034a0 <HAL_PWREx_ConfigSupply>:
  *         process during startup.
  *         For more details, please refer to the power control chapter in the reference manual
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 80034a0:	b580      	push	{r7, lr}
 80034a2:	b084      	sub	sp, #16
 80034a4:	af00      	add	r7, sp, #0
 80034a6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 80034a8:	4b19      	ldr	r3, [pc, #100]	@ (8003510 <HAL_PWREx_ConfigSupply+0x70>)
 80034aa:	68db      	ldr	r3, [r3, #12]
 80034ac:	f003 0304 	and.w	r3, r3, #4
 80034b0:	2b04      	cmp	r3, #4
 80034b2:	d00a      	beq.n	80034ca <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 80034b4:	4b16      	ldr	r3, [pc, #88]	@ (8003510 <HAL_PWREx_ConfigSupply+0x70>)
 80034b6:	68db      	ldr	r3, [r3, #12]
 80034b8:	f003 0307 	and.w	r3, r3, #7
 80034bc:	687a      	ldr	r2, [r7, #4]
 80034be:	429a      	cmp	r2, r3
 80034c0:	d001      	beq.n	80034c6 <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 80034c2:	2301      	movs	r3, #1
 80034c4:	e01f      	b.n	8003506 <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 80034c6:	2300      	movs	r3, #0
 80034c8:	e01d      	b.n	8003506 <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 80034ca:	4b11      	ldr	r3, [pc, #68]	@ (8003510 <HAL_PWREx_ConfigSupply+0x70>)
 80034cc:	68db      	ldr	r3, [r3, #12]
 80034ce:	f023 0207 	bic.w	r2, r3, #7
 80034d2:	490f      	ldr	r1, [pc, #60]	@ (8003510 <HAL_PWREx_ConfigSupply+0x70>)
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	4313      	orrs	r3, r2
 80034d8:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 80034da:	f7fe fa6b 	bl	80019b4 <HAL_GetTick>
 80034de:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 80034e0:	e009      	b.n	80034f6 <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 80034e2:	f7fe fa67 	bl	80019b4 <HAL_GetTick>
 80034e6:	4602      	mov	r2, r0
 80034e8:	68fb      	ldr	r3, [r7, #12]
 80034ea:	1ad3      	subs	r3, r2, r3
 80034ec:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80034f0:	d901      	bls.n	80034f6 <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 80034f2:	2301      	movs	r3, #1
 80034f4:	e007      	b.n	8003506 <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 80034f6:	4b06      	ldr	r3, [pc, #24]	@ (8003510 <HAL_PWREx_ConfigSupply+0x70>)
 80034f8:	685b      	ldr	r3, [r3, #4]
 80034fa:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80034fe:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003502:	d1ee      	bne.n	80034e2 <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8003504:	2300      	movs	r3, #0
}
 8003506:	4618      	mov	r0, r3
 8003508:	3710      	adds	r7, #16
 800350a:	46bd      	mov	sp, r7
 800350c:	bd80      	pop	{r7, pc}
 800350e:	bf00      	nop
 8003510:	58024800 	.word	0x58024800

08003514 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003514:	b580      	push	{r7, lr}
 8003516:	b08c      	sub	sp, #48	@ 0x30
 8003518:	af00      	add	r7, sp, #0
 800351a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	2b00      	cmp	r3, #0
 8003520:	d101      	bne.n	8003526 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003522:	2301      	movs	r3, #1
 8003524:	e3c8      	b.n	8003cb8 <HAL_RCC_OscConfig+0x7a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	681b      	ldr	r3, [r3, #0]
 800352a:	f003 0301 	and.w	r3, r3, #1
 800352e:	2b00      	cmp	r3, #0
 8003530:	f000 8087 	beq.w	8003642 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003534:	4b88      	ldr	r3, [pc, #544]	@ (8003758 <HAL_RCC_OscConfig+0x244>)
 8003536:	691b      	ldr	r3, [r3, #16]
 8003538:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800353c:	62fb      	str	r3, [r7, #44]	@ 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800353e:	4b86      	ldr	r3, [pc, #536]	@ (8003758 <HAL_RCC_OscConfig+0x244>)
 8003540:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003542:	62bb      	str	r3, [r7, #40]	@ 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8003544:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003546:	2b10      	cmp	r3, #16
 8003548:	d007      	beq.n	800355a <HAL_RCC_OscConfig+0x46>
 800354a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800354c:	2b18      	cmp	r3, #24
 800354e:	d110      	bne.n	8003572 <HAL_RCC_OscConfig+0x5e>
 8003550:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003552:	f003 0303 	and.w	r3, r3, #3
 8003556:	2b02      	cmp	r3, #2
 8003558:	d10b      	bne.n	8003572 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800355a:	4b7f      	ldr	r3, [pc, #508]	@ (8003758 <HAL_RCC_OscConfig+0x244>)
 800355c:	681b      	ldr	r3, [r3, #0]
 800355e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003562:	2b00      	cmp	r3, #0
 8003564:	d06c      	beq.n	8003640 <HAL_RCC_OscConfig+0x12c>
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	685b      	ldr	r3, [r3, #4]
 800356a:	2b00      	cmp	r3, #0
 800356c:	d168      	bne.n	8003640 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800356e:	2301      	movs	r3, #1
 8003570:	e3a2      	b.n	8003cb8 <HAL_RCC_OscConfig+0x7a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	685b      	ldr	r3, [r3, #4]
 8003576:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800357a:	d106      	bne.n	800358a <HAL_RCC_OscConfig+0x76>
 800357c:	4b76      	ldr	r3, [pc, #472]	@ (8003758 <HAL_RCC_OscConfig+0x244>)
 800357e:	681b      	ldr	r3, [r3, #0]
 8003580:	4a75      	ldr	r2, [pc, #468]	@ (8003758 <HAL_RCC_OscConfig+0x244>)
 8003582:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003586:	6013      	str	r3, [r2, #0]
 8003588:	e02e      	b.n	80035e8 <HAL_RCC_OscConfig+0xd4>
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	685b      	ldr	r3, [r3, #4]
 800358e:	2b00      	cmp	r3, #0
 8003590:	d10c      	bne.n	80035ac <HAL_RCC_OscConfig+0x98>
 8003592:	4b71      	ldr	r3, [pc, #452]	@ (8003758 <HAL_RCC_OscConfig+0x244>)
 8003594:	681b      	ldr	r3, [r3, #0]
 8003596:	4a70      	ldr	r2, [pc, #448]	@ (8003758 <HAL_RCC_OscConfig+0x244>)
 8003598:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800359c:	6013      	str	r3, [r2, #0]
 800359e:	4b6e      	ldr	r3, [pc, #440]	@ (8003758 <HAL_RCC_OscConfig+0x244>)
 80035a0:	681b      	ldr	r3, [r3, #0]
 80035a2:	4a6d      	ldr	r2, [pc, #436]	@ (8003758 <HAL_RCC_OscConfig+0x244>)
 80035a4:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80035a8:	6013      	str	r3, [r2, #0]
 80035aa:	e01d      	b.n	80035e8 <HAL_RCC_OscConfig+0xd4>
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	685b      	ldr	r3, [r3, #4]
 80035b0:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80035b4:	d10c      	bne.n	80035d0 <HAL_RCC_OscConfig+0xbc>
 80035b6:	4b68      	ldr	r3, [pc, #416]	@ (8003758 <HAL_RCC_OscConfig+0x244>)
 80035b8:	681b      	ldr	r3, [r3, #0]
 80035ba:	4a67      	ldr	r2, [pc, #412]	@ (8003758 <HAL_RCC_OscConfig+0x244>)
 80035bc:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80035c0:	6013      	str	r3, [r2, #0]
 80035c2:	4b65      	ldr	r3, [pc, #404]	@ (8003758 <HAL_RCC_OscConfig+0x244>)
 80035c4:	681b      	ldr	r3, [r3, #0]
 80035c6:	4a64      	ldr	r2, [pc, #400]	@ (8003758 <HAL_RCC_OscConfig+0x244>)
 80035c8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80035cc:	6013      	str	r3, [r2, #0]
 80035ce:	e00b      	b.n	80035e8 <HAL_RCC_OscConfig+0xd4>
 80035d0:	4b61      	ldr	r3, [pc, #388]	@ (8003758 <HAL_RCC_OscConfig+0x244>)
 80035d2:	681b      	ldr	r3, [r3, #0]
 80035d4:	4a60      	ldr	r2, [pc, #384]	@ (8003758 <HAL_RCC_OscConfig+0x244>)
 80035d6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80035da:	6013      	str	r3, [r2, #0]
 80035dc:	4b5e      	ldr	r3, [pc, #376]	@ (8003758 <HAL_RCC_OscConfig+0x244>)
 80035de:	681b      	ldr	r3, [r3, #0]
 80035e0:	4a5d      	ldr	r2, [pc, #372]	@ (8003758 <HAL_RCC_OscConfig+0x244>)
 80035e2:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80035e6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	685b      	ldr	r3, [r3, #4]
 80035ec:	2b00      	cmp	r3, #0
 80035ee:	d013      	beq.n	8003618 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80035f0:	f7fe f9e0 	bl	80019b4 <HAL_GetTick>
 80035f4:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80035f6:	e008      	b.n	800360a <HAL_RCC_OscConfig+0xf6>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80035f8:	f7fe f9dc 	bl	80019b4 <HAL_GetTick>
 80035fc:	4602      	mov	r2, r0
 80035fe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003600:	1ad3      	subs	r3, r2, r3
 8003602:	2b64      	cmp	r3, #100	@ 0x64
 8003604:	d901      	bls.n	800360a <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8003606:	2303      	movs	r3, #3
 8003608:	e356      	b.n	8003cb8 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800360a:	4b53      	ldr	r3, [pc, #332]	@ (8003758 <HAL_RCC_OscConfig+0x244>)
 800360c:	681b      	ldr	r3, [r3, #0]
 800360e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003612:	2b00      	cmp	r3, #0
 8003614:	d0f0      	beq.n	80035f8 <HAL_RCC_OscConfig+0xe4>
 8003616:	e014      	b.n	8003642 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003618:	f7fe f9cc 	bl	80019b4 <HAL_GetTick>
 800361c:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800361e:	e008      	b.n	8003632 <HAL_RCC_OscConfig+0x11e>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003620:	f7fe f9c8 	bl	80019b4 <HAL_GetTick>
 8003624:	4602      	mov	r2, r0
 8003626:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003628:	1ad3      	subs	r3, r2, r3
 800362a:	2b64      	cmp	r3, #100	@ 0x64
 800362c:	d901      	bls.n	8003632 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800362e:	2303      	movs	r3, #3
 8003630:	e342      	b.n	8003cb8 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8003632:	4b49      	ldr	r3, [pc, #292]	@ (8003758 <HAL_RCC_OscConfig+0x244>)
 8003634:	681b      	ldr	r3, [r3, #0]
 8003636:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800363a:	2b00      	cmp	r3, #0
 800363c:	d1f0      	bne.n	8003620 <HAL_RCC_OscConfig+0x10c>
 800363e:	e000      	b.n	8003642 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003640:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	681b      	ldr	r3, [r3, #0]
 8003646:	f003 0302 	and.w	r3, r3, #2
 800364a:	2b00      	cmp	r3, #0
 800364c:	f000 808c 	beq.w	8003768 <HAL_RCC_OscConfig+0x254>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003650:	4b41      	ldr	r3, [pc, #260]	@ (8003758 <HAL_RCC_OscConfig+0x244>)
 8003652:	691b      	ldr	r3, [r3, #16]
 8003654:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8003658:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800365a:	4b3f      	ldr	r3, [pc, #252]	@ (8003758 <HAL_RCC_OscConfig+0x244>)
 800365c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800365e:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8003660:	6a3b      	ldr	r3, [r7, #32]
 8003662:	2b00      	cmp	r3, #0
 8003664:	d007      	beq.n	8003676 <HAL_RCC_OscConfig+0x162>
 8003666:	6a3b      	ldr	r3, [r7, #32]
 8003668:	2b18      	cmp	r3, #24
 800366a:	d137      	bne.n	80036dc <HAL_RCC_OscConfig+0x1c8>
 800366c:	69fb      	ldr	r3, [r7, #28]
 800366e:	f003 0303 	and.w	r3, r3, #3
 8003672:	2b00      	cmp	r3, #0
 8003674:	d132      	bne.n	80036dc <HAL_RCC_OscConfig+0x1c8>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003676:	4b38      	ldr	r3, [pc, #224]	@ (8003758 <HAL_RCC_OscConfig+0x244>)
 8003678:	681b      	ldr	r3, [r3, #0]
 800367a:	f003 0304 	and.w	r3, r3, #4
 800367e:	2b00      	cmp	r3, #0
 8003680:	d005      	beq.n	800368e <HAL_RCC_OscConfig+0x17a>
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	68db      	ldr	r3, [r3, #12]
 8003686:	2b00      	cmp	r3, #0
 8003688:	d101      	bne.n	800368e <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 800368a:	2301      	movs	r3, #1
 800368c:	e314      	b.n	8003cb8 <HAL_RCC_OscConfig+0x7a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 800368e:	4b32      	ldr	r3, [pc, #200]	@ (8003758 <HAL_RCC_OscConfig+0x244>)
 8003690:	681b      	ldr	r3, [r3, #0]
 8003692:	f023 0219 	bic.w	r2, r3, #25
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	68db      	ldr	r3, [r3, #12]
 800369a:	492f      	ldr	r1, [pc, #188]	@ (8003758 <HAL_RCC_OscConfig+0x244>)
 800369c:	4313      	orrs	r3, r2
 800369e:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80036a0:	f7fe f988 	bl	80019b4 <HAL_GetTick>
 80036a4:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80036a6:	e008      	b.n	80036ba <HAL_RCC_OscConfig+0x1a6>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80036a8:	f7fe f984 	bl	80019b4 <HAL_GetTick>
 80036ac:	4602      	mov	r2, r0
 80036ae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80036b0:	1ad3      	subs	r3, r2, r3
 80036b2:	2b02      	cmp	r3, #2
 80036b4:	d901      	bls.n	80036ba <HAL_RCC_OscConfig+0x1a6>
          {
            return HAL_TIMEOUT;
 80036b6:	2303      	movs	r3, #3
 80036b8:	e2fe      	b.n	8003cb8 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80036ba:	4b27      	ldr	r3, [pc, #156]	@ (8003758 <HAL_RCC_OscConfig+0x244>)
 80036bc:	681b      	ldr	r3, [r3, #0]
 80036be:	f003 0304 	and.w	r3, r3, #4
 80036c2:	2b00      	cmp	r3, #0
 80036c4:	d0f0      	beq.n	80036a8 <HAL_RCC_OscConfig+0x194>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80036c6:	4b24      	ldr	r3, [pc, #144]	@ (8003758 <HAL_RCC_OscConfig+0x244>)
 80036c8:	685b      	ldr	r3, [r3, #4]
 80036ca:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	691b      	ldr	r3, [r3, #16]
 80036d2:	061b      	lsls	r3, r3, #24
 80036d4:	4920      	ldr	r1, [pc, #128]	@ (8003758 <HAL_RCC_OscConfig+0x244>)
 80036d6:	4313      	orrs	r3, r2
 80036d8:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80036da:	e045      	b.n	8003768 <HAL_RCC_OscConfig+0x254>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	68db      	ldr	r3, [r3, #12]
 80036e0:	2b00      	cmp	r3, #0
 80036e2:	d026      	beq.n	8003732 <HAL_RCC_OscConfig+0x21e>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 80036e4:	4b1c      	ldr	r3, [pc, #112]	@ (8003758 <HAL_RCC_OscConfig+0x244>)
 80036e6:	681b      	ldr	r3, [r3, #0]
 80036e8:	f023 0219 	bic.w	r2, r3, #25
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	68db      	ldr	r3, [r3, #12]
 80036f0:	4919      	ldr	r1, [pc, #100]	@ (8003758 <HAL_RCC_OscConfig+0x244>)
 80036f2:	4313      	orrs	r3, r2
 80036f4:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80036f6:	f7fe f95d 	bl	80019b4 <HAL_GetTick>
 80036fa:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80036fc:	e008      	b.n	8003710 <HAL_RCC_OscConfig+0x1fc>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80036fe:	f7fe f959 	bl	80019b4 <HAL_GetTick>
 8003702:	4602      	mov	r2, r0
 8003704:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003706:	1ad3      	subs	r3, r2, r3
 8003708:	2b02      	cmp	r3, #2
 800370a:	d901      	bls.n	8003710 <HAL_RCC_OscConfig+0x1fc>
          {
            return HAL_TIMEOUT;
 800370c:	2303      	movs	r3, #3
 800370e:	e2d3      	b.n	8003cb8 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8003710:	4b11      	ldr	r3, [pc, #68]	@ (8003758 <HAL_RCC_OscConfig+0x244>)
 8003712:	681b      	ldr	r3, [r3, #0]
 8003714:	f003 0304 	and.w	r3, r3, #4
 8003718:	2b00      	cmp	r3, #0
 800371a:	d0f0      	beq.n	80036fe <HAL_RCC_OscConfig+0x1ea>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800371c:	4b0e      	ldr	r3, [pc, #56]	@ (8003758 <HAL_RCC_OscConfig+0x244>)
 800371e:	685b      	ldr	r3, [r3, #4]
 8003720:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	691b      	ldr	r3, [r3, #16]
 8003728:	061b      	lsls	r3, r3, #24
 800372a:	490b      	ldr	r1, [pc, #44]	@ (8003758 <HAL_RCC_OscConfig+0x244>)
 800372c:	4313      	orrs	r3, r2
 800372e:	604b      	str	r3, [r1, #4]
 8003730:	e01a      	b.n	8003768 <HAL_RCC_OscConfig+0x254>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003732:	4b09      	ldr	r3, [pc, #36]	@ (8003758 <HAL_RCC_OscConfig+0x244>)
 8003734:	681b      	ldr	r3, [r3, #0]
 8003736:	4a08      	ldr	r2, [pc, #32]	@ (8003758 <HAL_RCC_OscConfig+0x244>)
 8003738:	f023 0301 	bic.w	r3, r3, #1
 800373c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800373e:	f7fe f939 	bl	80019b4 <HAL_GetTick>
 8003742:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8003744:	e00a      	b.n	800375c <HAL_RCC_OscConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003746:	f7fe f935 	bl	80019b4 <HAL_GetTick>
 800374a:	4602      	mov	r2, r0
 800374c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800374e:	1ad3      	subs	r3, r2, r3
 8003750:	2b02      	cmp	r3, #2
 8003752:	d903      	bls.n	800375c <HAL_RCC_OscConfig+0x248>
          {
            return HAL_TIMEOUT;
 8003754:	2303      	movs	r3, #3
 8003756:	e2af      	b.n	8003cb8 <HAL_RCC_OscConfig+0x7a4>
 8003758:	58024400 	.word	0x58024400
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800375c:	4b96      	ldr	r3, [pc, #600]	@ (80039b8 <HAL_RCC_OscConfig+0x4a4>)
 800375e:	681b      	ldr	r3, [r3, #0]
 8003760:	f003 0304 	and.w	r3, r3, #4
 8003764:	2b00      	cmp	r3, #0
 8003766:	d1ee      	bne.n	8003746 <HAL_RCC_OscConfig+0x232>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	681b      	ldr	r3, [r3, #0]
 800376c:	f003 0310 	and.w	r3, r3, #16
 8003770:	2b00      	cmp	r3, #0
 8003772:	d06a      	beq.n	800384a <HAL_RCC_OscConfig+0x336>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003774:	4b90      	ldr	r3, [pc, #576]	@ (80039b8 <HAL_RCC_OscConfig+0x4a4>)
 8003776:	691b      	ldr	r3, [r3, #16]
 8003778:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800377c:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800377e:	4b8e      	ldr	r3, [pc, #568]	@ (80039b8 <HAL_RCC_OscConfig+0x4a4>)
 8003780:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003782:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8003784:	69bb      	ldr	r3, [r7, #24]
 8003786:	2b08      	cmp	r3, #8
 8003788:	d007      	beq.n	800379a <HAL_RCC_OscConfig+0x286>
 800378a:	69bb      	ldr	r3, [r7, #24]
 800378c:	2b18      	cmp	r3, #24
 800378e:	d11b      	bne.n	80037c8 <HAL_RCC_OscConfig+0x2b4>
 8003790:	697b      	ldr	r3, [r7, #20]
 8003792:	f003 0303 	and.w	r3, r3, #3
 8003796:	2b01      	cmp	r3, #1
 8003798:	d116      	bne.n	80037c8 <HAL_RCC_OscConfig+0x2b4>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800379a:	4b87      	ldr	r3, [pc, #540]	@ (80039b8 <HAL_RCC_OscConfig+0x4a4>)
 800379c:	681b      	ldr	r3, [r3, #0]
 800379e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80037a2:	2b00      	cmp	r3, #0
 80037a4:	d005      	beq.n	80037b2 <HAL_RCC_OscConfig+0x29e>
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	69db      	ldr	r3, [r3, #28]
 80037aa:	2b80      	cmp	r3, #128	@ 0x80
 80037ac:	d001      	beq.n	80037b2 <HAL_RCC_OscConfig+0x29e>
      {
        return HAL_ERROR;
 80037ae:	2301      	movs	r3, #1
 80037b0:	e282      	b.n	8003cb8 <HAL_RCC_OscConfig+0x7a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80037b2:	4b81      	ldr	r3, [pc, #516]	@ (80039b8 <HAL_RCC_OscConfig+0x4a4>)
 80037b4:	68db      	ldr	r3, [r3, #12]
 80037b6:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	6a1b      	ldr	r3, [r3, #32]
 80037be:	061b      	lsls	r3, r3, #24
 80037c0:	497d      	ldr	r1, [pc, #500]	@ (80039b8 <HAL_RCC_OscConfig+0x4a4>)
 80037c2:	4313      	orrs	r3, r2
 80037c4:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80037c6:	e040      	b.n	800384a <HAL_RCC_OscConfig+0x336>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	69db      	ldr	r3, [r3, #28]
 80037cc:	2b00      	cmp	r3, #0
 80037ce:	d023      	beq.n	8003818 <HAL_RCC_OscConfig+0x304>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 80037d0:	4b79      	ldr	r3, [pc, #484]	@ (80039b8 <HAL_RCC_OscConfig+0x4a4>)
 80037d2:	681b      	ldr	r3, [r3, #0]
 80037d4:	4a78      	ldr	r2, [pc, #480]	@ (80039b8 <HAL_RCC_OscConfig+0x4a4>)
 80037d6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80037da:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80037dc:	f7fe f8ea 	bl	80019b4 <HAL_GetTick>
 80037e0:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80037e2:	e008      	b.n	80037f6 <HAL_RCC_OscConfig+0x2e2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 80037e4:	f7fe f8e6 	bl	80019b4 <HAL_GetTick>
 80037e8:	4602      	mov	r2, r0
 80037ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80037ec:	1ad3      	subs	r3, r2, r3
 80037ee:	2b02      	cmp	r3, #2
 80037f0:	d901      	bls.n	80037f6 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 80037f2:	2303      	movs	r3, #3
 80037f4:	e260      	b.n	8003cb8 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80037f6:	4b70      	ldr	r3, [pc, #448]	@ (80039b8 <HAL_RCC_OscConfig+0x4a4>)
 80037f8:	681b      	ldr	r3, [r3, #0]
 80037fa:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80037fe:	2b00      	cmp	r3, #0
 8003800:	d0f0      	beq.n	80037e4 <HAL_RCC_OscConfig+0x2d0>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8003802:	4b6d      	ldr	r3, [pc, #436]	@ (80039b8 <HAL_RCC_OscConfig+0x4a4>)
 8003804:	68db      	ldr	r3, [r3, #12]
 8003806:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	6a1b      	ldr	r3, [r3, #32]
 800380e:	061b      	lsls	r3, r3, #24
 8003810:	4969      	ldr	r1, [pc, #420]	@ (80039b8 <HAL_RCC_OscConfig+0x4a4>)
 8003812:	4313      	orrs	r3, r2
 8003814:	60cb      	str	r3, [r1, #12]
 8003816:	e018      	b.n	800384a <HAL_RCC_OscConfig+0x336>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8003818:	4b67      	ldr	r3, [pc, #412]	@ (80039b8 <HAL_RCC_OscConfig+0x4a4>)
 800381a:	681b      	ldr	r3, [r3, #0]
 800381c:	4a66      	ldr	r2, [pc, #408]	@ (80039b8 <HAL_RCC_OscConfig+0x4a4>)
 800381e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8003822:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003824:	f7fe f8c6 	bl	80019b4 <HAL_GetTick>
 8003828:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 800382a:	e008      	b.n	800383e <HAL_RCC_OscConfig+0x32a>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 800382c:	f7fe f8c2 	bl	80019b4 <HAL_GetTick>
 8003830:	4602      	mov	r2, r0
 8003832:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003834:	1ad3      	subs	r3, r2, r3
 8003836:	2b02      	cmp	r3, #2
 8003838:	d901      	bls.n	800383e <HAL_RCC_OscConfig+0x32a>
          {
            return HAL_TIMEOUT;
 800383a:	2303      	movs	r3, #3
 800383c:	e23c      	b.n	8003cb8 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 800383e:	4b5e      	ldr	r3, [pc, #376]	@ (80039b8 <HAL_RCC_OscConfig+0x4a4>)
 8003840:	681b      	ldr	r3, [r3, #0]
 8003842:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003846:	2b00      	cmp	r3, #0
 8003848:	d1f0      	bne.n	800382c <HAL_RCC_OscConfig+0x318>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	681b      	ldr	r3, [r3, #0]
 800384e:	f003 0308 	and.w	r3, r3, #8
 8003852:	2b00      	cmp	r3, #0
 8003854:	d036      	beq.n	80038c4 <HAL_RCC_OscConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	695b      	ldr	r3, [r3, #20]
 800385a:	2b00      	cmp	r3, #0
 800385c:	d019      	beq.n	8003892 <HAL_RCC_OscConfig+0x37e>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800385e:	4b56      	ldr	r3, [pc, #344]	@ (80039b8 <HAL_RCC_OscConfig+0x4a4>)
 8003860:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003862:	4a55      	ldr	r2, [pc, #340]	@ (80039b8 <HAL_RCC_OscConfig+0x4a4>)
 8003864:	f043 0301 	orr.w	r3, r3, #1
 8003868:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800386a:	f7fe f8a3 	bl	80019b4 <HAL_GetTick>
 800386e:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8003870:	e008      	b.n	8003884 <HAL_RCC_OscConfig+0x370>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003872:	f7fe f89f 	bl	80019b4 <HAL_GetTick>
 8003876:	4602      	mov	r2, r0
 8003878:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800387a:	1ad3      	subs	r3, r2, r3
 800387c:	2b02      	cmp	r3, #2
 800387e:	d901      	bls.n	8003884 <HAL_RCC_OscConfig+0x370>
        {
          return HAL_TIMEOUT;
 8003880:	2303      	movs	r3, #3
 8003882:	e219      	b.n	8003cb8 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8003884:	4b4c      	ldr	r3, [pc, #304]	@ (80039b8 <HAL_RCC_OscConfig+0x4a4>)
 8003886:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003888:	f003 0302 	and.w	r3, r3, #2
 800388c:	2b00      	cmp	r3, #0
 800388e:	d0f0      	beq.n	8003872 <HAL_RCC_OscConfig+0x35e>
 8003890:	e018      	b.n	80038c4 <HAL_RCC_OscConfig+0x3b0>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003892:	4b49      	ldr	r3, [pc, #292]	@ (80039b8 <HAL_RCC_OscConfig+0x4a4>)
 8003894:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003896:	4a48      	ldr	r2, [pc, #288]	@ (80039b8 <HAL_RCC_OscConfig+0x4a4>)
 8003898:	f023 0301 	bic.w	r3, r3, #1
 800389c:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800389e:	f7fe f889 	bl	80019b4 <HAL_GetTick>
 80038a2:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80038a4:	e008      	b.n	80038b8 <HAL_RCC_OscConfig+0x3a4>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80038a6:	f7fe f885 	bl	80019b4 <HAL_GetTick>
 80038aa:	4602      	mov	r2, r0
 80038ac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80038ae:	1ad3      	subs	r3, r2, r3
 80038b0:	2b02      	cmp	r3, #2
 80038b2:	d901      	bls.n	80038b8 <HAL_RCC_OscConfig+0x3a4>
        {
          return HAL_TIMEOUT;
 80038b4:	2303      	movs	r3, #3
 80038b6:	e1ff      	b.n	8003cb8 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80038b8:	4b3f      	ldr	r3, [pc, #252]	@ (80039b8 <HAL_RCC_OscConfig+0x4a4>)
 80038ba:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80038bc:	f003 0302 	and.w	r3, r3, #2
 80038c0:	2b00      	cmp	r3, #0
 80038c2:	d1f0      	bne.n	80038a6 <HAL_RCC_OscConfig+0x392>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	681b      	ldr	r3, [r3, #0]
 80038c8:	f003 0320 	and.w	r3, r3, #32
 80038cc:	2b00      	cmp	r3, #0
 80038ce:	d036      	beq.n	800393e <HAL_RCC_OscConfig+0x42a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	699b      	ldr	r3, [r3, #24]
 80038d4:	2b00      	cmp	r3, #0
 80038d6:	d019      	beq.n	800390c <HAL_RCC_OscConfig+0x3f8>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80038d8:	4b37      	ldr	r3, [pc, #220]	@ (80039b8 <HAL_RCC_OscConfig+0x4a4>)
 80038da:	681b      	ldr	r3, [r3, #0]
 80038dc:	4a36      	ldr	r2, [pc, #216]	@ (80039b8 <HAL_RCC_OscConfig+0x4a4>)
 80038de:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 80038e2:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 80038e4:	f7fe f866 	bl	80019b4 <HAL_GetTick>
 80038e8:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80038ea:	e008      	b.n	80038fe <HAL_RCC_OscConfig+0x3ea>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80038ec:	f7fe f862 	bl	80019b4 <HAL_GetTick>
 80038f0:	4602      	mov	r2, r0
 80038f2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80038f4:	1ad3      	subs	r3, r2, r3
 80038f6:	2b02      	cmp	r3, #2
 80038f8:	d901      	bls.n	80038fe <HAL_RCC_OscConfig+0x3ea>
        {
          return HAL_TIMEOUT;
 80038fa:	2303      	movs	r3, #3
 80038fc:	e1dc      	b.n	8003cb8 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80038fe:	4b2e      	ldr	r3, [pc, #184]	@ (80039b8 <HAL_RCC_OscConfig+0x4a4>)
 8003900:	681b      	ldr	r3, [r3, #0]
 8003902:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8003906:	2b00      	cmp	r3, #0
 8003908:	d0f0      	beq.n	80038ec <HAL_RCC_OscConfig+0x3d8>
 800390a:	e018      	b.n	800393e <HAL_RCC_OscConfig+0x42a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800390c:	4b2a      	ldr	r3, [pc, #168]	@ (80039b8 <HAL_RCC_OscConfig+0x4a4>)
 800390e:	681b      	ldr	r3, [r3, #0]
 8003910:	4a29      	ldr	r2, [pc, #164]	@ (80039b8 <HAL_RCC_OscConfig+0x4a4>)
 8003912:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8003916:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8003918:	f7fe f84c 	bl	80019b4 <HAL_GetTick>
 800391c:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800391e:	e008      	b.n	8003932 <HAL_RCC_OscConfig+0x41e>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003920:	f7fe f848 	bl	80019b4 <HAL_GetTick>
 8003924:	4602      	mov	r2, r0
 8003926:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003928:	1ad3      	subs	r3, r2, r3
 800392a:	2b02      	cmp	r3, #2
 800392c:	d901      	bls.n	8003932 <HAL_RCC_OscConfig+0x41e>
        {
          return HAL_TIMEOUT;
 800392e:	2303      	movs	r3, #3
 8003930:	e1c2      	b.n	8003cb8 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8003932:	4b21      	ldr	r3, [pc, #132]	@ (80039b8 <HAL_RCC_OscConfig+0x4a4>)
 8003934:	681b      	ldr	r3, [r3, #0]
 8003936:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800393a:	2b00      	cmp	r3, #0
 800393c:	d1f0      	bne.n	8003920 <HAL_RCC_OscConfig+0x40c>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	681b      	ldr	r3, [r3, #0]
 8003942:	f003 0304 	and.w	r3, r3, #4
 8003946:	2b00      	cmp	r3, #0
 8003948:	f000 8086 	beq.w	8003a58 <HAL_RCC_OscConfig+0x544>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 800394c:	4b1b      	ldr	r3, [pc, #108]	@ (80039bc <HAL_RCC_OscConfig+0x4a8>)
 800394e:	681b      	ldr	r3, [r3, #0]
 8003950:	4a1a      	ldr	r2, [pc, #104]	@ (80039bc <HAL_RCC_OscConfig+0x4a8>)
 8003952:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003956:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003958:	f7fe f82c 	bl	80019b4 <HAL_GetTick>
 800395c:	6278      	str	r0, [r7, #36]	@ 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800395e:	e008      	b.n	8003972 <HAL_RCC_OscConfig+0x45e>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003960:	f7fe f828 	bl	80019b4 <HAL_GetTick>
 8003964:	4602      	mov	r2, r0
 8003966:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003968:	1ad3      	subs	r3, r2, r3
 800396a:	2b64      	cmp	r3, #100	@ 0x64
 800396c:	d901      	bls.n	8003972 <HAL_RCC_OscConfig+0x45e>
      {
        return HAL_TIMEOUT;
 800396e:	2303      	movs	r3, #3
 8003970:	e1a2      	b.n	8003cb8 <HAL_RCC_OscConfig+0x7a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003972:	4b12      	ldr	r3, [pc, #72]	@ (80039bc <HAL_RCC_OscConfig+0x4a8>)
 8003974:	681b      	ldr	r3, [r3, #0]
 8003976:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800397a:	2b00      	cmp	r3, #0
 800397c:	d0f0      	beq.n	8003960 <HAL_RCC_OscConfig+0x44c>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	689b      	ldr	r3, [r3, #8]
 8003982:	2b01      	cmp	r3, #1
 8003984:	d106      	bne.n	8003994 <HAL_RCC_OscConfig+0x480>
 8003986:	4b0c      	ldr	r3, [pc, #48]	@ (80039b8 <HAL_RCC_OscConfig+0x4a4>)
 8003988:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800398a:	4a0b      	ldr	r2, [pc, #44]	@ (80039b8 <HAL_RCC_OscConfig+0x4a4>)
 800398c:	f043 0301 	orr.w	r3, r3, #1
 8003990:	6713      	str	r3, [r2, #112]	@ 0x70
 8003992:	e032      	b.n	80039fa <HAL_RCC_OscConfig+0x4e6>
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	689b      	ldr	r3, [r3, #8]
 8003998:	2b00      	cmp	r3, #0
 800399a:	d111      	bne.n	80039c0 <HAL_RCC_OscConfig+0x4ac>
 800399c:	4b06      	ldr	r3, [pc, #24]	@ (80039b8 <HAL_RCC_OscConfig+0x4a4>)
 800399e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80039a0:	4a05      	ldr	r2, [pc, #20]	@ (80039b8 <HAL_RCC_OscConfig+0x4a4>)
 80039a2:	f023 0301 	bic.w	r3, r3, #1
 80039a6:	6713      	str	r3, [r2, #112]	@ 0x70
 80039a8:	4b03      	ldr	r3, [pc, #12]	@ (80039b8 <HAL_RCC_OscConfig+0x4a4>)
 80039aa:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80039ac:	4a02      	ldr	r2, [pc, #8]	@ (80039b8 <HAL_RCC_OscConfig+0x4a4>)
 80039ae:	f023 0304 	bic.w	r3, r3, #4
 80039b2:	6713      	str	r3, [r2, #112]	@ 0x70
 80039b4:	e021      	b.n	80039fa <HAL_RCC_OscConfig+0x4e6>
 80039b6:	bf00      	nop
 80039b8:	58024400 	.word	0x58024400
 80039bc:	58024800 	.word	0x58024800
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	689b      	ldr	r3, [r3, #8]
 80039c4:	2b05      	cmp	r3, #5
 80039c6:	d10c      	bne.n	80039e2 <HAL_RCC_OscConfig+0x4ce>
 80039c8:	4b83      	ldr	r3, [pc, #524]	@ (8003bd8 <HAL_RCC_OscConfig+0x6c4>)
 80039ca:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80039cc:	4a82      	ldr	r2, [pc, #520]	@ (8003bd8 <HAL_RCC_OscConfig+0x6c4>)
 80039ce:	f043 0304 	orr.w	r3, r3, #4
 80039d2:	6713      	str	r3, [r2, #112]	@ 0x70
 80039d4:	4b80      	ldr	r3, [pc, #512]	@ (8003bd8 <HAL_RCC_OscConfig+0x6c4>)
 80039d6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80039d8:	4a7f      	ldr	r2, [pc, #508]	@ (8003bd8 <HAL_RCC_OscConfig+0x6c4>)
 80039da:	f043 0301 	orr.w	r3, r3, #1
 80039de:	6713      	str	r3, [r2, #112]	@ 0x70
 80039e0:	e00b      	b.n	80039fa <HAL_RCC_OscConfig+0x4e6>
 80039e2:	4b7d      	ldr	r3, [pc, #500]	@ (8003bd8 <HAL_RCC_OscConfig+0x6c4>)
 80039e4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80039e6:	4a7c      	ldr	r2, [pc, #496]	@ (8003bd8 <HAL_RCC_OscConfig+0x6c4>)
 80039e8:	f023 0301 	bic.w	r3, r3, #1
 80039ec:	6713      	str	r3, [r2, #112]	@ 0x70
 80039ee:	4b7a      	ldr	r3, [pc, #488]	@ (8003bd8 <HAL_RCC_OscConfig+0x6c4>)
 80039f0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80039f2:	4a79      	ldr	r2, [pc, #484]	@ (8003bd8 <HAL_RCC_OscConfig+0x6c4>)
 80039f4:	f023 0304 	bic.w	r3, r3, #4
 80039f8:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	689b      	ldr	r3, [r3, #8]
 80039fe:	2b00      	cmp	r3, #0
 8003a00:	d015      	beq.n	8003a2e <HAL_RCC_OscConfig+0x51a>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003a02:	f7fd ffd7 	bl	80019b4 <HAL_GetTick>
 8003a06:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003a08:	e00a      	b.n	8003a20 <HAL_RCC_OscConfig+0x50c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003a0a:	f7fd ffd3 	bl	80019b4 <HAL_GetTick>
 8003a0e:	4602      	mov	r2, r0
 8003a10:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003a12:	1ad3      	subs	r3, r2, r3
 8003a14:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003a18:	4293      	cmp	r3, r2
 8003a1a:	d901      	bls.n	8003a20 <HAL_RCC_OscConfig+0x50c>
        {
          return HAL_TIMEOUT;
 8003a1c:	2303      	movs	r3, #3
 8003a1e:	e14b      	b.n	8003cb8 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003a20:	4b6d      	ldr	r3, [pc, #436]	@ (8003bd8 <HAL_RCC_OscConfig+0x6c4>)
 8003a22:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003a24:	f003 0302 	and.w	r3, r3, #2
 8003a28:	2b00      	cmp	r3, #0
 8003a2a:	d0ee      	beq.n	8003a0a <HAL_RCC_OscConfig+0x4f6>
 8003a2c:	e014      	b.n	8003a58 <HAL_RCC_OscConfig+0x544>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003a2e:	f7fd ffc1 	bl	80019b4 <HAL_GetTick>
 8003a32:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8003a34:	e00a      	b.n	8003a4c <HAL_RCC_OscConfig+0x538>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003a36:	f7fd ffbd 	bl	80019b4 <HAL_GetTick>
 8003a3a:	4602      	mov	r2, r0
 8003a3c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003a3e:	1ad3      	subs	r3, r2, r3
 8003a40:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003a44:	4293      	cmp	r3, r2
 8003a46:	d901      	bls.n	8003a4c <HAL_RCC_OscConfig+0x538>
        {
          return HAL_TIMEOUT;
 8003a48:	2303      	movs	r3, #3
 8003a4a:	e135      	b.n	8003cb8 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8003a4c:	4b62      	ldr	r3, [pc, #392]	@ (8003bd8 <HAL_RCC_OscConfig+0x6c4>)
 8003a4e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003a50:	f003 0302 	and.w	r3, r3, #2
 8003a54:	2b00      	cmp	r3, #0
 8003a56:	d1ee      	bne.n	8003a36 <HAL_RCC_OscConfig+0x522>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003a5c:	2b00      	cmp	r3, #0
 8003a5e:	f000 812a 	beq.w	8003cb6 <HAL_RCC_OscConfig+0x7a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8003a62:	4b5d      	ldr	r3, [pc, #372]	@ (8003bd8 <HAL_RCC_OscConfig+0x6c4>)
 8003a64:	691b      	ldr	r3, [r3, #16]
 8003a66:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8003a6a:	2b18      	cmp	r3, #24
 8003a6c:	f000 80ba 	beq.w	8003be4 <HAL_RCC_OscConfig+0x6d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003a74:	2b02      	cmp	r3, #2
 8003a76:	f040 8095 	bne.w	8003ba4 <HAL_RCC_OscConfig+0x690>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003a7a:	4b57      	ldr	r3, [pc, #348]	@ (8003bd8 <HAL_RCC_OscConfig+0x6c4>)
 8003a7c:	681b      	ldr	r3, [r3, #0]
 8003a7e:	4a56      	ldr	r2, [pc, #344]	@ (8003bd8 <HAL_RCC_OscConfig+0x6c4>)
 8003a80:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8003a84:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003a86:	f7fd ff95 	bl	80019b4 <HAL_GetTick>
 8003a8a:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8003a8c:	e008      	b.n	8003aa0 <HAL_RCC_OscConfig+0x58c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003a8e:	f7fd ff91 	bl	80019b4 <HAL_GetTick>
 8003a92:	4602      	mov	r2, r0
 8003a94:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003a96:	1ad3      	subs	r3, r2, r3
 8003a98:	2b02      	cmp	r3, #2
 8003a9a:	d901      	bls.n	8003aa0 <HAL_RCC_OscConfig+0x58c>
          {
            return HAL_TIMEOUT;
 8003a9c:	2303      	movs	r3, #3
 8003a9e:	e10b      	b.n	8003cb8 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8003aa0:	4b4d      	ldr	r3, [pc, #308]	@ (8003bd8 <HAL_RCC_OscConfig+0x6c4>)
 8003aa2:	681b      	ldr	r3, [r3, #0]
 8003aa4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003aa8:	2b00      	cmp	r3, #0
 8003aaa:	d1f0      	bne.n	8003a8e <HAL_RCC_OscConfig+0x57a>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003aac:	4b4a      	ldr	r3, [pc, #296]	@ (8003bd8 <HAL_RCC_OscConfig+0x6c4>)
 8003aae:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8003ab0:	4b4a      	ldr	r3, [pc, #296]	@ (8003bdc <HAL_RCC_OscConfig+0x6c8>)
 8003ab2:	4013      	ands	r3, r2
 8003ab4:	687a      	ldr	r2, [r7, #4]
 8003ab6:	6a91      	ldr	r1, [r2, #40]	@ 0x28
 8003ab8:	687a      	ldr	r2, [r7, #4]
 8003aba:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8003abc:	0112      	lsls	r2, r2, #4
 8003abe:	430a      	orrs	r2, r1
 8003ac0:	4945      	ldr	r1, [pc, #276]	@ (8003bd8 <HAL_RCC_OscConfig+0x6c4>)
 8003ac2:	4313      	orrs	r3, r2
 8003ac4:	628b      	str	r3, [r1, #40]	@ 0x28
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003aca:	3b01      	subs	r3, #1
 8003acc:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003ad4:	3b01      	subs	r3, #1
 8003ad6:	025b      	lsls	r3, r3, #9
 8003ad8:	b29b      	uxth	r3, r3
 8003ada:	431a      	orrs	r2, r3
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003ae0:	3b01      	subs	r3, #1
 8003ae2:	041b      	lsls	r3, r3, #16
 8003ae4:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8003ae8:	431a      	orrs	r2, r3
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003aee:	3b01      	subs	r3, #1
 8003af0:	061b      	lsls	r3, r3, #24
 8003af2:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8003af6:	4938      	ldr	r1, [pc, #224]	@ (8003bd8 <HAL_RCC_OscConfig+0x6c4>)
 8003af8:	4313      	orrs	r3, r2
 8003afa:	630b      	str	r3, [r1, #48]	@ 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 8003afc:	4b36      	ldr	r3, [pc, #216]	@ (8003bd8 <HAL_RCC_OscConfig+0x6c4>)
 8003afe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003b00:	4a35      	ldr	r2, [pc, #212]	@ (8003bd8 <HAL_RCC_OscConfig+0x6c4>)
 8003b02:	f023 0301 	bic.w	r3, r3, #1
 8003b06:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8003b08:	4b33      	ldr	r3, [pc, #204]	@ (8003bd8 <HAL_RCC_OscConfig+0x6c4>)
 8003b0a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8003b0c:	4b34      	ldr	r3, [pc, #208]	@ (8003be0 <HAL_RCC_OscConfig+0x6cc>)
 8003b0e:	4013      	ands	r3, r2
 8003b10:	687a      	ldr	r2, [r7, #4]
 8003b12:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8003b14:	00d2      	lsls	r2, r2, #3
 8003b16:	4930      	ldr	r1, [pc, #192]	@ (8003bd8 <HAL_RCC_OscConfig+0x6c4>)
 8003b18:	4313      	orrs	r3, r2
 8003b1a:	634b      	str	r3, [r1, #52]	@ 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8003b1c:	4b2e      	ldr	r3, [pc, #184]	@ (8003bd8 <HAL_RCC_OscConfig+0x6c4>)
 8003b1e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003b20:	f023 020c 	bic.w	r2, r3, #12
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003b28:	492b      	ldr	r1, [pc, #172]	@ (8003bd8 <HAL_RCC_OscConfig+0x6c4>)
 8003b2a:	4313      	orrs	r3, r2
 8003b2c:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8003b2e:	4b2a      	ldr	r3, [pc, #168]	@ (8003bd8 <HAL_RCC_OscConfig+0x6c4>)
 8003b30:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003b32:	f023 0202 	bic.w	r2, r3, #2
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003b3a:	4927      	ldr	r1, [pc, #156]	@ (8003bd8 <HAL_RCC_OscConfig+0x6c4>)
 8003b3c:	4313      	orrs	r3, r2
 8003b3e:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8003b40:	4b25      	ldr	r3, [pc, #148]	@ (8003bd8 <HAL_RCC_OscConfig+0x6c4>)
 8003b42:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003b44:	4a24      	ldr	r2, [pc, #144]	@ (8003bd8 <HAL_RCC_OscConfig+0x6c4>)
 8003b46:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003b4a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003b4c:	4b22      	ldr	r3, [pc, #136]	@ (8003bd8 <HAL_RCC_OscConfig+0x6c4>)
 8003b4e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003b50:	4a21      	ldr	r2, [pc, #132]	@ (8003bd8 <HAL_RCC_OscConfig+0x6c4>)
 8003b52:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003b56:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8003b58:	4b1f      	ldr	r3, [pc, #124]	@ (8003bd8 <HAL_RCC_OscConfig+0x6c4>)
 8003b5a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003b5c:	4a1e      	ldr	r2, [pc, #120]	@ (8003bd8 <HAL_RCC_OscConfig+0x6c4>)
 8003b5e:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003b62:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 8003b64:	4b1c      	ldr	r3, [pc, #112]	@ (8003bd8 <HAL_RCC_OscConfig+0x6c4>)
 8003b66:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003b68:	4a1b      	ldr	r2, [pc, #108]	@ (8003bd8 <HAL_RCC_OscConfig+0x6c4>)
 8003b6a:	f043 0301 	orr.w	r3, r3, #1
 8003b6e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003b70:	4b19      	ldr	r3, [pc, #100]	@ (8003bd8 <HAL_RCC_OscConfig+0x6c4>)
 8003b72:	681b      	ldr	r3, [r3, #0]
 8003b74:	4a18      	ldr	r2, [pc, #96]	@ (8003bd8 <HAL_RCC_OscConfig+0x6c4>)
 8003b76:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8003b7a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003b7c:	f7fd ff1a 	bl	80019b4 <HAL_GetTick>
 8003b80:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8003b82:	e008      	b.n	8003b96 <HAL_RCC_OscConfig+0x682>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003b84:	f7fd ff16 	bl	80019b4 <HAL_GetTick>
 8003b88:	4602      	mov	r2, r0
 8003b8a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003b8c:	1ad3      	subs	r3, r2, r3
 8003b8e:	2b02      	cmp	r3, #2
 8003b90:	d901      	bls.n	8003b96 <HAL_RCC_OscConfig+0x682>
          {
            return HAL_TIMEOUT;
 8003b92:	2303      	movs	r3, #3
 8003b94:	e090      	b.n	8003cb8 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8003b96:	4b10      	ldr	r3, [pc, #64]	@ (8003bd8 <HAL_RCC_OscConfig+0x6c4>)
 8003b98:	681b      	ldr	r3, [r3, #0]
 8003b9a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003b9e:	2b00      	cmp	r3, #0
 8003ba0:	d0f0      	beq.n	8003b84 <HAL_RCC_OscConfig+0x670>
 8003ba2:	e088      	b.n	8003cb6 <HAL_RCC_OscConfig+0x7a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003ba4:	4b0c      	ldr	r3, [pc, #48]	@ (8003bd8 <HAL_RCC_OscConfig+0x6c4>)
 8003ba6:	681b      	ldr	r3, [r3, #0]
 8003ba8:	4a0b      	ldr	r2, [pc, #44]	@ (8003bd8 <HAL_RCC_OscConfig+0x6c4>)
 8003baa:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8003bae:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003bb0:	f7fd ff00 	bl	80019b4 <HAL_GetTick>
 8003bb4:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8003bb6:	e008      	b.n	8003bca <HAL_RCC_OscConfig+0x6b6>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003bb8:	f7fd fefc 	bl	80019b4 <HAL_GetTick>
 8003bbc:	4602      	mov	r2, r0
 8003bbe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003bc0:	1ad3      	subs	r3, r2, r3
 8003bc2:	2b02      	cmp	r3, #2
 8003bc4:	d901      	bls.n	8003bca <HAL_RCC_OscConfig+0x6b6>
          {
            return HAL_TIMEOUT;
 8003bc6:	2303      	movs	r3, #3
 8003bc8:	e076      	b.n	8003cb8 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8003bca:	4b03      	ldr	r3, [pc, #12]	@ (8003bd8 <HAL_RCC_OscConfig+0x6c4>)
 8003bcc:	681b      	ldr	r3, [r3, #0]
 8003bce:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003bd2:	2b00      	cmp	r3, #0
 8003bd4:	d1f0      	bne.n	8003bb8 <HAL_RCC_OscConfig+0x6a4>
 8003bd6:	e06e      	b.n	8003cb6 <HAL_RCC_OscConfig+0x7a2>
 8003bd8:	58024400 	.word	0x58024400
 8003bdc:	fffffc0c 	.word	0xfffffc0c
 8003be0:	ffff0007 	.word	0xffff0007
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8003be4:	4b36      	ldr	r3, [pc, #216]	@ (8003cc0 <HAL_RCC_OscConfig+0x7ac>)
 8003be6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003be8:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8003bea:	4b35      	ldr	r3, [pc, #212]	@ (8003cc0 <HAL_RCC_OscConfig+0x7ac>)
 8003bec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003bee:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003bf4:	2b01      	cmp	r3, #1
 8003bf6:	d031      	beq.n	8003c5c <HAL_RCC_OscConfig+0x748>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003bf8:	693b      	ldr	r3, [r7, #16]
 8003bfa:	f003 0203 	and.w	r2, r3, #3
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003c02:	429a      	cmp	r2, r3
 8003c04:	d12a      	bne.n	8003c5c <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8003c06:	693b      	ldr	r3, [r7, #16]
 8003c08:	091b      	lsrs	r3, r3, #4
 8003c0a:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003c12:	429a      	cmp	r2, r3
 8003c14:	d122      	bne.n	8003c5c <HAL_RCC_OscConfig+0x748>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8003c16:	68fb      	ldr	r3, [r7, #12]
 8003c18:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003c20:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8003c22:	429a      	cmp	r2, r3
 8003c24:	d11a      	bne.n	8003c5c <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8003c26:	68fb      	ldr	r3, [r7, #12]
 8003c28:	0a5b      	lsrs	r3, r3, #9
 8003c2a:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003c32:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8003c34:	429a      	cmp	r2, r3
 8003c36:	d111      	bne.n	8003c5c <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8003c38:	68fb      	ldr	r3, [r7, #12]
 8003c3a:	0c1b      	lsrs	r3, r3, #16
 8003c3c:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003c44:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8003c46:	429a      	cmp	r2, r3
 8003c48:	d108      	bne.n	8003c5c <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8003c4a:	68fb      	ldr	r3, [r7, #12]
 8003c4c:	0e1b      	lsrs	r3, r3, #24
 8003c4e:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003c56:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8003c58:	429a      	cmp	r2, r3
 8003c5a:	d001      	beq.n	8003c60 <HAL_RCC_OscConfig+0x74c>
      {
        return HAL_ERROR;
 8003c5c:	2301      	movs	r3, #1
 8003c5e:	e02b      	b.n	8003cb8 <HAL_RCC_OscConfig+0x7a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 8003c60:	4b17      	ldr	r3, [pc, #92]	@ (8003cc0 <HAL_RCC_OscConfig+0x7ac>)
 8003c62:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003c64:	08db      	lsrs	r3, r3, #3
 8003c66:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8003c6a:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003c70:	693a      	ldr	r2, [r7, #16]
 8003c72:	429a      	cmp	r2, r3
 8003c74:	d01f      	beq.n	8003cb6 <HAL_RCC_OscConfig+0x7a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 8003c76:	4b12      	ldr	r3, [pc, #72]	@ (8003cc0 <HAL_RCC_OscConfig+0x7ac>)
 8003c78:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003c7a:	4a11      	ldr	r2, [pc, #68]	@ (8003cc0 <HAL_RCC_OscConfig+0x7ac>)
 8003c7c:	f023 0301 	bic.w	r3, r3, #1
 8003c80:	62d3      	str	r3, [r2, #44]	@ 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8003c82:	f7fd fe97 	bl	80019b4 <HAL_GetTick>
 8003c86:	6278      	str	r0, [r7, #36]	@ 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 8003c88:	bf00      	nop
 8003c8a:	f7fd fe93 	bl	80019b4 <HAL_GetTick>
 8003c8e:	4602      	mov	r2, r0
 8003c90:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003c92:	4293      	cmp	r3, r2
 8003c94:	d0f9      	beq.n	8003c8a <HAL_RCC_OscConfig+0x776>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8003c96:	4b0a      	ldr	r3, [pc, #40]	@ (8003cc0 <HAL_RCC_OscConfig+0x7ac>)
 8003c98:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8003c9a:	4b0a      	ldr	r3, [pc, #40]	@ (8003cc4 <HAL_RCC_OscConfig+0x7b0>)
 8003c9c:	4013      	ands	r3, r2
 8003c9e:	687a      	ldr	r2, [r7, #4]
 8003ca0:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8003ca2:	00d2      	lsls	r2, r2, #3
 8003ca4:	4906      	ldr	r1, [pc, #24]	@ (8003cc0 <HAL_RCC_OscConfig+0x7ac>)
 8003ca6:	4313      	orrs	r3, r2
 8003ca8:	634b      	str	r3, [r1, #52]	@ 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 8003caa:	4b05      	ldr	r3, [pc, #20]	@ (8003cc0 <HAL_RCC_OscConfig+0x7ac>)
 8003cac:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003cae:	4a04      	ldr	r2, [pc, #16]	@ (8003cc0 <HAL_RCC_OscConfig+0x7ac>)
 8003cb0:	f043 0301 	orr.w	r3, r3, #1
 8003cb4:	62d3      	str	r3, [r2, #44]	@ 0x2c
        }
      }
    }
  }
  return HAL_OK;
 8003cb6:	2300      	movs	r3, #0
}
 8003cb8:	4618      	mov	r0, r3
 8003cba:	3730      	adds	r7, #48	@ 0x30
 8003cbc:	46bd      	mov	sp, r7
 8003cbe:	bd80      	pop	{r7, pc}
 8003cc0:	58024400 	.word	0x58024400
 8003cc4:	ffff0007 	.word	0xffff0007

08003cc8 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003cc8:	b580      	push	{r7, lr}
 8003cca:	b086      	sub	sp, #24
 8003ccc:	af00      	add	r7, sp, #0
 8003cce:	6078      	str	r0, [r7, #4]
 8003cd0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	2b00      	cmp	r3, #0
 8003cd6:	d101      	bne.n	8003cdc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003cd8:	2301      	movs	r3, #1
 8003cda:	e19c      	b.n	8004016 <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003cdc:	4b8a      	ldr	r3, [pc, #552]	@ (8003f08 <HAL_RCC_ClockConfig+0x240>)
 8003cde:	681b      	ldr	r3, [r3, #0]
 8003ce0:	f003 030f 	and.w	r3, r3, #15
 8003ce4:	683a      	ldr	r2, [r7, #0]
 8003ce6:	429a      	cmp	r2, r3
 8003ce8:	d910      	bls.n	8003d0c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003cea:	4b87      	ldr	r3, [pc, #540]	@ (8003f08 <HAL_RCC_ClockConfig+0x240>)
 8003cec:	681b      	ldr	r3, [r3, #0]
 8003cee:	f023 020f 	bic.w	r2, r3, #15
 8003cf2:	4985      	ldr	r1, [pc, #532]	@ (8003f08 <HAL_RCC_ClockConfig+0x240>)
 8003cf4:	683b      	ldr	r3, [r7, #0]
 8003cf6:	4313      	orrs	r3, r2
 8003cf8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003cfa:	4b83      	ldr	r3, [pc, #524]	@ (8003f08 <HAL_RCC_ClockConfig+0x240>)
 8003cfc:	681b      	ldr	r3, [r3, #0]
 8003cfe:	f003 030f 	and.w	r3, r3, #15
 8003d02:	683a      	ldr	r2, [r7, #0]
 8003d04:	429a      	cmp	r2, r3
 8003d06:	d001      	beq.n	8003d0c <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8003d08:	2301      	movs	r3, #1
 8003d0a:	e184      	b.n	8004016 <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	681b      	ldr	r3, [r3, #0]
 8003d10:	f003 0304 	and.w	r3, r3, #4
 8003d14:	2b00      	cmp	r3, #0
 8003d16:	d010      	beq.n	8003d3a <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	691a      	ldr	r2, [r3, #16]
 8003d1c:	4b7b      	ldr	r3, [pc, #492]	@ (8003f0c <HAL_RCC_ClockConfig+0x244>)
 8003d1e:	699b      	ldr	r3, [r3, #24]
 8003d20:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8003d24:	429a      	cmp	r2, r3
 8003d26:	d908      	bls.n	8003d3a <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8003d28:	4b78      	ldr	r3, [pc, #480]	@ (8003f0c <HAL_RCC_ClockConfig+0x244>)
 8003d2a:	699b      	ldr	r3, [r3, #24]
 8003d2c:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	691b      	ldr	r3, [r3, #16]
 8003d34:	4975      	ldr	r1, [pc, #468]	@ (8003f0c <HAL_RCC_ClockConfig+0x244>)
 8003d36:	4313      	orrs	r3, r2
 8003d38:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	681b      	ldr	r3, [r3, #0]
 8003d3e:	f003 0308 	and.w	r3, r3, #8
 8003d42:	2b00      	cmp	r3, #0
 8003d44:	d010      	beq.n	8003d68 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	695a      	ldr	r2, [r3, #20]
 8003d4a:	4b70      	ldr	r3, [pc, #448]	@ (8003f0c <HAL_RCC_ClockConfig+0x244>)
 8003d4c:	69db      	ldr	r3, [r3, #28]
 8003d4e:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8003d52:	429a      	cmp	r2, r3
 8003d54:	d908      	bls.n	8003d68 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8003d56:	4b6d      	ldr	r3, [pc, #436]	@ (8003f0c <HAL_RCC_ClockConfig+0x244>)
 8003d58:	69db      	ldr	r3, [r3, #28]
 8003d5a:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	695b      	ldr	r3, [r3, #20]
 8003d62:	496a      	ldr	r1, [pc, #424]	@ (8003f0c <HAL_RCC_ClockConfig+0x244>)
 8003d64:	4313      	orrs	r3, r2
 8003d66:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	681b      	ldr	r3, [r3, #0]
 8003d6c:	f003 0310 	and.w	r3, r3, #16
 8003d70:	2b00      	cmp	r3, #0
 8003d72:	d010      	beq.n	8003d96 <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	699a      	ldr	r2, [r3, #24]
 8003d78:	4b64      	ldr	r3, [pc, #400]	@ (8003f0c <HAL_RCC_ClockConfig+0x244>)
 8003d7a:	69db      	ldr	r3, [r3, #28]
 8003d7c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8003d80:	429a      	cmp	r2, r3
 8003d82:	d908      	bls.n	8003d96 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8003d84:	4b61      	ldr	r3, [pc, #388]	@ (8003f0c <HAL_RCC_ClockConfig+0x244>)
 8003d86:	69db      	ldr	r3, [r3, #28]
 8003d88:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	699b      	ldr	r3, [r3, #24]
 8003d90:	495e      	ldr	r1, [pc, #376]	@ (8003f0c <HAL_RCC_ClockConfig+0x244>)
 8003d92:	4313      	orrs	r3, r2
 8003d94:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	681b      	ldr	r3, [r3, #0]
 8003d9a:	f003 0320 	and.w	r3, r3, #32
 8003d9e:	2b00      	cmp	r3, #0
 8003da0:	d010      	beq.n	8003dc4 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	69da      	ldr	r2, [r3, #28]
 8003da6:	4b59      	ldr	r3, [pc, #356]	@ (8003f0c <HAL_RCC_ClockConfig+0x244>)
 8003da8:	6a1b      	ldr	r3, [r3, #32]
 8003daa:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8003dae:	429a      	cmp	r2, r3
 8003db0:	d908      	bls.n	8003dc4 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8003db2:	4b56      	ldr	r3, [pc, #344]	@ (8003f0c <HAL_RCC_ClockConfig+0x244>)
 8003db4:	6a1b      	ldr	r3, [r3, #32]
 8003db6:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	69db      	ldr	r3, [r3, #28]
 8003dbe:	4953      	ldr	r1, [pc, #332]	@ (8003f0c <HAL_RCC_ClockConfig+0x244>)
 8003dc0:	4313      	orrs	r3, r2
 8003dc2:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	681b      	ldr	r3, [r3, #0]
 8003dc8:	f003 0302 	and.w	r3, r3, #2
 8003dcc:	2b00      	cmp	r3, #0
 8003dce:	d010      	beq.n	8003df2 <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	68da      	ldr	r2, [r3, #12]
 8003dd4:	4b4d      	ldr	r3, [pc, #308]	@ (8003f0c <HAL_RCC_ClockConfig+0x244>)
 8003dd6:	699b      	ldr	r3, [r3, #24]
 8003dd8:	f003 030f 	and.w	r3, r3, #15
 8003ddc:	429a      	cmp	r2, r3
 8003dde:	d908      	bls.n	8003df2 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003de0:	4b4a      	ldr	r3, [pc, #296]	@ (8003f0c <HAL_RCC_ClockConfig+0x244>)
 8003de2:	699b      	ldr	r3, [r3, #24]
 8003de4:	f023 020f 	bic.w	r2, r3, #15
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	68db      	ldr	r3, [r3, #12]
 8003dec:	4947      	ldr	r1, [pc, #284]	@ (8003f0c <HAL_RCC_ClockConfig+0x244>)
 8003dee:	4313      	orrs	r3, r2
 8003df0:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	681b      	ldr	r3, [r3, #0]
 8003df6:	f003 0301 	and.w	r3, r3, #1
 8003dfa:	2b00      	cmp	r3, #0
 8003dfc:	d055      	beq.n	8003eaa <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8003dfe:	4b43      	ldr	r3, [pc, #268]	@ (8003f0c <HAL_RCC_ClockConfig+0x244>)
 8003e00:	699b      	ldr	r3, [r3, #24]
 8003e02:	f423 6270 	bic.w	r2, r3, #3840	@ 0xf00
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	689b      	ldr	r3, [r3, #8]
 8003e0a:	4940      	ldr	r1, [pc, #256]	@ (8003f0c <HAL_RCC_ClockConfig+0x244>)
 8003e0c:	4313      	orrs	r3, r2
 8003e0e:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	685b      	ldr	r3, [r3, #4]
 8003e14:	2b02      	cmp	r3, #2
 8003e16:	d107      	bne.n	8003e28 <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8003e18:	4b3c      	ldr	r3, [pc, #240]	@ (8003f0c <HAL_RCC_ClockConfig+0x244>)
 8003e1a:	681b      	ldr	r3, [r3, #0]
 8003e1c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003e20:	2b00      	cmp	r3, #0
 8003e22:	d121      	bne.n	8003e68 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8003e24:	2301      	movs	r3, #1
 8003e26:	e0f6      	b.n	8004016 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	685b      	ldr	r3, [r3, #4]
 8003e2c:	2b03      	cmp	r3, #3
 8003e2e:	d107      	bne.n	8003e40 <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8003e30:	4b36      	ldr	r3, [pc, #216]	@ (8003f0c <HAL_RCC_ClockConfig+0x244>)
 8003e32:	681b      	ldr	r3, [r3, #0]
 8003e34:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003e38:	2b00      	cmp	r3, #0
 8003e3a:	d115      	bne.n	8003e68 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8003e3c:	2301      	movs	r3, #1
 8003e3e:	e0ea      	b.n	8004016 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	685b      	ldr	r3, [r3, #4]
 8003e44:	2b01      	cmp	r3, #1
 8003e46:	d107      	bne.n	8003e58 <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8003e48:	4b30      	ldr	r3, [pc, #192]	@ (8003f0c <HAL_RCC_ClockConfig+0x244>)
 8003e4a:	681b      	ldr	r3, [r3, #0]
 8003e4c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003e50:	2b00      	cmp	r3, #0
 8003e52:	d109      	bne.n	8003e68 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8003e54:	2301      	movs	r3, #1
 8003e56:	e0de      	b.n	8004016 <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8003e58:	4b2c      	ldr	r3, [pc, #176]	@ (8003f0c <HAL_RCC_ClockConfig+0x244>)
 8003e5a:	681b      	ldr	r3, [r3, #0]
 8003e5c:	f003 0304 	and.w	r3, r3, #4
 8003e60:	2b00      	cmp	r3, #0
 8003e62:	d101      	bne.n	8003e68 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8003e64:	2301      	movs	r3, #1
 8003e66:	e0d6      	b.n	8004016 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8003e68:	4b28      	ldr	r3, [pc, #160]	@ (8003f0c <HAL_RCC_ClockConfig+0x244>)
 8003e6a:	691b      	ldr	r3, [r3, #16]
 8003e6c:	f023 0207 	bic.w	r2, r3, #7
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	685b      	ldr	r3, [r3, #4]
 8003e74:	4925      	ldr	r1, [pc, #148]	@ (8003f0c <HAL_RCC_ClockConfig+0x244>)
 8003e76:	4313      	orrs	r3, r2
 8003e78:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003e7a:	f7fd fd9b 	bl	80019b4 <HAL_GetTick>
 8003e7e:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003e80:	e00a      	b.n	8003e98 <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003e82:	f7fd fd97 	bl	80019b4 <HAL_GetTick>
 8003e86:	4602      	mov	r2, r0
 8003e88:	697b      	ldr	r3, [r7, #20]
 8003e8a:	1ad3      	subs	r3, r2, r3
 8003e8c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003e90:	4293      	cmp	r3, r2
 8003e92:	d901      	bls.n	8003e98 <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 8003e94:	2303      	movs	r3, #3
 8003e96:	e0be      	b.n	8004016 <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003e98:	4b1c      	ldr	r3, [pc, #112]	@ (8003f0c <HAL_RCC_ClockConfig+0x244>)
 8003e9a:	691b      	ldr	r3, [r3, #16]
 8003e9c:	f003 0238 	and.w	r2, r3, #56	@ 0x38
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	685b      	ldr	r3, [r3, #4]
 8003ea4:	00db      	lsls	r3, r3, #3
 8003ea6:	429a      	cmp	r2, r3
 8003ea8:	d1eb      	bne.n	8003e82 <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	681b      	ldr	r3, [r3, #0]
 8003eae:	f003 0302 	and.w	r3, r3, #2
 8003eb2:	2b00      	cmp	r3, #0
 8003eb4:	d010      	beq.n	8003ed8 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	68da      	ldr	r2, [r3, #12]
 8003eba:	4b14      	ldr	r3, [pc, #80]	@ (8003f0c <HAL_RCC_ClockConfig+0x244>)
 8003ebc:	699b      	ldr	r3, [r3, #24]
 8003ebe:	f003 030f 	and.w	r3, r3, #15
 8003ec2:	429a      	cmp	r2, r3
 8003ec4:	d208      	bcs.n	8003ed8 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003ec6:	4b11      	ldr	r3, [pc, #68]	@ (8003f0c <HAL_RCC_ClockConfig+0x244>)
 8003ec8:	699b      	ldr	r3, [r3, #24]
 8003eca:	f023 020f 	bic.w	r2, r3, #15
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	68db      	ldr	r3, [r3, #12]
 8003ed2:	490e      	ldr	r1, [pc, #56]	@ (8003f0c <HAL_RCC_ClockConfig+0x244>)
 8003ed4:	4313      	orrs	r3, r2
 8003ed6:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003ed8:	4b0b      	ldr	r3, [pc, #44]	@ (8003f08 <HAL_RCC_ClockConfig+0x240>)
 8003eda:	681b      	ldr	r3, [r3, #0]
 8003edc:	f003 030f 	and.w	r3, r3, #15
 8003ee0:	683a      	ldr	r2, [r7, #0]
 8003ee2:	429a      	cmp	r2, r3
 8003ee4:	d214      	bcs.n	8003f10 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003ee6:	4b08      	ldr	r3, [pc, #32]	@ (8003f08 <HAL_RCC_ClockConfig+0x240>)
 8003ee8:	681b      	ldr	r3, [r3, #0]
 8003eea:	f023 020f 	bic.w	r2, r3, #15
 8003eee:	4906      	ldr	r1, [pc, #24]	@ (8003f08 <HAL_RCC_ClockConfig+0x240>)
 8003ef0:	683b      	ldr	r3, [r7, #0]
 8003ef2:	4313      	orrs	r3, r2
 8003ef4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003ef6:	4b04      	ldr	r3, [pc, #16]	@ (8003f08 <HAL_RCC_ClockConfig+0x240>)
 8003ef8:	681b      	ldr	r3, [r3, #0]
 8003efa:	f003 030f 	and.w	r3, r3, #15
 8003efe:	683a      	ldr	r2, [r7, #0]
 8003f00:	429a      	cmp	r2, r3
 8003f02:	d005      	beq.n	8003f10 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8003f04:	2301      	movs	r3, #1
 8003f06:	e086      	b.n	8004016 <HAL_RCC_ClockConfig+0x34e>
 8003f08:	52002000 	.word	0x52002000
 8003f0c:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	681b      	ldr	r3, [r3, #0]
 8003f14:	f003 0304 	and.w	r3, r3, #4
 8003f18:	2b00      	cmp	r3, #0
 8003f1a:	d010      	beq.n	8003f3e <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	691a      	ldr	r2, [r3, #16]
 8003f20:	4b3f      	ldr	r3, [pc, #252]	@ (8004020 <HAL_RCC_ClockConfig+0x358>)
 8003f22:	699b      	ldr	r3, [r3, #24]
 8003f24:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8003f28:	429a      	cmp	r2, r3
 8003f2a:	d208      	bcs.n	8003f3e <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8003f2c:	4b3c      	ldr	r3, [pc, #240]	@ (8004020 <HAL_RCC_ClockConfig+0x358>)
 8003f2e:	699b      	ldr	r3, [r3, #24]
 8003f30:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	691b      	ldr	r3, [r3, #16]
 8003f38:	4939      	ldr	r1, [pc, #228]	@ (8004020 <HAL_RCC_ClockConfig+0x358>)
 8003f3a:	4313      	orrs	r3, r2
 8003f3c:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	681b      	ldr	r3, [r3, #0]
 8003f42:	f003 0308 	and.w	r3, r3, #8
 8003f46:	2b00      	cmp	r3, #0
 8003f48:	d010      	beq.n	8003f6c <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	695a      	ldr	r2, [r3, #20]
 8003f4e:	4b34      	ldr	r3, [pc, #208]	@ (8004020 <HAL_RCC_ClockConfig+0x358>)
 8003f50:	69db      	ldr	r3, [r3, #28]
 8003f52:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8003f56:	429a      	cmp	r2, r3
 8003f58:	d208      	bcs.n	8003f6c <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8003f5a:	4b31      	ldr	r3, [pc, #196]	@ (8004020 <HAL_RCC_ClockConfig+0x358>)
 8003f5c:	69db      	ldr	r3, [r3, #28]
 8003f5e:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	695b      	ldr	r3, [r3, #20]
 8003f66:	492e      	ldr	r1, [pc, #184]	@ (8004020 <HAL_RCC_ClockConfig+0x358>)
 8003f68:	4313      	orrs	r3, r2
 8003f6a:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	681b      	ldr	r3, [r3, #0]
 8003f70:	f003 0310 	and.w	r3, r3, #16
 8003f74:	2b00      	cmp	r3, #0
 8003f76:	d010      	beq.n	8003f9a <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	699a      	ldr	r2, [r3, #24]
 8003f7c:	4b28      	ldr	r3, [pc, #160]	@ (8004020 <HAL_RCC_ClockConfig+0x358>)
 8003f7e:	69db      	ldr	r3, [r3, #28]
 8003f80:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8003f84:	429a      	cmp	r2, r3
 8003f86:	d208      	bcs.n	8003f9a <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8003f88:	4b25      	ldr	r3, [pc, #148]	@ (8004020 <HAL_RCC_ClockConfig+0x358>)
 8003f8a:	69db      	ldr	r3, [r3, #28]
 8003f8c:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	699b      	ldr	r3, [r3, #24]
 8003f94:	4922      	ldr	r1, [pc, #136]	@ (8004020 <HAL_RCC_ClockConfig+0x358>)
 8003f96:	4313      	orrs	r3, r2
 8003f98:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	681b      	ldr	r3, [r3, #0]
 8003f9e:	f003 0320 	and.w	r3, r3, #32
 8003fa2:	2b00      	cmp	r3, #0
 8003fa4:	d010      	beq.n	8003fc8 <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	69da      	ldr	r2, [r3, #28]
 8003faa:	4b1d      	ldr	r3, [pc, #116]	@ (8004020 <HAL_RCC_ClockConfig+0x358>)
 8003fac:	6a1b      	ldr	r3, [r3, #32]
 8003fae:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8003fb2:	429a      	cmp	r2, r3
 8003fb4:	d208      	bcs.n	8003fc8 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8003fb6:	4b1a      	ldr	r3, [pc, #104]	@ (8004020 <HAL_RCC_ClockConfig+0x358>)
 8003fb8:	6a1b      	ldr	r3, [r3, #32]
 8003fba:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	69db      	ldr	r3, [r3, #28]
 8003fc2:	4917      	ldr	r1, [pc, #92]	@ (8004020 <HAL_RCC_ClockConfig+0x358>)
 8003fc4:	4313      	orrs	r3, r2
 8003fc6:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8003fc8:	f000 f834 	bl	8004034 <HAL_RCC_GetSysClockFreq>
 8003fcc:	4602      	mov	r2, r0
 8003fce:	4b14      	ldr	r3, [pc, #80]	@ (8004020 <HAL_RCC_ClockConfig+0x358>)
 8003fd0:	699b      	ldr	r3, [r3, #24]
 8003fd2:	0a1b      	lsrs	r3, r3, #8
 8003fd4:	f003 030f 	and.w	r3, r3, #15
 8003fd8:	4912      	ldr	r1, [pc, #72]	@ (8004024 <HAL_RCC_ClockConfig+0x35c>)
 8003fda:	5ccb      	ldrb	r3, [r1, r3]
 8003fdc:	f003 031f 	and.w	r3, r3, #31
 8003fe0:	fa22 f303 	lsr.w	r3, r2, r3
 8003fe4:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8003fe6:	4b0e      	ldr	r3, [pc, #56]	@ (8004020 <HAL_RCC_ClockConfig+0x358>)
 8003fe8:	699b      	ldr	r3, [r3, #24]
 8003fea:	f003 030f 	and.w	r3, r3, #15
 8003fee:	4a0d      	ldr	r2, [pc, #52]	@ (8004024 <HAL_RCC_ClockConfig+0x35c>)
 8003ff0:	5cd3      	ldrb	r3, [r2, r3]
 8003ff2:	f003 031f 	and.w	r3, r3, #31
 8003ff6:	693a      	ldr	r2, [r7, #16]
 8003ff8:	fa22 f303 	lsr.w	r3, r2, r3
 8003ffc:	4a0a      	ldr	r2, [pc, #40]	@ (8004028 <HAL_RCC_ClockConfig+0x360>)
 8003ffe:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8004000:	4a0a      	ldr	r2, [pc, #40]	@ (800402c <HAL_RCC_ClockConfig+0x364>)
 8004002:	693b      	ldr	r3, [r7, #16]
 8004004:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 8004006:	4b0a      	ldr	r3, [pc, #40]	@ (8004030 <HAL_RCC_ClockConfig+0x368>)
 8004008:	681b      	ldr	r3, [r3, #0]
 800400a:	4618      	mov	r0, r3
 800400c:	f7fd fc88 	bl	8001920 <HAL_InitTick>
 8004010:	4603      	mov	r3, r0
 8004012:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8004014:	7bfb      	ldrb	r3, [r7, #15]
}
 8004016:	4618      	mov	r0, r3
 8004018:	3718      	adds	r7, #24
 800401a:	46bd      	mov	sp, r7
 800401c:	bd80      	pop	{r7, pc}
 800401e:	bf00      	nop
 8004020:	58024400 	.word	0x58024400
 8004024:	0800c1e8 	.word	0x0800c1e8
 8004028:	24000004 	.word	0x24000004
 800402c:	24000000 	.word	0x24000000
 8004030:	24000008 	.word	0x24000008

08004034 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004034:	b480      	push	{r7}
 8004036:	b089      	sub	sp, #36	@ 0x24
 8004038:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 800403a:	4bb3      	ldr	r3, [pc, #716]	@ (8004308 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800403c:	691b      	ldr	r3, [r3, #16]
 800403e:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8004042:	2b18      	cmp	r3, #24
 8004044:	f200 8155 	bhi.w	80042f2 <HAL_RCC_GetSysClockFreq+0x2be>
 8004048:	a201      	add	r2, pc, #4	@ (adr r2, 8004050 <HAL_RCC_GetSysClockFreq+0x1c>)
 800404a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800404e:	bf00      	nop
 8004050:	080040b5 	.word	0x080040b5
 8004054:	080042f3 	.word	0x080042f3
 8004058:	080042f3 	.word	0x080042f3
 800405c:	080042f3 	.word	0x080042f3
 8004060:	080042f3 	.word	0x080042f3
 8004064:	080042f3 	.word	0x080042f3
 8004068:	080042f3 	.word	0x080042f3
 800406c:	080042f3 	.word	0x080042f3
 8004070:	080040db 	.word	0x080040db
 8004074:	080042f3 	.word	0x080042f3
 8004078:	080042f3 	.word	0x080042f3
 800407c:	080042f3 	.word	0x080042f3
 8004080:	080042f3 	.word	0x080042f3
 8004084:	080042f3 	.word	0x080042f3
 8004088:	080042f3 	.word	0x080042f3
 800408c:	080042f3 	.word	0x080042f3
 8004090:	080040e1 	.word	0x080040e1
 8004094:	080042f3 	.word	0x080042f3
 8004098:	080042f3 	.word	0x080042f3
 800409c:	080042f3 	.word	0x080042f3
 80040a0:	080042f3 	.word	0x080042f3
 80040a4:	080042f3 	.word	0x080042f3
 80040a8:	080042f3 	.word	0x080042f3
 80040ac:	080042f3 	.word	0x080042f3
 80040b0:	080040e7 	.word	0x080040e7
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80040b4:	4b94      	ldr	r3, [pc, #592]	@ (8004308 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80040b6:	681b      	ldr	r3, [r3, #0]
 80040b8:	f003 0320 	and.w	r3, r3, #32
 80040bc:	2b00      	cmp	r3, #0
 80040be:	d009      	beq.n	80040d4 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80040c0:	4b91      	ldr	r3, [pc, #580]	@ (8004308 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80040c2:	681b      	ldr	r3, [r3, #0]
 80040c4:	08db      	lsrs	r3, r3, #3
 80040c6:	f003 0303 	and.w	r3, r3, #3
 80040ca:	4a90      	ldr	r2, [pc, #576]	@ (800430c <HAL_RCC_GetSysClockFreq+0x2d8>)
 80040cc:	fa22 f303 	lsr.w	r3, r2, r3
 80040d0:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 80040d2:	e111      	b.n	80042f8 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 80040d4:	4b8d      	ldr	r3, [pc, #564]	@ (800430c <HAL_RCC_GetSysClockFreq+0x2d8>)
 80040d6:	61bb      	str	r3, [r7, #24]
      break;
 80040d8:	e10e      	b.n	80042f8 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 80040da:	4b8d      	ldr	r3, [pc, #564]	@ (8004310 <HAL_RCC_GetSysClockFreq+0x2dc>)
 80040dc:	61bb      	str	r3, [r7, #24]
      break;
 80040de:	e10b      	b.n	80042f8 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 80040e0:	4b8c      	ldr	r3, [pc, #560]	@ (8004314 <HAL_RCC_GetSysClockFreq+0x2e0>)
 80040e2:	61bb      	str	r3, [r7, #24]
      break;
 80040e4:	e108      	b.n	80042f8 <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80040e6:	4b88      	ldr	r3, [pc, #544]	@ (8004308 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80040e8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80040ea:	f003 0303 	and.w	r3, r3, #3
 80040ee:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 80040f0:	4b85      	ldr	r3, [pc, #532]	@ (8004308 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80040f2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80040f4:	091b      	lsrs	r3, r3, #4
 80040f6:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80040fa:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 80040fc:	4b82      	ldr	r3, [pc, #520]	@ (8004308 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80040fe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004100:	f003 0301 	and.w	r3, r3, #1
 8004104:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 8004106:	4b80      	ldr	r3, [pc, #512]	@ (8004308 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004108:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800410a:	08db      	lsrs	r3, r3, #3
 800410c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8004110:	68fa      	ldr	r2, [r7, #12]
 8004112:	fb02 f303 	mul.w	r3, r2, r3
 8004116:	ee07 3a90 	vmov	s15, r3
 800411a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800411e:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 8004122:	693b      	ldr	r3, [r7, #16]
 8004124:	2b00      	cmp	r3, #0
 8004126:	f000 80e1 	beq.w	80042ec <HAL_RCC_GetSysClockFreq+0x2b8>
      {
        switch (pllsource)
 800412a:	697b      	ldr	r3, [r7, #20]
 800412c:	2b02      	cmp	r3, #2
 800412e:	f000 8083 	beq.w	8004238 <HAL_RCC_GetSysClockFreq+0x204>
 8004132:	697b      	ldr	r3, [r7, #20]
 8004134:	2b02      	cmp	r3, #2
 8004136:	f200 80a1 	bhi.w	800427c <HAL_RCC_GetSysClockFreq+0x248>
 800413a:	697b      	ldr	r3, [r7, #20]
 800413c:	2b00      	cmp	r3, #0
 800413e:	d003      	beq.n	8004148 <HAL_RCC_GetSysClockFreq+0x114>
 8004140:	697b      	ldr	r3, [r7, #20]
 8004142:	2b01      	cmp	r3, #1
 8004144:	d056      	beq.n	80041f4 <HAL_RCC_GetSysClockFreq+0x1c0>
 8004146:	e099      	b.n	800427c <HAL_RCC_GetSysClockFreq+0x248>
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8004148:	4b6f      	ldr	r3, [pc, #444]	@ (8004308 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800414a:	681b      	ldr	r3, [r3, #0]
 800414c:	f003 0320 	and.w	r3, r3, #32
 8004150:	2b00      	cmp	r3, #0
 8004152:	d02d      	beq.n	80041b0 <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8004154:	4b6c      	ldr	r3, [pc, #432]	@ (8004308 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004156:	681b      	ldr	r3, [r3, #0]
 8004158:	08db      	lsrs	r3, r3, #3
 800415a:	f003 0303 	and.w	r3, r3, #3
 800415e:	4a6b      	ldr	r2, [pc, #428]	@ (800430c <HAL_RCC_GetSysClockFreq+0x2d8>)
 8004160:	fa22 f303 	lsr.w	r3, r2, r3
 8004164:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	ee07 3a90 	vmov	s15, r3
 800416c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004170:	693b      	ldr	r3, [r7, #16]
 8004172:	ee07 3a90 	vmov	s15, r3
 8004176:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800417a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800417e:	4b62      	ldr	r3, [pc, #392]	@ (8004308 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004180:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004182:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004186:	ee07 3a90 	vmov	s15, r3
 800418a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800418e:	ed97 6a02 	vldr	s12, [r7, #8]
 8004192:	eddf 5a61 	vldr	s11, [pc, #388]	@ 8004318 <HAL_RCC_GetSysClockFreq+0x2e4>
 8004196:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800419a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800419e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80041a2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80041a6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80041aa:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 80041ae:	e087      	b.n	80042c0 <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80041b0:	693b      	ldr	r3, [r7, #16]
 80041b2:	ee07 3a90 	vmov	s15, r3
 80041b6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80041ba:	eddf 6a58 	vldr	s13, [pc, #352]	@ 800431c <HAL_RCC_GetSysClockFreq+0x2e8>
 80041be:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80041c2:	4b51      	ldr	r3, [pc, #324]	@ (8004308 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80041c4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80041c6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80041ca:	ee07 3a90 	vmov	s15, r3
 80041ce:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80041d2:	ed97 6a02 	vldr	s12, [r7, #8]
 80041d6:	eddf 5a50 	vldr	s11, [pc, #320]	@ 8004318 <HAL_RCC_GetSysClockFreq+0x2e4>
 80041da:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80041de:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80041e2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80041e6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80041ea:	ee67 7a27 	vmul.f32	s15, s14, s15
 80041ee:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 80041f2:	e065      	b.n	80042c0 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80041f4:	693b      	ldr	r3, [r7, #16]
 80041f6:	ee07 3a90 	vmov	s15, r3
 80041fa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80041fe:	eddf 6a48 	vldr	s13, [pc, #288]	@ 8004320 <HAL_RCC_GetSysClockFreq+0x2ec>
 8004202:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004206:	4b40      	ldr	r3, [pc, #256]	@ (8004308 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004208:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800420a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800420e:	ee07 3a90 	vmov	s15, r3
 8004212:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004216:	ed97 6a02 	vldr	s12, [r7, #8]
 800421a:	eddf 5a3f 	vldr	s11, [pc, #252]	@ 8004318 <HAL_RCC_GetSysClockFreq+0x2e4>
 800421e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004222:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004226:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800422a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800422e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004232:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8004236:	e043      	b.n	80042c0 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8004238:	693b      	ldr	r3, [r7, #16]
 800423a:	ee07 3a90 	vmov	s15, r3
 800423e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004242:	eddf 6a38 	vldr	s13, [pc, #224]	@ 8004324 <HAL_RCC_GetSysClockFreq+0x2f0>
 8004246:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800424a:	4b2f      	ldr	r3, [pc, #188]	@ (8004308 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800424c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800424e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004252:	ee07 3a90 	vmov	s15, r3
 8004256:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800425a:	ed97 6a02 	vldr	s12, [r7, #8]
 800425e:	eddf 5a2e 	vldr	s11, [pc, #184]	@ 8004318 <HAL_RCC_GetSysClockFreq+0x2e4>
 8004262:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004266:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800426a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800426e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004272:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004276:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800427a:	e021      	b.n	80042c0 <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800427c:	693b      	ldr	r3, [r7, #16]
 800427e:	ee07 3a90 	vmov	s15, r3
 8004282:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004286:	eddf 6a26 	vldr	s13, [pc, #152]	@ 8004320 <HAL_RCC_GetSysClockFreq+0x2ec>
 800428a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800428e:	4b1e      	ldr	r3, [pc, #120]	@ (8004308 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004290:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004292:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004296:	ee07 3a90 	vmov	s15, r3
 800429a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800429e:	ed97 6a02 	vldr	s12, [r7, #8]
 80042a2:	eddf 5a1d 	vldr	s11, [pc, #116]	@ 8004318 <HAL_RCC_GetSysClockFreq+0x2e4>
 80042a6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80042aa:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80042ae:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80042b2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80042b6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80042ba:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 80042be:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 80042c0:	4b11      	ldr	r3, [pc, #68]	@ (8004308 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80042c2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80042c4:	0a5b      	lsrs	r3, r3, #9
 80042c6:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80042ca:	3301      	adds	r3, #1
 80042cc:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 80042ce:	683b      	ldr	r3, [r7, #0]
 80042d0:	ee07 3a90 	vmov	s15, r3
 80042d4:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80042d8:	edd7 6a07 	vldr	s13, [r7, #28]
 80042dc:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80042e0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80042e4:	ee17 3a90 	vmov	r3, s15
 80042e8:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 80042ea:	e005      	b.n	80042f8 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 80042ec:	2300      	movs	r3, #0
 80042ee:	61bb      	str	r3, [r7, #24]
      break;
 80042f0:	e002      	b.n	80042f8 <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 80042f2:	4b07      	ldr	r3, [pc, #28]	@ (8004310 <HAL_RCC_GetSysClockFreq+0x2dc>)
 80042f4:	61bb      	str	r3, [r7, #24]
      break;
 80042f6:	bf00      	nop
  }

  return sysclockfreq;
 80042f8:	69bb      	ldr	r3, [r7, #24]
}
 80042fa:	4618      	mov	r0, r3
 80042fc:	3724      	adds	r7, #36	@ 0x24
 80042fe:	46bd      	mov	sp, r7
 8004300:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004304:	4770      	bx	lr
 8004306:	bf00      	nop
 8004308:	58024400 	.word	0x58024400
 800430c:	03d09000 	.word	0x03d09000
 8004310:	003d0900 	.word	0x003d0900
 8004314:	017d7840 	.word	0x017d7840
 8004318:	46000000 	.word	0x46000000
 800431c:	4c742400 	.word	0x4c742400
 8004320:	4a742400 	.word	0x4a742400
 8004324:	4bbebc20 	.word	0x4bbebc20

08004328 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004328:	b580      	push	{r7, lr}
 800432a:	b082      	sub	sp, #8
 800432c:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 800432e:	f7ff fe81 	bl	8004034 <HAL_RCC_GetSysClockFreq>
 8004332:	4602      	mov	r2, r0
 8004334:	4b10      	ldr	r3, [pc, #64]	@ (8004378 <HAL_RCC_GetHCLKFreq+0x50>)
 8004336:	699b      	ldr	r3, [r3, #24]
 8004338:	0a1b      	lsrs	r3, r3, #8
 800433a:	f003 030f 	and.w	r3, r3, #15
 800433e:	490f      	ldr	r1, [pc, #60]	@ (800437c <HAL_RCC_GetHCLKFreq+0x54>)
 8004340:	5ccb      	ldrb	r3, [r1, r3]
 8004342:	f003 031f 	and.w	r3, r3, #31
 8004346:	fa22 f303 	lsr.w	r3, r2, r3
 800434a:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800434c:	4b0a      	ldr	r3, [pc, #40]	@ (8004378 <HAL_RCC_GetHCLKFreq+0x50>)
 800434e:	699b      	ldr	r3, [r3, #24]
 8004350:	f003 030f 	and.w	r3, r3, #15
 8004354:	4a09      	ldr	r2, [pc, #36]	@ (800437c <HAL_RCC_GetHCLKFreq+0x54>)
 8004356:	5cd3      	ldrb	r3, [r2, r3]
 8004358:	f003 031f 	and.w	r3, r3, #31
 800435c:	687a      	ldr	r2, [r7, #4]
 800435e:	fa22 f303 	lsr.w	r3, r2, r3
 8004362:	4a07      	ldr	r2, [pc, #28]	@ (8004380 <HAL_RCC_GetHCLKFreq+0x58>)
 8004364:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8004366:	4a07      	ldr	r2, [pc, #28]	@ (8004384 <HAL_RCC_GetHCLKFreq+0x5c>)
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 800436c:	4b04      	ldr	r3, [pc, #16]	@ (8004380 <HAL_RCC_GetHCLKFreq+0x58>)
 800436e:	681b      	ldr	r3, [r3, #0]
}
 8004370:	4618      	mov	r0, r3
 8004372:	3708      	adds	r7, #8
 8004374:	46bd      	mov	sp, r7
 8004376:	bd80      	pop	{r7, pc}
 8004378:	58024400 	.word	0x58024400
 800437c:	0800c1e8 	.word	0x0800c1e8
 8004380:	24000004 	.word	0x24000004
 8004384:	24000000 	.word	0x24000000

08004388 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004388:	b580      	push	{r7, lr}
 800438a:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 800438c:	f7ff ffcc 	bl	8004328 <HAL_RCC_GetHCLKFreq>
 8004390:	4602      	mov	r2, r0
 8004392:	4b06      	ldr	r3, [pc, #24]	@ (80043ac <HAL_RCC_GetPCLK1Freq+0x24>)
 8004394:	69db      	ldr	r3, [r3, #28]
 8004396:	091b      	lsrs	r3, r3, #4
 8004398:	f003 0307 	and.w	r3, r3, #7
 800439c:	4904      	ldr	r1, [pc, #16]	@ (80043b0 <HAL_RCC_GetPCLK1Freq+0x28>)
 800439e:	5ccb      	ldrb	r3, [r1, r3]
 80043a0:	f003 031f 	and.w	r3, r3, #31
 80043a4:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 80043a8:	4618      	mov	r0, r3
 80043aa:	bd80      	pop	{r7, pc}
 80043ac:	58024400 	.word	0x58024400
 80043b0:	0800c1e8 	.word	0x0800c1e8

080043b4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80043b4:	b580      	push	{r7, lr}
 80043b6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 80043b8:	f7ff ffb6 	bl	8004328 <HAL_RCC_GetHCLKFreq>
 80043bc:	4602      	mov	r2, r0
 80043be:	4b06      	ldr	r3, [pc, #24]	@ (80043d8 <HAL_RCC_GetPCLK2Freq+0x24>)
 80043c0:	69db      	ldr	r3, [r3, #28]
 80043c2:	0a1b      	lsrs	r3, r3, #8
 80043c4:	f003 0307 	and.w	r3, r3, #7
 80043c8:	4904      	ldr	r1, [pc, #16]	@ (80043dc <HAL_RCC_GetPCLK2Freq+0x28>)
 80043ca:	5ccb      	ldrb	r3, [r1, r3]
 80043cc:	f003 031f 	and.w	r3, r3, #31
 80043d0:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 80043d4:	4618      	mov	r0, r3
 80043d6:	bd80      	pop	{r7, pc}
 80043d8:	58024400 	.word	0x58024400
 80043dc:	0800c1e8 	.word	0x0800c1e8

080043e0 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80043e0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80043e4:	b0c6      	sub	sp, #280	@ 0x118
 80043e6:	af00      	add	r7, sp, #0
 80043e8:	f8c7 0104 	str.w	r0, [r7, #260]	@ 0x104
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80043ec:	2300      	movs	r3, #0
 80043ee:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80043f2:	2300      	movs	r3, #0
 80043f4:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80043f8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80043fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004400:	f002 6400 	and.w	r4, r2, #134217728	@ 0x8000000
 8004404:	2500      	movs	r5, #0
 8004406:	ea54 0305 	orrs.w	r3, r4, r5
 800440a:	d049      	beq.n	80044a0 <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 800440c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004410:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8004412:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8004416:	d02f      	beq.n	8004478 <HAL_RCCEx_PeriphCLKConfig+0x98>
 8004418:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800441c:	d828      	bhi.n	8004470 <HAL_RCCEx_PeriphCLKConfig+0x90>
 800441e:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8004422:	d01a      	beq.n	800445a <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8004424:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8004428:	d822      	bhi.n	8004470 <HAL_RCCEx_PeriphCLKConfig+0x90>
 800442a:	2b00      	cmp	r3, #0
 800442c:	d003      	beq.n	8004436 <HAL_RCCEx_PeriphCLKConfig+0x56>
 800442e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8004432:	d007      	beq.n	8004444 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8004434:	e01c      	b.n	8004470 <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004436:	4bab      	ldr	r3, [pc, #684]	@ (80046e4 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8004438:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800443a:	4aaa      	ldr	r2, [pc, #680]	@ (80046e4 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800443c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004440:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8004442:	e01a      	b.n	800447a <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8004444:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004448:	3308      	adds	r3, #8
 800444a:	2102      	movs	r1, #2
 800444c:	4618      	mov	r0, r3
 800444e:	f001 fc25 	bl	8005c9c <RCCEx_PLL2_Config>
 8004452:	4603      	mov	r3, r0
 8004454:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8004458:	e00f      	b.n	800447a <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800445a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800445e:	3328      	adds	r3, #40	@ 0x28
 8004460:	2102      	movs	r1, #2
 8004462:	4618      	mov	r0, r3
 8004464:	f001 fccc 	bl	8005e00 <RCCEx_PLL3_Config>
 8004468:	4603      	mov	r3, r0
 800446a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 800446e:	e004      	b.n	800447a <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004470:	2301      	movs	r3, #1
 8004472:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8004476:	e000      	b.n	800447a <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 8004478:	bf00      	nop
    }

    if (ret == HAL_OK)
 800447a:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800447e:	2b00      	cmp	r3, #0
 8004480:	d10a      	bne.n	8004498 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8004482:	4b98      	ldr	r3, [pc, #608]	@ (80046e4 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8004484:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004486:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 800448a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800448e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8004490:	4a94      	ldr	r2, [pc, #592]	@ (80046e4 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8004492:	430b      	orrs	r3, r1
 8004494:	6513      	str	r3, [r2, #80]	@ 0x50
 8004496:	e003      	b.n	80044a0 <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004498:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800449c:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 80044a0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80044a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80044a8:	f402 7880 	and.w	r8, r2, #256	@ 0x100
 80044ac:	f04f 0900 	mov.w	r9, #0
 80044b0:	ea58 0309 	orrs.w	r3, r8, r9
 80044b4:	d047      	beq.n	8004546 <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 80044b6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80044ba:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80044bc:	2b04      	cmp	r3, #4
 80044be:	d82a      	bhi.n	8004516 <HAL_RCCEx_PeriphCLKConfig+0x136>
 80044c0:	a201      	add	r2, pc, #4	@ (adr r2, 80044c8 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 80044c2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80044c6:	bf00      	nop
 80044c8:	080044dd 	.word	0x080044dd
 80044cc:	080044eb 	.word	0x080044eb
 80044d0:	08004501 	.word	0x08004501
 80044d4:	0800451f 	.word	0x0800451f
 80044d8:	0800451f 	.word	0x0800451f
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80044dc:	4b81      	ldr	r3, [pc, #516]	@ (80046e4 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80044de:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80044e0:	4a80      	ldr	r2, [pc, #512]	@ (80046e4 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80044e2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80044e6:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80044e8:	e01a      	b.n	8004520 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80044ea:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80044ee:	3308      	adds	r3, #8
 80044f0:	2100      	movs	r1, #0
 80044f2:	4618      	mov	r0, r3
 80044f4:	f001 fbd2 	bl	8005c9c <RCCEx_PLL2_Config>
 80044f8:	4603      	mov	r3, r0
 80044fa:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80044fe:	e00f      	b.n	8004520 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8004500:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004504:	3328      	adds	r3, #40	@ 0x28
 8004506:	2100      	movs	r1, #0
 8004508:	4618      	mov	r0, r3
 800450a:	f001 fc79 	bl	8005e00 <RCCEx_PLL3_Config>
 800450e:	4603      	mov	r3, r0
 8004510:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8004514:	e004      	b.n	8004520 <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004516:	2301      	movs	r3, #1
 8004518:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800451c:	e000      	b.n	8004520 <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 800451e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004520:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8004524:	2b00      	cmp	r3, #0
 8004526:	d10a      	bne.n	800453e <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8004528:	4b6e      	ldr	r3, [pc, #440]	@ (80046e4 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800452a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800452c:	f023 0107 	bic.w	r1, r3, #7
 8004530:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004534:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004536:	4a6b      	ldr	r2, [pc, #428]	@ (80046e4 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8004538:	430b      	orrs	r3, r1
 800453a:	6513      	str	r3, [r2, #80]	@ 0x50
 800453c:	e003      	b.n	8004546 <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800453e:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8004542:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 8004546:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800454a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800454e:	f402 6a80 	and.w	sl, r2, #1024	@ 0x400
 8004552:	f04f 0b00 	mov.w	fp, #0
 8004556:	ea5a 030b 	orrs.w	r3, sl, fp
 800455a:	d05b      	beq.n	8004614 <HAL_RCCEx_PeriphCLKConfig+0x234>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 800455c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004560:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8004564:	f5b3 0f20 	cmp.w	r3, #10485760	@ 0xa00000
 8004568:	d03b      	beq.n	80045e2 <HAL_RCCEx_PeriphCLKConfig+0x202>
 800456a:	f5b3 0f20 	cmp.w	r3, #10485760	@ 0xa00000
 800456e:	d834      	bhi.n	80045da <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 8004570:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8004574:	d037      	beq.n	80045e6 <HAL_RCCEx_PeriphCLKConfig+0x206>
 8004576:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800457a:	d82e      	bhi.n	80045da <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 800457c:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8004580:	d033      	beq.n	80045ea <HAL_RCCEx_PeriphCLKConfig+0x20a>
 8004582:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8004586:	d828      	bhi.n	80045da <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 8004588:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800458c:	d01a      	beq.n	80045c4 <HAL_RCCEx_PeriphCLKConfig+0x1e4>
 800458e:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8004592:	d822      	bhi.n	80045da <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 8004594:	2b00      	cmp	r3, #0
 8004596:	d003      	beq.n	80045a0 <HAL_RCCEx_PeriphCLKConfig+0x1c0>
 8004598:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800459c:	d007      	beq.n	80045ae <HAL_RCCEx_PeriphCLKConfig+0x1ce>
 800459e:	e01c      	b.n	80045da <HAL_RCCEx_PeriphCLKConfig+0x1fa>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80045a0:	4b50      	ldr	r3, [pc, #320]	@ (80046e4 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80045a2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80045a4:	4a4f      	ldr	r2, [pc, #316]	@ (80046e4 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80045a6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80045aa:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80045ac:	e01e      	b.n	80045ec <HAL_RCCEx_PeriphCLKConfig+0x20c>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80045ae:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80045b2:	3308      	adds	r3, #8
 80045b4:	2100      	movs	r1, #0
 80045b6:	4618      	mov	r0, r3
 80045b8:	f001 fb70 	bl	8005c9c <RCCEx_PLL2_Config>
 80045bc:	4603      	mov	r3, r0
 80045be:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 80045c2:	e013      	b.n	80045ec <HAL_RCCEx_PeriphCLKConfig+0x20c>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80045c4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80045c8:	3328      	adds	r3, #40	@ 0x28
 80045ca:	2100      	movs	r1, #0
 80045cc:	4618      	mov	r0, r3
 80045ce:	f001 fc17 	bl	8005e00 <RCCEx_PLL3_Config>
 80045d2:	4603      	mov	r3, r0
 80045d4:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80045d8:	e008      	b.n	80045ec <HAL_RCCEx_PeriphCLKConfig+0x20c>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 80045da:	2301      	movs	r3, #1
 80045dc:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 80045e0:	e004      	b.n	80045ec <HAL_RCCEx_PeriphCLKConfig+0x20c>
        break;
 80045e2:	bf00      	nop
 80045e4:	e002      	b.n	80045ec <HAL_RCCEx_PeriphCLKConfig+0x20c>
        break;
 80045e6:	bf00      	nop
 80045e8:	e000      	b.n	80045ec <HAL_RCCEx_PeriphCLKConfig+0x20c>
        break;
 80045ea:	bf00      	nop
    }

    if (ret == HAL_OK)
 80045ec:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80045f0:	2b00      	cmp	r3, #0
 80045f2:	d10b      	bne.n	800460c <HAL_RCCEx_PeriphCLKConfig+0x22c>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 80045f4:	4b3b      	ldr	r3, [pc, #236]	@ (80046e4 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80045f6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80045f8:	f423 0160 	bic.w	r1, r3, #14680064	@ 0xe00000
 80045fc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004600:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8004604:	4a37      	ldr	r2, [pc, #220]	@ (80046e4 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8004606:	430b      	orrs	r3, r1
 8004608:	6593      	str	r3, [r2, #88]	@ 0x58
 800460a:	e003      	b.n	8004614 <HAL_RCCEx_PeriphCLKConfig+0x234>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800460c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8004610:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8004614:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004618:	e9d3 2300 	ldrd	r2, r3, [r3]
 800461c:	f402 6300 	and.w	r3, r2, #2048	@ 0x800
 8004620:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 8004624:	2300      	movs	r3, #0
 8004626:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 800462a:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	@ 0xf8
 800462e:	460b      	mov	r3, r1
 8004630:	4313      	orrs	r3, r2
 8004632:	d05d      	beq.n	80046f0 <HAL_RCCEx_PeriphCLKConfig+0x310>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 8004634:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004638:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 800463c:	f1b3 6fa0 	cmp.w	r3, #83886080	@ 0x5000000
 8004640:	d03b      	beq.n	80046ba <HAL_RCCEx_PeriphCLKConfig+0x2da>
 8004642:	f1b3 6fa0 	cmp.w	r3, #83886080	@ 0x5000000
 8004646:	d834      	bhi.n	80046b2 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 8004648:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800464c:	d037      	beq.n	80046be <HAL_RCCEx_PeriphCLKConfig+0x2de>
 800464e:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8004652:	d82e      	bhi.n	80046b2 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 8004654:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8004658:	d033      	beq.n	80046c2 <HAL_RCCEx_PeriphCLKConfig+0x2e2>
 800465a:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 800465e:	d828      	bhi.n	80046b2 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 8004660:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8004664:	d01a      	beq.n	800469c <HAL_RCCEx_PeriphCLKConfig+0x2bc>
 8004666:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800466a:	d822      	bhi.n	80046b2 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 800466c:	2b00      	cmp	r3, #0
 800466e:	d003      	beq.n	8004678 <HAL_RCCEx_PeriphCLKConfig+0x298>
 8004670:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8004674:	d007      	beq.n	8004686 <HAL_RCCEx_PeriphCLKConfig+0x2a6>
 8004676:	e01c      	b.n	80046b2 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004678:	4b1a      	ldr	r3, [pc, #104]	@ (80046e4 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800467a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800467c:	4a19      	ldr	r2, [pc, #100]	@ (80046e4 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800467e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004682:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8004684:	e01e      	b.n	80046c4 <HAL_RCCEx_PeriphCLKConfig+0x2e4>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8004686:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800468a:	3308      	adds	r3, #8
 800468c:	2100      	movs	r1, #0
 800468e:	4618      	mov	r0, r3
 8004690:	f001 fb04 	bl	8005c9c <RCCEx_PLL2_Config>
 8004694:	4603      	mov	r3, r0
 8004696:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 800469a:	e013      	b.n	80046c4 <HAL_RCCEx_PeriphCLKConfig+0x2e4>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800469c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80046a0:	3328      	adds	r3, #40	@ 0x28
 80046a2:	2100      	movs	r1, #0
 80046a4:	4618      	mov	r0, r3
 80046a6:	f001 fbab 	bl	8005e00 <RCCEx_PLL3_Config>
 80046aa:	4603      	mov	r3, r0
 80046ac:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80046b0:	e008      	b.n	80046c4 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 80046b2:	2301      	movs	r3, #1
 80046b4:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 80046b8:	e004      	b.n	80046c4 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        break;
 80046ba:	bf00      	nop
 80046bc:	e002      	b.n	80046c4 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        break;
 80046be:	bf00      	nop
 80046c0:	e000      	b.n	80046c4 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        break;
 80046c2:	bf00      	nop
    }

    if (ret == HAL_OK)
 80046c4:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80046c8:	2b00      	cmp	r3, #0
 80046ca:	d10d      	bne.n	80046e8 <HAL_RCCEx_PeriphCLKConfig+0x308>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 80046cc:	4b05      	ldr	r3, [pc, #20]	@ (80046e4 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80046ce:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80046d0:	f023 61e0 	bic.w	r1, r3, #117440512	@ 0x7000000
 80046d4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80046d8:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 80046dc:	4a01      	ldr	r2, [pc, #4]	@ (80046e4 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80046de:	430b      	orrs	r3, r1
 80046e0:	6593      	str	r3, [r2, #88]	@ 0x58
 80046e2:	e005      	b.n	80046f0 <HAL_RCCEx_PeriphCLKConfig+0x310>
 80046e4:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80046e8:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80046ec:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
  }
#endif  /*QUADSPI*/

#if defined(OCTOSPI1) || defined(OCTOSPI2)
  /*---------------------------- OCTOSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 80046f0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80046f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80046f8:	f002 7300 	and.w	r3, r2, #33554432	@ 0x2000000
 80046fc:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 8004700:	2300      	movs	r3, #0
 8004702:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 8004706:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	@ 0xf0
 800470a:	460b      	mov	r3, r1
 800470c:	4313      	orrs	r3, r2
 800470e:	d03a      	beq.n	8004786 <HAL_RCCEx_PeriphCLKConfig+0x3a6>
  {
    switch (PeriphClkInit->OspiClockSelection)
 8004710:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004714:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004716:	2b30      	cmp	r3, #48	@ 0x30
 8004718:	d01f      	beq.n	800475a <HAL_RCCEx_PeriphCLKConfig+0x37a>
 800471a:	2b30      	cmp	r3, #48	@ 0x30
 800471c:	d819      	bhi.n	8004752 <HAL_RCCEx_PeriphCLKConfig+0x372>
 800471e:	2b20      	cmp	r3, #32
 8004720:	d00c      	beq.n	800473c <HAL_RCCEx_PeriphCLKConfig+0x35c>
 8004722:	2b20      	cmp	r3, #32
 8004724:	d815      	bhi.n	8004752 <HAL_RCCEx_PeriphCLKConfig+0x372>
 8004726:	2b00      	cmp	r3, #0
 8004728:	d019      	beq.n	800475e <HAL_RCCEx_PeriphCLKConfig+0x37e>
 800472a:	2b10      	cmp	r3, #16
 800472c:	d111      	bne.n	8004752 <HAL_RCCEx_PeriphCLKConfig+0x372>
    {
      case RCC_OSPICLKSOURCE_PLL:      /* PLL is used as clock source for OSPI*/
        /* Enable OSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800472e:	4baa      	ldr	r3, [pc, #680]	@ (80049d8 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8004730:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004732:	4aa9      	ldr	r2, [pc, #676]	@ (80049d8 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8004734:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004738:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* OSPI clock source configuration done later after clock selection check */
        break;
 800473a:	e011      	b.n	8004760 <HAL_RCCEx_PeriphCLKConfig+0x380>

      case RCC_OSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for OSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800473c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004740:	3308      	adds	r3, #8
 8004742:	2102      	movs	r1, #2
 8004744:	4618      	mov	r0, r3
 8004746:	f001 faa9 	bl	8005c9c <RCCEx_PLL2_Config>
 800474a:	4603      	mov	r3, r0
 800474c:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* OSPI clock source configuration done later after clock selection check */
        break;
 8004750:	e006      	b.n	8004760 <HAL_RCCEx_PeriphCLKConfig+0x380>
      case RCC_OSPICLKSOURCE_HCLK:
        /* HCLK clock selected as OSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8004752:	2301      	movs	r3, #1
 8004754:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8004758:	e002      	b.n	8004760 <HAL_RCCEx_PeriphCLKConfig+0x380>
        break;
 800475a:	bf00      	nop
 800475c:	e000      	b.n	8004760 <HAL_RCCEx_PeriphCLKConfig+0x380>
        break;
 800475e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004760:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8004764:	2b00      	cmp	r3, #0
 8004766:	d10a      	bne.n	800477e <HAL_RCCEx_PeriphCLKConfig+0x39e>
    {
      /* Set the source of OSPI clock*/
      __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 8004768:	4b9b      	ldr	r3, [pc, #620]	@ (80049d8 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800476a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800476c:	f023 0130 	bic.w	r1, r3, #48	@ 0x30
 8004770:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004774:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004776:	4a98      	ldr	r2, [pc, #608]	@ (80049d8 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8004778:	430b      	orrs	r3, r1
 800477a:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800477c:	e003      	b.n	8004786 <HAL_RCCEx_PeriphCLKConfig+0x3a6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800477e:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8004782:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8004786:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800478a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800478e:	f402 5380 	and.w	r3, r2, #4096	@ 0x1000
 8004792:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8004796:	2300      	movs	r3, #0
 8004798:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 800479c:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	@ 0xe8
 80047a0:	460b      	mov	r3, r1
 80047a2:	4313      	orrs	r3, r2
 80047a4:	d051      	beq.n	800484a <HAL_RCCEx_PeriphCLKConfig+0x46a>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 80047a6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80047aa:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80047ac:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80047b0:	d035      	beq.n	800481e <HAL_RCCEx_PeriphCLKConfig+0x43e>
 80047b2:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80047b6:	d82e      	bhi.n	8004816 <HAL_RCCEx_PeriphCLKConfig+0x436>
 80047b8:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 80047bc:	d031      	beq.n	8004822 <HAL_RCCEx_PeriphCLKConfig+0x442>
 80047be:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 80047c2:	d828      	bhi.n	8004816 <HAL_RCCEx_PeriphCLKConfig+0x436>
 80047c4:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80047c8:	d01a      	beq.n	8004800 <HAL_RCCEx_PeriphCLKConfig+0x420>
 80047ca:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80047ce:	d822      	bhi.n	8004816 <HAL_RCCEx_PeriphCLKConfig+0x436>
 80047d0:	2b00      	cmp	r3, #0
 80047d2:	d003      	beq.n	80047dc <HAL_RCCEx_PeriphCLKConfig+0x3fc>
 80047d4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80047d8:	d007      	beq.n	80047ea <HAL_RCCEx_PeriphCLKConfig+0x40a>
 80047da:	e01c      	b.n	8004816 <HAL_RCCEx_PeriphCLKConfig+0x436>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80047dc:	4b7e      	ldr	r3, [pc, #504]	@ (80049d8 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80047de:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80047e0:	4a7d      	ldr	r2, [pc, #500]	@ (80049d8 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80047e2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80047e6:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 80047e8:	e01c      	b.n	8004824 <HAL_RCCEx_PeriphCLKConfig+0x444>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80047ea:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80047ee:	3308      	adds	r3, #8
 80047f0:	2100      	movs	r1, #0
 80047f2:	4618      	mov	r0, r3
 80047f4:	f001 fa52 	bl	8005c9c <RCCEx_PLL2_Config>
 80047f8:	4603      	mov	r3, r0
 80047fa:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 80047fe:	e011      	b.n	8004824 <HAL_RCCEx_PeriphCLKConfig+0x444>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8004800:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004804:	3328      	adds	r3, #40	@ 0x28
 8004806:	2100      	movs	r1, #0
 8004808:	4618      	mov	r0, r3
 800480a:	f001 faf9 	bl	8005e00 <RCCEx_PLL3_Config>
 800480e:	4603      	mov	r3, r0
 8004810:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8004814:	e006      	b.n	8004824 <HAL_RCCEx_PeriphCLKConfig+0x444>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004816:	2301      	movs	r3, #1
 8004818:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800481c:	e002      	b.n	8004824 <HAL_RCCEx_PeriphCLKConfig+0x444>
        break;
 800481e:	bf00      	nop
 8004820:	e000      	b.n	8004824 <HAL_RCCEx_PeriphCLKConfig+0x444>
        break;
 8004822:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004824:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8004828:	2b00      	cmp	r3, #0
 800482a:	d10a      	bne.n	8004842 <HAL_RCCEx_PeriphCLKConfig+0x462>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 800482c:	4b6a      	ldr	r3, [pc, #424]	@ (80049d8 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800482e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004830:	f423 41e0 	bic.w	r1, r3, #28672	@ 0x7000
 8004834:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004838:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800483a:	4a67      	ldr	r2, [pc, #412]	@ (80049d8 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800483c:	430b      	orrs	r3, r1
 800483e:	6513      	str	r3, [r2, #80]	@ 0x50
 8004840:	e003      	b.n	800484a <HAL_RCCEx_PeriphCLKConfig+0x46a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004842:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8004846:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 800484a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800484e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004852:	f402 5300 	and.w	r3, r2, #8192	@ 0x2000
 8004856:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 800485a:	2300      	movs	r3, #0
 800485c:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8004860:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	@ 0xe0
 8004864:	460b      	mov	r3, r1
 8004866:	4313      	orrs	r3, r2
 8004868:	d053      	beq.n	8004912 <HAL_RCCEx_PeriphCLKConfig+0x532>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 800486a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800486e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004870:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8004874:	d033      	beq.n	80048de <HAL_RCCEx_PeriphCLKConfig+0x4fe>
 8004876:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800487a:	d82c      	bhi.n	80048d6 <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 800487c:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8004880:	d02f      	beq.n	80048e2 <HAL_RCCEx_PeriphCLKConfig+0x502>
 8004882:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8004886:	d826      	bhi.n	80048d6 <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 8004888:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800488c:	d02b      	beq.n	80048e6 <HAL_RCCEx_PeriphCLKConfig+0x506>
 800488e:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8004892:	d820      	bhi.n	80048d6 <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 8004894:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8004898:	d012      	beq.n	80048c0 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
 800489a:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800489e:	d81a      	bhi.n	80048d6 <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 80048a0:	2b00      	cmp	r3, #0
 80048a2:	d022      	beq.n	80048ea <HAL_RCCEx_PeriphCLKConfig+0x50a>
 80048a4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80048a8:	d115      	bne.n	80048d6 <HAL_RCCEx_PeriphCLKConfig+0x4f6>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80048aa:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80048ae:	3308      	adds	r3, #8
 80048b0:	2101      	movs	r1, #1
 80048b2:	4618      	mov	r0, r3
 80048b4:	f001 f9f2 	bl	8005c9c <RCCEx_PLL2_Config>
 80048b8:	4603      	mov	r3, r0
 80048ba:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 80048be:	e015      	b.n	80048ec <HAL_RCCEx_PeriphCLKConfig+0x50c>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80048c0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80048c4:	3328      	adds	r3, #40	@ 0x28
 80048c6:	2101      	movs	r1, #1
 80048c8:	4618      	mov	r0, r3
 80048ca:	f001 fa99 	bl	8005e00 <RCCEx_PLL3_Config>
 80048ce:	4603      	mov	r3, r0
 80048d0:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 80048d4:	e00a      	b.n	80048ec <HAL_RCCEx_PeriphCLKConfig+0x50c>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80048d6:	2301      	movs	r3, #1
 80048d8:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 80048dc:	e006      	b.n	80048ec <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 80048de:	bf00      	nop
 80048e0:	e004      	b.n	80048ec <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 80048e2:	bf00      	nop
 80048e4:	e002      	b.n	80048ec <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 80048e6:	bf00      	nop
 80048e8:	e000      	b.n	80048ec <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 80048ea:	bf00      	nop
    }

    if (ret == HAL_OK)
 80048ec:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80048f0:	2b00      	cmp	r3, #0
 80048f2:	d10a      	bne.n	800490a <HAL_RCCEx_PeriphCLKConfig+0x52a>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 80048f4:	4b38      	ldr	r3, [pc, #224]	@ (80049d8 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80048f6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80048f8:	f423 21e0 	bic.w	r1, r3, #458752	@ 0x70000
 80048fc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004900:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004902:	4a35      	ldr	r2, [pc, #212]	@ (80049d8 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8004904:	430b      	orrs	r3, r1
 8004906:	6513      	str	r3, [r2, #80]	@ 0x50
 8004908:	e003      	b.n	8004912 <HAL_RCCEx_PeriphCLKConfig+0x532>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800490a:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800490e:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8004912:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004916:	e9d3 2300 	ldrd	r2, r3, [r3]
 800491a:	f402 4380 	and.w	r3, r2, #16384	@ 0x4000
 800491e:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8004922:	2300      	movs	r3, #0
 8004924:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 8004928:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 800492c:	460b      	mov	r3, r1
 800492e:	4313      	orrs	r3, r2
 8004930:	d058      	beq.n	80049e4 <HAL_RCCEx_PeriphCLKConfig+0x604>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 8004932:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004936:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 800493a:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800493e:	d033      	beq.n	80049a8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>
 8004940:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8004944:	d82c      	bhi.n	80049a0 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 8004946:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800494a:	d02f      	beq.n	80049ac <HAL_RCCEx_PeriphCLKConfig+0x5cc>
 800494c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004950:	d826      	bhi.n	80049a0 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 8004952:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8004956:	d02b      	beq.n	80049b0 <HAL_RCCEx_PeriphCLKConfig+0x5d0>
 8004958:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800495c:	d820      	bhi.n	80049a0 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 800495e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8004962:	d012      	beq.n	800498a <HAL_RCCEx_PeriphCLKConfig+0x5aa>
 8004964:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8004968:	d81a      	bhi.n	80049a0 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 800496a:	2b00      	cmp	r3, #0
 800496c:	d022      	beq.n	80049b4 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 800496e:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8004972:	d115      	bne.n	80049a0 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8004974:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004978:	3308      	adds	r3, #8
 800497a:	2101      	movs	r1, #1
 800497c:	4618      	mov	r0, r3
 800497e:	f001 f98d 	bl	8005c9c <RCCEx_PLL2_Config>
 8004982:	4603      	mov	r3, r0
 8004984:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8004988:	e015      	b.n	80049b6 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800498a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800498e:	3328      	adds	r3, #40	@ 0x28
 8004990:	2101      	movs	r1, #1
 8004992:	4618      	mov	r0, r3
 8004994:	f001 fa34 	bl	8005e00 <RCCEx_PLL3_Config>
 8004998:	4603      	mov	r3, r0
 800499a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 800499e:	e00a      	b.n	80049b6 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 80049a0:	2301      	movs	r3, #1
 80049a2:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 80049a6:	e006      	b.n	80049b6 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 80049a8:	bf00      	nop
 80049aa:	e004      	b.n	80049b6 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 80049ac:	bf00      	nop
 80049ae:	e002      	b.n	80049b6 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 80049b0:	bf00      	nop
 80049b2:	e000      	b.n	80049b6 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 80049b4:	bf00      	nop
    }

    if (ret == HAL_OK)
 80049b6:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80049ba:	2b00      	cmp	r3, #0
 80049bc:	d10e      	bne.n	80049dc <HAL_RCCEx_PeriphCLKConfig+0x5fc>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 80049be:	4b06      	ldr	r3, [pc, #24]	@ (80049d8 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80049c0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80049c2:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 80049c6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80049ca:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 80049ce:	4a02      	ldr	r2, [pc, #8]	@ (80049d8 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80049d0:	430b      	orrs	r3, r1
 80049d2:	6593      	str	r3, [r2, #88]	@ 0x58
 80049d4:	e006      	b.n	80049e4 <HAL_RCCEx_PeriphCLKConfig+0x604>
 80049d6:	bf00      	nop
 80049d8:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80049dc:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80049e0:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 80049e4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80049e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80049ec:	f402 4300 	and.w	r3, r2, #32768	@ 0x8000
 80049f0:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80049f4:	2300      	movs	r3, #0
 80049f6:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 80049fa:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	@ 0xd0
 80049fe:	460b      	mov	r3, r1
 8004a00:	4313      	orrs	r3, r2
 8004a02:	d037      	beq.n	8004a74 <HAL_RCCEx_PeriphCLKConfig+0x694>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 8004a04:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004a08:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004a0a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8004a0e:	d00e      	beq.n	8004a2e <HAL_RCCEx_PeriphCLKConfig+0x64e>
 8004a10:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8004a14:	d816      	bhi.n	8004a44 <HAL_RCCEx_PeriphCLKConfig+0x664>
 8004a16:	2b00      	cmp	r3, #0
 8004a18:	d018      	beq.n	8004a4c <HAL_RCCEx_PeriphCLKConfig+0x66c>
 8004a1a:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8004a1e:	d111      	bne.n	8004a44 <HAL_RCCEx_PeriphCLKConfig+0x664>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004a20:	4bc4      	ldr	r3, [pc, #784]	@ (8004d34 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8004a22:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004a24:	4ac3      	ldr	r2, [pc, #780]	@ (8004d34 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8004a26:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004a2a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8004a2c:	e00f      	b.n	8004a4e <HAL_RCCEx_PeriphCLKConfig+0x66e>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8004a2e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004a32:	3308      	adds	r3, #8
 8004a34:	2101      	movs	r1, #1
 8004a36:	4618      	mov	r0, r3
 8004a38:	f001 f930 	bl	8005c9c <RCCEx_PLL2_Config>
 8004a3c:	4603      	mov	r3, r0
 8004a3e:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8004a42:	e004      	b.n	8004a4e <HAL_RCCEx_PeriphCLKConfig+0x66e>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004a44:	2301      	movs	r3, #1
 8004a46:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8004a4a:	e000      	b.n	8004a4e <HAL_RCCEx_PeriphCLKConfig+0x66e>
        break;
 8004a4c:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004a4e:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8004a52:	2b00      	cmp	r3, #0
 8004a54:	d10a      	bne.n	8004a6c <HAL_RCCEx_PeriphCLKConfig+0x68c>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8004a56:	4bb7      	ldr	r3, [pc, #732]	@ (8004d34 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8004a58:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004a5a:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 8004a5e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004a62:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004a64:	4ab3      	ldr	r2, [pc, #716]	@ (8004d34 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8004a66:	430b      	orrs	r3, r1
 8004a68:	6513      	str	r3, [r2, #80]	@ 0x50
 8004a6a:	e003      	b.n	8004a74 <HAL_RCCEx_PeriphCLKConfig+0x694>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004a6c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8004a70:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8004a74:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004a78:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004a7c:	f002 7380 	and.w	r3, r2, #16777216	@ 0x1000000
 8004a80:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8004a84:	2300      	movs	r3, #0
 8004a86:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8004a8a:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	@ 0xc8
 8004a8e:	460b      	mov	r3, r1
 8004a90:	4313      	orrs	r3, r2
 8004a92:	d039      	beq.n	8004b08 <HAL_RCCEx_PeriphCLKConfig+0x728>
  {
    switch (PeriphClkInit->FmcClockSelection)
 8004a94:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004a98:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004a9a:	2b03      	cmp	r3, #3
 8004a9c:	d81c      	bhi.n	8004ad8 <HAL_RCCEx_PeriphCLKConfig+0x6f8>
 8004a9e:	a201      	add	r2, pc, #4	@ (adr r2, 8004aa4 <HAL_RCCEx_PeriphCLKConfig+0x6c4>)
 8004aa0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004aa4:	08004ae1 	.word	0x08004ae1
 8004aa8:	08004ab5 	.word	0x08004ab5
 8004aac:	08004ac3 	.word	0x08004ac3
 8004ab0:	08004ae1 	.word	0x08004ae1
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004ab4:	4b9f      	ldr	r3, [pc, #636]	@ (8004d34 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8004ab6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004ab8:	4a9e      	ldr	r2, [pc, #632]	@ (8004d34 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8004aba:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004abe:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 8004ac0:	e00f      	b.n	8004ae2 <HAL_RCCEx_PeriphCLKConfig+0x702>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8004ac2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004ac6:	3308      	adds	r3, #8
 8004ac8:	2102      	movs	r1, #2
 8004aca:	4618      	mov	r0, r3
 8004acc:	f001 f8e6 	bl	8005c9c <RCCEx_PLL2_Config>
 8004ad0:	4603      	mov	r3, r0
 8004ad2:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* FMC clock source configuration done later after clock selection check */
        break;
 8004ad6:	e004      	b.n	8004ae2 <HAL_RCCEx_PeriphCLKConfig+0x702>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8004ad8:	2301      	movs	r3, #1
 8004ada:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8004ade:	e000      	b.n	8004ae2 <HAL_RCCEx_PeriphCLKConfig+0x702>
        break;
 8004ae0:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004ae2:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8004ae6:	2b00      	cmp	r3, #0
 8004ae8:	d10a      	bne.n	8004b00 <HAL_RCCEx_PeriphCLKConfig+0x720>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8004aea:	4b92      	ldr	r3, [pc, #584]	@ (8004d34 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8004aec:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004aee:	f023 0103 	bic.w	r1, r3, #3
 8004af2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004af6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004af8:	4a8e      	ldr	r2, [pc, #568]	@ (8004d34 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8004afa:	430b      	orrs	r3, r1
 8004afc:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8004afe:	e003      	b.n	8004b08 <HAL_RCCEx_PeriphCLKConfig+0x728>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004b00:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8004b04:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8004b08:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004b0c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004b10:	f402 0380 	and.w	r3, r2, #4194304	@ 0x400000
 8004b14:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8004b18:	2300      	movs	r3, #0
 8004b1a:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8004b1e:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8004b22:	460b      	mov	r3, r1
 8004b24:	4313      	orrs	r3, r2
 8004b26:	f000 8099 	beq.w	8004c5c <HAL_RCCEx_PeriphCLKConfig+0x87c>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004b2a:	4b83      	ldr	r3, [pc, #524]	@ (8004d38 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8004b2c:	681b      	ldr	r3, [r3, #0]
 8004b2e:	4a82      	ldr	r2, [pc, #520]	@ (8004d38 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8004b30:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004b34:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8004b36:	f7fc ff3d 	bl	80019b4 <HAL_GetTick>
 8004b3a:	f8c7 0110 	str.w	r0, [r7, #272]	@ 0x110

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004b3e:	e00b      	b.n	8004b58 <HAL_RCCEx_PeriphCLKConfig+0x778>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004b40:	f7fc ff38 	bl	80019b4 <HAL_GetTick>
 8004b44:	4602      	mov	r2, r0
 8004b46:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 8004b4a:	1ad3      	subs	r3, r2, r3
 8004b4c:	2b64      	cmp	r3, #100	@ 0x64
 8004b4e:	d903      	bls.n	8004b58 <HAL_RCCEx_PeriphCLKConfig+0x778>
      {
        ret = HAL_TIMEOUT;
 8004b50:	2303      	movs	r3, #3
 8004b52:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8004b56:	e005      	b.n	8004b64 <HAL_RCCEx_PeriphCLKConfig+0x784>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004b58:	4b77      	ldr	r3, [pc, #476]	@ (8004d38 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8004b5a:	681b      	ldr	r3, [r3, #0]
 8004b5c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004b60:	2b00      	cmp	r3, #0
 8004b62:	d0ed      	beq.n	8004b40 <HAL_RCCEx_PeriphCLKConfig+0x760>
      }
    }

    if (ret == HAL_OK)
 8004b64:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8004b68:	2b00      	cmp	r3, #0
 8004b6a:	d173      	bne.n	8004c54 <HAL_RCCEx_PeriphCLKConfig+0x874>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8004b6c:	4b71      	ldr	r3, [pc, #452]	@ (8004d34 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8004b6e:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8004b70:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004b74:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8004b78:	4053      	eors	r3, r2
 8004b7a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004b7e:	2b00      	cmp	r3, #0
 8004b80:	d015      	beq.n	8004bae <HAL_RCCEx_PeriphCLKConfig+0x7ce>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8004b82:	4b6c      	ldr	r3, [pc, #432]	@ (8004d34 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8004b84:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004b86:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004b8a:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8004b8e:	4b69      	ldr	r3, [pc, #420]	@ (8004d34 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8004b90:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004b92:	4a68      	ldr	r2, [pc, #416]	@ (8004d34 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8004b94:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004b98:	6713      	str	r3, [r2, #112]	@ 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8004b9a:	4b66      	ldr	r3, [pc, #408]	@ (8004d34 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8004b9c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004b9e:	4a65      	ldr	r2, [pc, #404]	@ (8004d34 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8004ba0:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004ba4:	6713      	str	r3, [r2, #112]	@ 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8004ba6:	4a63      	ldr	r2, [pc, #396]	@ (8004d34 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8004ba8:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004bac:	6713      	str	r3, [r2, #112]	@ 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8004bae:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004bb2:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8004bb6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004bba:	d118      	bne.n	8004bee <HAL_RCCEx_PeriphCLKConfig+0x80e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004bbc:	f7fc fefa 	bl	80019b4 <HAL_GetTick>
 8004bc0:	f8c7 0110 	str.w	r0, [r7, #272]	@ 0x110

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8004bc4:	e00d      	b.n	8004be2 <HAL_RCCEx_PeriphCLKConfig+0x802>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004bc6:	f7fc fef5 	bl	80019b4 <HAL_GetTick>
 8004bca:	4602      	mov	r2, r0
 8004bcc:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 8004bd0:	1ad2      	subs	r2, r2, r3
 8004bd2:	f241 3388 	movw	r3, #5000	@ 0x1388
 8004bd6:	429a      	cmp	r2, r3
 8004bd8:	d903      	bls.n	8004be2 <HAL_RCCEx_PeriphCLKConfig+0x802>
          {
            ret = HAL_TIMEOUT;
 8004bda:	2303      	movs	r3, #3
 8004bdc:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
            break;
 8004be0:	e005      	b.n	8004bee <HAL_RCCEx_PeriphCLKConfig+0x80e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8004be2:	4b54      	ldr	r3, [pc, #336]	@ (8004d34 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8004be4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004be6:	f003 0302 	and.w	r3, r3, #2
 8004bea:	2b00      	cmp	r3, #0
 8004bec:	d0eb      	beq.n	8004bc6 <HAL_RCCEx_PeriphCLKConfig+0x7e6>
          }
        }
      }

      if (ret == HAL_OK)
 8004bee:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8004bf2:	2b00      	cmp	r3, #0
 8004bf4:	d129      	bne.n	8004c4a <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004bf6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004bfa:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8004bfe:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004c02:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8004c06:	d10e      	bne.n	8004c26 <HAL_RCCEx_PeriphCLKConfig+0x846>
 8004c08:	4b4a      	ldr	r3, [pc, #296]	@ (8004d34 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8004c0a:	691b      	ldr	r3, [r3, #16]
 8004c0c:	f423 517c 	bic.w	r1, r3, #16128	@ 0x3f00
 8004c10:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004c14:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8004c18:	091a      	lsrs	r2, r3, #4
 8004c1a:	4b48      	ldr	r3, [pc, #288]	@ (8004d3c <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 8004c1c:	4013      	ands	r3, r2
 8004c1e:	4a45      	ldr	r2, [pc, #276]	@ (8004d34 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8004c20:	430b      	orrs	r3, r1
 8004c22:	6113      	str	r3, [r2, #16]
 8004c24:	e005      	b.n	8004c32 <HAL_RCCEx_PeriphCLKConfig+0x852>
 8004c26:	4b43      	ldr	r3, [pc, #268]	@ (8004d34 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8004c28:	691b      	ldr	r3, [r3, #16]
 8004c2a:	4a42      	ldr	r2, [pc, #264]	@ (8004d34 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8004c2c:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8004c30:	6113      	str	r3, [r2, #16]
 8004c32:	4b40      	ldr	r3, [pc, #256]	@ (8004d34 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8004c34:	6f19      	ldr	r1, [r3, #112]	@ 0x70
 8004c36:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004c3a:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8004c3e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004c42:	4a3c      	ldr	r2, [pc, #240]	@ (8004d34 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8004c44:	430b      	orrs	r3, r1
 8004c46:	6713      	str	r3, [r2, #112]	@ 0x70
 8004c48:	e008      	b.n	8004c5c <HAL_RCCEx_PeriphCLKConfig+0x87c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8004c4a:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8004c4e:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
 8004c52:	e003      	b.n	8004c5c <HAL_RCCEx_PeriphCLKConfig+0x87c>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004c54:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8004c58:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8004c5c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004c60:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004c64:	f002 0301 	and.w	r3, r2, #1
 8004c68:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8004c6c:	2300      	movs	r3, #0
 8004c6e:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 8004c72:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	@ 0xb8
 8004c76:	460b      	mov	r3, r1
 8004c78:	4313      	orrs	r3, r2
 8004c7a:	f000 808f 	beq.w	8004d9c <HAL_RCCEx_PeriphCLKConfig+0x9bc>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 8004c7e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004c82:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8004c84:	2b28      	cmp	r3, #40	@ 0x28
 8004c86:	d871      	bhi.n	8004d6c <HAL_RCCEx_PeriphCLKConfig+0x98c>
 8004c88:	a201      	add	r2, pc, #4	@ (adr r2, 8004c90 <HAL_RCCEx_PeriphCLKConfig+0x8b0>)
 8004c8a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004c8e:	bf00      	nop
 8004c90:	08004d75 	.word	0x08004d75
 8004c94:	08004d6d 	.word	0x08004d6d
 8004c98:	08004d6d 	.word	0x08004d6d
 8004c9c:	08004d6d 	.word	0x08004d6d
 8004ca0:	08004d6d 	.word	0x08004d6d
 8004ca4:	08004d6d 	.word	0x08004d6d
 8004ca8:	08004d6d 	.word	0x08004d6d
 8004cac:	08004d6d 	.word	0x08004d6d
 8004cb0:	08004d41 	.word	0x08004d41
 8004cb4:	08004d6d 	.word	0x08004d6d
 8004cb8:	08004d6d 	.word	0x08004d6d
 8004cbc:	08004d6d 	.word	0x08004d6d
 8004cc0:	08004d6d 	.word	0x08004d6d
 8004cc4:	08004d6d 	.word	0x08004d6d
 8004cc8:	08004d6d 	.word	0x08004d6d
 8004ccc:	08004d6d 	.word	0x08004d6d
 8004cd0:	08004d57 	.word	0x08004d57
 8004cd4:	08004d6d 	.word	0x08004d6d
 8004cd8:	08004d6d 	.word	0x08004d6d
 8004cdc:	08004d6d 	.word	0x08004d6d
 8004ce0:	08004d6d 	.word	0x08004d6d
 8004ce4:	08004d6d 	.word	0x08004d6d
 8004ce8:	08004d6d 	.word	0x08004d6d
 8004cec:	08004d6d 	.word	0x08004d6d
 8004cf0:	08004d75 	.word	0x08004d75
 8004cf4:	08004d6d 	.word	0x08004d6d
 8004cf8:	08004d6d 	.word	0x08004d6d
 8004cfc:	08004d6d 	.word	0x08004d6d
 8004d00:	08004d6d 	.word	0x08004d6d
 8004d04:	08004d6d 	.word	0x08004d6d
 8004d08:	08004d6d 	.word	0x08004d6d
 8004d0c:	08004d6d 	.word	0x08004d6d
 8004d10:	08004d75 	.word	0x08004d75
 8004d14:	08004d6d 	.word	0x08004d6d
 8004d18:	08004d6d 	.word	0x08004d6d
 8004d1c:	08004d6d 	.word	0x08004d6d
 8004d20:	08004d6d 	.word	0x08004d6d
 8004d24:	08004d6d 	.word	0x08004d6d
 8004d28:	08004d6d 	.word	0x08004d6d
 8004d2c:	08004d6d 	.word	0x08004d6d
 8004d30:	08004d75 	.word	0x08004d75
 8004d34:	58024400 	.word	0x58024400
 8004d38:	58024800 	.word	0x58024800
 8004d3c:	00ffffcf 	.word	0x00ffffcf
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8004d40:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004d44:	3308      	adds	r3, #8
 8004d46:	2101      	movs	r1, #1
 8004d48:	4618      	mov	r0, r3
 8004d4a:	f000 ffa7 	bl	8005c9c <RCCEx_PLL2_Config>
 8004d4e:	4603      	mov	r3, r0
 8004d50:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8004d54:	e00f      	b.n	8004d76 <HAL_RCCEx_PeriphCLKConfig+0x996>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8004d56:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004d5a:	3328      	adds	r3, #40	@ 0x28
 8004d5c:	2101      	movs	r1, #1
 8004d5e:	4618      	mov	r0, r3
 8004d60:	f001 f84e 	bl	8005e00 <RCCEx_PLL3_Config>
 8004d64:	4603      	mov	r3, r0
 8004d66:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8004d6a:	e004      	b.n	8004d76 <HAL_RCCEx_PeriphCLKConfig+0x996>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004d6c:	2301      	movs	r3, #1
 8004d6e:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8004d72:	e000      	b.n	8004d76 <HAL_RCCEx_PeriphCLKConfig+0x996>
        break;
 8004d74:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004d76:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8004d7a:	2b00      	cmp	r3, #0
 8004d7c:	d10a      	bne.n	8004d94 <HAL_RCCEx_PeriphCLKConfig+0x9b4>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8004d7e:	4bbf      	ldr	r3, [pc, #764]	@ (800507c <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8004d80:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004d82:	f023 0138 	bic.w	r1, r3, #56	@ 0x38
 8004d86:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004d8a:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8004d8c:	4abb      	ldr	r2, [pc, #748]	@ (800507c <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8004d8e:	430b      	orrs	r3, r1
 8004d90:	6553      	str	r3, [r2, #84]	@ 0x54
 8004d92:	e003      	b.n	8004d9c <HAL_RCCEx_PeriphCLKConfig+0x9bc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004d94:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8004d98:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8004d9c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004da0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004da4:	f002 0302 	and.w	r3, r2, #2
 8004da8:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8004dac:	2300      	movs	r3, #0
 8004dae:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8004db2:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	@ 0xb0
 8004db6:	460b      	mov	r3, r1
 8004db8:	4313      	orrs	r3, r2
 8004dba:	d041      	beq.n	8004e40 <HAL_RCCEx_PeriphCLKConfig+0xa60>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 8004dbc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004dc0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004dc2:	2b05      	cmp	r3, #5
 8004dc4:	d824      	bhi.n	8004e10 <HAL_RCCEx_PeriphCLKConfig+0xa30>
 8004dc6:	a201      	add	r2, pc, #4	@ (adr r2, 8004dcc <HAL_RCCEx_PeriphCLKConfig+0x9ec>)
 8004dc8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004dcc:	08004e19 	.word	0x08004e19
 8004dd0:	08004de5 	.word	0x08004de5
 8004dd4:	08004dfb 	.word	0x08004dfb
 8004dd8:	08004e19 	.word	0x08004e19
 8004ddc:	08004e19 	.word	0x08004e19
 8004de0:	08004e19 	.word	0x08004e19
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8004de4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004de8:	3308      	adds	r3, #8
 8004dea:	2101      	movs	r1, #1
 8004dec:	4618      	mov	r0, r3
 8004dee:	f000 ff55 	bl	8005c9c <RCCEx_PLL2_Config>
 8004df2:	4603      	mov	r3, r0
 8004df4:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8004df8:	e00f      	b.n	8004e1a <HAL_RCCEx_PeriphCLKConfig+0xa3a>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8004dfa:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004dfe:	3328      	adds	r3, #40	@ 0x28
 8004e00:	2101      	movs	r1, #1
 8004e02:	4618      	mov	r0, r3
 8004e04:	f000 fffc 	bl	8005e00 <RCCEx_PLL3_Config>
 8004e08:	4603      	mov	r3, r0
 8004e0a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8004e0e:	e004      	b.n	8004e1a <HAL_RCCEx_PeriphCLKConfig+0xa3a>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004e10:	2301      	movs	r3, #1
 8004e12:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8004e16:	e000      	b.n	8004e1a <HAL_RCCEx_PeriphCLKConfig+0xa3a>
        break;
 8004e18:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004e1a:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8004e1e:	2b00      	cmp	r3, #0
 8004e20:	d10a      	bne.n	8004e38 <HAL_RCCEx_PeriphCLKConfig+0xa58>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8004e22:	4b96      	ldr	r3, [pc, #600]	@ (800507c <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8004e24:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004e26:	f023 0107 	bic.w	r1, r3, #7
 8004e2a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004e2e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004e30:	4a92      	ldr	r2, [pc, #584]	@ (800507c <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8004e32:	430b      	orrs	r3, r1
 8004e34:	6553      	str	r3, [r2, #84]	@ 0x54
 8004e36:	e003      	b.n	8004e40 <HAL_RCCEx_PeriphCLKConfig+0xa60>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004e38:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8004e3c:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8004e40:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004e44:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004e48:	f002 0304 	and.w	r3, r2, #4
 8004e4c:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8004e50:	2300      	movs	r3, #0
 8004e52:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8004e56:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8004e5a:	460b      	mov	r3, r1
 8004e5c:	4313      	orrs	r3, r2
 8004e5e:	d044      	beq.n	8004eea <HAL_RCCEx_PeriphCLKConfig+0xb0a>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 8004e60:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004e64:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004e68:	2b05      	cmp	r3, #5
 8004e6a:	d825      	bhi.n	8004eb8 <HAL_RCCEx_PeriphCLKConfig+0xad8>
 8004e6c:	a201      	add	r2, pc, #4	@ (adr r2, 8004e74 <HAL_RCCEx_PeriphCLKConfig+0xa94>)
 8004e6e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004e72:	bf00      	nop
 8004e74:	08004ec1 	.word	0x08004ec1
 8004e78:	08004e8d 	.word	0x08004e8d
 8004e7c:	08004ea3 	.word	0x08004ea3
 8004e80:	08004ec1 	.word	0x08004ec1
 8004e84:	08004ec1 	.word	0x08004ec1
 8004e88:	08004ec1 	.word	0x08004ec1
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8004e8c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004e90:	3308      	adds	r3, #8
 8004e92:	2101      	movs	r1, #1
 8004e94:	4618      	mov	r0, r3
 8004e96:	f000 ff01 	bl	8005c9c <RCCEx_PLL2_Config>
 8004e9a:	4603      	mov	r3, r0
 8004e9c:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8004ea0:	e00f      	b.n	8004ec2 <HAL_RCCEx_PeriphCLKConfig+0xae2>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8004ea2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004ea6:	3328      	adds	r3, #40	@ 0x28
 8004ea8:	2101      	movs	r1, #1
 8004eaa:	4618      	mov	r0, r3
 8004eac:	f000 ffa8 	bl	8005e00 <RCCEx_PLL3_Config>
 8004eb0:	4603      	mov	r3, r0
 8004eb2:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8004eb6:	e004      	b.n	8004ec2 <HAL_RCCEx_PeriphCLKConfig+0xae2>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004eb8:	2301      	movs	r3, #1
 8004eba:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8004ebe:	e000      	b.n	8004ec2 <HAL_RCCEx_PeriphCLKConfig+0xae2>
        break;
 8004ec0:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004ec2:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8004ec6:	2b00      	cmp	r3, #0
 8004ec8:	d10b      	bne.n	8004ee2 <HAL_RCCEx_PeriphCLKConfig+0xb02>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8004eca:	4b6c      	ldr	r3, [pc, #432]	@ (800507c <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8004ecc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004ece:	f023 0107 	bic.w	r1, r3, #7
 8004ed2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004ed6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004eda:	4a68      	ldr	r2, [pc, #416]	@ (800507c <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8004edc:	430b      	orrs	r3, r1
 8004ede:	6593      	str	r3, [r2, #88]	@ 0x58
 8004ee0:	e003      	b.n	8004eea <HAL_RCCEx_PeriphCLKConfig+0xb0a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004ee2:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8004ee6:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8004eea:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004eee:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004ef2:	f002 0320 	and.w	r3, r2, #32
 8004ef6:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8004efa:	2300      	movs	r3, #0
 8004efc:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 8004f00:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	@ 0xa0
 8004f04:	460b      	mov	r3, r1
 8004f06:	4313      	orrs	r3, r2
 8004f08:	d055      	beq.n	8004fb6 <HAL_RCCEx_PeriphCLKConfig+0xbd6>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 8004f0a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004f0e:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8004f12:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8004f16:	d033      	beq.n	8004f80 <HAL_RCCEx_PeriphCLKConfig+0xba0>
 8004f18:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8004f1c:	d82c      	bhi.n	8004f78 <HAL_RCCEx_PeriphCLKConfig+0xb98>
 8004f1e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004f22:	d02f      	beq.n	8004f84 <HAL_RCCEx_PeriphCLKConfig+0xba4>
 8004f24:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004f28:	d826      	bhi.n	8004f78 <HAL_RCCEx_PeriphCLKConfig+0xb98>
 8004f2a:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8004f2e:	d02b      	beq.n	8004f88 <HAL_RCCEx_PeriphCLKConfig+0xba8>
 8004f30:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8004f34:	d820      	bhi.n	8004f78 <HAL_RCCEx_PeriphCLKConfig+0xb98>
 8004f36:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8004f3a:	d012      	beq.n	8004f62 <HAL_RCCEx_PeriphCLKConfig+0xb82>
 8004f3c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8004f40:	d81a      	bhi.n	8004f78 <HAL_RCCEx_PeriphCLKConfig+0xb98>
 8004f42:	2b00      	cmp	r3, #0
 8004f44:	d022      	beq.n	8004f8c <HAL_RCCEx_PeriphCLKConfig+0xbac>
 8004f46:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8004f4a:	d115      	bne.n	8004f78 <HAL_RCCEx_PeriphCLKConfig+0xb98>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8004f4c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004f50:	3308      	adds	r3, #8
 8004f52:	2100      	movs	r1, #0
 8004f54:	4618      	mov	r0, r3
 8004f56:	f000 fea1 	bl	8005c9c <RCCEx_PLL2_Config>
 8004f5a:	4603      	mov	r3, r0
 8004f5c:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8004f60:	e015      	b.n	8004f8e <HAL_RCCEx_PeriphCLKConfig+0xbae>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8004f62:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004f66:	3328      	adds	r3, #40	@ 0x28
 8004f68:	2102      	movs	r1, #2
 8004f6a:	4618      	mov	r0, r3
 8004f6c:	f000 ff48 	bl	8005e00 <RCCEx_PLL3_Config>
 8004f70:	4603      	mov	r3, r0
 8004f72:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8004f76:	e00a      	b.n	8004f8e <HAL_RCCEx_PeriphCLKConfig+0xbae>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004f78:	2301      	movs	r3, #1
 8004f7a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8004f7e:	e006      	b.n	8004f8e <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 8004f80:	bf00      	nop
 8004f82:	e004      	b.n	8004f8e <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 8004f84:	bf00      	nop
 8004f86:	e002      	b.n	8004f8e <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 8004f88:	bf00      	nop
 8004f8a:	e000      	b.n	8004f8e <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 8004f8c:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004f8e:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8004f92:	2b00      	cmp	r3, #0
 8004f94:	d10b      	bne.n	8004fae <HAL_RCCEx_PeriphCLKConfig+0xbce>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8004f96:	4b39      	ldr	r3, [pc, #228]	@ (800507c <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8004f98:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004f9a:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 8004f9e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004fa2:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8004fa6:	4a35      	ldr	r2, [pc, #212]	@ (800507c <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8004fa8:	430b      	orrs	r3, r1
 8004faa:	6553      	str	r3, [r2, #84]	@ 0x54
 8004fac:	e003      	b.n	8004fb6 <HAL_RCCEx_PeriphCLKConfig+0xbd6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004fae:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8004fb2:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8004fb6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004fba:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004fbe:	f002 0340 	and.w	r3, r2, #64	@ 0x40
 8004fc2:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8004fc6:	2300      	movs	r3, #0
 8004fc8:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8004fcc:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	@ 0x98
 8004fd0:	460b      	mov	r3, r1
 8004fd2:	4313      	orrs	r3, r2
 8004fd4:	d058      	beq.n	8005088 <HAL_RCCEx_PeriphCLKConfig+0xca8>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 8004fd6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004fda:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8004fde:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 8004fe2:	d033      	beq.n	800504c <HAL_RCCEx_PeriphCLKConfig+0xc6c>
 8004fe4:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 8004fe8:	d82c      	bhi.n	8005044 <HAL_RCCEx_PeriphCLKConfig+0xc64>
 8004fea:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004fee:	d02f      	beq.n	8005050 <HAL_RCCEx_PeriphCLKConfig+0xc70>
 8004ff0:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004ff4:	d826      	bhi.n	8005044 <HAL_RCCEx_PeriphCLKConfig+0xc64>
 8004ff6:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8004ffa:	d02b      	beq.n	8005054 <HAL_RCCEx_PeriphCLKConfig+0xc74>
 8004ffc:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8005000:	d820      	bhi.n	8005044 <HAL_RCCEx_PeriphCLKConfig+0xc64>
 8005002:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005006:	d012      	beq.n	800502e <HAL_RCCEx_PeriphCLKConfig+0xc4e>
 8005008:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800500c:	d81a      	bhi.n	8005044 <HAL_RCCEx_PeriphCLKConfig+0xc64>
 800500e:	2b00      	cmp	r3, #0
 8005010:	d022      	beq.n	8005058 <HAL_RCCEx_PeriphCLKConfig+0xc78>
 8005012:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005016:	d115      	bne.n	8005044 <HAL_RCCEx_PeriphCLKConfig+0xc64>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8005018:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800501c:	3308      	adds	r3, #8
 800501e:	2100      	movs	r1, #0
 8005020:	4618      	mov	r0, r3
 8005022:	f000 fe3b 	bl	8005c9c <RCCEx_PLL2_Config>
 8005026:	4603      	mov	r3, r0
 8005028:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 800502c:	e015      	b.n	800505a <HAL_RCCEx_PeriphCLKConfig+0xc7a>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800502e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005032:	3328      	adds	r3, #40	@ 0x28
 8005034:	2102      	movs	r1, #2
 8005036:	4618      	mov	r0, r3
 8005038:	f000 fee2 	bl	8005e00 <RCCEx_PLL3_Config>
 800503c:	4603      	mov	r3, r0
 800503e:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8005042:	e00a      	b.n	800505a <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005044:	2301      	movs	r3, #1
 8005046:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800504a:	e006      	b.n	800505a <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 800504c:	bf00      	nop
 800504e:	e004      	b.n	800505a <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 8005050:	bf00      	nop
 8005052:	e002      	b.n	800505a <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 8005054:	bf00      	nop
 8005056:	e000      	b.n	800505a <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 8005058:	bf00      	nop
    }

    if (ret == HAL_OK)
 800505a:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800505e:	2b00      	cmp	r3, #0
 8005060:	d10e      	bne.n	8005080 <HAL_RCCEx_PeriphCLKConfig+0xca0>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8005062:	4b06      	ldr	r3, [pc, #24]	@ (800507c <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8005064:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005066:	f423 51e0 	bic.w	r1, r3, #7168	@ 0x1c00
 800506a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800506e:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8005072:	4a02      	ldr	r2, [pc, #8]	@ (800507c <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8005074:	430b      	orrs	r3, r1
 8005076:	6593      	str	r3, [r2, #88]	@ 0x58
 8005078:	e006      	b.n	8005088 <HAL_RCCEx_PeriphCLKConfig+0xca8>
 800507a:	bf00      	nop
 800507c:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005080:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8005084:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8005088:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800508c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005090:	f002 0380 	and.w	r3, r2, #128	@ 0x80
 8005094:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8005098:	2300      	movs	r3, #0
 800509a:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800509e:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	@ 0x90
 80050a2:	460b      	mov	r3, r1
 80050a4:	4313      	orrs	r3, r2
 80050a6:	d055      	beq.n	8005154 <HAL_RCCEx_PeriphCLKConfig+0xd74>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 80050a8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80050ac:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80050b0:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 80050b4:	d033      	beq.n	800511e <HAL_RCCEx_PeriphCLKConfig+0xd3e>
 80050b6:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 80050ba:	d82c      	bhi.n	8005116 <HAL_RCCEx_PeriphCLKConfig+0xd36>
 80050bc:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80050c0:	d02f      	beq.n	8005122 <HAL_RCCEx_PeriphCLKConfig+0xd42>
 80050c2:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80050c6:	d826      	bhi.n	8005116 <HAL_RCCEx_PeriphCLKConfig+0xd36>
 80050c8:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 80050cc:	d02b      	beq.n	8005126 <HAL_RCCEx_PeriphCLKConfig+0xd46>
 80050ce:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 80050d2:	d820      	bhi.n	8005116 <HAL_RCCEx_PeriphCLKConfig+0xd36>
 80050d4:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80050d8:	d012      	beq.n	8005100 <HAL_RCCEx_PeriphCLKConfig+0xd20>
 80050da:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80050de:	d81a      	bhi.n	8005116 <HAL_RCCEx_PeriphCLKConfig+0xd36>
 80050e0:	2b00      	cmp	r3, #0
 80050e2:	d022      	beq.n	800512a <HAL_RCCEx_PeriphCLKConfig+0xd4a>
 80050e4:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80050e8:	d115      	bne.n	8005116 <HAL_RCCEx_PeriphCLKConfig+0xd36>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80050ea:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80050ee:	3308      	adds	r3, #8
 80050f0:	2100      	movs	r1, #0
 80050f2:	4618      	mov	r0, r3
 80050f4:	f000 fdd2 	bl	8005c9c <RCCEx_PLL2_Config>
 80050f8:	4603      	mov	r3, r0
 80050fa:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 80050fe:	e015      	b.n	800512c <HAL_RCCEx_PeriphCLKConfig+0xd4c>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8005100:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005104:	3328      	adds	r3, #40	@ 0x28
 8005106:	2102      	movs	r1, #2
 8005108:	4618      	mov	r0, r3
 800510a:	f000 fe79 	bl	8005e00 <RCCEx_PLL3_Config>
 800510e:	4603      	mov	r3, r0
 8005110:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8005114:	e00a      	b.n	800512c <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005116:	2301      	movs	r3, #1
 8005118:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800511c:	e006      	b.n	800512c <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 800511e:	bf00      	nop
 8005120:	e004      	b.n	800512c <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 8005122:	bf00      	nop
 8005124:	e002      	b.n	800512c <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 8005126:	bf00      	nop
 8005128:	e000      	b.n	800512c <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 800512a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800512c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8005130:	2b00      	cmp	r3, #0
 8005132:	d10b      	bne.n	800514c <HAL_RCCEx_PeriphCLKConfig+0xd6c>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8005134:	4ba0      	ldr	r3, [pc, #640]	@ (80053b8 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8005136:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005138:	f423 4160 	bic.w	r1, r3, #57344	@ 0xe000
 800513c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005140:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8005144:	4a9c      	ldr	r2, [pc, #624]	@ (80053b8 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8005146:	430b      	orrs	r3, r1
 8005148:	6593      	str	r3, [r2, #88]	@ 0x58
 800514a:	e003      	b.n	8005154 <HAL_RCCEx_PeriphCLKConfig+0xd74>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800514c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8005150:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*------------------------------ I2C1/2/3/5* Configuration ------------------------*/
#if defined(I2C5)
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1235) == RCC_PERIPHCLK_I2C1235)
 8005154:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005158:	e9d3 2300 	ldrd	r2, r3, [r3]
 800515c:	f002 0308 	and.w	r3, r2, #8
 8005160:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8005164:	2300      	movs	r3, #0
 8005166:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 800516a:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	@ 0x88
 800516e:	460b      	mov	r3, r1
 8005170:	4313      	orrs	r3, r2
 8005172:	d01e      	beq.n	80051b2 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1235CLKSOURCE(PeriphClkInit->I2c1235ClockSelection));

    if ((PeriphClkInit->I2c1235ClockSelection) == RCC_I2C1235CLKSOURCE_PLL3)
 8005174:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005178:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800517c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005180:	d10c      	bne.n	800519c <HAL_RCCEx_PeriphCLKConfig+0xdbc>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8005182:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005186:	3328      	adds	r3, #40	@ 0x28
 8005188:	2102      	movs	r1, #2
 800518a:	4618      	mov	r0, r3
 800518c:	f000 fe38 	bl	8005e00 <RCCEx_PLL3_Config>
 8005190:	4603      	mov	r3, r0
 8005192:	2b00      	cmp	r3, #0
 8005194:	d002      	beq.n	800519c <HAL_RCCEx_PeriphCLKConfig+0xdbc>
      {
        status = HAL_ERROR;
 8005196:	2301      	movs	r3, #1
 8005198:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
      }
    }

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);
 800519c:	4b86      	ldr	r3, [pc, #536]	@ (80053b8 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800519e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80051a0:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 80051a4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80051a8:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80051ac:	4a82      	ldr	r2, [pc, #520]	@ (80053b8 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 80051ae:	430b      	orrs	r3, r1
 80051b0:	6553      	str	r3, [r2, #84]	@ 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80051b2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80051b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80051ba:	f002 0310 	and.w	r3, r2, #16
 80051be:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 80051c2:	2300      	movs	r3, #0
 80051c4:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 80051c8:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	@ 0x80
 80051cc:	460b      	mov	r3, r1
 80051ce:	4313      	orrs	r3, r2
 80051d0:	d01e      	beq.n	8005210 <HAL_RCCEx_PeriphCLKConfig+0xe30>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 80051d2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80051d6:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80051da:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80051de:	d10c      	bne.n	80051fa <HAL_RCCEx_PeriphCLKConfig+0xe1a>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 80051e0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80051e4:	3328      	adds	r3, #40	@ 0x28
 80051e6:	2102      	movs	r1, #2
 80051e8:	4618      	mov	r0, r3
 80051ea:	f000 fe09 	bl	8005e00 <RCCEx_PLL3_Config>
 80051ee:	4603      	mov	r3, r0
 80051f0:	2b00      	cmp	r3, #0
 80051f2:	d002      	beq.n	80051fa <HAL_RCCEx_PeriphCLKConfig+0xe1a>
      {
        status = HAL_ERROR;
 80051f4:	2301      	movs	r3, #1
 80051f6:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80051fa:	4b6f      	ldr	r3, [pc, #444]	@ (80053b8 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 80051fc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80051fe:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8005202:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005206:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800520a:	4a6b      	ldr	r2, [pc, #428]	@ (80053b8 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800520c:	430b      	orrs	r3, r1
 800520e:	6593      	str	r3, [r2, #88]	@ 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8005210:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005214:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005218:	f402 2300 	and.w	r3, r2, #524288	@ 0x80000
 800521c:	67bb      	str	r3, [r7, #120]	@ 0x78
 800521e:	2300      	movs	r3, #0
 8005220:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8005222:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	@ 0x78
 8005226:	460b      	mov	r3, r1
 8005228:	4313      	orrs	r3, r2
 800522a:	d03e      	beq.n	80052aa <HAL_RCCEx_PeriphCLKConfig+0xeca>
  {
    switch (PeriphClkInit->AdcClockSelection)
 800522c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005230:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8005234:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8005238:	d022      	beq.n	8005280 <HAL_RCCEx_PeriphCLKConfig+0xea0>
 800523a:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800523e:	d81b      	bhi.n	8005278 <HAL_RCCEx_PeriphCLKConfig+0xe98>
 8005240:	2b00      	cmp	r3, #0
 8005242:	d003      	beq.n	800524c <HAL_RCCEx_PeriphCLKConfig+0xe6c>
 8005244:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005248:	d00b      	beq.n	8005262 <HAL_RCCEx_PeriphCLKConfig+0xe82>
 800524a:	e015      	b.n	8005278 <HAL_RCCEx_PeriphCLKConfig+0xe98>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800524c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005250:	3308      	adds	r3, #8
 8005252:	2100      	movs	r1, #0
 8005254:	4618      	mov	r0, r3
 8005256:	f000 fd21 	bl	8005c9c <RCCEx_PLL2_Config>
 800525a:	4603      	mov	r3, r0
 800525c:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* ADC clock source configuration done later after clock selection check */
        break;
 8005260:	e00f      	b.n	8005282 <HAL_RCCEx_PeriphCLKConfig+0xea2>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8005262:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005266:	3328      	adds	r3, #40	@ 0x28
 8005268:	2102      	movs	r1, #2
 800526a:	4618      	mov	r0, r3
 800526c:	f000 fdc8 	bl	8005e00 <RCCEx_PLL3_Config>
 8005270:	4603      	mov	r3, r0
 8005272:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* ADC clock source configuration done later after clock selection check */
        break;
 8005276:	e004      	b.n	8005282 <HAL_RCCEx_PeriphCLKConfig+0xea2>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005278:	2301      	movs	r3, #1
 800527a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800527e:	e000      	b.n	8005282 <HAL_RCCEx_PeriphCLKConfig+0xea2>
        break;
 8005280:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005282:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8005286:	2b00      	cmp	r3, #0
 8005288:	d10b      	bne.n	80052a2 <HAL_RCCEx_PeriphCLKConfig+0xec2>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800528a:	4b4b      	ldr	r3, [pc, #300]	@ (80053b8 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800528c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800528e:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
 8005292:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005296:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 800529a:	4a47      	ldr	r2, [pc, #284]	@ (80053b8 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800529c:	430b      	orrs	r3, r1
 800529e:	6593      	str	r3, [r2, #88]	@ 0x58
 80052a0:	e003      	b.n	80052aa <HAL_RCCEx_PeriphCLKConfig+0xeca>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80052a2:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80052a6:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80052aa:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80052ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 80052b2:	f402 2380 	and.w	r3, r2, #262144	@ 0x40000
 80052b6:	673b      	str	r3, [r7, #112]	@ 0x70
 80052b8:	2300      	movs	r3, #0
 80052ba:	677b      	str	r3, [r7, #116]	@ 0x74
 80052bc:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	@ 0x70
 80052c0:	460b      	mov	r3, r1
 80052c2:	4313      	orrs	r3, r2
 80052c4:	d03b      	beq.n	800533e <HAL_RCCEx_PeriphCLKConfig+0xf5e>
  {

    switch (PeriphClkInit->UsbClockSelection)
 80052c6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80052ca:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80052ce:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 80052d2:	d01f      	beq.n	8005314 <HAL_RCCEx_PeriphCLKConfig+0xf34>
 80052d4:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 80052d8:	d818      	bhi.n	800530c <HAL_RCCEx_PeriphCLKConfig+0xf2c>
 80052da:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80052de:	d003      	beq.n	80052e8 <HAL_RCCEx_PeriphCLKConfig+0xf08>
 80052e0:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80052e4:	d007      	beq.n	80052f6 <HAL_RCCEx_PeriphCLKConfig+0xf16>
 80052e6:	e011      	b.n	800530c <HAL_RCCEx_PeriphCLKConfig+0xf2c>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80052e8:	4b33      	ldr	r3, [pc, #204]	@ (80053b8 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 80052ea:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80052ec:	4a32      	ldr	r2, [pc, #200]	@ (80053b8 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 80052ee:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80052f2:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 80052f4:	e00f      	b.n	8005316 <HAL_RCCEx_PeriphCLKConfig+0xf36>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80052f6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80052fa:	3328      	adds	r3, #40	@ 0x28
 80052fc:	2101      	movs	r1, #1
 80052fe:	4618      	mov	r0, r3
 8005300:	f000 fd7e 	bl	8005e00 <RCCEx_PLL3_Config>
 8005304:	4603      	mov	r3, r0
 8005306:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* USB clock source configuration done later after clock selection check */
        break;
 800530a:	e004      	b.n	8005316 <HAL_RCCEx_PeriphCLKConfig+0xf36>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800530c:	2301      	movs	r3, #1
 800530e:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8005312:	e000      	b.n	8005316 <HAL_RCCEx_PeriphCLKConfig+0xf36>
        break;
 8005314:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005316:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800531a:	2b00      	cmp	r3, #0
 800531c:	d10b      	bne.n	8005336 <HAL_RCCEx_PeriphCLKConfig+0xf56>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800531e:	4b26      	ldr	r3, [pc, #152]	@ (80053b8 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8005320:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005322:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 8005326:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800532a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800532e:	4a22      	ldr	r2, [pc, #136]	@ (80053b8 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8005330:	430b      	orrs	r3, r1
 8005332:	6553      	str	r3, [r2, #84]	@ 0x54
 8005334:	e003      	b.n	800533e <HAL_RCCEx_PeriphCLKConfig+0xf5e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005336:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800533a:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 800533e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005342:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005346:	f402 3380 	and.w	r3, r2, #65536	@ 0x10000
 800534a:	66bb      	str	r3, [r7, #104]	@ 0x68
 800534c:	2300      	movs	r3, #0
 800534e:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8005350:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	@ 0x68
 8005354:	460b      	mov	r3, r1
 8005356:	4313      	orrs	r3, r2
 8005358:	d034      	beq.n	80053c4 <HAL_RCCEx_PeriphCLKConfig+0xfe4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 800535a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800535e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005360:	2b00      	cmp	r3, #0
 8005362:	d003      	beq.n	800536c <HAL_RCCEx_PeriphCLKConfig+0xf8c>
 8005364:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005368:	d007      	beq.n	800537a <HAL_RCCEx_PeriphCLKConfig+0xf9a>
 800536a:	e011      	b.n	8005390 <HAL_RCCEx_PeriphCLKConfig+0xfb0>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800536c:	4b12      	ldr	r3, [pc, #72]	@ (80053b8 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800536e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005370:	4a11      	ldr	r2, [pc, #68]	@ (80053b8 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8005372:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005376:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8005378:	e00e      	b.n	8005398 <HAL_RCCEx_PeriphCLKConfig+0xfb8>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800537a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800537e:	3308      	adds	r3, #8
 8005380:	2102      	movs	r1, #2
 8005382:	4618      	mov	r0, r3
 8005384:	f000 fc8a 	bl	8005c9c <RCCEx_PLL2_Config>
 8005388:	4603      	mov	r3, r0
 800538a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 800538e:	e003      	b.n	8005398 <HAL_RCCEx_PeriphCLKConfig+0xfb8>

      default:
        ret = HAL_ERROR;
 8005390:	2301      	movs	r3, #1
 8005392:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8005396:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005398:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800539c:	2b00      	cmp	r3, #0
 800539e:	d10d      	bne.n	80053bc <HAL_RCCEx_PeriphCLKConfig+0xfdc>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 80053a0:	4b05      	ldr	r3, [pc, #20]	@ (80053b8 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 80053a2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80053a4:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 80053a8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80053ac:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80053ae:	4a02      	ldr	r2, [pc, #8]	@ (80053b8 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 80053b0:	430b      	orrs	r3, r1
 80053b2:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80053b4:	e006      	b.n	80053c4 <HAL_RCCEx_PeriphCLKConfig+0xfe4>
 80053b6:	bf00      	nop
 80053b8:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80053bc:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80053c0:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 80053c4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80053c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80053cc:	f002 5300 	and.w	r3, r2, #536870912	@ 0x20000000
 80053d0:	663b      	str	r3, [r7, #96]	@ 0x60
 80053d2:	2300      	movs	r3, #0
 80053d4:	667b      	str	r3, [r7, #100]	@ 0x64
 80053d6:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	@ 0x60
 80053da:	460b      	mov	r3, r1
 80053dc:	4313      	orrs	r3, r2
 80053de:	d00c      	beq.n	80053fa <HAL_RCCEx_PeriphCLKConfig+0x101a>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 80053e0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80053e4:	3328      	adds	r3, #40	@ 0x28
 80053e6:	2102      	movs	r1, #2
 80053e8:	4618      	mov	r0, r3
 80053ea:	f000 fd09 	bl	8005e00 <RCCEx_PLL3_Config>
 80053ee:	4603      	mov	r3, r0
 80053f0:	2b00      	cmp	r3, #0
 80053f2:	d002      	beq.n	80053fa <HAL_RCCEx_PeriphCLKConfig+0x101a>
    {
      status = HAL_ERROR;
 80053f4:	2301      	movs	r3, #1
 80053f6:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 80053fa:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80053fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005402:	f402 3300 	and.w	r3, r2, #131072	@ 0x20000
 8005406:	65bb      	str	r3, [r7, #88]	@ 0x58
 8005408:	2300      	movs	r3, #0
 800540a:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800540c:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	@ 0x58
 8005410:	460b      	mov	r3, r1
 8005412:	4313      	orrs	r3, r2
 8005414:	d036      	beq.n	8005484 <HAL_RCCEx_PeriphCLKConfig+0x10a4>
  {

    switch (PeriphClkInit->RngClockSelection)
 8005416:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800541a:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800541c:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8005420:	d018      	beq.n	8005454 <HAL_RCCEx_PeriphCLKConfig+0x1074>
 8005422:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8005426:	d811      	bhi.n	800544c <HAL_RCCEx_PeriphCLKConfig+0x106c>
 8005428:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800542c:	d014      	beq.n	8005458 <HAL_RCCEx_PeriphCLKConfig+0x1078>
 800542e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005432:	d80b      	bhi.n	800544c <HAL_RCCEx_PeriphCLKConfig+0x106c>
 8005434:	2b00      	cmp	r3, #0
 8005436:	d011      	beq.n	800545c <HAL_RCCEx_PeriphCLKConfig+0x107c>
 8005438:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800543c:	d106      	bne.n	800544c <HAL_RCCEx_PeriphCLKConfig+0x106c>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800543e:	4bb7      	ldr	r3, [pc, #732]	@ (800571c <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8005440:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005442:	4ab6      	ldr	r2, [pc, #728]	@ (800571c <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8005444:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005448:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 800544a:	e008      	b.n	800545e <HAL_RCCEx_PeriphCLKConfig+0x107e>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800544c:	2301      	movs	r3, #1
 800544e:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8005452:	e004      	b.n	800545e <HAL_RCCEx_PeriphCLKConfig+0x107e>
        break;
 8005454:	bf00      	nop
 8005456:	e002      	b.n	800545e <HAL_RCCEx_PeriphCLKConfig+0x107e>
        break;
 8005458:	bf00      	nop
 800545a:	e000      	b.n	800545e <HAL_RCCEx_PeriphCLKConfig+0x107e>
        break;
 800545c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800545e:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8005462:	2b00      	cmp	r3, #0
 8005464:	d10a      	bne.n	800547c <HAL_RCCEx_PeriphCLKConfig+0x109c>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8005466:	4bad      	ldr	r3, [pc, #692]	@ (800571c <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8005468:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800546a:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 800546e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005472:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8005474:	4aa9      	ldr	r2, [pc, #676]	@ (800571c <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8005476:	430b      	orrs	r3, r1
 8005478:	6553      	str	r3, [r2, #84]	@ 0x54
 800547a:	e003      	b.n	8005484 <HAL_RCCEx_PeriphCLKConfig+0x10a4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800547c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8005480:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8005484:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005488:	e9d3 2300 	ldrd	r2, r3, [r3]
 800548c:	f402 1380 	and.w	r3, r2, #1048576	@ 0x100000
 8005490:	653b      	str	r3, [r7, #80]	@ 0x50
 8005492:	2300      	movs	r3, #0
 8005494:	657b      	str	r3, [r7, #84]	@ 0x54
 8005496:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	@ 0x50
 800549a:	460b      	mov	r3, r1
 800549c:	4313      	orrs	r3, r2
 800549e:	d009      	beq.n	80054b4 <HAL_RCCEx_PeriphCLKConfig+0x10d4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 80054a0:	4b9e      	ldr	r3, [pc, #632]	@ (800571c <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 80054a2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80054a4:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 80054a8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80054ac:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80054ae:	4a9b      	ldr	r2, [pc, #620]	@ (800571c <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 80054b0:	430b      	orrs	r3, r1
 80054b2:	6513      	str	r3, [r2, #80]	@ 0x50
    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80054b4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80054b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80054bc:	f402 1300 	and.w	r3, r2, #2097152	@ 0x200000
 80054c0:	64bb      	str	r3, [r7, #72]	@ 0x48
 80054c2:	2300      	movs	r3, #0
 80054c4:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80054c6:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	@ 0x48
 80054ca:	460b      	mov	r3, r1
 80054cc:	4313      	orrs	r3, r2
 80054ce:	d009      	beq.n	80054e4 <HAL_RCCEx_PeriphCLKConfig+0x1104>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80054d0:	4b92      	ldr	r3, [pc, #584]	@ (800571c <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 80054d2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80054d4:	f023 7180 	bic.w	r1, r3, #16777216	@ 0x1000000
 80054d8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80054dc:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80054de:	4a8f      	ldr	r2, [pc, #572]	@ (800571c <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 80054e0:	430b      	orrs	r3, r1
 80054e2:	6513      	str	r3, [r2, #80]	@ 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 80054e4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80054e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80054ec:	f002 4380 	and.w	r3, r2, #1073741824	@ 0x40000000
 80054f0:	643b      	str	r3, [r7, #64]	@ 0x40
 80054f2:	2300      	movs	r3, #0
 80054f4:	647b      	str	r3, [r7, #68]	@ 0x44
 80054f6:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	@ 0x40
 80054fa:	460b      	mov	r3, r1
 80054fc:	4313      	orrs	r3, r2
 80054fe:	d00e      	beq.n	800551e <HAL_RCCEx_PeriphCLKConfig+0x113e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8005500:	4b86      	ldr	r3, [pc, #536]	@ (800571c <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8005502:	691b      	ldr	r3, [r3, #16]
 8005504:	4a85      	ldr	r2, [pc, #532]	@ (800571c <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8005506:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 800550a:	6113      	str	r3, [r2, #16]
 800550c:	4b83      	ldr	r3, [pc, #524]	@ (800571c <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800550e:	6919      	ldr	r1, [r3, #16]
 8005510:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005514:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8005518:	4a80      	ldr	r2, [pc, #512]	@ (800571c <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800551a:	430b      	orrs	r3, r1
 800551c:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 800551e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005522:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005526:	f002 4300 	and.w	r3, r2, #2147483648	@ 0x80000000
 800552a:	63bb      	str	r3, [r7, #56]	@ 0x38
 800552c:	2300      	movs	r3, #0
 800552e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8005530:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	@ 0x38
 8005534:	460b      	mov	r3, r1
 8005536:	4313      	orrs	r3, r2
 8005538:	d009      	beq.n	800554e <HAL_RCCEx_PeriphCLKConfig+0x116e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 800553a:	4b78      	ldr	r3, [pc, #480]	@ (800571c <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800553c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800553e:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 8005542:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005546:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005548:	4a74      	ldr	r2, [pc, #464]	@ (800571c <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800554a:	430b      	orrs	r3, r1
 800554c:	64d3      	str	r3, [r2, #76]	@ 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800554e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005552:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005556:	f402 0300 	and.w	r3, r2, #8388608	@ 0x800000
 800555a:	633b      	str	r3, [r7, #48]	@ 0x30
 800555c:	2300      	movs	r3, #0
 800555e:	637b      	str	r3, [r7, #52]	@ 0x34
 8005560:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	@ 0x30
 8005564:	460b      	mov	r3, r1
 8005566:	4313      	orrs	r3, r2
 8005568:	d00a      	beq.n	8005580 <HAL_RCCEx_PeriphCLKConfig+0x11a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 800556a:	4b6c      	ldr	r3, [pc, #432]	@ (800571c <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800556c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800556e:	f423 0140 	bic.w	r1, r3, #12582912	@ 0xc00000
 8005572:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005576:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800557a:	4a68      	ldr	r2, [pc, #416]	@ (800571c <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800557c:	430b      	orrs	r3, r1
 800557e:	6553      	str	r3, [r2, #84]	@ 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 8005580:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005584:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005588:	2100      	movs	r1, #0
 800558a:	62b9      	str	r1, [r7, #40]	@ 0x28
 800558c:	f003 0301 	and.w	r3, r3, #1
 8005590:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8005592:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	@ 0x28
 8005596:	460b      	mov	r3, r1
 8005598:	4313      	orrs	r3, r2
 800559a:	d011      	beq.n	80055c0 <HAL_RCCEx_PeriphCLKConfig+0x11e0>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800559c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80055a0:	3308      	adds	r3, #8
 80055a2:	2100      	movs	r1, #0
 80055a4:	4618      	mov	r0, r3
 80055a6:	f000 fb79 	bl	8005c9c <RCCEx_PLL2_Config>
 80055aa:	4603      	mov	r3, r0
 80055ac:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
    
    if (ret == HAL_OK)
 80055b0:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80055b4:	2b00      	cmp	r3, #0
 80055b6:	d003      	beq.n	80055c0 <HAL_RCCEx_PeriphCLKConfig+0x11e0>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80055b8:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80055bc:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 80055c0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80055c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80055c8:	2100      	movs	r1, #0
 80055ca:	6239      	str	r1, [r7, #32]
 80055cc:	f003 0302 	and.w	r3, r3, #2
 80055d0:	627b      	str	r3, [r7, #36]	@ 0x24
 80055d2:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 80055d6:	460b      	mov	r3, r1
 80055d8:	4313      	orrs	r3, r2
 80055da:	d011      	beq.n	8005600 <HAL_RCCEx_PeriphCLKConfig+0x1220>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80055dc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80055e0:	3308      	adds	r3, #8
 80055e2:	2101      	movs	r1, #1
 80055e4:	4618      	mov	r0, r3
 80055e6:	f000 fb59 	bl	8005c9c <RCCEx_PLL2_Config>
 80055ea:	4603      	mov	r3, r0
 80055ec:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
    
    if (ret == HAL_OK)
 80055f0:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80055f4:	2b00      	cmp	r3, #0
 80055f6:	d003      	beq.n	8005600 <HAL_RCCEx_PeriphCLKConfig+0x1220>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80055f8:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80055fc:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 8005600:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005604:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005608:	2100      	movs	r1, #0
 800560a:	61b9      	str	r1, [r7, #24]
 800560c:	f003 0304 	and.w	r3, r3, #4
 8005610:	61fb      	str	r3, [r7, #28]
 8005612:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 8005616:	460b      	mov	r3, r1
 8005618:	4313      	orrs	r3, r2
 800561a:	d011      	beq.n	8005640 <HAL_RCCEx_PeriphCLKConfig+0x1260>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800561c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005620:	3308      	adds	r3, #8
 8005622:	2102      	movs	r1, #2
 8005624:	4618      	mov	r0, r3
 8005626:	f000 fb39 	bl	8005c9c <RCCEx_PLL2_Config>
 800562a:	4603      	mov	r3, r0
 800562c:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
    
    if (ret == HAL_OK)
 8005630:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8005634:	2b00      	cmp	r3, #0
 8005636:	d003      	beq.n	8005640 <HAL_RCCEx_PeriphCLKConfig+0x1260>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005638:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800563c:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 8005640:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005644:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005648:	2100      	movs	r1, #0
 800564a:	6139      	str	r1, [r7, #16]
 800564c:	f003 0308 	and.w	r3, r3, #8
 8005650:	617b      	str	r3, [r7, #20]
 8005652:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8005656:	460b      	mov	r3, r1
 8005658:	4313      	orrs	r3, r2
 800565a:	d011      	beq.n	8005680 <HAL_RCCEx_PeriphCLKConfig+0x12a0>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800565c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005660:	3328      	adds	r3, #40	@ 0x28
 8005662:	2100      	movs	r1, #0
 8005664:	4618      	mov	r0, r3
 8005666:	f000 fbcb 	bl	8005e00 <RCCEx_PLL3_Config>
 800566a:	4603      	mov	r3, r0
 800566c:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
  
    if (ret == HAL_OK)
 8005670:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8005674:	2b00      	cmp	r3, #0
 8005676:	d003      	beq.n	8005680 <HAL_RCCEx_PeriphCLKConfig+0x12a0>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005678:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800567c:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 8005680:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005684:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005688:	2100      	movs	r1, #0
 800568a:	60b9      	str	r1, [r7, #8]
 800568c:	f003 0310 	and.w	r3, r3, #16
 8005690:	60fb      	str	r3, [r7, #12]
 8005692:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8005696:	460b      	mov	r3, r1
 8005698:	4313      	orrs	r3, r2
 800569a:	d011      	beq.n	80056c0 <HAL_RCCEx_PeriphCLKConfig+0x12e0>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800569c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80056a0:	3328      	adds	r3, #40	@ 0x28
 80056a2:	2101      	movs	r1, #1
 80056a4:	4618      	mov	r0, r3
 80056a6:	f000 fbab 	bl	8005e00 <RCCEx_PLL3_Config>
 80056aa:	4603      	mov	r3, r0
 80056ac:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
    
    if (ret == HAL_OK)
 80056b0:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80056b4:	2b00      	cmp	r3, #0
 80056b6:	d003      	beq.n	80056c0 <HAL_RCCEx_PeriphCLKConfig+0x12e0>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80056b8:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80056bc:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 80056c0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80056c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80056c8:	2100      	movs	r1, #0
 80056ca:	6039      	str	r1, [r7, #0]
 80056cc:	f003 0320 	and.w	r3, r3, #32
 80056d0:	607b      	str	r3, [r7, #4]
 80056d2:	e9d7 1200 	ldrd	r1, r2, [r7]
 80056d6:	460b      	mov	r3, r1
 80056d8:	4313      	orrs	r3, r2
 80056da:	d011      	beq.n	8005700 <HAL_RCCEx_PeriphCLKConfig+0x1320>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80056dc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80056e0:	3328      	adds	r3, #40	@ 0x28
 80056e2:	2102      	movs	r1, #2
 80056e4:	4618      	mov	r0, r3
 80056e6:	f000 fb8b 	bl	8005e00 <RCCEx_PLL3_Config>
 80056ea:	4603      	mov	r3, r0
 80056ec:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
    
    if (ret == HAL_OK)
 80056f0:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80056f4:	2b00      	cmp	r3, #0
 80056f6:	d003      	beq.n	8005700 <HAL_RCCEx_PeriphCLKConfig+0x1320>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80056f8:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80056fc:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    } 
  }

  if (status == HAL_OK)
 8005700:	f897 3116 	ldrb.w	r3, [r7, #278]	@ 0x116
 8005704:	2b00      	cmp	r3, #0
 8005706:	d101      	bne.n	800570c <HAL_RCCEx_PeriphCLKConfig+0x132c>
  {
    return HAL_OK;
 8005708:	2300      	movs	r3, #0
 800570a:	e000      	b.n	800570e <HAL_RCCEx_PeriphCLKConfig+0x132e>
  }
  return HAL_ERROR;
 800570c:	2301      	movs	r3, #1
}
 800570e:	4618      	mov	r0, r3
 8005710:	f507 778c 	add.w	r7, r7, #280	@ 0x118
 8005714:	46bd      	mov	sp, r7
 8005716:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800571a:	bf00      	nop
 800571c:	58024400 	.word	0x58024400

08005720 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 8005720:	b580      	push	{r7, lr}
 8005722:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 8005724:	f7fe fe00 	bl	8004328 <HAL_RCC_GetHCLKFreq>
 8005728:	4602      	mov	r2, r0
 800572a:	4b06      	ldr	r3, [pc, #24]	@ (8005744 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 800572c:	6a1b      	ldr	r3, [r3, #32]
 800572e:	091b      	lsrs	r3, r3, #4
 8005730:	f003 0307 	and.w	r3, r3, #7
 8005734:	4904      	ldr	r1, [pc, #16]	@ (8005748 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 8005736:	5ccb      	ldrb	r3, [r1, r3]
 8005738:	f003 031f 	and.w	r3, r3, #31
 800573c:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 8005740:	4618      	mov	r0, r3
 8005742:	bd80      	pop	{r7, pc}
 8005744:	58024400 	.word	0x58024400
 8005748:	0800c1e8 	.word	0x0800c1e8

0800574c <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 800574c:	b480      	push	{r7}
 800574e:	b089      	sub	sp, #36	@ 0x24
 8005750:	af00      	add	r7, sp, #0
 8005752:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8005754:	4ba1      	ldr	r3, [pc, #644]	@ (80059dc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005756:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005758:	f003 0303 	and.w	r3, r3, #3
 800575c:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 800575e:	4b9f      	ldr	r3, [pc, #636]	@ (80059dc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005760:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005762:	0b1b      	lsrs	r3, r3, #12
 8005764:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8005768:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 800576a:	4b9c      	ldr	r3, [pc, #624]	@ (80059dc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800576c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800576e:	091b      	lsrs	r3, r3, #4
 8005770:	f003 0301 	and.w	r3, r3, #1
 8005774:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 8005776:	4b99      	ldr	r3, [pc, #612]	@ (80059dc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005778:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800577a:	08db      	lsrs	r3, r3, #3
 800577c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8005780:	693a      	ldr	r2, [r7, #16]
 8005782:	fb02 f303 	mul.w	r3, r2, r3
 8005786:	ee07 3a90 	vmov	s15, r3
 800578a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800578e:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 8005792:	697b      	ldr	r3, [r7, #20]
 8005794:	2b00      	cmp	r3, #0
 8005796:	f000 8111 	beq.w	80059bc <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 800579a:	69bb      	ldr	r3, [r7, #24]
 800579c:	2b02      	cmp	r3, #2
 800579e:	f000 8083 	beq.w	80058a8 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 80057a2:	69bb      	ldr	r3, [r7, #24]
 80057a4:	2b02      	cmp	r3, #2
 80057a6:	f200 80a1 	bhi.w	80058ec <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 80057aa:	69bb      	ldr	r3, [r7, #24]
 80057ac:	2b00      	cmp	r3, #0
 80057ae:	d003      	beq.n	80057b8 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 80057b0:	69bb      	ldr	r3, [r7, #24]
 80057b2:	2b01      	cmp	r3, #1
 80057b4:	d056      	beq.n	8005864 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 80057b6:	e099      	b.n	80058ec <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80057b8:	4b88      	ldr	r3, [pc, #544]	@ (80059dc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80057ba:	681b      	ldr	r3, [r3, #0]
 80057bc:	f003 0320 	and.w	r3, r3, #32
 80057c0:	2b00      	cmp	r3, #0
 80057c2:	d02d      	beq.n	8005820 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80057c4:	4b85      	ldr	r3, [pc, #532]	@ (80059dc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80057c6:	681b      	ldr	r3, [r3, #0]
 80057c8:	08db      	lsrs	r3, r3, #3
 80057ca:	f003 0303 	and.w	r3, r3, #3
 80057ce:	4a84      	ldr	r2, [pc, #528]	@ (80059e0 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 80057d0:	fa22 f303 	lsr.w	r3, r2, r3
 80057d4:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 80057d6:	68bb      	ldr	r3, [r7, #8]
 80057d8:	ee07 3a90 	vmov	s15, r3
 80057dc:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80057e0:	697b      	ldr	r3, [r7, #20]
 80057e2:	ee07 3a90 	vmov	s15, r3
 80057e6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80057ea:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80057ee:	4b7b      	ldr	r3, [pc, #492]	@ (80059dc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80057f0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80057f2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80057f6:	ee07 3a90 	vmov	s15, r3
 80057fa:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80057fe:	ed97 6a03 	vldr	s12, [r7, #12]
 8005802:	eddf 5a78 	vldr	s11, [pc, #480]	@ 80059e4 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8005806:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800580a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800580e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005812:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005816:	ee67 7a27 	vmul.f32	s15, s14, s15
 800581a:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800581e:	e087      	b.n	8005930 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8005820:	697b      	ldr	r3, [r7, #20]
 8005822:	ee07 3a90 	vmov	s15, r3
 8005826:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800582a:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 80059e8 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 800582e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005832:	4b6a      	ldr	r3, [pc, #424]	@ (80059dc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005834:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005836:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800583a:	ee07 3a90 	vmov	s15, r3
 800583e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005842:	ed97 6a03 	vldr	s12, [r7, #12]
 8005846:	eddf 5a67 	vldr	s11, [pc, #412]	@ 80059e4 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800584a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800584e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005852:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005856:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800585a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800585e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8005862:	e065      	b.n	8005930 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8005864:	697b      	ldr	r3, [r7, #20]
 8005866:	ee07 3a90 	vmov	s15, r3
 800586a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800586e:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 80059ec <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8005872:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005876:	4b59      	ldr	r3, [pc, #356]	@ (80059dc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005878:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800587a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800587e:	ee07 3a90 	vmov	s15, r3
 8005882:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005886:	ed97 6a03 	vldr	s12, [r7, #12]
 800588a:	eddf 5a56 	vldr	s11, [pc, #344]	@ 80059e4 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800588e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005892:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005896:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800589a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800589e:	ee67 7a27 	vmul.f32	s15, s14, s15
 80058a2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80058a6:	e043      	b.n	8005930 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 80058a8:	697b      	ldr	r3, [r7, #20]
 80058aa:	ee07 3a90 	vmov	s15, r3
 80058ae:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80058b2:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 80059f0 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 80058b6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80058ba:	4b48      	ldr	r3, [pc, #288]	@ (80059dc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80058bc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80058be:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80058c2:	ee07 3a90 	vmov	s15, r3
 80058c6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80058ca:	ed97 6a03 	vldr	s12, [r7, #12]
 80058ce:	eddf 5a45 	vldr	s11, [pc, #276]	@ 80059e4 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80058d2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80058d6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80058da:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80058de:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80058e2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80058e6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80058ea:	e021      	b.n	8005930 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 80058ec:	697b      	ldr	r3, [r7, #20]
 80058ee:	ee07 3a90 	vmov	s15, r3
 80058f2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80058f6:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 80059ec <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 80058fa:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80058fe:	4b37      	ldr	r3, [pc, #220]	@ (80059dc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005900:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005902:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005906:	ee07 3a90 	vmov	s15, r3
 800590a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800590e:	ed97 6a03 	vldr	s12, [r7, #12]
 8005912:	eddf 5a34 	vldr	s11, [pc, #208]	@ 80059e4 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8005916:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800591a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800591e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005922:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005926:	ee67 7a27 	vmul.f32	s15, s14, s15
 800592a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800592e:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 8005930:	4b2a      	ldr	r3, [pc, #168]	@ (80059dc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005932:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005934:	0a5b      	lsrs	r3, r3, #9
 8005936:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800593a:	ee07 3a90 	vmov	s15, r3
 800593e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005942:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8005946:	ee37 7a87 	vadd.f32	s14, s15, s14
 800594a:	edd7 6a07 	vldr	s13, [r7, #28]
 800594e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005952:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005956:	ee17 2a90 	vmov	r2, s15
 800595a:	687b      	ldr	r3, [r7, #4]
 800595c:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 800595e:	4b1f      	ldr	r3, [pc, #124]	@ (80059dc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005960:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005962:	0c1b      	lsrs	r3, r3, #16
 8005964:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8005968:	ee07 3a90 	vmov	s15, r3
 800596c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005970:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8005974:	ee37 7a87 	vadd.f32	s14, s15, s14
 8005978:	edd7 6a07 	vldr	s13, [r7, #28]
 800597c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005980:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005984:	ee17 2a90 	vmov	r2, s15
 8005988:	687b      	ldr	r3, [r7, #4]
 800598a:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 800598c:	4b13      	ldr	r3, [pc, #76]	@ (80059dc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800598e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005990:	0e1b      	lsrs	r3, r3, #24
 8005992:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8005996:	ee07 3a90 	vmov	s15, r3
 800599a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800599e:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80059a2:	ee37 7a87 	vadd.f32	s14, s15, s14
 80059a6:	edd7 6a07 	vldr	s13, [r7, #28]
 80059aa:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80059ae:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80059b2:	ee17 2a90 	vmov	r2, s15
 80059b6:	687b      	ldr	r3, [r7, #4]
 80059b8:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 80059ba:	e008      	b.n	80059ce <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 80059bc:	687b      	ldr	r3, [r7, #4]
 80059be:	2200      	movs	r2, #0
 80059c0:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 80059c2:	687b      	ldr	r3, [r7, #4]
 80059c4:	2200      	movs	r2, #0
 80059c6:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 80059c8:	687b      	ldr	r3, [r7, #4]
 80059ca:	2200      	movs	r2, #0
 80059cc:	609a      	str	r2, [r3, #8]
}
 80059ce:	bf00      	nop
 80059d0:	3724      	adds	r7, #36	@ 0x24
 80059d2:	46bd      	mov	sp, r7
 80059d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059d8:	4770      	bx	lr
 80059da:	bf00      	nop
 80059dc:	58024400 	.word	0x58024400
 80059e0:	03d09000 	.word	0x03d09000
 80059e4:	46000000 	.word	0x46000000
 80059e8:	4c742400 	.word	0x4c742400
 80059ec:	4a742400 	.word	0x4a742400
 80059f0:	4bbebc20 	.word	0x4bbebc20

080059f4 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 80059f4:	b480      	push	{r7}
 80059f6:	b089      	sub	sp, #36	@ 0x24
 80059f8:	af00      	add	r7, sp, #0
 80059fa:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80059fc:	4ba1      	ldr	r3, [pc, #644]	@ (8005c84 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80059fe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005a00:	f003 0303 	and.w	r3, r3, #3
 8005a04:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 8005a06:	4b9f      	ldr	r3, [pc, #636]	@ (8005c84 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005a08:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005a0a:	0d1b      	lsrs	r3, r3, #20
 8005a0c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8005a10:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 8005a12:	4b9c      	ldr	r3, [pc, #624]	@ (8005c84 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005a14:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005a16:	0a1b      	lsrs	r3, r3, #8
 8005a18:	f003 0301 	and.w	r3, r3, #1
 8005a1c:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 8005a1e:	4b99      	ldr	r3, [pc, #612]	@ (8005c84 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005a20:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005a22:	08db      	lsrs	r3, r3, #3
 8005a24:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8005a28:	693a      	ldr	r2, [r7, #16]
 8005a2a:	fb02 f303 	mul.w	r3, r2, r3
 8005a2e:	ee07 3a90 	vmov	s15, r3
 8005a32:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005a36:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 8005a3a:	697b      	ldr	r3, [r7, #20]
 8005a3c:	2b00      	cmp	r3, #0
 8005a3e:	f000 8111 	beq.w	8005c64 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 8005a42:	69bb      	ldr	r3, [r7, #24]
 8005a44:	2b02      	cmp	r3, #2
 8005a46:	f000 8083 	beq.w	8005b50 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 8005a4a:	69bb      	ldr	r3, [r7, #24]
 8005a4c:	2b02      	cmp	r3, #2
 8005a4e:	f200 80a1 	bhi.w	8005b94 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 8005a52:	69bb      	ldr	r3, [r7, #24]
 8005a54:	2b00      	cmp	r3, #0
 8005a56:	d003      	beq.n	8005a60 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 8005a58:	69bb      	ldr	r3, [r7, #24]
 8005a5a:	2b01      	cmp	r3, #1
 8005a5c:	d056      	beq.n	8005b0c <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 8005a5e:	e099      	b.n	8005b94 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005a60:	4b88      	ldr	r3, [pc, #544]	@ (8005c84 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005a62:	681b      	ldr	r3, [r3, #0]
 8005a64:	f003 0320 	and.w	r3, r3, #32
 8005a68:	2b00      	cmp	r3, #0
 8005a6a:	d02d      	beq.n	8005ac8 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8005a6c:	4b85      	ldr	r3, [pc, #532]	@ (8005c84 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005a6e:	681b      	ldr	r3, [r3, #0]
 8005a70:	08db      	lsrs	r3, r3, #3
 8005a72:	f003 0303 	and.w	r3, r3, #3
 8005a76:	4a84      	ldr	r2, [pc, #528]	@ (8005c88 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 8005a78:	fa22 f303 	lsr.w	r3, r2, r3
 8005a7c:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8005a7e:	68bb      	ldr	r3, [r7, #8]
 8005a80:	ee07 3a90 	vmov	s15, r3
 8005a84:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005a88:	697b      	ldr	r3, [r7, #20]
 8005a8a:	ee07 3a90 	vmov	s15, r3
 8005a8e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005a92:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005a96:	4b7b      	ldr	r3, [pc, #492]	@ (8005c84 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005a98:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005a9a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005a9e:	ee07 3a90 	vmov	s15, r3
 8005aa2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005aa6:	ed97 6a03 	vldr	s12, [r7, #12]
 8005aaa:	eddf 5a78 	vldr	s11, [pc, #480]	@ 8005c8c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8005aae:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005ab2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005ab6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005aba:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005abe:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005ac2:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8005ac6:	e087      	b.n	8005bd8 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8005ac8:	697b      	ldr	r3, [r7, #20]
 8005aca:	ee07 3a90 	vmov	s15, r3
 8005ace:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005ad2:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 8005c90 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 8005ad6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005ada:	4b6a      	ldr	r3, [pc, #424]	@ (8005c84 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005adc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005ade:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005ae2:	ee07 3a90 	vmov	s15, r3
 8005ae6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005aea:	ed97 6a03 	vldr	s12, [r7, #12]
 8005aee:	eddf 5a67 	vldr	s11, [pc, #412]	@ 8005c8c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8005af2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005af6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005afa:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005afe:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005b02:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005b06:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8005b0a:	e065      	b.n	8005bd8 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8005b0c:	697b      	ldr	r3, [r7, #20]
 8005b0e:	ee07 3a90 	vmov	s15, r3
 8005b12:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005b16:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 8005c94 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8005b1a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005b1e:	4b59      	ldr	r3, [pc, #356]	@ (8005c84 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005b20:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005b22:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005b26:	ee07 3a90 	vmov	s15, r3
 8005b2a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005b2e:	ed97 6a03 	vldr	s12, [r7, #12]
 8005b32:	eddf 5a56 	vldr	s11, [pc, #344]	@ 8005c8c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8005b36:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005b3a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005b3e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005b42:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005b46:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005b4a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8005b4e:	e043      	b.n	8005bd8 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8005b50:	697b      	ldr	r3, [r7, #20]
 8005b52:	ee07 3a90 	vmov	s15, r3
 8005b56:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005b5a:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 8005c98 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 8005b5e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005b62:	4b48      	ldr	r3, [pc, #288]	@ (8005c84 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005b64:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005b66:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005b6a:	ee07 3a90 	vmov	s15, r3
 8005b6e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005b72:	ed97 6a03 	vldr	s12, [r7, #12]
 8005b76:	eddf 5a45 	vldr	s11, [pc, #276]	@ 8005c8c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8005b7a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005b7e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005b82:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005b86:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005b8a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005b8e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8005b92:	e021      	b.n	8005bd8 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8005b94:	697b      	ldr	r3, [r7, #20]
 8005b96:	ee07 3a90 	vmov	s15, r3
 8005b9a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005b9e:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 8005c94 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8005ba2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005ba6:	4b37      	ldr	r3, [pc, #220]	@ (8005c84 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005ba8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005baa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005bae:	ee07 3a90 	vmov	s15, r3
 8005bb2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005bb6:	ed97 6a03 	vldr	s12, [r7, #12]
 8005bba:	eddf 5a34 	vldr	s11, [pc, #208]	@ 8005c8c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8005bbe:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005bc2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005bc6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005bca:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005bce:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005bd2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8005bd6:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 8005bd8:	4b2a      	ldr	r3, [pc, #168]	@ (8005c84 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005bda:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005bdc:	0a5b      	lsrs	r3, r3, #9
 8005bde:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8005be2:	ee07 3a90 	vmov	s15, r3
 8005be6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005bea:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8005bee:	ee37 7a87 	vadd.f32	s14, s15, s14
 8005bf2:	edd7 6a07 	vldr	s13, [r7, #28]
 8005bf6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005bfa:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005bfe:	ee17 2a90 	vmov	r2, s15
 8005c02:	687b      	ldr	r3, [r7, #4]
 8005c04:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 8005c06:	4b1f      	ldr	r3, [pc, #124]	@ (8005c84 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005c08:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005c0a:	0c1b      	lsrs	r3, r3, #16
 8005c0c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8005c10:	ee07 3a90 	vmov	s15, r3
 8005c14:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005c18:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8005c1c:	ee37 7a87 	vadd.f32	s14, s15, s14
 8005c20:	edd7 6a07 	vldr	s13, [r7, #28]
 8005c24:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005c28:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005c2c:	ee17 2a90 	vmov	r2, s15
 8005c30:	687b      	ldr	r3, [r7, #4]
 8005c32:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 8005c34:	4b13      	ldr	r3, [pc, #76]	@ (8005c84 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005c36:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005c38:	0e1b      	lsrs	r3, r3, #24
 8005c3a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8005c3e:	ee07 3a90 	vmov	s15, r3
 8005c42:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005c46:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8005c4a:	ee37 7a87 	vadd.f32	s14, s15, s14
 8005c4e:	edd7 6a07 	vldr	s13, [r7, #28]
 8005c52:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005c56:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005c5a:	ee17 2a90 	vmov	r2, s15
 8005c5e:	687b      	ldr	r3, [r7, #4]
 8005c60:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 8005c62:	e008      	b.n	8005c76 <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8005c64:	687b      	ldr	r3, [r7, #4]
 8005c66:	2200      	movs	r2, #0
 8005c68:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 8005c6a:	687b      	ldr	r3, [r7, #4]
 8005c6c:	2200      	movs	r2, #0
 8005c6e:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8005c70:	687b      	ldr	r3, [r7, #4]
 8005c72:	2200      	movs	r2, #0
 8005c74:	609a      	str	r2, [r3, #8]
}
 8005c76:	bf00      	nop
 8005c78:	3724      	adds	r7, #36	@ 0x24
 8005c7a:	46bd      	mov	sp, r7
 8005c7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c80:	4770      	bx	lr
 8005c82:	bf00      	nop
 8005c84:	58024400 	.word	0x58024400
 8005c88:	03d09000 	.word	0x03d09000
 8005c8c:	46000000 	.word	0x46000000
 8005c90:	4c742400 	.word	0x4c742400
 8005c94:	4a742400 	.word	0x4a742400
 8005c98:	4bbebc20 	.word	0x4bbebc20

08005c9c <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(const RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8005c9c:	b580      	push	{r7, lr}
 8005c9e:	b084      	sub	sp, #16
 8005ca0:	af00      	add	r7, sp, #0
 8005ca2:	6078      	str	r0, [r7, #4]
 8005ca4:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8005ca6:	2300      	movs	r3, #0
 8005ca8:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8005caa:	4b53      	ldr	r3, [pc, #332]	@ (8005df8 <RCCEx_PLL2_Config+0x15c>)
 8005cac:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005cae:	f003 0303 	and.w	r3, r3, #3
 8005cb2:	2b03      	cmp	r3, #3
 8005cb4:	d101      	bne.n	8005cba <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 8005cb6:	2301      	movs	r3, #1
 8005cb8:	e099      	b.n	8005dee <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 8005cba:	4b4f      	ldr	r3, [pc, #316]	@ (8005df8 <RCCEx_PLL2_Config+0x15c>)
 8005cbc:	681b      	ldr	r3, [r3, #0]
 8005cbe:	4a4e      	ldr	r2, [pc, #312]	@ (8005df8 <RCCEx_PLL2_Config+0x15c>)
 8005cc0:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8005cc4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005cc6:	f7fb fe75 	bl	80019b4 <HAL_GetTick>
 8005cca:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8005ccc:	e008      	b.n	8005ce0 <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8005cce:	f7fb fe71 	bl	80019b4 <HAL_GetTick>
 8005cd2:	4602      	mov	r2, r0
 8005cd4:	68bb      	ldr	r3, [r7, #8]
 8005cd6:	1ad3      	subs	r3, r2, r3
 8005cd8:	2b02      	cmp	r3, #2
 8005cda:	d901      	bls.n	8005ce0 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8005cdc:	2303      	movs	r3, #3
 8005cde:	e086      	b.n	8005dee <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8005ce0:	4b45      	ldr	r3, [pc, #276]	@ (8005df8 <RCCEx_PLL2_Config+0x15c>)
 8005ce2:	681b      	ldr	r3, [r3, #0]
 8005ce4:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8005ce8:	2b00      	cmp	r3, #0
 8005cea:	d1f0      	bne.n	8005cce <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8005cec:	4b42      	ldr	r3, [pc, #264]	@ (8005df8 <RCCEx_PLL2_Config+0x15c>)
 8005cee:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005cf0:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 8005cf4:	687b      	ldr	r3, [r7, #4]
 8005cf6:	681b      	ldr	r3, [r3, #0]
 8005cf8:	031b      	lsls	r3, r3, #12
 8005cfa:	493f      	ldr	r1, [pc, #252]	@ (8005df8 <RCCEx_PLL2_Config+0x15c>)
 8005cfc:	4313      	orrs	r3, r2
 8005cfe:	628b      	str	r3, [r1, #40]	@ 0x28
 8005d00:	687b      	ldr	r3, [r7, #4]
 8005d02:	685b      	ldr	r3, [r3, #4]
 8005d04:	3b01      	subs	r3, #1
 8005d06:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8005d0a:	687b      	ldr	r3, [r7, #4]
 8005d0c:	689b      	ldr	r3, [r3, #8]
 8005d0e:	3b01      	subs	r3, #1
 8005d10:	025b      	lsls	r3, r3, #9
 8005d12:	b29b      	uxth	r3, r3
 8005d14:	431a      	orrs	r2, r3
 8005d16:	687b      	ldr	r3, [r7, #4]
 8005d18:	68db      	ldr	r3, [r3, #12]
 8005d1a:	3b01      	subs	r3, #1
 8005d1c:	041b      	lsls	r3, r3, #16
 8005d1e:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8005d22:	431a      	orrs	r2, r3
 8005d24:	687b      	ldr	r3, [r7, #4]
 8005d26:	691b      	ldr	r3, [r3, #16]
 8005d28:	3b01      	subs	r3, #1
 8005d2a:	061b      	lsls	r3, r3, #24
 8005d2c:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8005d30:	4931      	ldr	r1, [pc, #196]	@ (8005df8 <RCCEx_PLL2_Config+0x15c>)
 8005d32:	4313      	orrs	r3, r2
 8005d34:	638b      	str	r3, [r1, #56]	@ 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 8005d36:	4b30      	ldr	r3, [pc, #192]	@ (8005df8 <RCCEx_PLL2_Config+0x15c>)
 8005d38:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005d3a:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8005d3e:	687b      	ldr	r3, [r7, #4]
 8005d40:	695b      	ldr	r3, [r3, #20]
 8005d42:	492d      	ldr	r1, [pc, #180]	@ (8005df8 <RCCEx_PLL2_Config+0x15c>)
 8005d44:	4313      	orrs	r3, r2
 8005d46:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8005d48:	4b2b      	ldr	r3, [pc, #172]	@ (8005df8 <RCCEx_PLL2_Config+0x15c>)
 8005d4a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005d4c:	f023 0220 	bic.w	r2, r3, #32
 8005d50:	687b      	ldr	r3, [r7, #4]
 8005d52:	699b      	ldr	r3, [r3, #24]
 8005d54:	4928      	ldr	r1, [pc, #160]	@ (8005df8 <RCCEx_PLL2_Config+0x15c>)
 8005d56:	4313      	orrs	r3, r2
 8005d58:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 8005d5a:	4b27      	ldr	r3, [pc, #156]	@ (8005df8 <RCCEx_PLL2_Config+0x15c>)
 8005d5c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005d5e:	4a26      	ldr	r2, [pc, #152]	@ (8005df8 <RCCEx_PLL2_Config+0x15c>)
 8005d60:	f023 0310 	bic.w	r3, r3, #16
 8005d64:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8005d66:	4b24      	ldr	r3, [pc, #144]	@ (8005df8 <RCCEx_PLL2_Config+0x15c>)
 8005d68:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8005d6a:	4b24      	ldr	r3, [pc, #144]	@ (8005dfc <RCCEx_PLL2_Config+0x160>)
 8005d6c:	4013      	ands	r3, r2
 8005d6e:	687a      	ldr	r2, [r7, #4]
 8005d70:	69d2      	ldr	r2, [r2, #28]
 8005d72:	00d2      	lsls	r2, r2, #3
 8005d74:	4920      	ldr	r1, [pc, #128]	@ (8005df8 <RCCEx_PLL2_Config+0x15c>)
 8005d76:	4313      	orrs	r3, r2
 8005d78:	63cb      	str	r3, [r1, #60]	@ 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 8005d7a:	4b1f      	ldr	r3, [pc, #124]	@ (8005df8 <RCCEx_PLL2_Config+0x15c>)
 8005d7c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005d7e:	4a1e      	ldr	r2, [pc, #120]	@ (8005df8 <RCCEx_PLL2_Config+0x15c>)
 8005d80:	f043 0310 	orr.w	r3, r3, #16
 8005d84:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 8005d86:	683b      	ldr	r3, [r7, #0]
 8005d88:	2b00      	cmp	r3, #0
 8005d8a:	d106      	bne.n	8005d9a <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8005d8c:	4b1a      	ldr	r3, [pc, #104]	@ (8005df8 <RCCEx_PLL2_Config+0x15c>)
 8005d8e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005d90:	4a19      	ldr	r2, [pc, #100]	@ (8005df8 <RCCEx_PLL2_Config+0x15c>)
 8005d92:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8005d96:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8005d98:	e00f      	b.n	8005dba <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8005d9a:	683b      	ldr	r3, [r7, #0]
 8005d9c:	2b01      	cmp	r3, #1
 8005d9e:	d106      	bne.n	8005dae <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8005da0:	4b15      	ldr	r3, [pc, #84]	@ (8005df8 <RCCEx_PLL2_Config+0x15c>)
 8005da2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005da4:	4a14      	ldr	r2, [pc, #80]	@ (8005df8 <RCCEx_PLL2_Config+0x15c>)
 8005da6:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8005daa:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8005dac:	e005      	b.n	8005dba <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 8005dae:	4b12      	ldr	r3, [pc, #72]	@ (8005df8 <RCCEx_PLL2_Config+0x15c>)
 8005db0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005db2:	4a11      	ldr	r2, [pc, #68]	@ (8005df8 <RCCEx_PLL2_Config+0x15c>)
 8005db4:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8005db8:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 8005dba:	4b0f      	ldr	r3, [pc, #60]	@ (8005df8 <RCCEx_PLL2_Config+0x15c>)
 8005dbc:	681b      	ldr	r3, [r3, #0]
 8005dbe:	4a0e      	ldr	r2, [pc, #56]	@ (8005df8 <RCCEx_PLL2_Config+0x15c>)
 8005dc0:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8005dc4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005dc6:	f7fb fdf5 	bl	80019b4 <HAL_GetTick>
 8005dca:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8005dcc:	e008      	b.n	8005de0 <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8005dce:	f7fb fdf1 	bl	80019b4 <HAL_GetTick>
 8005dd2:	4602      	mov	r2, r0
 8005dd4:	68bb      	ldr	r3, [r7, #8]
 8005dd6:	1ad3      	subs	r3, r2, r3
 8005dd8:	2b02      	cmp	r3, #2
 8005dda:	d901      	bls.n	8005de0 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 8005ddc:	2303      	movs	r3, #3
 8005dde:	e006      	b.n	8005dee <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8005de0:	4b05      	ldr	r3, [pc, #20]	@ (8005df8 <RCCEx_PLL2_Config+0x15c>)
 8005de2:	681b      	ldr	r3, [r3, #0]
 8005de4:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8005de8:	2b00      	cmp	r3, #0
 8005dea:	d0f0      	beq.n	8005dce <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 8005dec:	7bfb      	ldrb	r3, [r7, #15]
}
 8005dee:	4618      	mov	r0, r3
 8005df0:	3710      	adds	r7, #16
 8005df2:	46bd      	mov	sp, r7
 8005df4:	bd80      	pop	{r7, pc}
 8005df6:	bf00      	nop
 8005df8:	58024400 	.word	0x58024400
 8005dfc:	ffff0007 	.word	0xffff0007

08005e00 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(const RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8005e00:	b580      	push	{r7, lr}
 8005e02:	b084      	sub	sp, #16
 8005e04:	af00      	add	r7, sp, #0
 8005e06:	6078      	str	r0, [r7, #4]
 8005e08:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8005e0a:	2300      	movs	r3, #0
 8005e0c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8005e0e:	4b53      	ldr	r3, [pc, #332]	@ (8005f5c <RCCEx_PLL3_Config+0x15c>)
 8005e10:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005e12:	f003 0303 	and.w	r3, r3, #3
 8005e16:	2b03      	cmp	r3, #3
 8005e18:	d101      	bne.n	8005e1e <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 8005e1a:	2301      	movs	r3, #1
 8005e1c:	e099      	b.n	8005f52 <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 8005e1e:	4b4f      	ldr	r3, [pc, #316]	@ (8005f5c <RCCEx_PLL3_Config+0x15c>)
 8005e20:	681b      	ldr	r3, [r3, #0]
 8005e22:	4a4e      	ldr	r2, [pc, #312]	@ (8005f5c <RCCEx_PLL3_Config+0x15c>)
 8005e24:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8005e28:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005e2a:	f7fb fdc3 	bl	80019b4 <HAL_GetTick>
 8005e2e:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8005e30:	e008      	b.n	8005e44 <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8005e32:	f7fb fdbf 	bl	80019b4 <HAL_GetTick>
 8005e36:	4602      	mov	r2, r0
 8005e38:	68bb      	ldr	r3, [r7, #8]
 8005e3a:	1ad3      	subs	r3, r2, r3
 8005e3c:	2b02      	cmp	r3, #2
 8005e3e:	d901      	bls.n	8005e44 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8005e40:	2303      	movs	r3, #3
 8005e42:	e086      	b.n	8005f52 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8005e44:	4b45      	ldr	r3, [pc, #276]	@ (8005f5c <RCCEx_PLL3_Config+0x15c>)
 8005e46:	681b      	ldr	r3, [r3, #0]
 8005e48:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8005e4c:	2b00      	cmp	r3, #0
 8005e4e:	d1f0      	bne.n	8005e32 <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8005e50:	4b42      	ldr	r3, [pc, #264]	@ (8005f5c <RCCEx_PLL3_Config+0x15c>)
 8005e52:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005e54:	f023 727c 	bic.w	r2, r3, #66060288	@ 0x3f00000
 8005e58:	687b      	ldr	r3, [r7, #4]
 8005e5a:	681b      	ldr	r3, [r3, #0]
 8005e5c:	051b      	lsls	r3, r3, #20
 8005e5e:	493f      	ldr	r1, [pc, #252]	@ (8005f5c <RCCEx_PLL3_Config+0x15c>)
 8005e60:	4313      	orrs	r3, r2
 8005e62:	628b      	str	r3, [r1, #40]	@ 0x28
 8005e64:	687b      	ldr	r3, [r7, #4]
 8005e66:	685b      	ldr	r3, [r3, #4]
 8005e68:	3b01      	subs	r3, #1
 8005e6a:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8005e6e:	687b      	ldr	r3, [r7, #4]
 8005e70:	689b      	ldr	r3, [r3, #8]
 8005e72:	3b01      	subs	r3, #1
 8005e74:	025b      	lsls	r3, r3, #9
 8005e76:	b29b      	uxth	r3, r3
 8005e78:	431a      	orrs	r2, r3
 8005e7a:	687b      	ldr	r3, [r7, #4]
 8005e7c:	68db      	ldr	r3, [r3, #12]
 8005e7e:	3b01      	subs	r3, #1
 8005e80:	041b      	lsls	r3, r3, #16
 8005e82:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8005e86:	431a      	orrs	r2, r3
 8005e88:	687b      	ldr	r3, [r7, #4]
 8005e8a:	691b      	ldr	r3, [r3, #16]
 8005e8c:	3b01      	subs	r3, #1
 8005e8e:	061b      	lsls	r3, r3, #24
 8005e90:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8005e94:	4931      	ldr	r1, [pc, #196]	@ (8005f5c <RCCEx_PLL3_Config+0x15c>)
 8005e96:	4313      	orrs	r3, r2
 8005e98:	640b      	str	r3, [r1, #64]	@ 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 8005e9a:	4b30      	ldr	r3, [pc, #192]	@ (8005f5c <RCCEx_PLL3_Config+0x15c>)
 8005e9c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005e9e:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8005ea2:	687b      	ldr	r3, [r7, #4]
 8005ea4:	695b      	ldr	r3, [r3, #20]
 8005ea6:	492d      	ldr	r1, [pc, #180]	@ (8005f5c <RCCEx_PLL3_Config+0x15c>)
 8005ea8:	4313      	orrs	r3, r2
 8005eaa:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8005eac:	4b2b      	ldr	r3, [pc, #172]	@ (8005f5c <RCCEx_PLL3_Config+0x15c>)
 8005eae:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005eb0:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 8005eb4:	687b      	ldr	r3, [r7, #4]
 8005eb6:	699b      	ldr	r3, [r3, #24]
 8005eb8:	4928      	ldr	r1, [pc, #160]	@ (8005f5c <RCCEx_PLL3_Config+0x15c>)
 8005eba:	4313      	orrs	r3, r2
 8005ebc:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 8005ebe:	4b27      	ldr	r3, [pc, #156]	@ (8005f5c <RCCEx_PLL3_Config+0x15c>)
 8005ec0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005ec2:	4a26      	ldr	r2, [pc, #152]	@ (8005f5c <RCCEx_PLL3_Config+0x15c>)
 8005ec4:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8005ec8:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8005eca:	4b24      	ldr	r3, [pc, #144]	@ (8005f5c <RCCEx_PLL3_Config+0x15c>)
 8005ecc:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8005ece:	4b24      	ldr	r3, [pc, #144]	@ (8005f60 <RCCEx_PLL3_Config+0x160>)
 8005ed0:	4013      	ands	r3, r2
 8005ed2:	687a      	ldr	r2, [r7, #4]
 8005ed4:	69d2      	ldr	r2, [r2, #28]
 8005ed6:	00d2      	lsls	r2, r2, #3
 8005ed8:	4920      	ldr	r1, [pc, #128]	@ (8005f5c <RCCEx_PLL3_Config+0x15c>)
 8005eda:	4313      	orrs	r3, r2
 8005edc:	644b      	str	r3, [r1, #68]	@ 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 8005ede:	4b1f      	ldr	r3, [pc, #124]	@ (8005f5c <RCCEx_PLL3_Config+0x15c>)
 8005ee0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005ee2:	4a1e      	ldr	r2, [pc, #120]	@ (8005f5c <RCCEx_PLL3_Config+0x15c>)
 8005ee4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005ee8:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 8005eea:	683b      	ldr	r3, [r7, #0]
 8005eec:	2b00      	cmp	r3, #0
 8005eee:	d106      	bne.n	8005efe <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8005ef0:	4b1a      	ldr	r3, [pc, #104]	@ (8005f5c <RCCEx_PLL3_Config+0x15c>)
 8005ef2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005ef4:	4a19      	ldr	r2, [pc, #100]	@ (8005f5c <RCCEx_PLL3_Config+0x15c>)
 8005ef6:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8005efa:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8005efc:	e00f      	b.n	8005f1e <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8005efe:	683b      	ldr	r3, [r7, #0]
 8005f00:	2b01      	cmp	r3, #1
 8005f02:	d106      	bne.n	8005f12 <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8005f04:	4b15      	ldr	r3, [pc, #84]	@ (8005f5c <RCCEx_PLL3_Config+0x15c>)
 8005f06:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005f08:	4a14      	ldr	r2, [pc, #80]	@ (8005f5c <RCCEx_PLL3_Config+0x15c>)
 8005f0a:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8005f0e:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8005f10:	e005      	b.n	8005f1e <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 8005f12:	4b12      	ldr	r3, [pc, #72]	@ (8005f5c <RCCEx_PLL3_Config+0x15c>)
 8005f14:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005f16:	4a11      	ldr	r2, [pc, #68]	@ (8005f5c <RCCEx_PLL3_Config+0x15c>)
 8005f18:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8005f1c:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 8005f1e:	4b0f      	ldr	r3, [pc, #60]	@ (8005f5c <RCCEx_PLL3_Config+0x15c>)
 8005f20:	681b      	ldr	r3, [r3, #0]
 8005f22:	4a0e      	ldr	r2, [pc, #56]	@ (8005f5c <RCCEx_PLL3_Config+0x15c>)
 8005f24:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005f28:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005f2a:	f7fb fd43 	bl	80019b4 <HAL_GetTick>
 8005f2e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8005f30:	e008      	b.n	8005f44 <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8005f32:	f7fb fd3f 	bl	80019b4 <HAL_GetTick>
 8005f36:	4602      	mov	r2, r0
 8005f38:	68bb      	ldr	r3, [r7, #8]
 8005f3a:	1ad3      	subs	r3, r2, r3
 8005f3c:	2b02      	cmp	r3, #2
 8005f3e:	d901      	bls.n	8005f44 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 8005f40:	2303      	movs	r3, #3
 8005f42:	e006      	b.n	8005f52 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8005f44:	4b05      	ldr	r3, [pc, #20]	@ (8005f5c <RCCEx_PLL3_Config+0x15c>)
 8005f46:	681b      	ldr	r3, [r3, #0]
 8005f48:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8005f4c:	2b00      	cmp	r3, #0
 8005f4e:	d0f0      	beq.n	8005f32 <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 8005f50:	7bfb      	ldrb	r3, [r7, #15]
}
 8005f52:	4618      	mov	r0, r3
 8005f54:	3710      	adds	r7, #16
 8005f56:	46bd      	mov	sp, r7
 8005f58:	bd80      	pop	{r7, pc}
 8005f5a:	bf00      	nop
 8005f5c:	58024400 	.word	0x58024400
 8005f60:	ffff0007 	.word	0xffff0007

08005f64 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8005f64:	b580      	push	{r7, lr}
 8005f66:	b082      	sub	sp, #8
 8005f68:	af00      	add	r7, sp, #0
 8005f6a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005f6c:	687b      	ldr	r3, [r7, #4]
 8005f6e:	2b00      	cmp	r3, #0
 8005f70:	d101      	bne.n	8005f76 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8005f72:	2301      	movs	r3, #1
 8005f74:	e049      	b.n	800600a <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005f76:	687b      	ldr	r3, [r7, #4]
 8005f78:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005f7c:	b2db      	uxtb	r3, r3
 8005f7e:	2b00      	cmp	r3, #0
 8005f80:	d106      	bne.n	8005f90 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005f82:	687b      	ldr	r3, [r7, #4]
 8005f84:	2200      	movs	r2, #0
 8005f86:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8005f8a:	6878      	ldr	r0, [r7, #4]
 8005f8c:	f7fb f926 	bl	80011dc <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005f90:	687b      	ldr	r3, [r7, #4]
 8005f92:	2202      	movs	r2, #2
 8005f94:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005f98:	687b      	ldr	r3, [r7, #4]
 8005f9a:	681a      	ldr	r2, [r3, #0]
 8005f9c:	687b      	ldr	r3, [r7, #4]
 8005f9e:	3304      	adds	r3, #4
 8005fa0:	4619      	mov	r1, r3
 8005fa2:	4610      	mov	r0, r2
 8005fa4:	f000 fa66 	bl	8006474 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005fa8:	687b      	ldr	r3, [r7, #4]
 8005faa:	2201      	movs	r2, #1
 8005fac:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005fb0:	687b      	ldr	r3, [r7, #4]
 8005fb2:	2201      	movs	r2, #1
 8005fb4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8005fb8:	687b      	ldr	r3, [r7, #4]
 8005fba:	2201      	movs	r2, #1
 8005fbc:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8005fc0:	687b      	ldr	r3, [r7, #4]
 8005fc2:	2201      	movs	r2, #1
 8005fc4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8005fc8:	687b      	ldr	r3, [r7, #4]
 8005fca:	2201      	movs	r2, #1
 8005fcc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8005fd0:	687b      	ldr	r3, [r7, #4]
 8005fd2:	2201      	movs	r2, #1
 8005fd4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8005fd8:	687b      	ldr	r3, [r7, #4]
 8005fda:	2201      	movs	r2, #1
 8005fdc:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005fe0:	687b      	ldr	r3, [r7, #4]
 8005fe2:	2201      	movs	r2, #1
 8005fe4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8005fe8:	687b      	ldr	r3, [r7, #4]
 8005fea:	2201      	movs	r2, #1
 8005fec:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8005ff0:	687b      	ldr	r3, [r7, #4]
 8005ff2:	2201      	movs	r2, #1
 8005ff4:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8005ff8:	687b      	ldr	r3, [r7, #4]
 8005ffa:	2201      	movs	r2, #1
 8005ffc:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006000:	687b      	ldr	r3, [r7, #4]
 8006002:	2201      	movs	r2, #1
 8006004:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8006008:	2300      	movs	r3, #0
}
 800600a:	4618      	mov	r0, r3
 800600c:	3708      	adds	r7, #8
 800600e:	46bd      	mov	sp, r7
 8006010:	bd80      	pop	{r7, pc}
	...

08006014 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8006014:	b580      	push	{r7, lr}
 8006016:	b084      	sub	sp, #16
 8006018:	af00      	add	r7, sp, #0
 800601a:	6078      	str	r0, [r7, #4]
 800601c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800601e:	683b      	ldr	r3, [r7, #0]
 8006020:	2b00      	cmp	r3, #0
 8006022:	d109      	bne.n	8006038 <HAL_TIM_PWM_Start+0x24>
 8006024:	687b      	ldr	r3, [r7, #4]
 8006026:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800602a:	b2db      	uxtb	r3, r3
 800602c:	2b01      	cmp	r3, #1
 800602e:	bf14      	ite	ne
 8006030:	2301      	movne	r3, #1
 8006032:	2300      	moveq	r3, #0
 8006034:	b2db      	uxtb	r3, r3
 8006036:	e03c      	b.n	80060b2 <HAL_TIM_PWM_Start+0x9e>
 8006038:	683b      	ldr	r3, [r7, #0]
 800603a:	2b04      	cmp	r3, #4
 800603c:	d109      	bne.n	8006052 <HAL_TIM_PWM_Start+0x3e>
 800603e:	687b      	ldr	r3, [r7, #4]
 8006040:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8006044:	b2db      	uxtb	r3, r3
 8006046:	2b01      	cmp	r3, #1
 8006048:	bf14      	ite	ne
 800604a:	2301      	movne	r3, #1
 800604c:	2300      	moveq	r3, #0
 800604e:	b2db      	uxtb	r3, r3
 8006050:	e02f      	b.n	80060b2 <HAL_TIM_PWM_Start+0x9e>
 8006052:	683b      	ldr	r3, [r7, #0]
 8006054:	2b08      	cmp	r3, #8
 8006056:	d109      	bne.n	800606c <HAL_TIM_PWM_Start+0x58>
 8006058:	687b      	ldr	r3, [r7, #4]
 800605a:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800605e:	b2db      	uxtb	r3, r3
 8006060:	2b01      	cmp	r3, #1
 8006062:	bf14      	ite	ne
 8006064:	2301      	movne	r3, #1
 8006066:	2300      	moveq	r3, #0
 8006068:	b2db      	uxtb	r3, r3
 800606a:	e022      	b.n	80060b2 <HAL_TIM_PWM_Start+0x9e>
 800606c:	683b      	ldr	r3, [r7, #0]
 800606e:	2b0c      	cmp	r3, #12
 8006070:	d109      	bne.n	8006086 <HAL_TIM_PWM_Start+0x72>
 8006072:	687b      	ldr	r3, [r7, #4]
 8006074:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006078:	b2db      	uxtb	r3, r3
 800607a:	2b01      	cmp	r3, #1
 800607c:	bf14      	ite	ne
 800607e:	2301      	movne	r3, #1
 8006080:	2300      	moveq	r3, #0
 8006082:	b2db      	uxtb	r3, r3
 8006084:	e015      	b.n	80060b2 <HAL_TIM_PWM_Start+0x9e>
 8006086:	683b      	ldr	r3, [r7, #0]
 8006088:	2b10      	cmp	r3, #16
 800608a:	d109      	bne.n	80060a0 <HAL_TIM_PWM_Start+0x8c>
 800608c:	687b      	ldr	r3, [r7, #4]
 800608e:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8006092:	b2db      	uxtb	r3, r3
 8006094:	2b01      	cmp	r3, #1
 8006096:	bf14      	ite	ne
 8006098:	2301      	movne	r3, #1
 800609a:	2300      	moveq	r3, #0
 800609c:	b2db      	uxtb	r3, r3
 800609e:	e008      	b.n	80060b2 <HAL_TIM_PWM_Start+0x9e>
 80060a0:	687b      	ldr	r3, [r7, #4]
 80060a2:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 80060a6:	b2db      	uxtb	r3, r3
 80060a8:	2b01      	cmp	r3, #1
 80060aa:	bf14      	ite	ne
 80060ac:	2301      	movne	r3, #1
 80060ae:	2300      	moveq	r3, #0
 80060b0:	b2db      	uxtb	r3, r3
 80060b2:	2b00      	cmp	r3, #0
 80060b4:	d001      	beq.n	80060ba <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 80060b6:	2301      	movs	r3, #1
 80060b8:	e0ab      	b.n	8006212 <HAL_TIM_PWM_Start+0x1fe>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80060ba:	683b      	ldr	r3, [r7, #0]
 80060bc:	2b00      	cmp	r3, #0
 80060be:	d104      	bne.n	80060ca <HAL_TIM_PWM_Start+0xb6>
 80060c0:	687b      	ldr	r3, [r7, #4]
 80060c2:	2202      	movs	r2, #2
 80060c4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80060c8:	e023      	b.n	8006112 <HAL_TIM_PWM_Start+0xfe>
 80060ca:	683b      	ldr	r3, [r7, #0]
 80060cc:	2b04      	cmp	r3, #4
 80060ce:	d104      	bne.n	80060da <HAL_TIM_PWM_Start+0xc6>
 80060d0:	687b      	ldr	r3, [r7, #4]
 80060d2:	2202      	movs	r2, #2
 80060d4:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80060d8:	e01b      	b.n	8006112 <HAL_TIM_PWM_Start+0xfe>
 80060da:	683b      	ldr	r3, [r7, #0]
 80060dc:	2b08      	cmp	r3, #8
 80060de:	d104      	bne.n	80060ea <HAL_TIM_PWM_Start+0xd6>
 80060e0:	687b      	ldr	r3, [r7, #4]
 80060e2:	2202      	movs	r2, #2
 80060e4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80060e8:	e013      	b.n	8006112 <HAL_TIM_PWM_Start+0xfe>
 80060ea:	683b      	ldr	r3, [r7, #0]
 80060ec:	2b0c      	cmp	r3, #12
 80060ee:	d104      	bne.n	80060fa <HAL_TIM_PWM_Start+0xe6>
 80060f0:	687b      	ldr	r3, [r7, #4]
 80060f2:	2202      	movs	r2, #2
 80060f4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 80060f8:	e00b      	b.n	8006112 <HAL_TIM_PWM_Start+0xfe>
 80060fa:	683b      	ldr	r3, [r7, #0]
 80060fc:	2b10      	cmp	r3, #16
 80060fe:	d104      	bne.n	800610a <HAL_TIM_PWM_Start+0xf6>
 8006100:	687b      	ldr	r3, [r7, #4]
 8006102:	2202      	movs	r2, #2
 8006104:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8006108:	e003      	b.n	8006112 <HAL_TIM_PWM_Start+0xfe>
 800610a:	687b      	ldr	r3, [r7, #4]
 800610c:	2202      	movs	r2, #2
 800610e:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8006112:	687b      	ldr	r3, [r7, #4]
 8006114:	681b      	ldr	r3, [r3, #0]
 8006116:	2201      	movs	r2, #1
 8006118:	6839      	ldr	r1, [r7, #0]
 800611a:	4618      	mov	r0, r3
 800611c:	f000 fd2c 	bl	8006b78 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8006120:	687b      	ldr	r3, [r7, #4]
 8006122:	681b      	ldr	r3, [r3, #0]
 8006124:	4a3d      	ldr	r2, [pc, #244]	@ (800621c <HAL_TIM_PWM_Start+0x208>)
 8006126:	4293      	cmp	r3, r2
 8006128:	d013      	beq.n	8006152 <HAL_TIM_PWM_Start+0x13e>
 800612a:	687b      	ldr	r3, [r7, #4]
 800612c:	681b      	ldr	r3, [r3, #0]
 800612e:	4a3c      	ldr	r2, [pc, #240]	@ (8006220 <HAL_TIM_PWM_Start+0x20c>)
 8006130:	4293      	cmp	r3, r2
 8006132:	d00e      	beq.n	8006152 <HAL_TIM_PWM_Start+0x13e>
 8006134:	687b      	ldr	r3, [r7, #4]
 8006136:	681b      	ldr	r3, [r3, #0]
 8006138:	4a3a      	ldr	r2, [pc, #232]	@ (8006224 <HAL_TIM_PWM_Start+0x210>)
 800613a:	4293      	cmp	r3, r2
 800613c:	d009      	beq.n	8006152 <HAL_TIM_PWM_Start+0x13e>
 800613e:	687b      	ldr	r3, [r7, #4]
 8006140:	681b      	ldr	r3, [r3, #0]
 8006142:	4a39      	ldr	r2, [pc, #228]	@ (8006228 <HAL_TIM_PWM_Start+0x214>)
 8006144:	4293      	cmp	r3, r2
 8006146:	d004      	beq.n	8006152 <HAL_TIM_PWM_Start+0x13e>
 8006148:	687b      	ldr	r3, [r7, #4]
 800614a:	681b      	ldr	r3, [r3, #0]
 800614c:	4a37      	ldr	r2, [pc, #220]	@ (800622c <HAL_TIM_PWM_Start+0x218>)
 800614e:	4293      	cmp	r3, r2
 8006150:	d101      	bne.n	8006156 <HAL_TIM_PWM_Start+0x142>
 8006152:	2301      	movs	r3, #1
 8006154:	e000      	b.n	8006158 <HAL_TIM_PWM_Start+0x144>
 8006156:	2300      	movs	r3, #0
 8006158:	2b00      	cmp	r3, #0
 800615a:	d007      	beq.n	800616c <HAL_TIM_PWM_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800615c:	687b      	ldr	r3, [r7, #4]
 800615e:	681b      	ldr	r3, [r3, #0]
 8006160:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8006162:	687b      	ldr	r3, [r7, #4]
 8006164:	681b      	ldr	r3, [r3, #0]
 8006166:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800616a:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800616c:	687b      	ldr	r3, [r7, #4]
 800616e:	681b      	ldr	r3, [r3, #0]
 8006170:	4a2a      	ldr	r2, [pc, #168]	@ (800621c <HAL_TIM_PWM_Start+0x208>)
 8006172:	4293      	cmp	r3, r2
 8006174:	d02c      	beq.n	80061d0 <HAL_TIM_PWM_Start+0x1bc>
 8006176:	687b      	ldr	r3, [r7, #4]
 8006178:	681b      	ldr	r3, [r3, #0]
 800617a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800617e:	d027      	beq.n	80061d0 <HAL_TIM_PWM_Start+0x1bc>
 8006180:	687b      	ldr	r3, [r7, #4]
 8006182:	681b      	ldr	r3, [r3, #0]
 8006184:	4a2a      	ldr	r2, [pc, #168]	@ (8006230 <HAL_TIM_PWM_Start+0x21c>)
 8006186:	4293      	cmp	r3, r2
 8006188:	d022      	beq.n	80061d0 <HAL_TIM_PWM_Start+0x1bc>
 800618a:	687b      	ldr	r3, [r7, #4]
 800618c:	681b      	ldr	r3, [r3, #0]
 800618e:	4a29      	ldr	r2, [pc, #164]	@ (8006234 <HAL_TIM_PWM_Start+0x220>)
 8006190:	4293      	cmp	r3, r2
 8006192:	d01d      	beq.n	80061d0 <HAL_TIM_PWM_Start+0x1bc>
 8006194:	687b      	ldr	r3, [r7, #4]
 8006196:	681b      	ldr	r3, [r3, #0]
 8006198:	4a27      	ldr	r2, [pc, #156]	@ (8006238 <HAL_TIM_PWM_Start+0x224>)
 800619a:	4293      	cmp	r3, r2
 800619c:	d018      	beq.n	80061d0 <HAL_TIM_PWM_Start+0x1bc>
 800619e:	687b      	ldr	r3, [r7, #4]
 80061a0:	681b      	ldr	r3, [r3, #0]
 80061a2:	4a1f      	ldr	r2, [pc, #124]	@ (8006220 <HAL_TIM_PWM_Start+0x20c>)
 80061a4:	4293      	cmp	r3, r2
 80061a6:	d013      	beq.n	80061d0 <HAL_TIM_PWM_Start+0x1bc>
 80061a8:	687b      	ldr	r3, [r7, #4]
 80061aa:	681b      	ldr	r3, [r3, #0]
 80061ac:	4a23      	ldr	r2, [pc, #140]	@ (800623c <HAL_TIM_PWM_Start+0x228>)
 80061ae:	4293      	cmp	r3, r2
 80061b0:	d00e      	beq.n	80061d0 <HAL_TIM_PWM_Start+0x1bc>
 80061b2:	687b      	ldr	r3, [r7, #4]
 80061b4:	681b      	ldr	r3, [r3, #0]
 80061b6:	4a1b      	ldr	r2, [pc, #108]	@ (8006224 <HAL_TIM_PWM_Start+0x210>)
 80061b8:	4293      	cmp	r3, r2
 80061ba:	d009      	beq.n	80061d0 <HAL_TIM_PWM_Start+0x1bc>
 80061bc:	687b      	ldr	r3, [r7, #4]
 80061be:	681b      	ldr	r3, [r3, #0]
 80061c0:	4a1f      	ldr	r2, [pc, #124]	@ (8006240 <HAL_TIM_PWM_Start+0x22c>)
 80061c2:	4293      	cmp	r3, r2
 80061c4:	d004      	beq.n	80061d0 <HAL_TIM_PWM_Start+0x1bc>
 80061c6:	687b      	ldr	r3, [r7, #4]
 80061c8:	681b      	ldr	r3, [r3, #0]
 80061ca:	4a1e      	ldr	r2, [pc, #120]	@ (8006244 <HAL_TIM_PWM_Start+0x230>)
 80061cc:	4293      	cmp	r3, r2
 80061ce:	d115      	bne.n	80061fc <HAL_TIM_PWM_Start+0x1e8>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80061d0:	687b      	ldr	r3, [r7, #4]
 80061d2:	681b      	ldr	r3, [r3, #0]
 80061d4:	689a      	ldr	r2, [r3, #8]
 80061d6:	4b1c      	ldr	r3, [pc, #112]	@ (8006248 <HAL_TIM_PWM_Start+0x234>)
 80061d8:	4013      	ands	r3, r2
 80061da:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80061dc:	68fb      	ldr	r3, [r7, #12]
 80061de:	2b06      	cmp	r3, #6
 80061e0:	d015      	beq.n	800620e <HAL_TIM_PWM_Start+0x1fa>
 80061e2:	68fb      	ldr	r3, [r7, #12]
 80061e4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80061e8:	d011      	beq.n	800620e <HAL_TIM_PWM_Start+0x1fa>
    {
      __HAL_TIM_ENABLE(htim);
 80061ea:	687b      	ldr	r3, [r7, #4]
 80061ec:	681b      	ldr	r3, [r3, #0]
 80061ee:	681a      	ldr	r2, [r3, #0]
 80061f0:	687b      	ldr	r3, [r7, #4]
 80061f2:	681b      	ldr	r3, [r3, #0]
 80061f4:	f042 0201 	orr.w	r2, r2, #1
 80061f8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80061fa:	e008      	b.n	800620e <HAL_TIM_PWM_Start+0x1fa>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80061fc:	687b      	ldr	r3, [r7, #4]
 80061fe:	681b      	ldr	r3, [r3, #0]
 8006200:	681a      	ldr	r2, [r3, #0]
 8006202:	687b      	ldr	r3, [r7, #4]
 8006204:	681b      	ldr	r3, [r3, #0]
 8006206:	f042 0201 	orr.w	r2, r2, #1
 800620a:	601a      	str	r2, [r3, #0]
 800620c:	e000      	b.n	8006210 <HAL_TIM_PWM_Start+0x1fc>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800620e:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8006210:	2300      	movs	r3, #0
}
 8006212:	4618      	mov	r0, r3
 8006214:	3710      	adds	r7, #16
 8006216:	46bd      	mov	sp, r7
 8006218:	bd80      	pop	{r7, pc}
 800621a:	bf00      	nop
 800621c:	40010000 	.word	0x40010000
 8006220:	40010400 	.word	0x40010400
 8006224:	40014000 	.word	0x40014000
 8006228:	40014400 	.word	0x40014400
 800622c:	40014800 	.word	0x40014800
 8006230:	40000400 	.word	0x40000400
 8006234:	40000800 	.word	0x40000800
 8006238:	40000c00 	.word	0x40000c00
 800623c:	40001800 	.word	0x40001800
 8006240:	4000e000 	.word	0x4000e000
 8006244:	4000e400 	.word	0x4000e400
 8006248:	00010007 	.word	0x00010007

0800624c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800624c:	b580      	push	{r7, lr}
 800624e:	b086      	sub	sp, #24
 8006250:	af00      	add	r7, sp, #0
 8006252:	60f8      	str	r0, [r7, #12]
 8006254:	60b9      	str	r1, [r7, #8]
 8006256:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006258:	2300      	movs	r3, #0
 800625a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800625c:	68fb      	ldr	r3, [r7, #12]
 800625e:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8006262:	2b01      	cmp	r3, #1
 8006264:	d101      	bne.n	800626a <HAL_TIM_PWM_ConfigChannel+0x1e>
 8006266:	2302      	movs	r3, #2
 8006268:	e0ff      	b.n	800646a <HAL_TIM_PWM_ConfigChannel+0x21e>
 800626a:	68fb      	ldr	r3, [r7, #12]
 800626c:	2201      	movs	r2, #1
 800626e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8006272:	687b      	ldr	r3, [r7, #4]
 8006274:	2b14      	cmp	r3, #20
 8006276:	f200 80f0 	bhi.w	800645a <HAL_TIM_PWM_ConfigChannel+0x20e>
 800627a:	a201      	add	r2, pc, #4	@ (adr r2, 8006280 <HAL_TIM_PWM_ConfigChannel+0x34>)
 800627c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006280:	080062d5 	.word	0x080062d5
 8006284:	0800645b 	.word	0x0800645b
 8006288:	0800645b 	.word	0x0800645b
 800628c:	0800645b 	.word	0x0800645b
 8006290:	08006315 	.word	0x08006315
 8006294:	0800645b 	.word	0x0800645b
 8006298:	0800645b 	.word	0x0800645b
 800629c:	0800645b 	.word	0x0800645b
 80062a0:	08006357 	.word	0x08006357
 80062a4:	0800645b 	.word	0x0800645b
 80062a8:	0800645b 	.word	0x0800645b
 80062ac:	0800645b 	.word	0x0800645b
 80062b0:	08006397 	.word	0x08006397
 80062b4:	0800645b 	.word	0x0800645b
 80062b8:	0800645b 	.word	0x0800645b
 80062bc:	0800645b 	.word	0x0800645b
 80062c0:	080063d9 	.word	0x080063d9
 80062c4:	0800645b 	.word	0x0800645b
 80062c8:	0800645b 	.word	0x0800645b
 80062cc:	0800645b 	.word	0x0800645b
 80062d0:	08006419 	.word	0x08006419
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80062d4:	68fb      	ldr	r3, [r7, #12]
 80062d6:	681b      	ldr	r3, [r3, #0]
 80062d8:	68b9      	ldr	r1, [r7, #8]
 80062da:	4618      	mov	r0, r3
 80062dc:	f000 f976 	bl	80065cc <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80062e0:	68fb      	ldr	r3, [r7, #12]
 80062e2:	681b      	ldr	r3, [r3, #0]
 80062e4:	699a      	ldr	r2, [r3, #24]
 80062e6:	68fb      	ldr	r3, [r7, #12]
 80062e8:	681b      	ldr	r3, [r3, #0]
 80062ea:	f042 0208 	orr.w	r2, r2, #8
 80062ee:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80062f0:	68fb      	ldr	r3, [r7, #12]
 80062f2:	681b      	ldr	r3, [r3, #0]
 80062f4:	699a      	ldr	r2, [r3, #24]
 80062f6:	68fb      	ldr	r3, [r7, #12]
 80062f8:	681b      	ldr	r3, [r3, #0]
 80062fa:	f022 0204 	bic.w	r2, r2, #4
 80062fe:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8006300:	68fb      	ldr	r3, [r7, #12]
 8006302:	681b      	ldr	r3, [r3, #0]
 8006304:	6999      	ldr	r1, [r3, #24]
 8006306:	68bb      	ldr	r3, [r7, #8]
 8006308:	691a      	ldr	r2, [r3, #16]
 800630a:	68fb      	ldr	r3, [r7, #12]
 800630c:	681b      	ldr	r3, [r3, #0]
 800630e:	430a      	orrs	r2, r1
 8006310:	619a      	str	r2, [r3, #24]
      break;
 8006312:	e0a5      	b.n	8006460 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8006314:	68fb      	ldr	r3, [r7, #12]
 8006316:	681b      	ldr	r3, [r3, #0]
 8006318:	68b9      	ldr	r1, [r7, #8]
 800631a:	4618      	mov	r0, r3
 800631c:	f000 f9e6 	bl	80066ec <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8006320:	68fb      	ldr	r3, [r7, #12]
 8006322:	681b      	ldr	r3, [r3, #0]
 8006324:	699a      	ldr	r2, [r3, #24]
 8006326:	68fb      	ldr	r3, [r7, #12]
 8006328:	681b      	ldr	r3, [r3, #0]
 800632a:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800632e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8006330:	68fb      	ldr	r3, [r7, #12]
 8006332:	681b      	ldr	r3, [r3, #0]
 8006334:	699a      	ldr	r2, [r3, #24]
 8006336:	68fb      	ldr	r3, [r7, #12]
 8006338:	681b      	ldr	r3, [r3, #0]
 800633a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800633e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8006340:	68fb      	ldr	r3, [r7, #12]
 8006342:	681b      	ldr	r3, [r3, #0]
 8006344:	6999      	ldr	r1, [r3, #24]
 8006346:	68bb      	ldr	r3, [r7, #8]
 8006348:	691b      	ldr	r3, [r3, #16]
 800634a:	021a      	lsls	r2, r3, #8
 800634c:	68fb      	ldr	r3, [r7, #12]
 800634e:	681b      	ldr	r3, [r3, #0]
 8006350:	430a      	orrs	r2, r1
 8006352:	619a      	str	r2, [r3, #24]
      break;
 8006354:	e084      	b.n	8006460 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8006356:	68fb      	ldr	r3, [r7, #12]
 8006358:	681b      	ldr	r3, [r3, #0]
 800635a:	68b9      	ldr	r1, [r7, #8]
 800635c:	4618      	mov	r0, r3
 800635e:	f000 fa4f 	bl	8006800 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8006362:	68fb      	ldr	r3, [r7, #12]
 8006364:	681b      	ldr	r3, [r3, #0]
 8006366:	69da      	ldr	r2, [r3, #28]
 8006368:	68fb      	ldr	r3, [r7, #12]
 800636a:	681b      	ldr	r3, [r3, #0]
 800636c:	f042 0208 	orr.w	r2, r2, #8
 8006370:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8006372:	68fb      	ldr	r3, [r7, #12]
 8006374:	681b      	ldr	r3, [r3, #0]
 8006376:	69da      	ldr	r2, [r3, #28]
 8006378:	68fb      	ldr	r3, [r7, #12]
 800637a:	681b      	ldr	r3, [r3, #0]
 800637c:	f022 0204 	bic.w	r2, r2, #4
 8006380:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8006382:	68fb      	ldr	r3, [r7, #12]
 8006384:	681b      	ldr	r3, [r3, #0]
 8006386:	69d9      	ldr	r1, [r3, #28]
 8006388:	68bb      	ldr	r3, [r7, #8]
 800638a:	691a      	ldr	r2, [r3, #16]
 800638c:	68fb      	ldr	r3, [r7, #12]
 800638e:	681b      	ldr	r3, [r3, #0]
 8006390:	430a      	orrs	r2, r1
 8006392:	61da      	str	r2, [r3, #28]
      break;
 8006394:	e064      	b.n	8006460 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8006396:	68fb      	ldr	r3, [r7, #12]
 8006398:	681b      	ldr	r3, [r3, #0]
 800639a:	68b9      	ldr	r1, [r7, #8]
 800639c:	4618      	mov	r0, r3
 800639e:	f000 fab7 	bl	8006910 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80063a2:	68fb      	ldr	r3, [r7, #12]
 80063a4:	681b      	ldr	r3, [r3, #0]
 80063a6:	69da      	ldr	r2, [r3, #28]
 80063a8:	68fb      	ldr	r3, [r7, #12]
 80063aa:	681b      	ldr	r3, [r3, #0]
 80063ac:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80063b0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80063b2:	68fb      	ldr	r3, [r7, #12]
 80063b4:	681b      	ldr	r3, [r3, #0]
 80063b6:	69da      	ldr	r2, [r3, #28]
 80063b8:	68fb      	ldr	r3, [r7, #12]
 80063ba:	681b      	ldr	r3, [r3, #0]
 80063bc:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80063c0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80063c2:	68fb      	ldr	r3, [r7, #12]
 80063c4:	681b      	ldr	r3, [r3, #0]
 80063c6:	69d9      	ldr	r1, [r3, #28]
 80063c8:	68bb      	ldr	r3, [r7, #8]
 80063ca:	691b      	ldr	r3, [r3, #16]
 80063cc:	021a      	lsls	r2, r3, #8
 80063ce:	68fb      	ldr	r3, [r7, #12]
 80063d0:	681b      	ldr	r3, [r3, #0]
 80063d2:	430a      	orrs	r2, r1
 80063d4:	61da      	str	r2, [r3, #28]
      break;
 80063d6:	e043      	b.n	8006460 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 80063d8:	68fb      	ldr	r3, [r7, #12]
 80063da:	681b      	ldr	r3, [r3, #0]
 80063dc:	68b9      	ldr	r1, [r7, #8]
 80063de:	4618      	mov	r0, r3
 80063e0:	f000 fb00 	bl	80069e4 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 80063e4:	68fb      	ldr	r3, [r7, #12]
 80063e6:	681b      	ldr	r3, [r3, #0]
 80063e8:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 80063ea:	68fb      	ldr	r3, [r7, #12]
 80063ec:	681b      	ldr	r3, [r3, #0]
 80063ee:	f042 0208 	orr.w	r2, r2, #8
 80063f2:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 80063f4:	68fb      	ldr	r3, [r7, #12]
 80063f6:	681b      	ldr	r3, [r3, #0]
 80063f8:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 80063fa:	68fb      	ldr	r3, [r7, #12]
 80063fc:	681b      	ldr	r3, [r3, #0]
 80063fe:	f022 0204 	bic.w	r2, r2, #4
 8006402:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8006404:	68fb      	ldr	r3, [r7, #12]
 8006406:	681b      	ldr	r3, [r3, #0]
 8006408:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 800640a:	68bb      	ldr	r3, [r7, #8]
 800640c:	691a      	ldr	r2, [r3, #16]
 800640e:	68fb      	ldr	r3, [r7, #12]
 8006410:	681b      	ldr	r3, [r3, #0]
 8006412:	430a      	orrs	r2, r1
 8006414:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 8006416:	e023      	b.n	8006460 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8006418:	68fb      	ldr	r3, [r7, #12]
 800641a:	681b      	ldr	r3, [r3, #0]
 800641c:	68b9      	ldr	r1, [r7, #8]
 800641e:	4618      	mov	r0, r3
 8006420:	f000 fb44 	bl	8006aac <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8006424:	68fb      	ldr	r3, [r7, #12]
 8006426:	681b      	ldr	r3, [r3, #0]
 8006428:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800642a:	68fb      	ldr	r3, [r7, #12]
 800642c:	681b      	ldr	r3, [r3, #0]
 800642e:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8006432:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8006434:	68fb      	ldr	r3, [r7, #12]
 8006436:	681b      	ldr	r3, [r3, #0]
 8006438:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800643a:	68fb      	ldr	r3, [r7, #12]
 800643c:	681b      	ldr	r3, [r3, #0]
 800643e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8006442:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8006444:	68fb      	ldr	r3, [r7, #12]
 8006446:	681b      	ldr	r3, [r3, #0]
 8006448:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 800644a:	68bb      	ldr	r3, [r7, #8]
 800644c:	691b      	ldr	r3, [r3, #16]
 800644e:	021a      	lsls	r2, r3, #8
 8006450:	68fb      	ldr	r3, [r7, #12]
 8006452:	681b      	ldr	r3, [r3, #0]
 8006454:	430a      	orrs	r2, r1
 8006456:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 8006458:	e002      	b.n	8006460 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 800645a:	2301      	movs	r3, #1
 800645c:	75fb      	strb	r3, [r7, #23]
      break;
 800645e:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8006460:	68fb      	ldr	r3, [r7, #12]
 8006462:	2200      	movs	r2, #0
 8006464:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8006468:	7dfb      	ldrb	r3, [r7, #23]
}
 800646a:	4618      	mov	r0, r3
 800646c:	3718      	adds	r7, #24
 800646e:	46bd      	mov	sp, r7
 8006470:	bd80      	pop	{r7, pc}
 8006472:	bf00      	nop

08006474 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8006474:	b480      	push	{r7}
 8006476:	b085      	sub	sp, #20
 8006478:	af00      	add	r7, sp, #0
 800647a:	6078      	str	r0, [r7, #4]
 800647c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800647e:	687b      	ldr	r3, [r7, #4]
 8006480:	681b      	ldr	r3, [r3, #0]
 8006482:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006484:	687b      	ldr	r3, [r7, #4]
 8006486:	4a47      	ldr	r2, [pc, #284]	@ (80065a4 <TIM_Base_SetConfig+0x130>)
 8006488:	4293      	cmp	r3, r2
 800648a:	d013      	beq.n	80064b4 <TIM_Base_SetConfig+0x40>
 800648c:	687b      	ldr	r3, [r7, #4]
 800648e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006492:	d00f      	beq.n	80064b4 <TIM_Base_SetConfig+0x40>
 8006494:	687b      	ldr	r3, [r7, #4]
 8006496:	4a44      	ldr	r2, [pc, #272]	@ (80065a8 <TIM_Base_SetConfig+0x134>)
 8006498:	4293      	cmp	r3, r2
 800649a:	d00b      	beq.n	80064b4 <TIM_Base_SetConfig+0x40>
 800649c:	687b      	ldr	r3, [r7, #4]
 800649e:	4a43      	ldr	r2, [pc, #268]	@ (80065ac <TIM_Base_SetConfig+0x138>)
 80064a0:	4293      	cmp	r3, r2
 80064a2:	d007      	beq.n	80064b4 <TIM_Base_SetConfig+0x40>
 80064a4:	687b      	ldr	r3, [r7, #4]
 80064a6:	4a42      	ldr	r2, [pc, #264]	@ (80065b0 <TIM_Base_SetConfig+0x13c>)
 80064a8:	4293      	cmp	r3, r2
 80064aa:	d003      	beq.n	80064b4 <TIM_Base_SetConfig+0x40>
 80064ac:	687b      	ldr	r3, [r7, #4]
 80064ae:	4a41      	ldr	r2, [pc, #260]	@ (80065b4 <TIM_Base_SetConfig+0x140>)
 80064b0:	4293      	cmp	r3, r2
 80064b2:	d108      	bne.n	80064c6 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80064b4:	68fb      	ldr	r3, [r7, #12]
 80064b6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80064ba:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80064bc:	683b      	ldr	r3, [r7, #0]
 80064be:	685b      	ldr	r3, [r3, #4]
 80064c0:	68fa      	ldr	r2, [r7, #12]
 80064c2:	4313      	orrs	r3, r2
 80064c4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80064c6:	687b      	ldr	r3, [r7, #4]
 80064c8:	4a36      	ldr	r2, [pc, #216]	@ (80065a4 <TIM_Base_SetConfig+0x130>)
 80064ca:	4293      	cmp	r3, r2
 80064cc:	d027      	beq.n	800651e <TIM_Base_SetConfig+0xaa>
 80064ce:	687b      	ldr	r3, [r7, #4]
 80064d0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80064d4:	d023      	beq.n	800651e <TIM_Base_SetConfig+0xaa>
 80064d6:	687b      	ldr	r3, [r7, #4]
 80064d8:	4a33      	ldr	r2, [pc, #204]	@ (80065a8 <TIM_Base_SetConfig+0x134>)
 80064da:	4293      	cmp	r3, r2
 80064dc:	d01f      	beq.n	800651e <TIM_Base_SetConfig+0xaa>
 80064de:	687b      	ldr	r3, [r7, #4]
 80064e0:	4a32      	ldr	r2, [pc, #200]	@ (80065ac <TIM_Base_SetConfig+0x138>)
 80064e2:	4293      	cmp	r3, r2
 80064e4:	d01b      	beq.n	800651e <TIM_Base_SetConfig+0xaa>
 80064e6:	687b      	ldr	r3, [r7, #4]
 80064e8:	4a31      	ldr	r2, [pc, #196]	@ (80065b0 <TIM_Base_SetConfig+0x13c>)
 80064ea:	4293      	cmp	r3, r2
 80064ec:	d017      	beq.n	800651e <TIM_Base_SetConfig+0xaa>
 80064ee:	687b      	ldr	r3, [r7, #4]
 80064f0:	4a30      	ldr	r2, [pc, #192]	@ (80065b4 <TIM_Base_SetConfig+0x140>)
 80064f2:	4293      	cmp	r3, r2
 80064f4:	d013      	beq.n	800651e <TIM_Base_SetConfig+0xaa>
 80064f6:	687b      	ldr	r3, [r7, #4]
 80064f8:	4a2f      	ldr	r2, [pc, #188]	@ (80065b8 <TIM_Base_SetConfig+0x144>)
 80064fa:	4293      	cmp	r3, r2
 80064fc:	d00f      	beq.n	800651e <TIM_Base_SetConfig+0xaa>
 80064fe:	687b      	ldr	r3, [r7, #4]
 8006500:	4a2e      	ldr	r2, [pc, #184]	@ (80065bc <TIM_Base_SetConfig+0x148>)
 8006502:	4293      	cmp	r3, r2
 8006504:	d00b      	beq.n	800651e <TIM_Base_SetConfig+0xaa>
 8006506:	687b      	ldr	r3, [r7, #4]
 8006508:	4a2d      	ldr	r2, [pc, #180]	@ (80065c0 <TIM_Base_SetConfig+0x14c>)
 800650a:	4293      	cmp	r3, r2
 800650c:	d007      	beq.n	800651e <TIM_Base_SetConfig+0xaa>
 800650e:	687b      	ldr	r3, [r7, #4]
 8006510:	4a2c      	ldr	r2, [pc, #176]	@ (80065c4 <TIM_Base_SetConfig+0x150>)
 8006512:	4293      	cmp	r3, r2
 8006514:	d003      	beq.n	800651e <TIM_Base_SetConfig+0xaa>
 8006516:	687b      	ldr	r3, [r7, #4]
 8006518:	4a2b      	ldr	r2, [pc, #172]	@ (80065c8 <TIM_Base_SetConfig+0x154>)
 800651a:	4293      	cmp	r3, r2
 800651c:	d108      	bne.n	8006530 <TIM_Base_SetConfig+0xbc>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800651e:	68fb      	ldr	r3, [r7, #12]
 8006520:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006524:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006526:	683b      	ldr	r3, [r7, #0]
 8006528:	68db      	ldr	r3, [r3, #12]
 800652a:	68fa      	ldr	r2, [r7, #12]
 800652c:	4313      	orrs	r3, r2
 800652e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006530:	68fb      	ldr	r3, [r7, #12]
 8006532:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8006536:	683b      	ldr	r3, [r7, #0]
 8006538:	695b      	ldr	r3, [r3, #20]
 800653a:	4313      	orrs	r3, r2
 800653c:	60fb      	str	r3, [r7, #12]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800653e:	683b      	ldr	r3, [r7, #0]
 8006540:	689a      	ldr	r2, [r3, #8]
 8006542:	687b      	ldr	r3, [r7, #4]
 8006544:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006546:	683b      	ldr	r3, [r7, #0]
 8006548:	681a      	ldr	r2, [r3, #0]
 800654a:	687b      	ldr	r3, [r7, #4]
 800654c:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800654e:	687b      	ldr	r3, [r7, #4]
 8006550:	4a14      	ldr	r2, [pc, #80]	@ (80065a4 <TIM_Base_SetConfig+0x130>)
 8006552:	4293      	cmp	r3, r2
 8006554:	d00f      	beq.n	8006576 <TIM_Base_SetConfig+0x102>
 8006556:	687b      	ldr	r3, [r7, #4]
 8006558:	4a16      	ldr	r2, [pc, #88]	@ (80065b4 <TIM_Base_SetConfig+0x140>)
 800655a:	4293      	cmp	r3, r2
 800655c:	d00b      	beq.n	8006576 <TIM_Base_SetConfig+0x102>
 800655e:	687b      	ldr	r3, [r7, #4]
 8006560:	4a15      	ldr	r2, [pc, #84]	@ (80065b8 <TIM_Base_SetConfig+0x144>)
 8006562:	4293      	cmp	r3, r2
 8006564:	d007      	beq.n	8006576 <TIM_Base_SetConfig+0x102>
 8006566:	687b      	ldr	r3, [r7, #4]
 8006568:	4a14      	ldr	r2, [pc, #80]	@ (80065bc <TIM_Base_SetConfig+0x148>)
 800656a:	4293      	cmp	r3, r2
 800656c:	d003      	beq.n	8006576 <TIM_Base_SetConfig+0x102>
 800656e:	687b      	ldr	r3, [r7, #4]
 8006570:	4a13      	ldr	r2, [pc, #76]	@ (80065c0 <TIM_Base_SetConfig+0x14c>)
 8006572:	4293      	cmp	r3, r2
 8006574:	d103      	bne.n	800657e <TIM_Base_SetConfig+0x10a>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006576:	683b      	ldr	r3, [r7, #0]
 8006578:	691a      	ldr	r2, [r3, #16]
 800657a:	687b      	ldr	r3, [r7, #4]
 800657c:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Disable Update Event (UEV) with Update Generation (UG)
     by changing Update Request Source (URS) to avoid Update flag (UIF) */
  SET_BIT(TIMx->CR1, TIM_CR1_URS);
 800657e:	687b      	ldr	r3, [r7, #4]
 8006580:	681b      	ldr	r3, [r3, #0]
 8006582:	f043 0204 	orr.w	r2, r3, #4
 8006586:	687b      	ldr	r3, [r7, #4]
 8006588:	601a      	str	r2, [r3, #0]

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800658a:	687b      	ldr	r3, [r7, #4]
 800658c:	2201      	movs	r2, #1
 800658e:	615a      	str	r2, [r3, #20]

  TIMx->CR1 = tmpcr1;
 8006590:	687b      	ldr	r3, [r7, #4]
 8006592:	68fa      	ldr	r2, [r7, #12]
 8006594:	601a      	str	r2, [r3, #0]
}
 8006596:	bf00      	nop
 8006598:	3714      	adds	r7, #20
 800659a:	46bd      	mov	sp, r7
 800659c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065a0:	4770      	bx	lr
 80065a2:	bf00      	nop
 80065a4:	40010000 	.word	0x40010000
 80065a8:	40000400 	.word	0x40000400
 80065ac:	40000800 	.word	0x40000800
 80065b0:	40000c00 	.word	0x40000c00
 80065b4:	40010400 	.word	0x40010400
 80065b8:	40014000 	.word	0x40014000
 80065bc:	40014400 	.word	0x40014400
 80065c0:	40014800 	.word	0x40014800
 80065c4:	4000e000 	.word	0x4000e000
 80065c8:	4000e400 	.word	0x4000e400

080065cc <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80065cc:	b480      	push	{r7}
 80065ce:	b087      	sub	sp, #28
 80065d0:	af00      	add	r7, sp, #0
 80065d2:	6078      	str	r0, [r7, #4]
 80065d4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80065d6:	687b      	ldr	r3, [r7, #4]
 80065d8:	6a1b      	ldr	r3, [r3, #32]
 80065da:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80065dc:	687b      	ldr	r3, [r7, #4]
 80065de:	6a1b      	ldr	r3, [r3, #32]
 80065e0:	f023 0201 	bic.w	r2, r3, #1
 80065e4:	687b      	ldr	r3, [r7, #4]
 80065e6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80065e8:	687b      	ldr	r3, [r7, #4]
 80065ea:	685b      	ldr	r3, [r3, #4]
 80065ec:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80065ee:	687b      	ldr	r3, [r7, #4]
 80065f0:	699b      	ldr	r3, [r3, #24]
 80065f2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80065f4:	68fa      	ldr	r2, [r7, #12]
 80065f6:	4b37      	ldr	r3, [pc, #220]	@ (80066d4 <TIM_OC1_SetConfig+0x108>)
 80065f8:	4013      	ands	r3, r2
 80065fa:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80065fc:	68fb      	ldr	r3, [r7, #12]
 80065fe:	f023 0303 	bic.w	r3, r3, #3
 8006602:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006604:	683b      	ldr	r3, [r7, #0]
 8006606:	681b      	ldr	r3, [r3, #0]
 8006608:	68fa      	ldr	r2, [r7, #12]
 800660a:	4313      	orrs	r3, r2
 800660c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800660e:	697b      	ldr	r3, [r7, #20]
 8006610:	f023 0302 	bic.w	r3, r3, #2
 8006614:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8006616:	683b      	ldr	r3, [r7, #0]
 8006618:	689b      	ldr	r3, [r3, #8]
 800661a:	697a      	ldr	r2, [r7, #20]
 800661c:	4313      	orrs	r3, r2
 800661e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8006620:	687b      	ldr	r3, [r7, #4]
 8006622:	4a2d      	ldr	r2, [pc, #180]	@ (80066d8 <TIM_OC1_SetConfig+0x10c>)
 8006624:	4293      	cmp	r3, r2
 8006626:	d00f      	beq.n	8006648 <TIM_OC1_SetConfig+0x7c>
 8006628:	687b      	ldr	r3, [r7, #4]
 800662a:	4a2c      	ldr	r2, [pc, #176]	@ (80066dc <TIM_OC1_SetConfig+0x110>)
 800662c:	4293      	cmp	r3, r2
 800662e:	d00b      	beq.n	8006648 <TIM_OC1_SetConfig+0x7c>
 8006630:	687b      	ldr	r3, [r7, #4]
 8006632:	4a2b      	ldr	r2, [pc, #172]	@ (80066e0 <TIM_OC1_SetConfig+0x114>)
 8006634:	4293      	cmp	r3, r2
 8006636:	d007      	beq.n	8006648 <TIM_OC1_SetConfig+0x7c>
 8006638:	687b      	ldr	r3, [r7, #4]
 800663a:	4a2a      	ldr	r2, [pc, #168]	@ (80066e4 <TIM_OC1_SetConfig+0x118>)
 800663c:	4293      	cmp	r3, r2
 800663e:	d003      	beq.n	8006648 <TIM_OC1_SetConfig+0x7c>
 8006640:	687b      	ldr	r3, [r7, #4]
 8006642:	4a29      	ldr	r2, [pc, #164]	@ (80066e8 <TIM_OC1_SetConfig+0x11c>)
 8006644:	4293      	cmp	r3, r2
 8006646:	d10c      	bne.n	8006662 <TIM_OC1_SetConfig+0x96>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8006648:	697b      	ldr	r3, [r7, #20]
 800664a:	f023 0308 	bic.w	r3, r3, #8
 800664e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8006650:	683b      	ldr	r3, [r7, #0]
 8006652:	68db      	ldr	r3, [r3, #12]
 8006654:	697a      	ldr	r2, [r7, #20]
 8006656:	4313      	orrs	r3, r2
 8006658:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800665a:	697b      	ldr	r3, [r7, #20]
 800665c:	f023 0304 	bic.w	r3, r3, #4
 8006660:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006662:	687b      	ldr	r3, [r7, #4]
 8006664:	4a1c      	ldr	r2, [pc, #112]	@ (80066d8 <TIM_OC1_SetConfig+0x10c>)
 8006666:	4293      	cmp	r3, r2
 8006668:	d00f      	beq.n	800668a <TIM_OC1_SetConfig+0xbe>
 800666a:	687b      	ldr	r3, [r7, #4]
 800666c:	4a1b      	ldr	r2, [pc, #108]	@ (80066dc <TIM_OC1_SetConfig+0x110>)
 800666e:	4293      	cmp	r3, r2
 8006670:	d00b      	beq.n	800668a <TIM_OC1_SetConfig+0xbe>
 8006672:	687b      	ldr	r3, [r7, #4]
 8006674:	4a1a      	ldr	r2, [pc, #104]	@ (80066e0 <TIM_OC1_SetConfig+0x114>)
 8006676:	4293      	cmp	r3, r2
 8006678:	d007      	beq.n	800668a <TIM_OC1_SetConfig+0xbe>
 800667a:	687b      	ldr	r3, [r7, #4]
 800667c:	4a19      	ldr	r2, [pc, #100]	@ (80066e4 <TIM_OC1_SetConfig+0x118>)
 800667e:	4293      	cmp	r3, r2
 8006680:	d003      	beq.n	800668a <TIM_OC1_SetConfig+0xbe>
 8006682:	687b      	ldr	r3, [r7, #4]
 8006684:	4a18      	ldr	r2, [pc, #96]	@ (80066e8 <TIM_OC1_SetConfig+0x11c>)
 8006686:	4293      	cmp	r3, r2
 8006688:	d111      	bne.n	80066ae <TIM_OC1_SetConfig+0xe2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800668a:	693b      	ldr	r3, [r7, #16]
 800668c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8006690:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8006692:	693b      	ldr	r3, [r7, #16]
 8006694:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8006698:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800669a:	683b      	ldr	r3, [r7, #0]
 800669c:	695b      	ldr	r3, [r3, #20]
 800669e:	693a      	ldr	r2, [r7, #16]
 80066a0:	4313      	orrs	r3, r2
 80066a2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80066a4:	683b      	ldr	r3, [r7, #0]
 80066a6:	699b      	ldr	r3, [r3, #24]
 80066a8:	693a      	ldr	r2, [r7, #16]
 80066aa:	4313      	orrs	r3, r2
 80066ac:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80066ae:	687b      	ldr	r3, [r7, #4]
 80066b0:	693a      	ldr	r2, [r7, #16]
 80066b2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80066b4:	687b      	ldr	r3, [r7, #4]
 80066b6:	68fa      	ldr	r2, [r7, #12]
 80066b8:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80066ba:	683b      	ldr	r3, [r7, #0]
 80066bc:	685a      	ldr	r2, [r3, #4]
 80066be:	687b      	ldr	r3, [r7, #4]
 80066c0:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80066c2:	687b      	ldr	r3, [r7, #4]
 80066c4:	697a      	ldr	r2, [r7, #20]
 80066c6:	621a      	str	r2, [r3, #32]
}
 80066c8:	bf00      	nop
 80066ca:	371c      	adds	r7, #28
 80066cc:	46bd      	mov	sp, r7
 80066ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066d2:	4770      	bx	lr
 80066d4:	fffeff8f 	.word	0xfffeff8f
 80066d8:	40010000 	.word	0x40010000
 80066dc:	40010400 	.word	0x40010400
 80066e0:	40014000 	.word	0x40014000
 80066e4:	40014400 	.word	0x40014400
 80066e8:	40014800 	.word	0x40014800

080066ec <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80066ec:	b480      	push	{r7}
 80066ee:	b087      	sub	sp, #28
 80066f0:	af00      	add	r7, sp, #0
 80066f2:	6078      	str	r0, [r7, #4]
 80066f4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80066f6:	687b      	ldr	r3, [r7, #4]
 80066f8:	6a1b      	ldr	r3, [r3, #32]
 80066fa:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80066fc:	687b      	ldr	r3, [r7, #4]
 80066fe:	6a1b      	ldr	r3, [r3, #32]
 8006700:	f023 0210 	bic.w	r2, r3, #16
 8006704:	687b      	ldr	r3, [r7, #4]
 8006706:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006708:	687b      	ldr	r3, [r7, #4]
 800670a:	685b      	ldr	r3, [r3, #4]
 800670c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800670e:	687b      	ldr	r3, [r7, #4]
 8006710:	699b      	ldr	r3, [r3, #24]
 8006712:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8006714:	68fa      	ldr	r2, [r7, #12]
 8006716:	4b34      	ldr	r3, [pc, #208]	@ (80067e8 <TIM_OC2_SetConfig+0xfc>)
 8006718:	4013      	ands	r3, r2
 800671a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800671c:	68fb      	ldr	r3, [r7, #12]
 800671e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006722:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006724:	683b      	ldr	r3, [r7, #0]
 8006726:	681b      	ldr	r3, [r3, #0]
 8006728:	021b      	lsls	r3, r3, #8
 800672a:	68fa      	ldr	r2, [r7, #12]
 800672c:	4313      	orrs	r3, r2
 800672e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8006730:	697b      	ldr	r3, [r7, #20]
 8006732:	f023 0320 	bic.w	r3, r3, #32
 8006736:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8006738:	683b      	ldr	r3, [r7, #0]
 800673a:	689b      	ldr	r3, [r3, #8]
 800673c:	011b      	lsls	r3, r3, #4
 800673e:	697a      	ldr	r2, [r7, #20]
 8006740:	4313      	orrs	r3, r2
 8006742:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8006744:	687b      	ldr	r3, [r7, #4]
 8006746:	4a29      	ldr	r2, [pc, #164]	@ (80067ec <TIM_OC2_SetConfig+0x100>)
 8006748:	4293      	cmp	r3, r2
 800674a:	d003      	beq.n	8006754 <TIM_OC2_SetConfig+0x68>
 800674c:	687b      	ldr	r3, [r7, #4]
 800674e:	4a28      	ldr	r2, [pc, #160]	@ (80067f0 <TIM_OC2_SetConfig+0x104>)
 8006750:	4293      	cmp	r3, r2
 8006752:	d10d      	bne.n	8006770 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8006754:	697b      	ldr	r3, [r7, #20]
 8006756:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800675a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800675c:	683b      	ldr	r3, [r7, #0]
 800675e:	68db      	ldr	r3, [r3, #12]
 8006760:	011b      	lsls	r3, r3, #4
 8006762:	697a      	ldr	r2, [r7, #20]
 8006764:	4313      	orrs	r3, r2
 8006766:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8006768:	697b      	ldr	r3, [r7, #20]
 800676a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800676e:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006770:	687b      	ldr	r3, [r7, #4]
 8006772:	4a1e      	ldr	r2, [pc, #120]	@ (80067ec <TIM_OC2_SetConfig+0x100>)
 8006774:	4293      	cmp	r3, r2
 8006776:	d00f      	beq.n	8006798 <TIM_OC2_SetConfig+0xac>
 8006778:	687b      	ldr	r3, [r7, #4]
 800677a:	4a1d      	ldr	r2, [pc, #116]	@ (80067f0 <TIM_OC2_SetConfig+0x104>)
 800677c:	4293      	cmp	r3, r2
 800677e:	d00b      	beq.n	8006798 <TIM_OC2_SetConfig+0xac>
 8006780:	687b      	ldr	r3, [r7, #4]
 8006782:	4a1c      	ldr	r2, [pc, #112]	@ (80067f4 <TIM_OC2_SetConfig+0x108>)
 8006784:	4293      	cmp	r3, r2
 8006786:	d007      	beq.n	8006798 <TIM_OC2_SetConfig+0xac>
 8006788:	687b      	ldr	r3, [r7, #4]
 800678a:	4a1b      	ldr	r2, [pc, #108]	@ (80067f8 <TIM_OC2_SetConfig+0x10c>)
 800678c:	4293      	cmp	r3, r2
 800678e:	d003      	beq.n	8006798 <TIM_OC2_SetConfig+0xac>
 8006790:	687b      	ldr	r3, [r7, #4]
 8006792:	4a1a      	ldr	r2, [pc, #104]	@ (80067fc <TIM_OC2_SetConfig+0x110>)
 8006794:	4293      	cmp	r3, r2
 8006796:	d113      	bne.n	80067c0 <TIM_OC2_SetConfig+0xd4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8006798:	693b      	ldr	r3, [r7, #16]
 800679a:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800679e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80067a0:	693b      	ldr	r3, [r7, #16]
 80067a2:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80067a6:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80067a8:	683b      	ldr	r3, [r7, #0]
 80067aa:	695b      	ldr	r3, [r3, #20]
 80067ac:	009b      	lsls	r3, r3, #2
 80067ae:	693a      	ldr	r2, [r7, #16]
 80067b0:	4313      	orrs	r3, r2
 80067b2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80067b4:	683b      	ldr	r3, [r7, #0]
 80067b6:	699b      	ldr	r3, [r3, #24]
 80067b8:	009b      	lsls	r3, r3, #2
 80067ba:	693a      	ldr	r2, [r7, #16]
 80067bc:	4313      	orrs	r3, r2
 80067be:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80067c0:	687b      	ldr	r3, [r7, #4]
 80067c2:	693a      	ldr	r2, [r7, #16]
 80067c4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80067c6:	687b      	ldr	r3, [r7, #4]
 80067c8:	68fa      	ldr	r2, [r7, #12]
 80067ca:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80067cc:	683b      	ldr	r3, [r7, #0]
 80067ce:	685a      	ldr	r2, [r3, #4]
 80067d0:	687b      	ldr	r3, [r7, #4]
 80067d2:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80067d4:	687b      	ldr	r3, [r7, #4]
 80067d6:	697a      	ldr	r2, [r7, #20]
 80067d8:	621a      	str	r2, [r3, #32]
}
 80067da:	bf00      	nop
 80067dc:	371c      	adds	r7, #28
 80067de:	46bd      	mov	sp, r7
 80067e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067e4:	4770      	bx	lr
 80067e6:	bf00      	nop
 80067e8:	feff8fff 	.word	0xfeff8fff
 80067ec:	40010000 	.word	0x40010000
 80067f0:	40010400 	.word	0x40010400
 80067f4:	40014000 	.word	0x40014000
 80067f8:	40014400 	.word	0x40014400
 80067fc:	40014800 	.word	0x40014800

08006800 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006800:	b480      	push	{r7}
 8006802:	b087      	sub	sp, #28
 8006804:	af00      	add	r7, sp, #0
 8006806:	6078      	str	r0, [r7, #4]
 8006808:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800680a:	687b      	ldr	r3, [r7, #4]
 800680c:	6a1b      	ldr	r3, [r3, #32]
 800680e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8006810:	687b      	ldr	r3, [r7, #4]
 8006812:	6a1b      	ldr	r3, [r3, #32]
 8006814:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8006818:	687b      	ldr	r3, [r7, #4]
 800681a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800681c:	687b      	ldr	r3, [r7, #4]
 800681e:	685b      	ldr	r3, [r3, #4]
 8006820:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006822:	687b      	ldr	r3, [r7, #4]
 8006824:	69db      	ldr	r3, [r3, #28]
 8006826:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8006828:	68fa      	ldr	r2, [r7, #12]
 800682a:	4b33      	ldr	r3, [pc, #204]	@ (80068f8 <TIM_OC3_SetConfig+0xf8>)
 800682c:	4013      	ands	r3, r2
 800682e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8006830:	68fb      	ldr	r3, [r7, #12]
 8006832:	f023 0303 	bic.w	r3, r3, #3
 8006836:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006838:	683b      	ldr	r3, [r7, #0]
 800683a:	681b      	ldr	r3, [r3, #0]
 800683c:	68fa      	ldr	r2, [r7, #12]
 800683e:	4313      	orrs	r3, r2
 8006840:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8006842:	697b      	ldr	r3, [r7, #20]
 8006844:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8006848:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800684a:	683b      	ldr	r3, [r7, #0]
 800684c:	689b      	ldr	r3, [r3, #8]
 800684e:	021b      	lsls	r3, r3, #8
 8006850:	697a      	ldr	r2, [r7, #20]
 8006852:	4313      	orrs	r3, r2
 8006854:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8006856:	687b      	ldr	r3, [r7, #4]
 8006858:	4a28      	ldr	r2, [pc, #160]	@ (80068fc <TIM_OC3_SetConfig+0xfc>)
 800685a:	4293      	cmp	r3, r2
 800685c:	d003      	beq.n	8006866 <TIM_OC3_SetConfig+0x66>
 800685e:	687b      	ldr	r3, [r7, #4]
 8006860:	4a27      	ldr	r2, [pc, #156]	@ (8006900 <TIM_OC3_SetConfig+0x100>)
 8006862:	4293      	cmp	r3, r2
 8006864:	d10d      	bne.n	8006882 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8006866:	697b      	ldr	r3, [r7, #20]
 8006868:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800686c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800686e:	683b      	ldr	r3, [r7, #0]
 8006870:	68db      	ldr	r3, [r3, #12]
 8006872:	021b      	lsls	r3, r3, #8
 8006874:	697a      	ldr	r2, [r7, #20]
 8006876:	4313      	orrs	r3, r2
 8006878:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800687a:	697b      	ldr	r3, [r7, #20]
 800687c:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8006880:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006882:	687b      	ldr	r3, [r7, #4]
 8006884:	4a1d      	ldr	r2, [pc, #116]	@ (80068fc <TIM_OC3_SetConfig+0xfc>)
 8006886:	4293      	cmp	r3, r2
 8006888:	d00f      	beq.n	80068aa <TIM_OC3_SetConfig+0xaa>
 800688a:	687b      	ldr	r3, [r7, #4]
 800688c:	4a1c      	ldr	r2, [pc, #112]	@ (8006900 <TIM_OC3_SetConfig+0x100>)
 800688e:	4293      	cmp	r3, r2
 8006890:	d00b      	beq.n	80068aa <TIM_OC3_SetConfig+0xaa>
 8006892:	687b      	ldr	r3, [r7, #4]
 8006894:	4a1b      	ldr	r2, [pc, #108]	@ (8006904 <TIM_OC3_SetConfig+0x104>)
 8006896:	4293      	cmp	r3, r2
 8006898:	d007      	beq.n	80068aa <TIM_OC3_SetConfig+0xaa>
 800689a:	687b      	ldr	r3, [r7, #4]
 800689c:	4a1a      	ldr	r2, [pc, #104]	@ (8006908 <TIM_OC3_SetConfig+0x108>)
 800689e:	4293      	cmp	r3, r2
 80068a0:	d003      	beq.n	80068aa <TIM_OC3_SetConfig+0xaa>
 80068a2:	687b      	ldr	r3, [r7, #4]
 80068a4:	4a19      	ldr	r2, [pc, #100]	@ (800690c <TIM_OC3_SetConfig+0x10c>)
 80068a6:	4293      	cmp	r3, r2
 80068a8:	d113      	bne.n	80068d2 <TIM_OC3_SetConfig+0xd2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80068aa:	693b      	ldr	r3, [r7, #16]
 80068ac:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80068b0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80068b2:	693b      	ldr	r3, [r7, #16]
 80068b4:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80068b8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80068ba:	683b      	ldr	r3, [r7, #0]
 80068bc:	695b      	ldr	r3, [r3, #20]
 80068be:	011b      	lsls	r3, r3, #4
 80068c0:	693a      	ldr	r2, [r7, #16]
 80068c2:	4313      	orrs	r3, r2
 80068c4:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80068c6:	683b      	ldr	r3, [r7, #0]
 80068c8:	699b      	ldr	r3, [r3, #24]
 80068ca:	011b      	lsls	r3, r3, #4
 80068cc:	693a      	ldr	r2, [r7, #16]
 80068ce:	4313      	orrs	r3, r2
 80068d0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80068d2:	687b      	ldr	r3, [r7, #4]
 80068d4:	693a      	ldr	r2, [r7, #16]
 80068d6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80068d8:	687b      	ldr	r3, [r7, #4]
 80068da:	68fa      	ldr	r2, [r7, #12]
 80068dc:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80068de:	683b      	ldr	r3, [r7, #0]
 80068e0:	685a      	ldr	r2, [r3, #4]
 80068e2:	687b      	ldr	r3, [r7, #4]
 80068e4:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80068e6:	687b      	ldr	r3, [r7, #4]
 80068e8:	697a      	ldr	r2, [r7, #20]
 80068ea:	621a      	str	r2, [r3, #32]
}
 80068ec:	bf00      	nop
 80068ee:	371c      	adds	r7, #28
 80068f0:	46bd      	mov	sp, r7
 80068f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068f6:	4770      	bx	lr
 80068f8:	fffeff8f 	.word	0xfffeff8f
 80068fc:	40010000 	.word	0x40010000
 8006900:	40010400 	.word	0x40010400
 8006904:	40014000 	.word	0x40014000
 8006908:	40014400 	.word	0x40014400
 800690c:	40014800 	.word	0x40014800

08006910 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006910:	b480      	push	{r7}
 8006912:	b087      	sub	sp, #28
 8006914:	af00      	add	r7, sp, #0
 8006916:	6078      	str	r0, [r7, #4]
 8006918:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800691a:	687b      	ldr	r3, [r7, #4]
 800691c:	6a1b      	ldr	r3, [r3, #32]
 800691e:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8006920:	687b      	ldr	r3, [r7, #4]
 8006922:	6a1b      	ldr	r3, [r3, #32]
 8006924:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8006928:	687b      	ldr	r3, [r7, #4]
 800692a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800692c:	687b      	ldr	r3, [r7, #4]
 800692e:	685b      	ldr	r3, [r3, #4]
 8006930:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006932:	687b      	ldr	r3, [r7, #4]
 8006934:	69db      	ldr	r3, [r3, #28]
 8006936:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8006938:	68fa      	ldr	r2, [r7, #12]
 800693a:	4b24      	ldr	r3, [pc, #144]	@ (80069cc <TIM_OC4_SetConfig+0xbc>)
 800693c:	4013      	ands	r3, r2
 800693e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8006940:	68fb      	ldr	r3, [r7, #12]
 8006942:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006946:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006948:	683b      	ldr	r3, [r7, #0]
 800694a:	681b      	ldr	r3, [r3, #0]
 800694c:	021b      	lsls	r3, r3, #8
 800694e:	68fa      	ldr	r2, [r7, #12]
 8006950:	4313      	orrs	r3, r2
 8006952:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8006954:	693b      	ldr	r3, [r7, #16]
 8006956:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800695a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800695c:	683b      	ldr	r3, [r7, #0]
 800695e:	689b      	ldr	r3, [r3, #8]
 8006960:	031b      	lsls	r3, r3, #12
 8006962:	693a      	ldr	r2, [r7, #16]
 8006964:	4313      	orrs	r3, r2
 8006966:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006968:	687b      	ldr	r3, [r7, #4]
 800696a:	4a19      	ldr	r2, [pc, #100]	@ (80069d0 <TIM_OC4_SetConfig+0xc0>)
 800696c:	4293      	cmp	r3, r2
 800696e:	d00f      	beq.n	8006990 <TIM_OC4_SetConfig+0x80>
 8006970:	687b      	ldr	r3, [r7, #4]
 8006972:	4a18      	ldr	r2, [pc, #96]	@ (80069d4 <TIM_OC4_SetConfig+0xc4>)
 8006974:	4293      	cmp	r3, r2
 8006976:	d00b      	beq.n	8006990 <TIM_OC4_SetConfig+0x80>
 8006978:	687b      	ldr	r3, [r7, #4]
 800697a:	4a17      	ldr	r2, [pc, #92]	@ (80069d8 <TIM_OC4_SetConfig+0xc8>)
 800697c:	4293      	cmp	r3, r2
 800697e:	d007      	beq.n	8006990 <TIM_OC4_SetConfig+0x80>
 8006980:	687b      	ldr	r3, [r7, #4]
 8006982:	4a16      	ldr	r2, [pc, #88]	@ (80069dc <TIM_OC4_SetConfig+0xcc>)
 8006984:	4293      	cmp	r3, r2
 8006986:	d003      	beq.n	8006990 <TIM_OC4_SetConfig+0x80>
 8006988:	687b      	ldr	r3, [r7, #4]
 800698a:	4a15      	ldr	r2, [pc, #84]	@ (80069e0 <TIM_OC4_SetConfig+0xd0>)
 800698c:	4293      	cmp	r3, r2
 800698e:	d109      	bne.n	80069a4 <TIM_OC4_SetConfig+0x94>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8006990:	697b      	ldr	r3, [r7, #20]
 8006992:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8006996:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8006998:	683b      	ldr	r3, [r7, #0]
 800699a:	695b      	ldr	r3, [r3, #20]
 800699c:	019b      	lsls	r3, r3, #6
 800699e:	697a      	ldr	r2, [r7, #20]
 80069a0:	4313      	orrs	r3, r2
 80069a2:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80069a4:	687b      	ldr	r3, [r7, #4]
 80069a6:	697a      	ldr	r2, [r7, #20]
 80069a8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80069aa:	687b      	ldr	r3, [r7, #4]
 80069ac:	68fa      	ldr	r2, [r7, #12]
 80069ae:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80069b0:	683b      	ldr	r3, [r7, #0]
 80069b2:	685a      	ldr	r2, [r3, #4]
 80069b4:	687b      	ldr	r3, [r7, #4]
 80069b6:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80069b8:	687b      	ldr	r3, [r7, #4]
 80069ba:	693a      	ldr	r2, [r7, #16]
 80069bc:	621a      	str	r2, [r3, #32]
}
 80069be:	bf00      	nop
 80069c0:	371c      	adds	r7, #28
 80069c2:	46bd      	mov	sp, r7
 80069c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069c8:	4770      	bx	lr
 80069ca:	bf00      	nop
 80069cc:	feff8fff 	.word	0xfeff8fff
 80069d0:	40010000 	.word	0x40010000
 80069d4:	40010400 	.word	0x40010400
 80069d8:	40014000 	.word	0x40014000
 80069dc:	40014400 	.word	0x40014400
 80069e0:	40014800 	.word	0x40014800

080069e4 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 80069e4:	b480      	push	{r7}
 80069e6:	b087      	sub	sp, #28
 80069e8:	af00      	add	r7, sp, #0
 80069ea:	6078      	str	r0, [r7, #4]
 80069ec:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80069ee:	687b      	ldr	r3, [r7, #4]
 80069f0:	6a1b      	ldr	r3, [r3, #32]
 80069f2:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 80069f4:	687b      	ldr	r3, [r7, #4]
 80069f6:	6a1b      	ldr	r3, [r3, #32]
 80069f8:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 80069fc:	687b      	ldr	r3, [r7, #4]
 80069fe:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006a00:	687b      	ldr	r3, [r7, #4]
 8006a02:	685b      	ldr	r3, [r3, #4]
 8006a04:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8006a06:	687b      	ldr	r3, [r7, #4]
 8006a08:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006a0a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8006a0c:	68fa      	ldr	r2, [r7, #12]
 8006a0e:	4b21      	ldr	r3, [pc, #132]	@ (8006a94 <TIM_OC5_SetConfig+0xb0>)
 8006a10:	4013      	ands	r3, r2
 8006a12:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006a14:	683b      	ldr	r3, [r7, #0]
 8006a16:	681b      	ldr	r3, [r3, #0]
 8006a18:	68fa      	ldr	r2, [r7, #12]
 8006a1a:	4313      	orrs	r3, r2
 8006a1c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8006a1e:	693b      	ldr	r3, [r7, #16]
 8006a20:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 8006a24:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8006a26:	683b      	ldr	r3, [r7, #0]
 8006a28:	689b      	ldr	r3, [r3, #8]
 8006a2a:	041b      	lsls	r3, r3, #16
 8006a2c:	693a      	ldr	r2, [r7, #16]
 8006a2e:	4313      	orrs	r3, r2
 8006a30:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006a32:	687b      	ldr	r3, [r7, #4]
 8006a34:	4a18      	ldr	r2, [pc, #96]	@ (8006a98 <TIM_OC5_SetConfig+0xb4>)
 8006a36:	4293      	cmp	r3, r2
 8006a38:	d00f      	beq.n	8006a5a <TIM_OC5_SetConfig+0x76>
 8006a3a:	687b      	ldr	r3, [r7, #4]
 8006a3c:	4a17      	ldr	r2, [pc, #92]	@ (8006a9c <TIM_OC5_SetConfig+0xb8>)
 8006a3e:	4293      	cmp	r3, r2
 8006a40:	d00b      	beq.n	8006a5a <TIM_OC5_SetConfig+0x76>
 8006a42:	687b      	ldr	r3, [r7, #4]
 8006a44:	4a16      	ldr	r2, [pc, #88]	@ (8006aa0 <TIM_OC5_SetConfig+0xbc>)
 8006a46:	4293      	cmp	r3, r2
 8006a48:	d007      	beq.n	8006a5a <TIM_OC5_SetConfig+0x76>
 8006a4a:	687b      	ldr	r3, [r7, #4]
 8006a4c:	4a15      	ldr	r2, [pc, #84]	@ (8006aa4 <TIM_OC5_SetConfig+0xc0>)
 8006a4e:	4293      	cmp	r3, r2
 8006a50:	d003      	beq.n	8006a5a <TIM_OC5_SetConfig+0x76>
 8006a52:	687b      	ldr	r3, [r7, #4]
 8006a54:	4a14      	ldr	r2, [pc, #80]	@ (8006aa8 <TIM_OC5_SetConfig+0xc4>)
 8006a56:	4293      	cmp	r3, r2
 8006a58:	d109      	bne.n	8006a6e <TIM_OC5_SetConfig+0x8a>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8006a5a:	697b      	ldr	r3, [r7, #20]
 8006a5c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8006a60:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8006a62:	683b      	ldr	r3, [r7, #0]
 8006a64:	695b      	ldr	r3, [r3, #20]
 8006a66:	021b      	lsls	r3, r3, #8
 8006a68:	697a      	ldr	r2, [r7, #20]
 8006a6a:	4313      	orrs	r3, r2
 8006a6c:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006a6e:	687b      	ldr	r3, [r7, #4]
 8006a70:	697a      	ldr	r2, [r7, #20]
 8006a72:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8006a74:	687b      	ldr	r3, [r7, #4]
 8006a76:	68fa      	ldr	r2, [r7, #12]
 8006a78:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8006a7a:	683b      	ldr	r3, [r7, #0]
 8006a7c:	685a      	ldr	r2, [r3, #4]
 8006a7e:	687b      	ldr	r3, [r7, #4]
 8006a80:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006a82:	687b      	ldr	r3, [r7, #4]
 8006a84:	693a      	ldr	r2, [r7, #16]
 8006a86:	621a      	str	r2, [r3, #32]
}
 8006a88:	bf00      	nop
 8006a8a:	371c      	adds	r7, #28
 8006a8c:	46bd      	mov	sp, r7
 8006a8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a92:	4770      	bx	lr
 8006a94:	fffeff8f 	.word	0xfffeff8f
 8006a98:	40010000 	.word	0x40010000
 8006a9c:	40010400 	.word	0x40010400
 8006aa0:	40014000 	.word	0x40014000
 8006aa4:	40014400 	.word	0x40014400
 8006aa8:	40014800 	.word	0x40014800

08006aac <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8006aac:	b480      	push	{r7}
 8006aae:	b087      	sub	sp, #28
 8006ab0:	af00      	add	r7, sp, #0
 8006ab2:	6078      	str	r0, [r7, #4]
 8006ab4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006ab6:	687b      	ldr	r3, [r7, #4]
 8006ab8:	6a1b      	ldr	r3, [r3, #32]
 8006aba:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8006abc:	687b      	ldr	r3, [r7, #4]
 8006abe:	6a1b      	ldr	r3, [r3, #32]
 8006ac0:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8006ac4:	687b      	ldr	r3, [r7, #4]
 8006ac6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006ac8:	687b      	ldr	r3, [r7, #4]
 8006aca:	685b      	ldr	r3, [r3, #4]
 8006acc:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8006ace:	687b      	ldr	r3, [r7, #4]
 8006ad0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006ad2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8006ad4:	68fa      	ldr	r2, [r7, #12]
 8006ad6:	4b22      	ldr	r3, [pc, #136]	@ (8006b60 <TIM_OC6_SetConfig+0xb4>)
 8006ad8:	4013      	ands	r3, r2
 8006ada:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006adc:	683b      	ldr	r3, [r7, #0]
 8006ade:	681b      	ldr	r3, [r3, #0]
 8006ae0:	021b      	lsls	r3, r3, #8
 8006ae2:	68fa      	ldr	r2, [r7, #12]
 8006ae4:	4313      	orrs	r3, r2
 8006ae6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8006ae8:	693b      	ldr	r3, [r7, #16]
 8006aea:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8006aee:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8006af0:	683b      	ldr	r3, [r7, #0]
 8006af2:	689b      	ldr	r3, [r3, #8]
 8006af4:	051b      	lsls	r3, r3, #20
 8006af6:	693a      	ldr	r2, [r7, #16]
 8006af8:	4313      	orrs	r3, r2
 8006afa:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006afc:	687b      	ldr	r3, [r7, #4]
 8006afe:	4a19      	ldr	r2, [pc, #100]	@ (8006b64 <TIM_OC6_SetConfig+0xb8>)
 8006b00:	4293      	cmp	r3, r2
 8006b02:	d00f      	beq.n	8006b24 <TIM_OC6_SetConfig+0x78>
 8006b04:	687b      	ldr	r3, [r7, #4]
 8006b06:	4a18      	ldr	r2, [pc, #96]	@ (8006b68 <TIM_OC6_SetConfig+0xbc>)
 8006b08:	4293      	cmp	r3, r2
 8006b0a:	d00b      	beq.n	8006b24 <TIM_OC6_SetConfig+0x78>
 8006b0c:	687b      	ldr	r3, [r7, #4]
 8006b0e:	4a17      	ldr	r2, [pc, #92]	@ (8006b6c <TIM_OC6_SetConfig+0xc0>)
 8006b10:	4293      	cmp	r3, r2
 8006b12:	d007      	beq.n	8006b24 <TIM_OC6_SetConfig+0x78>
 8006b14:	687b      	ldr	r3, [r7, #4]
 8006b16:	4a16      	ldr	r2, [pc, #88]	@ (8006b70 <TIM_OC6_SetConfig+0xc4>)
 8006b18:	4293      	cmp	r3, r2
 8006b1a:	d003      	beq.n	8006b24 <TIM_OC6_SetConfig+0x78>
 8006b1c:	687b      	ldr	r3, [r7, #4]
 8006b1e:	4a15      	ldr	r2, [pc, #84]	@ (8006b74 <TIM_OC6_SetConfig+0xc8>)
 8006b20:	4293      	cmp	r3, r2
 8006b22:	d109      	bne.n	8006b38 <TIM_OC6_SetConfig+0x8c>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8006b24:	697b      	ldr	r3, [r7, #20]
 8006b26:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8006b2a:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8006b2c:	683b      	ldr	r3, [r7, #0]
 8006b2e:	695b      	ldr	r3, [r3, #20]
 8006b30:	029b      	lsls	r3, r3, #10
 8006b32:	697a      	ldr	r2, [r7, #20]
 8006b34:	4313      	orrs	r3, r2
 8006b36:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006b38:	687b      	ldr	r3, [r7, #4]
 8006b3a:	697a      	ldr	r2, [r7, #20]
 8006b3c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8006b3e:	687b      	ldr	r3, [r7, #4]
 8006b40:	68fa      	ldr	r2, [r7, #12]
 8006b42:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8006b44:	683b      	ldr	r3, [r7, #0]
 8006b46:	685a      	ldr	r2, [r3, #4]
 8006b48:	687b      	ldr	r3, [r7, #4]
 8006b4a:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006b4c:	687b      	ldr	r3, [r7, #4]
 8006b4e:	693a      	ldr	r2, [r7, #16]
 8006b50:	621a      	str	r2, [r3, #32]
}
 8006b52:	bf00      	nop
 8006b54:	371c      	adds	r7, #28
 8006b56:	46bd      	mov	sp, r7
 8006b58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b5c:	4770      	bx	lr
 8006b5e:	bf00      	nop
 8006b60:	feff8fff 	.word	0xfeff8fff
 8006b64:	40010000 	.word	0x40010000
 8006b68:	40010400 	.word	0x40010400
 8006b6c:	40014000 	.word	0x40014000
 8006b70:	40014400 	.word	0x40014400
 8006b74:	40014800 	.word	0x40014800

08006b78 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8006b78:	b480      	push	{r7}
 8006b7a:	b087      	sub	sp, #28
 8006b7c:	af00      	add	r7, sp, #0
 8006b7e:	60f8      	str	r0, [r7, #12]
 8006b80:	60b9      	str	r1, [r7, #8]
 8006b82:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8006b84:	68bb      	ldr	r3, [r7, #8]
 8006b86:	f003 031f 	and.w	r3, r3, #31
 8006b8a:	2201      	movs	r2, #1
 8006b8c:	fa02 f303 	lsl.w	r3, r2, r3
 8006b90:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8006b92:	68fb      	ldr	r3, [r7, #12]
 8006b94:	6a1a      	ldr	r2, [r3, #32]
 8006b96:	697b      	ldr	r3, [r7, #20]
 8006b98:	43db      	mvns	r3, r3
 8006b9a:	401a      	ands	r2, r3
 8006b9c:	68fb      	ldr	r3, [r7, #12]
 8006b9e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8006ba0:	68fb      	ldr	r3, [r7, #12]
 8006ba2:	6a1a      	ldr	r2, [r3, #32]
 8006ba4:	68bb      	ldr	r3, [r7, #8]
 8006ba6:	f003 031f 	and.w	r3, r3, #31
 8006baa:	6879      	ldr	r1, [r7, #4]
 8006bac:	fa01 f303 	lsl.w	r3, r1, r3
 8006bb0:	431a      	orrs	r2, r3
 8006bb2:	68fb      	ldr	r3, [r7, #12]
 8006bb4:	621a      	str	r2, [r3, #32]
}
 8006bb6:	bf00      	nop
 8006bb8:	371c      	adds	r7, #28
 8006bba:	46bd      	mov	sp, r7
 8006bbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bc0:	4770      	bx	lr
	...

08006bc4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006bc4:	b480      	push	{r7}
 8006bc6:	b085      	sub	sp, #20
 8006bc8:	af00      	add	r7, sp, #0
 8006bca:	6078      	str	r0, [r7, #4]
 8006bcc:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8006bce:	687b      	ldr	r3, [r7, #4]
 8006bd0:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8006bd4:	2b01      	cmp	r3, #1
 8006bd6:	d101      	bne.n	8006bdc <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006bd8:	2302      	movs	r3, #2
 8006bda:	e077      	b.n	8006ccc <HAL_TIMEx_MasterConfigSynchronization+0x108>
 8006bdc:	687b      	ldr	r3, [r7, #4]
 8006bde:	2201      	movs	r2, #1
 8006be0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006be4:	687b      	ldr	r3, [r7, #4]
 8006be6:	2202      	movs	r2, #2
 8006be8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006bec:	687b      	ldr	r3, [r7, #4]
 8006bee:	681b      	ldr	r3, [r3, #0]
 8006bf0:	685b      	ldr	r3, [r3, #4]
 8006bf2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006bf4:	687b      	ldr	r3, [r7, #4]
 8006bf6:	681b      	ldr	r3, [r3, #0]
 8006bf8:	689b      	ldr	r3, [r3, #8]
 8006bfa:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8006bfc:	687b      	ldr	r3, [r7, #4]
 8006bfe:	681b      	ldr	r3, [r3, #0]
 8006c00:	4a35      	ldr	r2, [pc, #212]	@ (8006cd8 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8006c02:	4293      	cmp	r3, r2
 8006c04:	d004      	beq.n	8006c10 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8006c06:	687b      	ldr	r3, [r7, #4]
 8006c08:	681b      	ldr	r3, [r3, #0]
 8006c0a:	4a34      	ldr	r2, [pc, #208]	@ (8006cdc <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8006c0c:	4293      	cmp	r3, r2
 8006c0e:	d108      	bne.n	8006c22 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8006c10:	68fb      	ldr	r3, [r7, #12]
 8006c12:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 8006c16:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8006c18:	683b      	ldr	r3, [r7, #0]
 8006c1a:	685b      	ldr	r3, [r3, #4]
 8006c1c:	68fa      	ldr	r2, [r7, #12]
 8006c1e:	4313      	orrs	r3, r2
 8006c20:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8006c22:	68fb      	ldr	r3, [r7, #12]
 8006c24:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006c28:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006c2a:	683b      	ldr	r3, [r7, #0]
 8006c2c:	681b      	ldr	r3, [r3, #0]
 8006c2e:	68fa      	ldr	r2, [r7, #12]
 8006c30:	4313      	orrs	r3, r2
 8006c32:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8006c34:	687b      	ldr	r3, [r7, #4]
 8006c36:	681b      	ldr	r3, [r3, #0]
 8006c38:	68fa      	ldr	r2, [r7, #12]
 8006c3a:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006c3c:	687b      	ldr	r3, [r7, #4]
 8006c3e:	681b      	ldr	r3, [r3, #0]
 8006c40:	4a25      	ldr	r2, [pc, #148]	@ (8006cd8 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8006c42:	4293      	cmp	r3, r2
 8006c44:	d02c      	beq.n	8006ca0 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 8006c46:	687b      	ldr	r3, [r7, #4]
 8006c48:	681b      	ldr	r3, [r3, #0]
 8006c4a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006c4e:	d027      	beq.n	8006ca0 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 8006c50:	687b      	ldr	r3, [r7, #4]
 8006c52:	681b      	ldr	r3, [r3, #0]
 8006c54:	4a22      	ldr	r2, [pc, #136]	@ (8006ce0 <HAL_TIMEx_MasterConfigSynchronization+0x11c>)
 8006c56:	4293      	cmp	r3, r2
 8006c58:	d022      	beq.n	8006ca0 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 8006c5a:	687b      	ldr	r3, [r7, #4]
 8006c5c:	681b      	ldr	r3, [r3, #0]
 8006c5e:	4a21      	ldr	r2, [pc, #132]	@ (8006ce4 <HAL_TIMEx_MasterConfigSynchronization+0x120>)
 8006c60:	4293      	cmp	r3, r2
 8006c62:	d01d      	beq.n	8006ca0 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 8006c64:	687b      	ldr	r3, [r7, #4]
 8006c66:	681b      	ldr	r3, [r3, #0]
 8006c68:	4a1f      	ldr	r2, [pc, #124]	@ (8006ce8 <HAL_TIMEx_MasterConfigSynchronization+0x124>)
 8006c6a:	4293      	cmp	r3, r2
 8006c6c:	d018      	beq.n	8006ca0 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 8006c6e:	687b      	ldr	r3, [r7, #4]
 8006c70:	681b      	ldr	r3, [r3, #0]
 8006c72:	4a1a      	ldr	r2, [pc, #104]	@ (8006cdc <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8006c74:	4293      	cmp	r3, r2
 8006c76:	d013      	beq.n	8006ca0 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 8006c78:	687b      	ldr	r3, [r7, #4]
 8006c7a:	681b      	ldr	r3, [r3, #0]
 8006c7c:	4a1b      	ldr	r2, [pc, #108]	@ (8006cec <HAL_TIMEx_MasterConfigSynchronization+0x128>)
 8006c7e:	4293      	cmp	r3, r2
 8006c80:	d00e      	beq.n	8006ca0 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 8006c82:	687b      	ldr	r3, [r7, #4]
 8006c84:	681b      	ldr	r3, [r3, #0]
 8006c86:	4a1a      	ldr	r2, [pc, #104]	@ (8006cf0 <HAL_TIMEx_MasterConfigSynchronization+0x12c>)
 8006c88:	4293      	cmp	r3, r2
 8006c8a:	d009      	beq.n	8006ca0 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 8006c8c:	687b      	ldr	r3, [r7, #4]
 8006c8e:	681b      	ldr	r3, [r3, #0]
 8006c90:	4a18      	ldr	r2, [pc, #96]	@ (8006cf4 <HAL_TIMEx_MasterConfigSynchronization+0x130>)
 8006c92:	4293      	cmp	r3, r2
 8006c94:	d004      	beq.n	8006ca0 <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 8006c96:	687b      	ldr	r3, [r7, #4]
 8006c98:	681b      	ldr	r3, [r3, #0]
 8006c9a:	4a17      	ldr	r2, [pc, #92]	@ (8006cf8 <HAL_TIMEx_MasterConfigSynchronization+0x134>)
 8006c9c:	4293      	cmp	r3, r2
 8006c9e:	d10c      	bne.n	8006cba <HAL_TIMEx_MasterConfigSynchronization+0xf6>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8006ca0:	68bb      	ldr	r3, [r7, #8]
 8006ca2:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8006ca6:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8006ca8:	683b      	ldr	r3, [r7, #0]
 8006caa:	689b      	ldr	r3, [r3, #8]
 8006cac:	68ba      	ldr	r2, [r7, #8]
 8006cae:	4313      	orrs	r3, r2
 8006cb0:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8006cb2:	687b      	ldr	r3, [r7, #4]
 8006cb4:	681b      	ldr	r3, [r3, #0]
 8006cb6:	68ba      	ldr	r2, [r7, #8]
 8006cb8:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8006cba:	687b      	ldr	r3, [r7, #4]
 8006cbc:	2201      	movs	r2, #1
 8006cbe:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8006cc2:	687b      	ldr	r3, [r7, #4]
 8006cc4:	2200      	movs	r2, #0
 8006cc6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8006cca:	2300      	movs	r3, #0
}
 8006ccc:	4618      	mov	r0, r3
 8006cce:	3714      	adds	r7, #20
 8006cd0:	46bd      	mov	sp, r7
 8006cd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cd6:	4770      	bx	lr
 8006cd8:	40010000 	.word	0x40010000
 8006cdc:	40010400 	.word	0x40010400
 8006ce0:	40000400 	.word	0x40000400
 8006ce4:	40000800 	.word	0x40000800
 8006ce8:	40000c00 	.word	0x40000c00
 8006cec:	40001800 	.word	0x40001800
 8006cf0:	40014000 	.word	0x40014000
 8006cf4:	4000e000 	.word	0x4000e000
 8006cf8:	4000e400 	.word	0x4000e400

08006cfc <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8006cfc:	b480      	push	{r7}
 8006cfe:	b085      	sub	sp, #20
 8006d00:	af00      	add	r7, sp, #0
 8006d02:	6078      	str	r0, [r7, #4]
 8006d04:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8006d06:	2300      	movs	r3, #0
 8006d08:	60fb      	str	r3, [r7, #12]
#if defined(TIM_BDTR_BKBID)
  assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));
#endif /* TIM_BDTR_BKBID */

  /* Check input state */
  __HAL_LOCK(htim);
 8006d0a:	687b      	ldr	r3, [r7, #4]
 8006d0c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8006d10:	2b01      	cmp	r3, #1
 8006d12:	d101      	bne.n	8006d18 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8006d14:	2302      	movs	r3, #2
 8006d16:	e073      	b.n	8006e00 <HAL_TIMEx_ConfigBreakDeadTime+0x104>
 8006d18:	687b      	ldr	r3, [r7, #4]
 8006d1a:	2201      	movs	r2, #1
 8006d1c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8006d20:	68fb      	ldr	r3, [r7, #12]
 8006d22:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 8006d26:	683b      	ldr	r3, [r7, #0]
 8006d28:	68db      	ldr	r3, [r3, #12]
 8006d2a:	4313      	orrs	r3, r2
 8006d2c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8006d2e:	68fb      	ldr	r3, [r7, #12]
 8006d30:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8006d34:	683b      	ldr	r3, [r7, #0]
 8006d36:	689b      	ldr	r3, [r3, #8]
 8006d38:	4313      	orrs	r3, r2
 8006d3a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8006d3c:	68fb      	ldr	r3, [r7, #12]
 8006d3e:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 8006d42:	683b      	ldr	r3, [r7, #0]
 8006d44:	685b      	ldr	r3, [r3, #4]
 8006d46:	4313      	orrs	r3, r2
 8006d48:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8006d4a:	68fb      	ldr	r3, [r7, #12]
 8006d4c:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 8006d50:	683b      	ldr	r3, [r7, #0]
 8006d52:	681b      	ldr	r3, [r3, #0]
 8006d54:	4313      	orrs	r3, r2
 8006d56:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8006d58:	68fb      	ldr	r3, [r7, #12]
 8006d5a:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8006d5e:	683b      	ldr	r3, [r7, #0]
 8006d60:	691b      	ldr	r3, [r3, #16]
 8006d62:	4313      	orrs	r3, r2
 8006d64:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8006d66:	68fb      	ldr	r3, [r7, #12]
 8006d68:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 8006d6c:	683b      	ldr	r3, [r7, #0]
 8006d6e:	695b      	ldr	r3, [r3, #20]
 8006d70:	4313      	orrs	r3, r2
 8006d72:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8006d74:	68fb      	ldr	r3, [r7, #12]
 8006d76:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 8006d7a:	683b      	ldr	r3, [r7, #0]
 8006d7c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006d7e:	4313      	orrs	r3, r2
 8006d80:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8006d82:	68fb      	ldr	r3, [r7, #12]
 8006d84:	f423 2270 	bic.w	r2, r3, #983040	@ 0xf0000
 8006d88:	683b      	ldr	r3, [r7, #0]
 8006d8a:	699b      	ldr	r3, [r3, #24]
 8006d8c:	041b      	lsls	r3, r3, #16
 8006d8e:	4313      	orrs	r3, r2
 8006d90:	60fb      	str	r3, [r7, #12]
#if defined(TIM_BDTR_BKBID)
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 8006d92:	68fb      	ldr	r3, [r7, #12]
 8006d94:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 8006d98:	683b      	ldr	r3, [r7, #0]
 8006d9a:	69db      	ldr	r3, [r3, #28]
 8006d9c:	4313      	orrs	r3, r2
 8006d9e:	60fb      	str	r3, [r7, #12]
#endif /* TIM_BDTR_BKBID */

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8006da0:	687b      	ldr	r3, [r7, #4]
 8006da2:	681b      	ldr	r3, [r3, #0]
 8006da4:	4a19      	ldr	r2, [pc, #100]	@ (8006e0c <HAL_TIMEx_ConfigBreakDeadTime+0x110>)
 8006da6:	4293      	cmp	r3, r2
 8006da8:	d004      	beq.n	8006db4 <HAL_TIMEx_ConfigBreakDeadTime+0xb8>
 8006daa:	687b      	ldr	r3, [r7, #4]
 8006dac:	681b      	ldr	r3, [r3, #0]
 8006dae:	4a18      	ldr	r2, [pc, #96]	@ (8006e10 <HAL_TIMEx_ConfigBreakDeadTime+0x114>)
 8006db0:	4293      	cmp	r3, r2
 8006db2:	d11c      	bne.n	8006dee <HAL_TIMEx_ConfigBreakDeadTime+0xf2>
#if defined(TIM_BDTR_BKBID)
    assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));
#endif /* TIM_BDTR_BKBID */

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8006db4:	68fb      	ldr	r3, [r7, #12]
 8006db6:	f423 0270 	bic.w	r2, r3, #15728640	@ 0xf00000
 8006dba:	683b      	ldr	r3, [r7, #0]
 8006dbc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006dbe:	051b      	lsls	r3, r3, #20
 8006dc0:	4313      	orrs	r3, r2
 8006dc2:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8006dc4:	68fb      	ldr	r3, [r7, #12]
 8006dc6:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 8006dca:	683b      	ldr	r3, [r7, #0]
 8006dcc:	6a1b      	ldr	r3, [r3, #32]
 8006dce:	4313      	orrs	r3, r2
 8006dd0:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8006dd2:	68fb      	ldr	r3, [r7, #12]
 8006dd4:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 8006dd8:	683b      	ldr	r3, [r7, #0]
 8006dda:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006ddc:	4313      	orrs	r3, r2
 8006dde:	60fb      	str	r3, [r7, #12]
#if defined(TIM_BDTR_BKBID)
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 8006de0:	68fb      	ldr	r3, [r7, #12]
 8006de2:	f023 5200 	bic.w	r2, r3, #536870912	@ 0x20000000
 8006de6:	683b      	ldr	r3, [r7, #0]
 8006de8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006dea:	4313      	orrs	r3, r2
 8006dec:	60fb      	str	r3, [r7, #12]
#endif /* TIM_BDTR_BKBID */
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8006dee:	687b      	ldr	r3, [r7, #4]
 8006df0:	681b      	ldr	r3, [r3, #0]
 8006df2:	68fa      	ldr	r2, [r7, #12]
 8006df4:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 8006df6:	687b      	ldr	r3, [r7, #4]
 8006df8:	2200      	movs	r2, #0
 8006dfa:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8006dfe:	2300      	movs	r3, #0
}
 8006e00:	4618      	mov	r0, r3
 8006e02:	3714      	adds	r7, #20
 8006e04:	46bd      	mov	sp, r7
 8006e06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e0a:	4770      	bx	lr
 8006e0c:	40010000 	.word	0x40010000
 8006e10:	40010400 	.word	0x40010400

08006e14 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006e14:	b580      	push	{r7, lr}
 8006e16:	b082      	sub	sp, #8
 8006e18:	af00      	add	r7, sp, #0
 8006e1a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006e1c:	687b      	ldr	r3, [r7, #4]
 8006e1e:	2b00      	cmp	r3, #0
 8006e20:	d101      	bne.n	8006e26 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8006e22:	2301      	movs	r3, #1
 8006e24:	e042      	b.n	8006eac <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8006e26:	687b      	ldr	r3, [r7, #4]
 8006e28:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006e2c:	2b00      	cmp	r3, #0
 8006e2e:	d106      	bne.n	8006e3e <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006e30:	687b      	ldr	r3, [r7, #4]
 8006e32:	2200      	movs	r2, #0
 8006e34:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006e38:	6878      	ldr	r0, [r7, #4]
 8006e3a:	f7fa fa2d 	bl	8001298 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006e3e:	687b      	ldr	r3, [r7, #4]
 8006e40:	2224      	movs	r2, #36	@ 0x24
 8006e42:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 8006e46:	687b      	ldr	r3, [r7, #4]
 8006e48:	681b      	ldr	r3, [r3, #0]
 8006e4a:	681a      	ldr	r2, [r3, #0]
 8006e4c:	687b      	ldr	r3, [r7, #4]
 8006e4e:	681b      	ldr	r3, [r3, #0]
 8006e50:	f022 0201 	bic.w	r2, r2, #1
 8006e54:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8006e56:	687b      	ldr	r3, [r7, #4]
 8006e58:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006e5a:	2b00      	cmp	r3, #0
 8006e5c:	d002      	beq.n	8006e64 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 8006e5e:	6878      	ldr	r0, [r7, #4]
 8006e60:	f001 fb64 	bl	800852c <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8006e64:	6878      	ldr	r0, [r7, #4]
 8006e66:	f000 fcf5 	bl	8007854 <UART_SetConfig>
 8006e6a:	4603      	mov	r3, r0
 8006e6c:	2b01      	cmp	r3, #1
 8006e6e:	d101      	bne.n	8006e74 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 8006e70:	2301      	movs	r3, #1
 8006e72:	e01b      	b.n	8006eac <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006e74:	687b      	ldr	r3, [r7, #4]
 8006e76:	681b      	ldr	r3, [r3, #0]
 8006e78:	685a      	ldr	r2, [r3, #4]
 8006e7a:	687b      	ldr	r3, [r7, #4]
 8006e7c:	681b      	ldr	r3, [r3, #0]
 8006e7e:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8006e82:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006e84:	687b      	ldr	r3, [r7, #4]
 8006e86:	681b      	ldr	r3, [r3, #0]
 8006e88:	689a      	ldr	r2, [r3, #8]
 8006e8a:	687b      	ldr	r3, [r7, #4]
 8006e8c:	681b      	ldr	r3, [r3, #0]
 8006e8e:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8006e92:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8006e94:	687b      	ldr	r3, [r7, #4]
 8006e96:	681b      	ldr	r3, [r3, #0]
 8006e98:	681a      	ldr	r2, [r3, #0]
 8006e9a:	687b      	ldr	r3, [r7, #4]
 8006e9c:	681b      	ldr	r3, [r3, #0]
 8006e9e:	f042 0201 	orr.w	r2, r2, #1
 8006ea2:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8006ea4:	6878      	ldr	r0, [r7, #4]
 8006ea6:	f001 fbe3 	bl	8008670 <UART_CheckIdleState>
 8006eaa:	4603      	mov	r3, r0
}
 8006eac:	4618      	mov	r0, r3
 8006eae:	3708      	adds	r7, #8
 8006eb0:	46bd      	mov	sp, r7
 8006eb2:	bd80      	pop	{r7, pc}

08006eb4 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006eb4:	b580      	push	{r7, lr}
 8006eb6:	b08a      	sub	sp, #40	@ 0x28
 8006eb8:	af02      	add	r7, sp, #8
 8006eba:	60f8      	str	r0, [r7, #12]
 8006ebc:	60b9      	str	r1, [r7, #8]
 8006ebe:	603b      	str	r3, [r7, #0]
 8006ec0:	4613      	mov	r3, r2
 8006ec2:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8006ec4:	68fb      	ldr	r3, [r7, #12]
 8006ec6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006eca:	2b20      	cmp	r3, #32
 8006ecc:	d17b      	bne.n	8006fc6 <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 8006ece:	68bb      	ldr	r3, [r7, #8]
 8006ed0:	2b00      	cmp	r3, #0
 8006ed2:	d002      	beq.n	8006eda <HAL_UART_Transmit+0x26>
 8006ed4:	88fb      	ldrh	r3, [r7, #6]
 8006ed6:	2b00      	cmp	r3, #0
 8006ed8:	d101      	bne.n	8006ede <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8006eda:	2301      	movs	r3, #1
 8006edc:	e074      	b.n	8006fc8 <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006ede:	68fb      	ldr	r3, [r7, #12]
 8006ee0:	2200      	movs	r2, #0
 8006ee2:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8006ee6:	68fb      	ldr	r3, [r7, #12]
 8006ee8:	2221      	movs	r2, #33	@ 0x21
 8006eea:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8006eee:	f7fa fd61 	bl	80019b4 <HAL_GetTick>
 8006ef2:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8006ef4:	68fb      	ldr	r3, [r7, #12]
 8006ef6:	88fa      	ldrh	r2, [r7, #6]
 8006ef8:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 8006efc:	68fb      	ldr	r3, [r7, #12]
 8006efe:	88fa      	ldrh	r2, [r7, #6]
 8006f00:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006f04:	68fb      	ldr	r3, [r7, #12]
 8006f06:	689b      	ldr	r3, [r3, #8]
 8006f08:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006f0c:	d108      	bne.n	8006f20 <HAL_UART_Transmit+0x6c>
 8006f0e:	68fb      	ldr	r3, [r7, #12]
 8006f10:	691b      	ldr	r3, [r3, #16]
 8006f12:	2b00      	cmp	r3, #0
 8006f14:	d104      	bne.n	8006f20 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8006f16:	2300      	movs	r3, #0
 8006f18:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8006f1a:	68bb      	ldr	r3, [r7, #8]
 8006f1c:	61bb      	str	r3, [r7, #24]
 8006f1e:	e003      	b.n	8006f28 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8006f20:	68bb      	ldr	r3, [r7, #8]
 8006f22:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8006f24:	2300      	movs	r3, #0
 8006f26:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8006f28:	e030      	b.n	8006f8c <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8006f2a:	683b      	ldr	r3, [r7, #0]
 8006f2c:	9300      	str	r3, [sp, #0]
 8006f2e:	697b      	ldr	r3, [r7, #20]
 8006f30:	2200      	movs	r2, #0
 8006f32:	2180      	movs	r1, #128	@ 0x80
 8006f34:	68f8      	ldr	r0, [r7, #12]
 8006f36:	f001 fc45 	bl	80087c4 <UART_WaitOnFlagUntilTimeout>
 8006f3a:	4603      	mov	r3, r0
 8006f3c:	2b00      	cmp	r3, #0
 8006f3e:	d005      	beq.n	8006f4c <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 8006f40:	68fb      	ldr	r3, [r7, #12]
 8006f42:	2220      	movs	r2, #32
 8006f44:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_TIMEOUT;
 8006f48:	2303      	movs	r3, #3
 8006f4a:	e03d      	b.n	8006fc8 <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 8006f4c:	69fb      	ldr	r3, [r7, #28]
 8006f4e:	2b00      	cmp	r3, #0
 8006f50:	d10b      	bne.n	8006f6a <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8006f52:	69bb      	ldr	r3, [r7, #24]
 8006f54:	881b      	ldrh	r3, [r3, #0]
 8006f56:	461a      	mov	r2, r3
 8006f58:	68fb      	ldr	r3, [r7, #12]
 8006f5a:	681b      	ldr	r3, [r3, #0]
 8006f5c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006f60:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8006f62:	69bb      	ldr	r3, [r7, #24]
 8006f64:	3302      	adds	r3, #2
 8006f66:	61bb      	str	r3, [r7, #24]
 8006f68:	e007      	b.n	8006f7a <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8006f6a:	69fb      	ldr	r3, [r7, #28]
 8006f6c:	781a      	ldrb	r2, [r3, #0]
 8006f6e:	68fb      	ldr	r3, [r7, #12]
 8006f70:	681b      	ldr	r3, [r3, #0]
 8006f72:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 8006f74:	69fb      	ldr	r3, [r7, #28]
 8006f76:	3301      	adds	r3, #1
 8006f78:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8006f7a:	68fb      	ldr	r3, [r7, #12]
 8006f7c:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8006f80:	b29b      	uxth	r3, r3
 8006f82:	3b01      	subs	r3, #1
 8006f84:	b29a      	uxth	r2, r3
 8006f86:	68fb      	ldr	r3, [r7, #12]
 8006f88:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    while (huart->TxXferCount > 0U)
 8006f8c:	68fb      	ldr	r3, [r7, #12]
 8006f8e:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8006f92:	b29b      	uxth	r3, r3
 8006f94:	2b00      	cmp	r3, #0
 8006f96:	d1c8      	bne.n	8006f2a <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8006f98:	683b      	ldr	r3, [r7, #0]
 8006f9a:	9300      	str	r3, [sp, #0]
 8006f9c:	697b      	ldr	r3, [r7, #20]
 8006f9e:	2200      	movs	r2, #0
 8006fa0:	2140      	movs	r1, #64	@ 0x40
 8006fa2:	68f8      	ldr	r0, [r7, #12]
 8006fa4:	f001 fc0e 	bl	80087c4 <UART_WaitOnFlagUntilTimeout>
 8006fa8:	4603      	mov	r3, r0
 8006faa:	2b00      	cmp	r3, #0
 8006fac:	d005      	beq.n	8006fba <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 8006fae:	68fb      	ldr	r3, [r7, #12]
 8006fb0:	2220      	movs	r2, #32
 8006fb2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      return HAL_TIMEOUT;
 8006fb6:	2303      	movs	r3, #3
 8006fb8:	e006      	b.n	8006fc8 <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8006fba:	68fb      	ldr	r3, [r7, #12]
 8006fbc:	2220      	movs	r2, #32
 8006fbe:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    return HAL_OK;
 8006fc2:	2300      	movs	r3, #0
 8006fc4:	e000      	b.n	8006fc8 <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 8006fc6:	2302      	movs	r3, #2
  }
}
 8006fc8:	4618      	mov	r0, r3
 8006fca:	3720      	adds	r7, #32
 8006fcc:	46bd      	mov	sp, r7
 8006fce:	bd80      	pop	{r7, pc}

08006fd0 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8006fd0:	b580      	push	{r7, lr}
 8006fd2:	b08a      	sub	sp, #40	@ 0x28
 8006fd4:	af00      	add	r7, sp, #0
 8006fd6:	60f8      	str	r0, [r7, #12]
 8006fd8:	60b9      	str	r1, [r7, #8]
 8006fda:	4613      	mov	r3, r2
 8006fdc:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8006fde:	68fb      	ldr	r3, [r7, #12]
 8006fe0:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8006fe4:	2b20      	cmp	r3, #32
 8006fe6:	d137      	bne.n	8007058 <HAL_UART_Receive_IT+0x88>
  {
    if ((pData == NULL) || (Size == 0U))
 8006fe8:	68bb      	ldr	r3, [r7, #8]
 8006fea:	2b00      	cmp	r3, #0
 8006fec:	d002      	beq.n	8006ff4 <HAL_UART_Receive_IT+0x24>
 8006fee:	88fb      	ldrh	r3, [r7, #6]
 8006ff0:	2b00      	cmp	r3, #0
 8006ff2:	d101      	bne.n	8006ff8 <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 8006ff4:	2301      	movs	r3, #1
 8006ff6:	e030      	b.n	800705a <HAL_UART_Receive_IT+0x8a>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006ff8:	68fb      	ldr	r3, [r7, #12]
 8006ffa:	2200      	movs	r2, #0
 8006ffc:	66da      	str	r2, [r3, #108]	@ 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8006ffe:	68fb      	ldr	r3, [r7, #12]
 8007000:	681b      	ldr	r3, [r3, #0]
 8007002:	4a18      	ldr	r2, [pc, #96]	@ (8007064 <HAL_UART_Receive_IT+0x94>)
 8007004:	4293      	cmp	r3, r2
 8007006:	d01f      	beq.n	8007048 <HAL_UART_Receive_IT+0x78>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8007008:	68fb      	ldr	r3, [r7, #12]
 800700a:	681b      	ldr	r3, [r3, #0]
 800700c:	685b      	ldr	r3, [r3, #4]
 800700e:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8007012:	2b00      	cmp	r3, #0
 8007014:	d018      	beq.n	8007048 <HAL_UART_Receive_IT+0x78>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8007016:	68fb      	ldr	r3, [r7, #12]
 8007018:	681b      	ldr	r3, [r3, #0]
 800701a:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800701c:	697b      	ldr	r3, [r7, #20]
 800701e:	e853 3f00 	ldrex	r3, [r3]
 8007022:	613b      	str	r3, [r7, #16]
   return(result);
 8007024:	693b      	ldr	r3, [r7, #16]
 8007026:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800702a:	627b      	str	r3, [r7, #36]	@ 0x24
 800702c:	68fb      	ldr	r3, [r7, #12]
 800702e:	681b      	ldr	r3, [r3, #0]
 8007030:	461a      	mov	r2, r3
 8007032:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007034:	623b      	str	r3, [r7, #32]
 8007036:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007038:	69f9      	ldr	r1, [r7, #28]
 800703a:	6a3a      	ldr	r2, [r7, #32]
 800703c:	e841 2300 	strex	r3, r2, [r1]
 8007040:	61bb      	str	r3, [r7, #24]
   return(result);
 8007042:	69bb      	ldr	r3, [r7, #24]
 8007044:	2b00      	cmp	r3, #0
 8007046:	d1e6      	bne.n	8007016 <HAL_UART_Receive_IT+0x46>
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 8007048:	88fb      	ldrh	r3, [r7, #6]
 800704a:	461a      	mov	r2, r3
 800704c:	68b9      	ldr	r1, [r7, #8]
 800704e:	68f8      	ldr	r0, [r7, #12]
 8007050:	f001 fc26 	bl	80088a0 <UART_Start_Receive_IT>
 8007054:	4603      	mov	r3, r0
 8007056:	e000      	b.n	800705a <HAL_UART_Receive_IT+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8007058:	2302      	movs	r3, #2
  }
}
 800705a:	4618      	mov	r0, r3
 800705c:	3728      	adds	r7, #40	@ 0x28
 800705e:	46bd      	mov	sp, r7
 8007060:	bd80      	pop	{r7, pc}
 8007062:	bf00      	nop
 8007064:	58000c00 	.word	0x58000c00

08007068 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8007068:	b580      	push	{r7, lr}
 800706a:	b0ba      	sub	sp, #232	@ 0xe8
 800706c:	af00      	add	r7, sp, #0
 800706e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8007070:	687b      	ldr	r3, [r7, #4]
 8007072:	681b      	ldr	r3, [r3, #0]
 8007074:	69db      	ldr	r3, [r3, #28]
 8007076:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800707a:	687b      	ldr	r3, [r7, #4]
 800707c:	681b      	ldr	r3, [r3, #0]
 800707e:	681b      	ldr	r3, [r3, #0]
 8007080:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8007084:	687b      	ldr	r3, [r7, #4]
 8007086:	681b      	ldr	r3, [r3, #0]
 8007088:	689b      	ldr	r3, [r3, #8]
 800708a:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800708e:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 8007092:	f640 030f 	movw	r3, #2063	@ 0x80f
 8007096:	4013      	ands	r3, r2
 8007098:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 800709c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80070a0:	2b00      	cmp	r3, #0
 80070a2:	d11b      	bne.n	80070dc <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 80070a4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80070a8:	f003 0320 	and.w	r3, r3, #32
 80070ac:	2b00      	cmp	r3, #0
 80070ae:	d015      	beq.n	80070dc <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 80070b0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80070b4:	f003 0320 	and.w	r3, r3, #32
 80070b8:	2b00      	cmp	r3, #0
 80070ba:	d105      	bne.n	80070c8 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 80070bc:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80070c0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80070c4:	2b00      	cmp	r3, #0
 80070c6:	d009      	beq.n	80070dc <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 80070c8:	687b      	ldr	r3, [r7, #4]
 80070ca:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80070cc:	2b00      	cmp	r3, #0
 80070ce:	f000 8393 	beq.w	80077f8 <HAL_UART_IRQHandler+0x790>
      {
        huart->RxISR(huart);
 80070d2:	687b      	ldr	r3, [r7, #4]
 80070d4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80070d6:	6878      	ldr	r0, [r7, #4]
 80070d8:	4798      	blx	r3
      }
      return;
 80070da:	e38d      	b.n	80077f8 <HAL_UART_IRQHandler+0x790>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 80070dc:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80070e0:	2b00      	cmp	r3, #0
 80070e2:	f000 8123 	beq.w	800732c <HAL_UART_IRQHandler+0x2c4>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 80070e6:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 80070ea:	4b8d      	ldr	r3, [pc, #564]	@ (8007320 <HAL_UART_IRQHandler+0x2b8>)
 80070ec:	4013      	ands	r3, r2
 80070ee:	2b00      	cmp	r3, #0
 80070f0:	d106      	bne.n	8007100 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 80070f2:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 80070f6:	4b8b      	ldr	r3, [pc, #556]	@ (8007324 <HAL_UART_IRQHandler+0x2bc>)
 80070f8:	4013      	ands	r3, r2
 80070fa:	2b00      	cmp	r3, #0
 80070fc:	f000 8116 	beq.w	800732c <HAL_UART_IRQHandler+0x2c4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8007100:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007104:	f003 0301 	and.w	r3, r3, #1
 8007108:	2b00      	cmp	r3, #0
 800710a:	d011      	beq.n	8007130 <HAL_UART_IRQHandler+0xc8>
 800710c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007110:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007114:	2b00      	cmp	r3, #0
 8007116:	d00b      	beq.n	8007130 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8007118:	687b      	ldr	r3, [r7, #4]
 800711a:	681b      	ldr	r3, [r3, #0]
 800711c:	2201      	movs	r2, #1
 800711e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8007120:	687b      	ldr	r3, [r7, #4]
 8007122:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007126:	f043 0201 	orr.w	r2, r3, #1
 800712a:	687b      	ldr	r3, [r7, #4]
 800712c:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8007130:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007134:	f003 0302 	and.w	r3, r3, #2
 8007138:	2b00      	cmp	r3, #0
 800713a:	d011      	beq.n	8007160 <HAL_UART_IRQHandler+0xf8>
 800713c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8007140:	f003 0301 	and.w	r3, r3, #1
 8007144:	2b00      	cmp	r3, #0
 8007146:	d00b      	beq.n	8007160 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8007148:	687b      	ldr	r3, [r7, #4]
 800714a:	681b      	ldr	r3, [r3, #0]
 800714c:	2202      	movs	r2, #2
 800714e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8007150:	687b      	ldr	r3, [r7, #4]
 8007152:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007156:	f043 0204 	orr.w	r2, r3, #4
 800715a:	687b      	ldr	r3, [r7, #4]
 800715c:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8007160:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007164:	f003 0304 	and.w	r3, r3, #4
 8007168:	2b00      	cmp	r3, #0
 800716a:	d011      	beq.n	8007190 <HAL_UART_IRQHandler+0x128>
 800716c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8007170:	f003 0301 	and.w	r3, r3, #1
 8007174:	2b00      	cmp	r3, #0
 8007176:	d00b      	beq.n	8007190 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8007178:	687b      	ldr	r3, [r7, #4]
 800717a:	681b      	ldr	r3, [r3, #0]
 800717c:	2204      	movs	r2, #4
 800717e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8007180:	687b      	ldr	r3, [r7, #4]
 8007182:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007186:	f043 0202 	orr.w	r2, r3, #2
 800718a:	687b      	ldr	r3, [r7, #4]
 800718c:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8007190:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007194:	f003 0308 	and.w	r3, r3, #8
 8007198:	2b00      	cmp	r3, #0
 800719a:	d017      	beq.n	80071cc <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800719c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80071a0:	f003 0320 	and.w	r3, r3, #32
 80071a4:	2b00      	cmp	r3, #0
 80071a6:	d105      	bne.n	80071b4 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 80071a8:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 80071ac:	4b5c      	ldr	r3, [pc, #368]	@ (8007320 <HAL_UART_IRQHandler+0x2b8>)
 80071ae:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 80071b0:	2b00      	cmp	r3, #0
 80071b2:	d00b      	beq.n	80071cc <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80071b4:	687b      	ldr	r3, [r7, #4]
 80071b6:	681b      	ldr	r3, [r3, #0]
 80071b8:	2208      	movs	r2, #8
 80071ba:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80071bc:	687b      	ldr	r3, [r7, #4]
 80071be:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80071c2:	f043 0208 	orr.w	r2, r3, #8
 80071c6:	687b      	ldr	r3, [r7, #4]
 80071c8:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 80071cc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80071d0:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80071d4:	2b00      	cmp	r3, #0
 80071d6:	d012      	beq.n	80071fe <HAL_UART_IRQHandler+0x196>
 80071d8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80071dc:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 80071e0:	2b00      	cmp	r3, #0
 80071e2:	d00c      	beq.n	80071fe <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80071e4:	687b      	ldr	r3, [r7, #4]
 80071e6:	681b      	ldr	r3, [r3, #0]
 80071e8:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80071ec:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 80071ee:	687b      	ldr	r3, [r7, #4]
 80071f0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80071f4:	f043 0220 	orr.w	r2, r3, #32
 80071f8:	687b      	ldr	r3, [r7, #4]
 80071fa:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80071fe:	687b      	ldr	r3, [r7, #4]
 8007200:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007204:	2b00      	cmp	r3, #0
 8007206:	f000 82f9 	beq.w	80077fc <HAL_UART_IRQHandler+0x794>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800720a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800720e:	f003 0320 	and.w	r3, r3, #32
 8007212:	2b00      	cmp	r3, #0
 8007214:	d013      	beq.n	800723e <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8007216:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800721a:	f003 0320 	and.w	r3, r3, #32
 800721e:	2b00      	cmp	r3, #0
 8007220:	d105      	bne.n	800722e <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8007222:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8007226:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800722a:	2b00      	cmp	r3, #0
 800722c:	d007      	beq.n	800723e <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 800722e:	687b      	ldr	r3, [r7, #4]
 8007230:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8007232:	2b00      	cmp	r3, #0
 8007234:	d003      	beq.n	800723e <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 8007236:	687b      	ldr	r3, [r7, #4]
 8007238:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800723a:	6878      	ldr	r0, [r7, #4]
 800723c:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800723e:	687b      	ldr	r3, [r7, #4]
 8007240:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007244:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8007248:	687b      	ldr	r3, [r7, #4]
 800724a:	681b      	ldr	r3, [r3, #0]
 800724c:	689b      	ldr	r3, [r3, #8]
 800724e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007252:	2b40      	cmp	r3, #64	@ 0x40
 8007254:	d005      	beq.n	8007262 <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8007256:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800725a:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800725e:	2b00      	cmp	r3, #0
 8007260:	d054      	beq.n	800730c <HAL_UART_IRQHandler+0x2a4>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8007262:	6878      	ldr	r0, [r7, #4]
 8007264:	f001 fc3e 	bl	8008ae4 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007268:	687b      	ldr	r3, [r7, #4]
 800726a:	681b      	ldr	r3, [r3, #0]
 800726c:	689b      	ldr	r3, [r3, #8]
 800726e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007272:	2b40      	cmp	r3, #64	@ 0x40
 8007274:	d146      	bne.n	8007304 <HAL_UART_IRQHandler+0x29c>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007276:	687b      	ldr	r3, [r7, #4]
 8007278:	681b      	ldr	r3, [r3, #0]
 800727a:	3308      	adds	r3, #8
 800727c:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007280:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8007284:	e853 3f00 	ldrex	r3, [r3]
 8007288:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 800728c:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8007290:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8007294:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8007298:	687b      	ldr	r3, [r7, #4]
 800729a:	681b      	ldr	r3, [r3, #0]
 800729c:	3308      	adds	r3, #8
 800729e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 80072a2:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 80072a6:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80072aa:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 80072ae:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 80072b2:	e841 2300 	strex	r3, r2, [r1]
 80072b6:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 80072ba:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80072be:	2b00      	cmp	r3, #0
 80072c0:	d1d9      	bne.n	8007276 <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80072c2:	687b      	ldr	r3, [r7, #4]
 80072c4:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80072c8:	2b00      	cmp	r3, #0
 80072ca:	d017      	beq.n	80072fc <HAL_UART_IRQHandler+0x294>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80072cc:	687b      	ldr	r3, [r7, #4]
 80072ce:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80072d2:	4a15      	ldr	r2, [pc, #84]	@ (8007328 <HAL_UART_IRQHandler+0x2c0>)
 80072d4:	651a      	str	r2, [r3, #80]	@ 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80072d6:	687b      	ldr	r3, [r7, #4]
 80072d8:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80072dc:	4618      	mov	r0, r3
 80072de:	f7fb f81b 	bl	8002318 <HAL_DMA_Abort_IT>
 80072e2:	4603      	mov	r3, r0
 80072e4:	2b00      	cmp	r3, #0
 80072e6:	d019      	beq.n	800731c <HAL_UART_IRQHandler+0x2b4>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80072e8:	687b      	ldr	r3, [r7, #4]
 80072ea:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80072ee:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80072f0:	687a      	ldr	r2, [r7, #4]
 80072f2:	f8d2 2080 	ldr.w	r2, [r2, #128]	@ 0x80
 80072f6:	4610      	mov	r0, r2
 80072f8:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80072fa:	e00f      	b.n	800731c <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80072fc:	6878      	ldr	r0, [r7, #4]
 80072fe:	f000 fa93 	bl	8007828 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007302:	e00b      	b.n	800731c <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8007304:	6878      	ldr	r0, [r7, #4]
 8007306:	f000 fa8f 	bl	8007828 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800730a:	e007      	b.n	800731c <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800730c:	6878      	ldr	r0, [r7, #4]
 800730e:	f000 fa8b 	bl	8007828 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007312:	687b      	ldr	r3, [r7, #4]
 8007314:	2200      	movs	r2, #0
 8007316:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
      }
    }
    return;
 800731a:	e26f      	b.n	80077fc <HAL_UART_IRQHandler+0x794>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800731c:	bf00      	nop
    return;
 800731e:	e26d      	b.n	80077fc <HAL_UART_IRQHandler+0x794>
 8007320:	10000001 	.word	0x10000001
 8007324:	04000120 	.word	0x04000120
 8007328:	08008bb1 	.word	0x08008bb1

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800732c:	687b      	ldr	r3, [r7, #4]
 800732e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8007330:	2b01      	cmp	r3, #1
 8007332:	f040 8203 	bne.w	800773c <HAL_UART_IRQHandler+0x6d4>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8007336:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800733a:	f003 0310 	and.w	r3, r3, #16
 800733e:	2b00      	cmp	r3, #0
 8007340:	f000 81fc 	beq.w	800773c <HAL_UART_IRQHandler+0x6d4>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8007344:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007348:	f003 0310 	and.w	r3, r3, #16
 800734c:	2b00      	cmp	r3, #0
 800734e:	f000 81f5 	beq.w	800773c <HAL_UART_IRQHandler+0x6d4>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8007352:	687b      	ldr	r3, [r7, #4]
 8007354:	681b      	ldr	r3, [r3, #0]
 8007356:	2210      	movs	r2, #16
 8007358:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800735a:	687b      	ldr	r3, [r7, #4]
 800735c:	681b      	ldr	r3, [r3, #0]
 800735e:	689b      	ldr	r3, [r3, #8]
 8007360:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007364:	2b40      	cmp	r3, #64	@ 0x40
 8007366:	f040 816d 	bne.w	8007644 <HAL_UART_IRQHandler+0x5dc>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800736a:	687b      	ldr	r3, [r7, #4]
 800736c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007370:	681b      	ldr	r3, [r3, #0]
 8007372:	4aa4      	ldr	r2, [pc, #656]	@ (8007604 <HAL_UART_IRQHandler+0x59c>)
 8007374:	4293      	cmp	r3, r2
 8007376:	d068      	beq.n	800744a <HAL_UART_IRQHandler+0x3e2>
 8007378:	687b      	ldr	r3, [r7, #4]
 800737a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800737e:	681b      	ldr	r3, [r3, #0]
 8007380:	4aa1      	ldr	r2, [pc, #644]	@ (8007608 <HAL_UART_IRQHandler+0x5a0>)
 8007382:	4293      	cmp	r3, r2
 8007384:	d061      	beq.n	800744a <HAL_UART_IRQHandler+0x3e2>
 8007386:	687b      	ldr	r3, [r7, #4]
 8007388:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800738c:	681b      	ldr	r3, [r3, #0]
 800738e:	4a9f      	ldr	r2, [pc, #636]	@ (800760c <HAL_UART_IRQHandler+0x5a4>)
 8007390:	4293      	cmp	r3, r2
 8007392:	d05a      	beq.n	800744a <HAL_UART_IRQHandler+0x3e2>
 8007394:	687b      	ldr	r3, [r7, #4]
 8007396:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800739a:	681b      	ldr	r3, [r3, #0]
 800739c:	4a9c      	ldr	r2, [pc, #624]	@ (8007610 <HAL_UART_IRQHandler+0x5a8>)
 800739e:	4293      	cmp	r3, r2
 80073a0:	d053      	beq.n	800744a <HAL_UART_IRQHandler+0x3e2>
 80073a2:	687b      	ldr	r3, [r7, #4]
 80073a4:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80073a8:	681b      	ldr	r3, [r3, #0]
 80073aa:	4a9a      	ldr	r2, [pc, #616]	@ (8007614 <HAL_UART_IRQHandler+0x5ac>)
 80073ac:	4293      	cmp	r3, r2
 80073ae:	d04c      	beq.n	800744a <HAL_UART_IRQHandler+0x3e2>
 80073b0:	687b      	ldr	r3, [r7, #4]
 80073b2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80073b6:	681b      	ldr	r3, [r3, #0]
 80073b8:	4a97      	ldr	r2, [pc, #604]	@ (8007618 <HAL_UART_IRQHandler+0x5b0>)
 80073ba:	4293      	cmp	r3, r2
 80073bc:	d045      	beq.n	800744a <HAL_UART_IRQHandler+0x3e2>
 80073be:	687b      	ldr	r3, [r7, #4]
 80073c0:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80073c4:	681b      	ldr	r3, [r3, #0]
 80073c6:	4a95      	ldr	r2, [pc, #596]	@ (800761c <HAL_UART_IRQHandler+0x5b4>)
 80073c8:	4293      	cmp	r3, r2
 80073ca:	d03e      	beq.n	800744a <HAL_UART_IRQHandler+0x3e2>
 80073cc:	687b      	ldr	r3, [r7, #4]
 80073ce:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80073d2:	681b      	ldr	r3, [r3, #0]
 80073d4:	4a92      	ldr	r2, [pc, #584]	@ (8007620 <HAL_UART_IRQHandler+0x5b8>)
 80073d6:	4293      	cmp	r3, r2
 80073d8:	d037      	beq.n	800744a <HAL_UART_IRQHandler+0x3e2>
 80073da:	687b      	ldr	r3, [r7, #4]
 80073dc:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80073e0:	681b      	ldr	r3, [r3, #0]
 80073e2:	4a90      	ldr	r2, [pc, #576]	@ (8007624 <HAL_UART_IRQHandler+0x5bc>)
 80073e4:	4293      	cmp	r3, r2
 80073e6:	d030      	beq.n	800744a <HAL_UART_IRQHandler+0x3e2>
 80073e8:	687b      	ldr	r3, [r7, #4]
 80073ea:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80073ee:	681b      	ldr	r3, [r3, #0]
 80073f0:	4a8d      	ldr	r2, [pc, #564]	@ (8007628 <HAL_UART_IRQHandler+0x5c0>)
 80073f2:	4293      	cmp	r3, r2
 80073f4:	d029      	beq.n	800744a <HAL_UART_IRQHandler+0x3e2>
 80073f6:	687b      	ldr	r3, [r7, #4]
 80073f8:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80073fc:	681b      	ldr	r3, [r3, #0]
 80073fe:	4a8b      	ldr	r2, [pc, #556]	@ (800762c <HAL_UART_IRQHandler+0x5c4>)
 8007400:	4293      	cmp	r3, r2
 8007402:	d022      	beq.n	800744a <HAL_UART_IRQHandler+0x3e2>
 8007404:	687b      	ldr	r3, [r7, #4]
 8007406:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800740a:	681b      	ldr	r3, [r3, #0]
 800740c:	4a88      	ldr	r2, [pc, #544]	@ (8007630 <HAL_UART_IRQHandler+0x5c8>)
 800740e:	4293      	cmp	r3, r2
 8007410:	d01b      	beq.n	800744a <HAL_UART_IRQHandler+0x3e2>
 8007412:	687b      	ldr	r3, [r7, #4]
 8007414:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007418:	681b      	ldr	r3, [r3, #0]
 800741a:	4a86      	ldr	r2, [pc, #536]	@ (8007634 <HAL_UART_IRQHandler+0x5cc>)
 800741c:	4293      	cmp	r3, r2
 800741e:	d014      	beq.n	800744a <HAL_UART_IRQHandler+0x3e2>
 8007420:	687b      	ldr	r3, [r7, #4]
 8007422:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007426:	681b      	ldr	r3, [r3, #0]
 8007428:	4a83      	ldr	r2, [pc, #524]	@ (8007638 <HAL_UART_IRQHandler+0x5d0>)
 800742a:	4293      	cmp	r3, r2
 800742c:	d00d      	beq.n	800744a <HAL_UART_IRQHandler+0x3e2>
 800742e:	687b      	ldr	r3, [r7, #4]
 8007430:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007434:	681b      	ldr	r3, [r3, #0]
 8007436:	4a81      	ldr	r2, [pc, #516]	@ (800763c <HAL_UART_IRQHandler+0x5d4>)
 8007438:	4293      	cmp	r3, r2
 800743a:	d006      	beq.n	800744a <HAL_UART_IRQHandler+0x3e2>
 800743c:	687b      	ldr	r3, [r7, #4]
 800743e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007442:	681b      	ldr	r3, [r3, #0]
 8007444:	4a7e      	ldr	r2, [pc, #504]	@ (8007640 <HAL_UART_IRQHandler+0x5d8>)
 8007446:	4293      	cmp	r3, r2
 8007448:	d106      	bne.n	8007458 <HAL_UART_IRQHandler+0x3f0>
 800744a:	687b      	ldr	r3, [r7, #4]
 800744c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007450:	681b      	ldr	r3, [r3, #0]
 8007452:	685b      	ldr	r3, [r3, #4]
 8007454:	b29b      	uxth	r3, r3
 8007456:	e005      	b.n	8007464 <HAL_UART_IRQHandler+0x3fc>
 8007458:	687b      	ldr	r3, [r7, #4]
 800745a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800745e:	681b      	ldr	r3, [r3, #0]
 8007460:	685b      	ldr	r3, [r3, #4]
 8007462:	b29b      	uxth	r3, r3
 8007464:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8007468:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 800746c:	2b00      	cmp	r3, #0
 800746e:	f000 80ad 	beq.w	80075cc <HAL_UART_IRQHandler+0x564>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8007472:	687b      	ldr	r3, [r7, #4]
 8007474:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8007478:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800747c:	429a      	cmp	r2, r3
 800747e:	f080 80a5 	bcs.w	80075cc <HAL_UART_IRQHandler+0x564>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8007482:	687b      	ldr	r3, [r7, #4]
 8007484:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8007488:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800748c:	687b      	ldr	r3, [r7, #4]
 800748e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007492:	69db      	ldr	r3, [r3, #28]
 8007494:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8007498:	f000 8087 	beq.w	80075aa <HAL_UART_IRQHandler+0x542>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800749c:	687b      	ldr	r3, [r7, #4]
 800749e:	681b      	ldr	r3, [r3, #0]
 80074a0:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80074a4:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80074a8:	e853 3f00 	ldrex	r3, [r3]
 80074ac:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 80074b0:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80074b4:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80074b8:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80074bc:	687b      	ldr	r3, [r7, #4]
 80074be:	681b      	ldr	r3, [r3, #0]
 80074c0:	461a      	mov	r2, r3
 80074c2:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 80074c6:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 80074ca:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80074ce:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 80074d2:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 80074d6:	e841 2300 	strex	r3, r2, [r1]
 80074da:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 80074de:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80074e2:	2b00      	cmp	r3, #0
 80074e4:	d1da      	bne.n	800749c <HAL_UART_IRQHandler+0x434>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80074e6:	687b      	ldr	r3, [r7, #4]
 80074e8:	681b      	ldr	r3, [r3, #0]
 80074ea:	3308      	adds	r3, #8
 80074ec:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80074ee:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80074f0:	e853 3f00 	ldrex	r3, [r3]
 80074f4:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 80074f6:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80074f8:	f023 0301 	bic.w	r3, r3, #1
 80074fc:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8007500:	687b      	ldr	r3, [r7, #4]
 8007502:	681b      	ldr	r3, [r3, #0]
 8007504:	3308      	adds	r3, #8
 8007506:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 800750a:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 800750e:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007510:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8007512:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8007516:	e841 2300 	strex	r3, r2, [r1]
 800751a:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 800751c:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800751e:	2b00      	cmp	r3, #0
 8007520:	d1e1      	bne.n	80074e6 <HAL_UART_IRQHandler+0x47e>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007522:	687b      	ldr	r3, [r7, #4]
 8007524:	681b      	ldr	r3, [r3, #0]
 8007526:	3308      	adds	r3, #8
 8007528:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800752a:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800752c:	e853 3f00 	ldrex	r3, [r3]
 8007530:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8007532:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8007534:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8007538:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800753c:	687b      	ldr	r3, [r7, #4]
 800753e:	681b      	ldr	r3, [r3, #0]
 8007540:	3308      	adds	r3, #8
 8007542:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8007546:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8007548:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800754a:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 800754c:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800754e:	e841 2300 	strex	r3, r2, [r1]
 8007552:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8007554:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8007556:	2b00      	cmp	r3, #0
 8007558:	d1e3      	bne.n	8007522 <HAL_UART_IRQHandler+0x4ba>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800755a:	687b      	ldr	r3, [r7, #4]
 800755c:	2220      	movs	r2, #32
 800755e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007562:	687b      	ldr	r3, [r7, #4]
 8007564:	2200      	movs	r2, #0
 8007566:	66da      	str	r2, [r3, #108]	@ 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007568:	687b      	ldr	r3, [r7, #4]
 800756a:	681b      	ldr	r3, [r3, #0]
 800756c:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800756e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007570:	e853 3f00 	ldrex	r3, [r3]
 8007574:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8007576:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8007578:	f023 0310 	bic.w	r3, r3, #16
 800757c:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8007580:	687b      	ldr	r3, [r7, #4]
 8007582:	681b      	ldr	r3, [r3, #0]
 8007584:	461a      	mov	r2, r3
 8007586:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800758a:	65bb      	str	r3, [r7, #88]	@ 0x58
 800758c:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800758e:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8007590:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8007592:	e841 2300 	strex	r3, r2, [r1]
 8007596:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8007598:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800759a:	2b00      	cmp	r3, #0
 800759c:	d1e4      	bne.n	8007568 <HAL_UART_IRQHandler+0x500>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800759e:	687b      	ldr	r3, [r7, #4]
 80075a0:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80075a4:	4618      	mov	r0, r3
 80075a6:	f7fa fb99 	bl	8001cdc <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80075aa:	687b      	ldr	r3, [r7, #4]
 80075ac:	2202      	movs	r2, #2
 80075ae:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80075b0:	687b      	ldr	r3, [r7, #4]
 80075b2:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 80075b6:	687b      	ldr	r3, [r7, #4]
 80075b8:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 80075bc:	b29b      	uxth	r3, r3
 80075be:	1ad3      	subs	r3, r2, r3
 80075c0:	b29b      	uxth	r3, r3
 80075c2:	4619      	mov	r1, r3
 80075c4:	6878      	ldr	r0, [r7, #4]
 80075c6:	f000 f939 	bl	800783c <HAL_UARTEx_RxEventCallback>
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
          }
        }
      }
      return;
 80075ca:	e119      	b.n	8007800 <HAL_UART_IRQHandler+0x798>
        if (nb_remaining_rx_data == huart->RxXferSize)
 80075cc:	687b      	ldr	r3, [r7, #4]
 80075ce:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 80075d2:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80075d6:	429a      	cmp	r2, r3
 80075d8:	f040 8112 	bne.w	8007800 <HAL_UART_IRQHandler+0x798>
          if (huart->hdmarx->Init.Mode == DMA_CIRCULAR)
 80075dc:	687b      	ldr	r3, [r7, #4]
 80075de:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80075e2:	69db      	ldr	r3, [r3, #28]
 80075e4:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80075e8:	f040 810a 	bne.w	8007800 <HAL_UART_IRQHandler+0x798>
            huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80075ec:	687b      	ldr	r3, [r7, #4]
 80075ee:	2202      	movs	r2, #2
 80075f0:	671a      	str	r2, [r3, #112]	@ 0x70
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80075f2:	687b      	ldr	r3, [r7, #4]
 80075f4:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 80075f8:	4619      	mov	r1, r3
 80075fa:	6878      	ldr	r0, [r7, #4]
 80075fc:	f000 f91e 	bl	800783c <HAL_UARTEx_RxEventCallback>
      return;
 8007600:	e0fe      	b.n	8007800 <HAL_UART_IRQHandler+0x798>
 8007602:	bf00      	nop
 8007604:	40020010 	.word	0x40020010
 8007608:	40020028 	.word	0x40020028
 800760c:	40020040 	.word	0x40020040
 8007610:	40020058 	.word	0x40020058
 8007614:	40020070 	.word	0x40020070
 8007618:	40020088 	.word	0x40020088
 800761c:	400200a0 	.word	0x400200a0
 8007620:	400200b8 	.word	0x400200b8
 8007624:	40020410 	.word	0x40020410
 8007628:	40020428 	.word	0x40020428
 800762c:	40020440 	.word	0x40020440
 8007630:	40020458 	.word	0x40020458
 8007634:	40020470 	.word	0x40020470
 8007638:	40020488 	.word	0x40020488
 800763c:	400204a0 	.word	0x400204a0
 8007640:	400204b8 	.word	0x400204b8
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8007644:	687b      	ldr	r3, [r7, #4]
 8007646:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 800764a:	687b      	ldr	r3, [r7, #4]
 800764c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8007650:	b29b      	uxth	r3, r3
 8007652:	1ad3      	subs	r3, r2, r3
 8007654:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8007658:	687b      	ldr	r3, [r7, #4]
 800765a:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800765e:	b29b      	uxth	r3, r3
 8007660:	2b00      	cmp	r3, #0
 8007662:	f000 80cf 	beq.w	8007804 <HAL_UART_IRQHandler+0x79c>
          && (nb_rx_data > 0U))
 8007666:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800766a:	2b00      	cmp	r3, #0
 800766c:	f000 80ca 	beq.w	8007804 <HAL_UART_IRQHandler+0x79c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8007670:	687b      	ldr	r3, [r7, #4]
 8007672:	681b      	ldr	r3, [r3, #0]
 8007674:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007676:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007678:	e853 3f00 	ldrex	r3, [r3]
 800767c:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800767e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007680:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8007684:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8007688:	687b      	ldr	r3, [r7, #4]
 800768a:	681b      	ldr	r3, [r3, #0]
 800768c:	461a      	mov	r2, r3
 800768e:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8007692:	647b      	str	r3, [r7, #68]	@ 0x44
 8007694:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007696:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8007698:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800769a:	e841 2300 	strex	r3, r2, [r1]
 800769e:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80076a0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80076a2:	2b00      	cmp	r3, #0
 80076a4:	d1e4      	bne.n	8007670 <HAL_UART_IRQHandler+0x608>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80076a6:	687b      	ldr	r3, [r7, #4]
 80076a8:	681b      	ldr	r3, [r3, #0]
 80076aa:	3308      	adds	r3, #8
 80076ac:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80076ae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80076b0:	e853 3f00 	ldrex	r3, [r3]
 80076b4:	623b      	str	r3, [r7, #32]
   return(result);
 80076b6:	6a3a      	ldr	r2, [r7, #32]
 80076b8:	4b55      	ldr	r3, [pc, #340]	@ (8007810 <HAL_UART_IRQHandler+0x7a8>)
 80076ba:	4013      	ands	r3, r2
 80076bc:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 80076c0:	687b      	ldr	r3, [r7, #4]
 80076c2:	681b      	ldr	r3, [r3, #0]
 80076c4:	3308      	adds	r3, #8
 80076c6:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 80076ca:	633a      	str	r2, [r7, #48]	@ 0x30
 80076cc:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80076ce:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80076d0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80076d2:	e841 2300 	strex	r3, r2, [r1]
 80076d6:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80076d8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80076da:	2b00      	cmp	r3, #0
 80076dc:	d1e3      	bne.n	80076a6 <HAL_UART_IRQHandler+0x63e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80076de:	687b      	ldr	r3, [r7, #4]
 80076e0:	2220      	movs	r2, #32
 80076e2:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80076e6:	687b      	ldr	r3, [r7, #4]
 80076e8:	2200      	movs	r2, #0
 80076ea:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 80076ec:	687b      	ldr	r3, [r7, #4]
 80076ee:	2200      	movs	r2, #0
 80076f0:	675a      	str	r2, [r3, #116]	@ 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80076f2:	687b      	ldr	r3, [r7, #4]
 80076f4:	681b      	ldr	r3, [r3, #0]
 80076f6:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80076f8:	693b      	ldr	r3, [r7, #16]
 80076fa:	e853 3f00 	ldrex	r3, [r3]
 80076fe:	60fb      	str	r3, [r7, #12]
   return(result);
 8007700:	68fb      	ldr	r3, [r7, #12]
 8007702:	f023 0310 	bic.w	r3, r3, #16
 8007706:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800770a:	687b      	ldr	r3, [r7, #4]
 800770c:	681b      	ldr	r3, [r3, #0]
 800770e:	461a      	mov	r2, r3
 8007710:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8007714:	61fb      	str	r3, [r7, #28]
 8007716:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007718:	69b9      	ldr	r1, [r7, #24]
 800771a:	69fa      	ldr	r2, [r7, #28]
 800771c:	e841 2300 	strex	r3, r2, [r1]
 8007720:	617b      	str	r3, [r7, #20]
   return(result);
 8007722:	697b      	ldr	r3, [r7, #20]
 8007724:	2b00      	cmp	r3, #0
 8007726:	d1e4      	bne.n	80076f2 <HAL_UART_IRQHandler+0x68a>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8007728:	687b      	ldr	r3, [r7, #4]
 800772a:	2202      	movs	r2, #2
 800772c:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800772e:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8007732:	4619      	mov	r1, r3
 8007734:	6878      	ldr	r0, [r7, #4]
 8007736:	f000 f881 	bl	800783c <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800773a:	e063      	b.n	8007804 <HAL_UART_IRQHandler+0x79c>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800773c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007740:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8007744:	2b00      	cmp	r3, #0
 8007746:	d00e      	beq.n	8007766 <HAL_UART_IRQHandler+0x6fe>
 8007748:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800774c:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8007750:	2b00      	cmp	r3, #0
 8007752:	d008      	beq.n	8007766 <HAL_UART_IRQHandler+0x6fe>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8007754:	687b      	ldr	r3, [r7, #4]
 8007756:	681b      	ldr	r3, [r3, #0]
 8007758:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 800775c:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 800775e:	6878      	ldr	r0, [r7, #4]
 8007760:	f001 ff84 	bl	800966c <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8007764:	e051      	b.n	800780a <HAL_UART_IRQHandler+0x7a2>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 8007766:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800776a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800776e:	2b00      	cmp	r3, #0
 8007770:	d014      	beq.n	800779c <HAL_UART_IRQHandler+0x734>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 8007772:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007776:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800777a:	2b00      	cmp	r3, #0
 800777c:	d105      	bne.n	800778a <HAL_UART_IRQHandler+0x722>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 800777e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8007782:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8007786:	2b00      	cmp	r3, #0
 8007788:	d008      	beq.n	800779c <HAL_UART_IRQHandler+0x734>
  {
    if (huart->TxISR != NULL)
 800778a:	687b      	ldr	r3, [r7, #4]
 800778c:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800778e:	2b00      	cmp	r3, #0
 8007790:	d03a      	beq.n	8007808 <HAL_UART_IRQHandler+0x7a0>
    {
      huart->TxISR(huart);
 8007792:	687b      	ldr	r3, [r7, #4]
 8007794:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8007796:	6878      	ldr	r0, [r7, #4]
 8007798:	4798      	blx	r3
    }
    return;
 800779a:	e035      	b.n	8007808 <HAL_UART_IRQHandler+0x7a0>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800779c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80077a0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80077a4:	2b00      	cmp	r3, #0
 80077a6:	d009      	beq.n	80077bc <HAL_UART_IRQHandler+0x754>
 80077a8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80077ac:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80077b0:	2b00      	cmp	r3, #0
 80077b2:	d003      	beq.n	80077bc <HAL_UART_IRQHandler+0x754>
  {
    UART_EndTransmit_IT(huart);
 80077b4:	6878      	ldr	r0, [r7, #4]
 80077b6:	f001 fa0d 	bl	8008bd4 <UART_EndTransmit_IT>
    return;
 80077ba:	e026      	b.n	800780a <HAL_UART_IRQHandler+0x7a2>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 80077bc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80077c0:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80077c4:	2b00      	cmp	r3, #0
 80077c6:	d009      	beq.n	80077dc <HAL_UART_IRQHandler+0x774>
 80077c8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80077cc:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 80077d0:	2b00      	cmp	r3, #0
 80077d2:	d003      	beq.n	80077dc <HAL_UART_IRQHandler+0x774>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 80077d4:	6878      	ldr	r0, [r7, #4]
 80077d6:	f001 ff5d 	bl	8009694 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80077da:	e016      	b.n	800780a <HAL_UART_IRQHandler+0x7a2>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 80077dc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80077e0:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80077e4:	2b00      	cmp	r3, #0
 80077e6:	d010      	beq.n	800780a <HAL_UART_IRQHandler+0x7a2>
 80077e8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80077ec:	2b00      	cmp	r3, #0
 80077ee:	da0c      	bge.n	800780a <HAL_UART_IRQHandler+0x7a2>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 80077f0:	6878      	ldr	r0, [r7, #4]
 80077f2:	f001 ff45 	bl	8009680 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80077f6:	e008      	b.n	800780a <HAL_UART_IRQHandler+0x7a2>
      return;
 80077f8:	bf00      	nop
 80077fa:	e006      	b.n	800780a <HAL_UART_IRQHandler+0x7a2>
    return;
 80077fc:	bf00      	nop
 80077fe:	e004      	b.n	800780a <HAL_UART_IRQHandler+0x7a2>
      return;
 8007800:	bf00      	nop
 8007802:	e002      	b.n	800780a <HAL_UART_IRQHandler+0x7a2>
      return;
 8007804:	bf00      	nop
 8007806:	e000      	b.n	800780a <HAL_UART_IRQHandler+0x7a2>
    return;
 8007808:	bf00      	nop
  }
}
 800780a:	37e8      	adds	r7, #232	@ 0xe8
 800780c:	46bd      	mov	sp, r7
 800780e:	bd80      	pop	{r7, pc}
 8007810:	effffffe 	.word	0xeffffffe

08007814 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8007814:	b480      	push	{r7}
 8007816:	b083      	sub	sp, #12
 8007818:	af00      	add	r7, sp, #0
 800781a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 800781c:	bf00      	nop
 800781e:	370c      	adds	r7, #12
 8007820:	46bd      	mov	sp, r7
 8007822:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007826:	4770      	bx	lr

08007828 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8007828:	b480      	push	{r7}
 800782a:	b083      	sub	sp, #12
 800782c:	af00      	add	r7, sp, #0
 800782e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8007830:	bf00      	nop
 8007832:	370c      	adds	r7, #12
 8007834:	46bd      	mov	sp, r7
 8007836:	f85d 7b04 	ldr.w	r7, [sp], #4
 800783a:	4770      	bx	lr

0800783c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800783c:	b480      	push	{r7}
 800783e:	b083      	sub	sp, #12
 8007840:	af00      	add	r7, sp, #0
 8007842:	6078      	str	r0, [r7, #4]
 8007844:	460b      	mov	r3, r1
 8007846:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8007848:	bf00      	nop
 800784a:	370c      	adds	r7, #12
 800784c:	46bd      	mov	sp, r7
 800784e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007852:	4770      	bx	lr

08007854 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8007854:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8007858:	b092      	sub	sp, #72	@ 0x48
 800785a:	af00      	add	r7, sp, #0
 800785c:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800785e:	2300      	movs	r3, #0
 8007860:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8007864:	697b      	ldr	r3, [r7, #20]
 8007866:	689a      	ldr	r2, [r3, #8]
 8007868:	697b      	ldr	r3, [r7, #20]
 800786a:	691b      	ldr	r3, [r3, #16]
 800786c:	431a      	orrs	r2, r3
 800786e:	697b      	ldr	r3, [r7, #20]
 8007870:	695b      	ldr	r3, [r3, #20]
 8007872:	431a      	orrs	r2, r3
 8007874:	697b      	ldr	r3, [r7, #20]
 8007876:	69db      	ldr	r3, [r3, #28]
 8007878:	4313      	orrs	r3, r2
 800787a:	647b      	str	r3, [r7, #68]	@ 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800787c:	697b      	ldr	r3, [r7, #20]
 800787e:	681b      	ldr	r3, [r3, #0]
 8007880:	681a      	ldr	r2, [r3, #0]
 8007882:	4bbe      	ldr	r3, [pc, #760]	@ (8007b7c <UART_SetConfig+0x328>)
 8007884:	4013      	ands	r3, r2
 8007886:	697a      	ldr	r2, [r7, #20]
 8007888:	6812      	ldr	r2, [r2, #0]
 800788a:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 800788c:	430b      	orrs	r3, r1
 800788e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8007890:	697b      	ldr	r3, [r7, #20]
 8007892:	681b      	ldr	r3, [r3, #0]
 8007894:	685b      	ldr	r3, [r3, #4]
 8007896:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800789a:	697b      	ldr	r3, [r7, #20]
 800789c:	68da      	ldr	r2, [r3, #12]
 800789e:	697b      	ldr	r3, [r7, #20]
 80078a0:	681b      	ldr	r3, [r3, #0]
 80078a2:	430a      	orrs	r2, r1
 80078a4:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80078a6:	697b      	ldr	r3, [r7, #20]
 80078a8:	699b      	ldr	r3, [r3, #24]
 80078aa:	647b      	str	r3, [r7, #68]	@ 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80078ac:	697b      	ldr	r3, [r7, #20]
 80078ae:	681b      	ldr	r3, [r3, #0]
 80078b0:	4ab3      	ldr	r2, [pc, #716]	@ (8007b80 <UART_SetConfig+0x32c>)
 80078b2:	4293      	cmp	r3, r2
 80078b4:	d004      	beq.n	80078c0 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80078b6:	697b      	ldr	r3, [r7, #20]
 80078b8:	6a1b      	ldr	r3, [r3, #32]
 80078ba:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80078bc:	4313      	orrs	r3, r2
 80078be:	647b      	str	r3, [r7, #68]	@ 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80078c0:	697b      	ldr	r3, [r7, #20]
 80078c2:	681b      	ldr	r3, [r3, #0]
 80078c4:	689a      	ldr	r2, [r3, #8]
 80078c6:	4baf      	ldr	r3, [pc, #700]	@ (8007b84 <UART_SetConfig+0x330>)
 80078c8:	4013      	ands	r3, r2
 80078ca:	697a      	ldr	r2, [r7, #20]
 80078cc:	6812      	ldr	r2, [r2, #0]
 80078ce:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 80078d0:	430b      	orrs	r3, r1
 80078d2:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 80078d4:	697b      	ldr	r3, [r7, #20]
 80078d6:	681b      	ldr	r3, [r3, #0]
 80078d8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80078da:	f023 010f 	bic.w	r1, r3, #15
 80078de:	697b      	ldr	r3, [r7, #20]
 80078e0:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80078e2:	697b      	ldr	r3, [r7, #20]
 80078e4:	681b      	ldr	r3, [r3, #0]
 80078e6:	430a      	orrs	r2, r1
 80078e8:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80078ea:	697b      	ldr	r3, [r7, #20]
 80078ec:	681b      	ldr	r3, [r3, #0]
 80078ee:	4aa6      	ldr	r2, [pc, #664]	@ (8007b88 <UART_SetConfig+0x334>)
 80078f0:	4293      	cmp	r3, r2
 80078f2:	d177      	bne.n	80079e4 <UART_SetConfig+0x190>
 80078f4:	4ba5      	ldr	r3, [pc, #660]	@ (8007b8c <UART_SetConfig+0x338>)
 80078f6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80078f8:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80078fc:	2b28      	cmp	r3, #40	@ 0x28
 80078fe:	d86d      	bhi.n	80079dc <UART_SetConfig+0x188>
 8007900:	a201      	add	r2, pc, #4	@ (adr r2, 8007908 <UART_SetConfig+0xb4>)
 8007902:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007906:	bf00      	nop
 8007908:	080079ad 	.word	0x080079ad
 800790c:	080079dd 	.word	0x080079dd
 8007910:	080079dd 	.word	0x080079dd
 8007914:	080079dd 	.word	0x080079dd
 8007918:	080079dd 	.word	0x080079dd
 800791c:	080079dd 	.word	0x080079dd
 8007920:	080079dd 	.word	0x080079dd
 8007924:	080079dd 	.word	0x080079dd
 8007928:	080079b5 	.word	0x080079b5
 800792c:	080079dd 	.word	0x080079dd
 8007930:	080079dd 	.word	0x080079dd
 8007934:	080079dd 	.word	0x080079dd
 8007938:	080079dd 	.word	0x080079dd
 800793c:	080079dd 	.word	0x080079dd
 8007940:	080079dd 	.word	0x080079dd
 8007944:	080079dd 	.word	0x080079dd
 8007948:	080079bd 	.word	0x080079bd
 800794c:	080079dd 	.word	0x080079dd
 8007950:	080079dd 	.word	0x080079dd
 8007954:	080079dd 	.word	0x080079dd
 8007958:	080079dd 	.word	0x080079dd
 800795c:	080079dd 	.word	0x080079dd
 8007960:	080079dd 	.word	0x080079dd
 8007964:	080079dd 	.word	0x080079dd
 8007968:	080079c5 	.word	0x080079c5
 800796c:	080079dd 	.word	0x080079dd
 8007970:	080079dd 	.word	0x080079dd
 8007974:	080079dd 	.word	0x080079dd
 8007978:	080079dd 	.word	0x080079dd
 800797c:	080079dd 	.word	0x080079dd
 8007980:	080079dd 	.word	0x080079dd
 8007984:	080079dd 	.word	0x080079dd
 8007988:	080079cd 	.word	0x080079cd
 800798c:	080079dd 	.word	0x080079dd
 8007990:	080079dd 	.word	0x080079dd
 8007994:	080079dd 	.word	0x080079dd
 8007998:	080079dd 	.word	0x080079dd
 800799c:	080079dd 	.word	0x080079dd
 80079a0:	080079dd 	.word	0x080079dd
 80079a4:	080079dd 	.word	0x080079dd
 80079a8:	080079d5 	.word	0x080079d5
 80079ac:	2301      	movs	r3, #1
 80079ae:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80079b2:	e326      	b.n	8008002 <UART_SetConfig+0x7ae>
 80079b4:	2304      	movs	r3, #4
 80079b6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80079ba:	e322      	b.n	8008002 <UART_SetConfig+0x7ae>
 80079bc:	2308      	movs	r3, #8
 80079be:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80079c2:	e31e      	b.n	8008002 <UART_SetConfig+0x7ae>
 80079c4:	2310      	movs	r3, #16
 80079c6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80079ca:	e31a      	b.n	8008002 <UART_SetConfig+0x7ae>
 80079cc:	2320      	movs	r3, #32
 80079ce:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80079d2:	e316      	b.n	8008002 <UART_SetConfig+0x7ae>
 80079d4:	2340      	movs	r3, #64	@ 0x40
 80079d6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80079da:	e312      	b.n	8008002 <UART_SetConfig+0x7ae>
 80079dc:	2380      	movs	r3, #128	@ 0x80
 80079de:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80079e2:	e30e      	b.n	8008002 <UART_SetConfig+0x7ae>
 80079e4:	697b      	ldr	r3, [r7, #20]
 80079e6:	681b      	ldr	r3, [r3, #0]
 80079e8:	4a69      	ldr	r2, [pc, #420]	@ (8007b90 <UART_SetConfig+0x33c>)
 80079ea:	4293      	cmp	r3, r2
 80079ec:	d130      	bne.n	8007a50 <UART_SetConfig+0x1fc>
 80079ee:	4b67      	ldr	r3, [pc, #412]	@ (8007b8c <UART_SetConfig+0x338>)
 80079f0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80079f2:	f003 0307 	and.w	r3, r3, #7
 80079f6:	2b05      	cmp	r3, #5
 80079f8:	d826      	bhi.n	8007a48 <UART_SetConfig+0x1f4>
 80079fa:	a201      	add	r2, pc, #4	@ (adr r2, 8007a00 <UART_SetConfig+0x1ac>)
 80079fc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007a00:	08007a19 	.word	0x08007a19
 8007a04:	08007a21 	.word	0x08007a21
 8007a08:	08007a29 	.word	0x08007a29
 8007a0c:	08007a31 	.word	0x08007a31
 8007a10:	08007a39 	.word	0x08007a39
 8007a14:	08007a41 	.word	0x08007a41
 8007a18:	2300      	movs	r3, #0
 8007a1a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007a1e:	e2f0      	b.n	8008002 <UART_SetConfig+0x7ae>
 8007a20:	2304      	movs	r3, #4
 8007a22:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007a26:	e2ec      	b.n	8008002 <UART_SetConfig+0x7ae>
 8007a28:	2308      	movs	r3, #8
 8007a2a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007a2e:	e2e8      	b.n	8008002 <UART_SetConfig+0x7ae>
 8007a30:	2310      	movs	r3, #16
 8007a32:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007a36:	e2e4      	b.n	8008002 <UART_SetConfig+0x7ae>
 8007a38:	2320      	movs	r3, #32
 8007a3a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007a3e:	e2e0      	b.n	8008002 <UART_SetConfig+0x7ae>
 8007a40:	2340      	movs	r3, #64	@ 0x40
 8007a42:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007a46:	e2dc      	b.n	8008002 <UART_SetConfig+0x7ae>
 8007a48:	2380      	movs	r3, #128	@ 0x80
 8007a4a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007a4e:	e2d8      	b.n	8008002 <UART_SetConfig+0x7ae>
 8007a50:	697b      	ldr	r3, [r7, #20]
 8007a52:	681b      	ldr	r3, [r3, #0]
 8007a54:	4a4f      	ldr	r2, [pc, #316]	@ (8007b94 <UART_SetConfig+0x340>)
 8007a56:	4293      	cmp	r3, r2
 8007a58:	d130      	bne.n	8007abc <UART_SetConfig+0x268>
 8007a5a:	4b4c      	ldr	r3, [pc, #304]	@ (8007b8c <UART_SetConfig+0x338>)
 8007a5c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007a5e:	f003 0307 	and.w	r3, r3, #7
 8007a62:	2b05      	cmp	r3, #5
 8007a64:	d826      	bhi.n	8007ab4 <UART_SetConfig+0x260>
 8007a66:	a201      	add	r2, pc, #4	@ (adr r2, 8007a6c <UART_SetConfig+0x218>)
 8007a68:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007a6c:	08007a85 	.word	0x08007a85
 8007a70:	08007a8d 	.word	0x08007a8d
 8007a74:	08007a95 	.word	0x08007a95
 8007a78:	08007a9d 	.word	0x08007a9d
 8007a7c:	08007aa5 	.word	0x08007aa5
 8007a80:	08007aad 	.word	0x08007aad
 8007a84:	2300      	movs	r3, #0
 8007a86:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007a8a:	e2ba      	b.n	8008002 <UART_SetConfig+0x7ae>
 8007a8c:	2304      	movs	r3, #4
 8007a8e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007a92:	e2b6      	b.n	8008002 <UART_SetConfig+0x7ae>
 8007a94:	2308      	movs	r3, #8
 8007a96:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007a9a:	e2b2      	b.n	8008002 <UART_SetConfig+0x7ae>
 8007a9c:	2310      	movs	r3, #16
 8007a9e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007aa2:	e2ae      	b.n	8008002 <UART_SetConfig+0x7ae>
 8007aa4:	2320      	movs	r3, #32
 8007aa6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007aaa:	e2aa      	b.n	8008002 <UART_SetConfig+0x7ae>
 8007aac:	2340      	movs	r3, #64	@ 0x40
 8007aae:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007ab2:	e2a6      	b.n	8008002 <UART_SetConfig+0x7ae>
 8007ab4:	2380      	movs	r3, #128	@ 0x80
 8007ab6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007aba:	e2a2      	b.n	8008002 <UART_SetConfig+0x7ae>
 8007abc:	697b      	ldr	r3, [r7, #20]
 8007abe:	681b      	ldr	r3, [r3, #0]
 8007ac0:	4a35      	ldr	r2, [pc, #212]	@ (8007b98 <UART_SetConfig+0x344>)
 8007ac2:	4293      	cmp	r3, r2
 8007ac4:	d130      	bne.n	8007b28 <UART_SetConfig+0x2d4>
 8007ac6:	4b31      	ldr	r3, [pc, #196]	@ (8007b8c <UART_SetConfig+0x338>)
 8007ac8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007aca:	f003 0307 	and.w	r3, r3, #7
 8007ace:	2b05      	cmp	r3, #5
 8007ad0:	d826      	bhi.n	8007b20 <UART_SetConfig+0x2cc>
 8007ad2:	a201      	add	r2, pc, #4	@ (adr r2, 8007ad8 <UART_SetConfig+0x284>)
 8007ad4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007ad8:	08007af1 	.word	0x08007af1
 8007adc:	08007af9 	.word	0x08007af9
 8007ae0:	08007b01 	.word	0x08007b01
 8007ae4:	08007b09 	.word	0x08007b09
 8007ae8:	08007b11 	.word	0x08007b11
 8007aec:	08007b19 	.word	0x08007b19
 8007af0:	2300      	movs	r3, #0
 8007af2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007af6:	e284      	b.n	8008002 <UART_SetConfig+0x7ae>
 8007af8:	2304      	movs	r3, #4
 8007afa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007afe:	e280      	b.n	8008002 <UART_SetConfig+0x7ae>
 8007b00:	2308      	movs	r3, #8
 8007b02:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007b06:	e27c      	b.n	8008002 <UART_SetConfig+0x7ae>
 8007b08:	2310      	movs	r3, #16
 8007b0a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007b0e:	e278      	b.n	8008002 <UART_SetConfig+0x7ae>
 8007b10:	2320      	movs	r3, #32
 8007b12:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007b16:	e274      	b.n	8008002 <UART_SetConfig+0x7ae>
 8007b18:	2340      	movs	r3, #64	@ 0x40
 8007b1a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007b1e:	e270      	b.n	8008002 <UART_SetConfig+0x7ae>
 8007b20:	2380      	movs	r3, #128	@ 0x80
 8007b22:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007b26:	e26c      	b.n	8008002 <UART_SetConfig+0x7ae>
 8007b28:	697b      	ldr	r3, [r7, #20]
 8007b2a:	681b      	ldr	r3, [r3, #0]
 8007b2c:	4a1b      	ldr	r2, [pc, #108]	@ (8007b9c <UART_SetConfig+0x348>)
 8007b2e:	4293      	cmp	r3, r2
 8007b30:	d142      	bne.n	8007bb8 <UART_SetConfig+0x364>
 8007b32:	4b16      	ldr	r3, [pc, #88]	@ (8007b8c <UART_SetConfig+0x338>)
 8007b34:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007b36:	f003 0307 	and.w	r3, r3, #7
 8007b3a:	2b05      	cmp	r3, #5
 8007b3c:	d838      	bhi.n	8007bb0 <UART_SetConfig+0x35c>
 8007b3e:	a201      	add	r2, pc, #4	@ (adr r2, 8007b44 <UART_SetConfig+0x2f0>)
 8007b40:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007b44:	08007b5d 	.word	0x08007b5d
 8007b48:	08007b65 	.word	0x08007b65
 8007b4c:	08007b6d 	.word	0x08007b6d
 8007b50:	08007b75 	.word	0x08007b75
 8007b54:	08007ba1 	.word	0x08007ba1
 8007b58:	08007ba9 	.word	0x08007ba9
 8007b5c:	2300      	movs	r3, #0
 8007b5e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007b62:	e24e      	b.n	8008002 <UART_SetConfig+0x7ae>
 8007b64:	2304      	movs	r3, #4
 8007b66:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007b6a:	e24a      	b.n	8008002 <UART_SetConfig+0x7ae>
 8007b6c:	2308      	movs	r3, #8
 8007b6e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007b72:	e246      	b.n	8008002 <UART_SetConfig+0x7ae>
 8007b74:	2310      	movs	r3, #16
 8007b76:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007b7a:	e242      	b.n	8008002 <UART_SetConfig+0x7ae>
 8007b7c:	cfff69f3 	.word	0xcfff69f3
 8007b80:	58000c00 	.word	0x58000c00
 8007b84:	11fff4ff 	.word	0x11fff4ff
 8007b88:	40011000 	.word	0x40011000
 8007b8c:	58024400 	.word	0x58024400
 8007b90:	40004400 	.word	0x40004400
 8007b94:	40004800 	.word	0x40004800
 8007b98:	40004c00 	.word	0x40004c00
 8007b9c:	40005000 	.word	0x40005000
 8007ba0:	2320      	movs	r3, #32
 8007ba2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007ba6:	e22c      	b.n	8008002 <UART_SetConfig+0x7ae>
 8007ba8:	2340      	movs	r3, #64	@ 0x40
 8007baa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007bae:	e228      	b.n	8008002 <UART_SetConfig+0x7ae>
 8007bb0:	2380      	movs	r3, #128	@ 0x80
 8007bb2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007bb6:	e224      	b.n	8008002 <UART_SetConfig+0x7ae>
 8007bb8:	697b      	ldr	r3, [r7, #20]
 8007bba:	681b      	ldr	r3, [r3, #0]
 8007bbc:	4ab1      	ldr	r2, [pc, #708]	@ (8007e84 <UART_SetConfig+0x630>)
 8007bbe:	4293      	cmp	r3, r2
 8007bc0:	d176      	bne.n	8007cb0 <UART_SetConfig+0x45c>
 8007bc2:	4bb1      	ldr	r3, [pc, #708]	@ (8007e88 <UART_SetConfig+0x634>)
 8007bc4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007bc6:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8007bca:	2b28      	cmp	r3, #40	@ 0x28
 8007bcc:	d86c      	bhi.n	8007ca8 <UART_SetConfig+0x454>
 8007bce:	a201      	add	r2, pc, #4	@ (adr r2, 8007bd4 <UART_SetConfig+0x380>)
 8007bd0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007bd4:	08007c79 	.word	0x08007c79
 8007bd8:	08007ca9 	.word	0x08007ca9
 8007bdc:	08007ca9 	.word	0x08007ca9
 8007be0:	08007ca9 	.word	0x08007ca9
 8007be4:	08007ca9 	.word	0x08007ca9
 8007be8:	08007ca9 	.word	0x08007ca9
 8007bec:	08007ca9 	.word	0x08007ca9
 8007bf0:	08007ca9 	.word	0x08007ca9
 8007bf4:	08007c81 	.word	0x08007c81
 8007bf8:	08007ca9 	.word	0x08007ca9
 8007bfc:	08007ca9 	.word	0x08007ca9
 8007c00:	08007ca9 	.word	0x08007ca9
 8007c04:	08007ca9 	.word	0x08007ca9
 8007c08:	08007ca9 	.word	0x08007ca9
 8007c0c:	08007ca9 	.word	0x08007ca9
 8007c10:	08007ca9 	.word	0x08007ca9
 8007c14:	08007c89 	.word	0x08007c89
 8007c18:	08007ca9 	.word	0x08007ca9
 8007c1c:	08007ca9 	.word	0x08007ca9
 8007c20:	08007ca9 	.word	0x08007ca9
 8007c24:	08007ca9 	.word	0x08007ca9
 8007c28:	08007ca9 	.word	0x08007ca9
 8007c2c:	08007ca9 	.word	0x08007ca9
 8007c30:	08007ca9 	.word	0x08007ca9
 8007c34:	08007c91 	.word	0x08007c91
 8007c38:	08007ca9 	.word	0x08007ca9
 8007c3c:	08007ca9 	.word	0x08007ca9
 8007c40:	08007ca9 	.word	0x08007ca9
 8007c44:	08007ca9 	.word	0x08007ca9
 8007c48:	08007ca9 	.word	0x08007ca9
 8007c4c:	08007ca9 	.word	0x08007ca9
 8007c50:	08007ca9 	.word	0x08007ca9
 8007c54:	08007c99 	.word	0x08007c99
 8007c58:	08007ca9 	.word	0x08007ca9
 8007c5c:	08007ca9 	.word	0x08007ca9
 8007c60:	08007ca9 	.word	0x08007ca9
 8007c64:	08007ca9 	.word	0x08007ca9
 8007c68:	08007ca9 	.word	0x08007ca9
 8007c6c:	08007ca9 	.word	0x08007ca9
 8007c70:	08007ca9 	.word	0x08007ca9
 8007c74:	08007ca1 	.word	0x08007ca1
 8007c78:	2301      	movs	r3, #1
 8007c7a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007c7e:	e1c0      	b.n	8008002 <UART_SetConfig+0x7ae>
 8007c80:	2304      	movs	r3, #4
 8007c82:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007c86:	e1bc      	b.n	8008002 <UART_SetConfig+0x7ae>
 8007c88:	2308      	movs	r3, #8
 8007c8a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007c8e:	e1b8      	b.n	8008002 <UART_SetConfig+0x7ae>
 8007c90:	2310      	movs	r3, #16
 8007c92:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007c96:	e1b4      	b.n	8008002 <UART_SetConfig+0x7ae>
 8007c98:	2320      	movs	r3, #32
 8007c9a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007c9e:	e1b0      	b.n	8008002 <UART_SetConfig+0x7ae>
 8007ca0:	2340      	movs	r3, #64	@ 0x40
 8007ca2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007ca6:	e1ac      	b.n	8008002 <UART_SetConfig+0x7ae>
 8007ca8:	2380      	movs	r3, #128	@ 0x80
 8007caa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007cae:	e1a8      	b.n	8008002 <UART_SetConfig+0x7ae>
 8007cb0:	697b      	ldr	r3, [r7, #20]
 8007cb2:	681b      	ldr	r3, [r3, #0]
 8007cb4:	4a75      	ldr	r2, [pc, #468]	@ (8007e8c <UART_SetConfig+0x638>)
 8007cb6:	4293      	cmp	r3, r2
 8007cb8:	d130      	bne.n	8007d1c <UART_SetConfig+0x4c8>
 8007cba:	4b73      	ldr	r3, [pc, #460]	@ (8007e88 <UART_SetConfig+0x634>)
 8007cbc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007cbe:	f003 0307 	and.w	r3, r3, #7
 8007cc2:	2b05      	cmp	r3, #5
 8007cc4:	d826      	bhi.n	8007d14 <UART_SetConfig+0x4c0>
 8007cc6:	a201      	add	r2, pc, #4	@ (adr r2, 8007ccc <UART_SetConfig+0x478>)
 8007cc8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007ccc:	08007ce5 	.word	0x08007ce5
 8007cd0:	08007ced 	.word	0x08007ced
 8007cd4:	08007cf5 	.word	0x08007cf5
 8007cd8:	08007cfd 	.word	0x08007cfd
 8007cdc:	08007d05 	.word	0x08007d05
 8007ce0:	08007d0d 	.word	0x08007d0d
 8007ce4:	2300      	movs	r3, #0
 8007ce6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007cea:	e18a      	b.n	8008002 <UART_SetConfig+0x7ae>
 8007cec:	2304      	movs	r3, #4
 8007cee:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007cf2:	e186      	b.n	8008002 <UART_SetConfig+0x7ae>
 8007cf4:	2308      	movs	r3, #8
 8007cf6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007cfa:	e182      	b.n	8008002 <UART_SetConfig+0x7ae>
 8007cfc:	2310      	movs	r3, #16
 8007cfe:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007d02:	e17e      	b.n	8008002 <UART_SetConfig+0x7ae>
 8007d04:	2320      	movs	r3, #32
 8007d06:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007d0a:	e17a      	b.n	8008002 <UART_SetConfig+0x7ae>
 8007d0c:	2340      	movs	r3, #64	@ 0x40
 8007d0e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007d12:	e176      	b.n	8008002 <UART_SetConfig+0x7ae>
 8007d14:	2380      	movs	r3, #128	@ 0x80
 8007d16:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007d1a:	e172      	b.n	8008002 <UART_SetConfig+0x7ae>
 8007d1c:	697b      	ldr	r3, [r7, #20]
 8007d1e:	681b      	ldr	r3, [r3, #0]
 8007d20:	4a5b      	ldr	r2, [pc, #364]	@ (8007e90 <UART_SetConfig+0x63c>)
 8007d22:	4293      	cmp	r3, r2
 8007d24:	d130      	bne.n	8007d88 <UART_SetConfig+0x534>
 8007d26:	4b58      	ldr	r3, [pc, #352]	@ (8007e88 <UART_SetConfig+0x634>)
 8007d28:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007d2a:	f003 0307 	and.w	r3, r3, #7
 8007d2e:	2b05      	cmp	r3, #5
 8007d30:	d826      	bhi.n	8007d80 <UART_SetConfig+0x52c>
 8007d32:	a201      	add	r2, pc, #4	@ (adr r2, 8007d38 <UART_SetConfig+0x4e4>)
 8007d34:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007d38:	08007d51 	.word	0x08007d51
 8007d3c:	08007d59 	.word	0x08007d59
 8007d40:	08007d61 	.word	0x08007d61
 8007d44:	08007d69 	.word	0x08007d69
 8007d48:	08007d71 	.word	0x08007d71
 8007d4c:	08007d79 	.word	0x08007d79
 8007d50:	2300      	movs	r3, #0
 8007d52:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007d56:	e154      	b.n	8008002 <UART_SetConfig+0x7ae>
 8007d58:	2304      	movs	r3, #4
 8007d5a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007d5e:	e150      	b.n	8008002 <UART_SetConfig+0x7ae>
 8007d60:	2308      	movs	r3, #8
 8007d62:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007d66:	e14c      	b.n	8008002 <UART_SetConfig+0x7ae>
 8007d68:	2310      	movs	r3, #16
 8007d6a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007d6e:	e148      	b.n	8008002 <UART_SetConfig+0x7ae>
 8007d70:	2320      	movs	r3, #32
 8007d72:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007d76:	e144      	b.n	8008002 <UART_SetConfig+0x7ae>
 8007d78:	2340      	movs	r3, #64	@ 0x40
 8007d7a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007d7e:	e140      	b.n	8008002 <UART_SetConfig+0x7ae>
 8007d80:	2380      	movs	r3, #128	@ 0x80
 8007d82:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007d86:	e13c      	b.n	8008002 <UART_SetConfig+0x7ae>
 8007d88:	697b      	ldr	r3, [r7, #20]
 8007d8a:	681b      	ldr	r3, [r3, #0]
 8007d8c:	4a41      	ldr	r2, [pc, #260]	@ (8007e94 <UART_SetConfig+0x640>)
 8007d8e:	4293      	cmp	r3, r2
 8007d90:	f040 8082 	bne.w	8007e98 <UART_SetConfig+0x644>
 8007d94:	4b3c      	ldr	r3, [pc, #240]	@ (8007e88 <UART_SetConfig+0x634>)
 8007d96:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007d98:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8007d9c:	2b28      	cmp	r3, #40	@ 0x28
 8007d9e:	d86d      	bhi.n	8007e7c <UART_SetConfig+0x628>
 8007da0:	a201      	add	r2, pc, #4	@ (adr r2, 8007da8 <UART_SetConfig+0x554>)
 8007da2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007da6:	bf00      	nop
 8007da8:	08007e4d 	.word	0x08007e4d
 8007dac:	08007e7d 	.word	0x08007e7d
 8007db0:	08007e7d 	.word	0x08007e7d
 8007db4:	08007e7d 	.word	0x08007e7d
 8007db8:	08007e7d 	.word	0x08007e7d
 8007dbc:	08007e7d 	.word	0x08007e7d
 8007dc0:	08007e7d 	.word	0x08007e7d
 8007dc4:	08007e7d 	.word	0x08007e7d
 8007dc8:	08007e55 	.word	0x08007e55
 8007dcc:	08007e7d 	.word	0x08007e7d
 8007dd0:	08007e7d 	.word	0x08007e7d
 8007dd4:	08007e7d 	.word	0x08007e7d
 8007dd8:	08007e7d 	.word	0x08007e7d
 8007ddc:	08007e7d 	.word	0x08007e7d
 8007de0:	08007e7d 	.word	0x08007e7d
 8007de4:	08007e7d 	.word	0x08007e7d
 8007de8:	08007e5d 	.word	0x08007e5d
 8007dec:	08007e7d 	.word	0x08007e7d
 8007df0:	08007e7d 	.word	0x08007e7d
 8007df4:	08007e7d 	.word	0x08007e7d
 8007df8:	08007e7d 	.word	0x08007e7d
 8007dfc:	08007e7d 	.word	0x08007e7d
 8007e00:	08007e7d 	.word	0x08007e7d
 8007e04:	08007e7d 	.word	0x08007e7d
 8007e08:	08007e65 	.word	0x08007e65
 8007e0c:	08007e7d 	.word	0x08007e7d
 8007e10:	08007e7d 	.word	0x08007e7d
 8007e14:	08007e7d 	.word	0x08007e7d
 8007e18:	08007e7d 	.word	0x08007e7d
 8007e1c:	08007e7d 	.word	0x08007e7d
 8007e20:	08007e7d 	.word	0x08007e7d
 8007e24:	08007e7d 	.word	0x08007e7d
 8007e28:	08007e6d 	.word	0x08007e6d
 8007e2c:	08007e7d 	.word	0x08007e7d
 8007e30:	08007e7d 	.word	0x08007e7d
 8007e34:	08007e7d 	.word	0x08007e7d
 8007e38:	08007e7d 	.word	0x08007e7d
 8007e3c:	08007e7d 	.word	0x08007e7d
 8007e40:	08007e7d 	.word	0x08007e7d
 8007e44:	08007e7d 	.word	0x08007e7d
 8007e48:	08007e75 	.word	0x08007e75
 8007e4c:	2301      	movs	r3, #1
 8007e4e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007e52:	e0d6      	b.n	8008002 <UART_SetConfig+0x7ae>
 8007e54:	2304      	movs	r3, #4
 8007e56:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007e5a:	e0d2      	b.n	8008002 <UART_SetConfig+0x7ae>
 8007e5c:	2308      	movs	r3, #8
 8007e5e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007e62:	e0ce      	b.n	8008002 <UART_SetConfig+0x7ae>
 8007e64:	2310      	movs	r3, #16
 8007e66:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007e6a:	e0ca      	b.n	8008002 <UART_SetConfig+0x7ae>
 8007e6c:	2320      	movs	r3, #32
 8007e6e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007e72:	e0c6      	b.n	8008002 <UART_SetConfig+0x7ae>
 8007e74:	2340      	movs	r3, #64	@ 0x40
 8007e76:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007e7a:	e0c2      	b.n	8008002 <UART_SetConfig+0x7ae>
 8007e7c:	2380      	movs	r3, #128	@ 0x80
 8007e7e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007e82:	e0be      	b.n	8008002 <UART_SetConfig+0x7ae>
 8007e84:	40011400 	.word	0x40011400
 8007e88:	58024400 	.word	0x58024400
 8007e8c:	40007800 	.word	0x40007800
 8007e90:	40007c00 	.word	0x40007c00
 8007e94:	40011800 	.word	0x40011800
 8007e98:	697b      	ldr	r3, [r7, #20]
 8007e9a:	681b      	ldr	r3, [r3, #0]
 8007e9c:	4aad      	ldr	r2, [pc, #692]	@ (8008154 <UART_SetConfig+0x900>)
 8007e9e:	4293      	cmp	r3, r2
 8007ea0:	d176      	bne.n	8007f90 <UART_SetConfig+0x73c>
 8007ea2:	4bad      	ldr	r3, [pc, #692]	@ (8008158 <UART_SetConfig+0x904>)
 8007ea4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007ea6:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8007eaa:	2b28      	cmp	r3, #40	@ 0x28
 8007eac:	d86c      	bhi.n	8007f88 <UART_SetConfig+0x734>
 8007eae:	a201      	add	r2, pc, #4	@ (adr r2, 8007eb4 <UART_SetConfig+0x660>)
 8007eb0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007eb4:	08007f59 	.word	0x08007f59
 8007eb8:	08007f89 	.word	0x08007f89
 8007ebc:	08007f89 	.word	0x08007f89
 8007ec0:	08007f89 	.word	0x08007f89
 8007ec4:	08007f89 	.word	0x08007f89
 8007ec8:	08007f89 	.word	0x08007f89
 8007ecc:	08007f89 	.word	0x08007f89
 8007ed0:	08007f89 	.word	0x08007f89
 8007ed4:	08007f61 	.word	0x08007f61
 8007ed8:	08007f89 	.word	0x08007f89
 8007edc:	08007f89 	.word	0x08007f89
 8007ee0:	08007f89 	.word	0x08007f89
 8007ee4:	08007f89 	.word	0x08007f89
 8007ee8:	08007f89 	.word	0x08007f89
 8007eec:	08007f89 	.word	0x08007f89
 8007ef0:	08007f89 	.word	0x08007f89
 8007ef4:	08007f69 	.word	0x08007f69
 8007ef8:	08007f89 	.word	0x08007f89
 8007efc:	08007f89 	.word	0x08007f89
 8007f00:	08007f89 	.word	0x08007f89
 8007f04:	08007f89 	.word	0x08007f89
 8007f08:	08007f89 	.word	0x08007f89
 8007f0c:	08007f89 	.word	0x08007f89
 8007f10:	08007f89 	.word	0x08007f89
 8007f14:	08007f71 	.word	0x08007f71
 8007f18:	08007f89 	.word	0x08007f89
 8007f1c:	08007f89 	.word	0x08007f89
 8007f20:	08007f89 	.word	0x08007f89
 8007f24:	08007f89 	.word	0x08007f89
 8007f28:	08007f89 	.word	0x08007f89
 8007f2c:	08007f89 	.word	0x08007f89
 8007f30:	08007f89 	.word	0x08007f89
 8007f34:	08007f79 	.word	0x08007f79
 8007f38:	08007f89 	.word	0x08007f89
 8007f3c:	08007f89 	.word	0x08007f89
 8007f40:	08007f89 	.word	0x08007f89
 8007f44:	08007f89 	.word	0x08007f89
 8007f48:	08007f89 	.word	0x08007f89
 8007f4c:	08007f89 	.word	0x08007f89
 8007f50:	08007f89 	.word	0x08007f89
 8007f54:	08007f81 	.word	0x08007f81
 8007f58:	2301      	movs	r3, #1
 8007f5a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007f5e:	e050      	b.n	8008002 <UART_SetConfig+0x7ae>
 8007f60:	2304      	movs	r3, #4
 8007f62:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007f66:	e04c      	b.n	8008002 <UART_SetConfig+0x7ae>
 8007f68:	2308      	movs	r3, #8
 8007f6a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007f6e:	e048      	b.n	8008002 <UART_SetConfig+0x7ae>
 8007f70:	2310      	movs	r3, #16
 8007f72:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007f76:	e044      	b.n	8008002 <UART_SetConfig+0x7ae>
 8007f78:	2320      	movs	r3, #32
 8007f7a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007f7e:	e040      	b.n	8008002 <UART_SetConfig+0x7ae>
 8007f80:	2340      	movs	r3, #64	@ 0x40
 8007f82:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007f86:	e03c      	b.n	8008002 <UART_SetConfig+0x7ae>
 8007f88:	2380      	movs	r3, #128	@ 0x80
 8007f8a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007f8e:	e038      	b.n	8008002 <UART_SetConfig+0x7ae>
 8007f90:	697b      	ldr	r3, [r7, #20]
 8007f92:	681b      	ldr	r3, [r3, #0]
 8007f94:	4a71      	ldr	r2, [pc, #452]	@ (800815c <UART_SetConfig+0x908>)
 8007f96:	4293      	cmp	r3, r2
 8007f98:	d130      	bne.n	8007ffc <UART_SetConfig+0x7a8>
 8007f9a:	4b6f      	ldr	r3, [pc, #444]	@ (8008158 <UART_SetConfig+0x904>)
 8007f9c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007f9e:	f003 0307 	and.w	r3, r3, #7
 8007fa2:	2b05      	cmp	r3, #5
 8007fa4:	d826      	bhi.n	8007ff4 <UART_SetConfig+0x7a0>
 8007fa6:	a201      	add	r2, pc, #4	@ (adr r2, 8007fac <UART_SetConfig+0x758>)
 8007fa8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007fac:	08007fc5 	.word	0x08007fc5
 8007fb0:	08007fcd 	.word	0x08007fcd
 8007fb4:	08007fd5 	.word	0x08007fd5
 8007fb8:	08007fdd 	.word	0x08007fdd
 8007fbc:	08007fe5 	.word	0x08007fe5
 8007fc0:	08007fed 	.word	0x08007fed
 8007fc4:	2302      	movs	r3, #2
 8007fc6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007fca:	e01a      	b.n	8008002 <UART_SetConfig+0x7ae>
 8007fcc:	2304      	movs	r3, #4
 8007fce:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007fd2:	e016      	b.n	8008002 <UART_SetConfig+0x7ae>
 8007fd4:	2308      	movs	r3, #8
 8007fd6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007fda:	e012      	b.n	8008002 <UART_SetConfig+0x7ae>
 8007fdc:	2310      	movs	r3, #16
 8007fde:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007fe2:	e00e      	b.n	8008002 <UART_SetConfig+0x7ae>
 8007fe4:	2320      	movs	r3, #32
 8007fe6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007fea:	e00a      	b.n	8008002 <UART_SetConfig+0x7ae>
 8007fec:	2340      	movs	r3, #64	@ 0x40
 8007fee:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007ff2:	e006      	b.n	8008002 <UART_SetConfig+0x7ae>
 8007ff4:	2380      	movs	r3, #128	@ 0x80
 8007ff6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007ffa:	e002      	b.n	8008002 <UART_SetConfig+0x7ae>
 8007ffc:	2380      	movs	r3, #128	@ 0x80
 8007ffe:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8008002:	697b      	ldr	r3, [r7, #20]
 8008004:	681b      	ldr	r3, [r3, #0]
 8008006:	4a55      	ldr	r2, [pc, #340]	@ (800815c <UART_SetConfig+0x908>)
 8008008:	4293      	cmp	r3, r2
 800800a:	f040 80f8 	bne.w	80081fe <UART_SetConfig+0x9aa>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800800e:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 8008012:	2b20      	cmp	r3, #32
 8008014:	dc46      	bgt.n	80080a4 <UART_SetConfig+0x850>
 8008016:	2b02      	cmp	r3, #2
 8008018:	db75      	blt.n	8008106 <UART_SetConfig+0x8b2>
 800801a:	3b02      	subs	r3, #2
 800801c:	2b1e      	cmp	r3, #30
 800801e:	d872      	bhi.n	8008106 <UART_SetConfig+0x8b2>
 8008020:	a201      	add	r2, pc, #4	@ (adr r2, 8008028 <UART_SetConfig+0x7d4>)
 8008022:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008026:	bf00      	nop
 8008028:	080080ab 	.word	0x080080ab
 800802c:	08008107 	.word	0x08008107
 8008030:	080080b3 	.word	0x080080b3
 8008034:	08008107 	.word	0x08008107
 8008038:	08008107 	.word	0x08008107
 800803c:	08008107 	.word	0x08008107
 8008040:	080080c3 	.word	0x080080c3
 8008044:	08008107 	.word	0x08008107
 8008048:	08008107 	.word	0x08008107
 800804c:	08008107 	.word	0x08008107
 8008050:	08008107 	.word	0x08008107
 8008054:	08008107 	.word	0x08008107
 8008058:	08008107 	.word	0x08008107
 800805c:	08008107 	.word	0x08008107
 8008060:	080080d3 	.word	0x080080d3
 8008064:	08008107 	.word	0x08008107
 8008068:	08008107 	.word	0x08008107
 800806c:	08008107 	.word	0x08008107
 8008070:	08008107 	.word	0x08008107
 8008074:	08008107 	.word	0x08008107
 8008078:	08008107 	.word	0x08008107
 800807c:	08008107 	.word	0x08008107
 8008080:	08008107 	.word	0x08008107
 8008084:	08008107 	.word	0x08008107
 8008088:	08008107 	.word	0x08008107
 800808c:	08008107 	.word	0x08008107
 8008090:	08008107 	.word	0x08008107
 8008094:	08008107 	.word	0x08008107
 8008098:	08008107 	.word	0x08008107
 800809c:	08008107 	.word	0x08008107
 80080a0:	080080f9 	.word	0x080080f9
 80080a4:	2b40      	cmp	r3, #64	@ 0x40
 80080a6:	d02a      	beq.n	80080fe <UART_SetConfig+0x8aa>
 80080a8:	e02d      	b.n	8008106 <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 80080aa:	f7fd fb39 	bl	8005720 <HAL_RCCEx_GetD3PCLK1Freq>
 80080ae:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 80080b0:	e02f      	b.n	8008112 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80080b2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80080b6:	4618      	mov	r0, r3
 80080b8:	f7fd fb48 	bl	800574c <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 80080bc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80080be:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80080c0:	e027      	b.n	8008112 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80080c2:	f107 0318 	add.w	r3, r7, #24
 80080c6:	4618      	mov	r0, r3
 80080c8:	f7fd fc94 	bl	80059f4 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 80080cc:	69fb      	ldr	r3, [r7, #28]
 80080ce:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80080d0:	e01f      	b.n	8008112 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80080d2:	4b21      	ldr	r3, [pc, #132]	@ (8008158 <UART_SetConfig+0x904>)
 80080d4:	681b      	ldr	r3, [r3, #0]
 80080d6:	f003 0320 	and.w	r3, r3, #32
 80080da:	2b00      	cmp	r3, #0
 80080dc:	d009      	beq.n	80080f2 <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 80080de:	4b1e      	ldr	r3, [pc, #120]	@ (8008158 <UART_SetConfig+0x904>)
 80080e0:	681b      	ldr	r3, [r3, #0]
 80080e2:	08db      	lsrs	r3, r3, #3
 80080e4:	f003 0303 	and.w	r3, r3, #3
 80080e8:	4a1d      	ldr	r2, [pc, #116]	@ (8008160 <UART_SetConfig+0x90c>)
 80080ea:	fa22 f303 	lsr.w	r3, r2, r3
 80080ee:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 80080f0:	e00f      	b.n	8008112 <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 80080f2:	4b1b      	ldr	r3, [pc, #108]	@ (8008160 <UART_SetConfig+0x90c>)
 80080f4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80080f6:	e00c      	b.n	8008112 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 80080f8:	4b1a      	ldr	r3, [pc, #104]	@ (8008164 <UART_SetConfig+0x910>)
 80080fa:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80080fc:	e009      	b.n	8008112 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80080fe:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8008102:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008104:	e005      	b.n	8008112 <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 8008106:	2300      	movs	r3, #0
 8008108:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 800810a:	2301      	movs	r3, #1
 800810c:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 8008110:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8008112:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008114:	2b00      	cmp	r3, #0
 8008116:	f000 81ee 	beq.w	80084f6 <UART_SetConfig+0xca2>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800811a:	697b      	ldr	r3, [r7, #20]
 800811c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800811e:	4a12      	ldr	r2, [pc, #72]	@ (8008168 <UART_SetConfig+0x914>)
 8008120:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008124:	461a      	mov	r2, r3
 8008126:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008128:	fbb3 f3f2 	udiv	r3, r3, r2
 800812c:	633b      	str	r3, [r7, #48]	@ 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800812e:	697b      	ldr	r3, [r7, #20]
 8008130:	685a      	ldr	r2, [r3, #4]
 8008132:	4613      	mov	r3, r2
 8008134:	005b      	lsls	r3, r3, #1
 8008136:	4413      	add	r3, r2
 8008138:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800813a:	429a      	cmp	r2, r3
 800813c:	d305      	bcc.n	800814a <UART_SetConfig+0x8f6>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800813e:	697b      	ldr	r3, [r7, #20]
 8008140:	685b      	ldr	r3, [r3, #4]
 8008142:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8008144:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8008146:	429a      	cmp	r2, r3
 8008148:	d910      	bls.n	800816c <UART_SetConfig+0x918>
      {
        ret = HAL_ERROR;
 800814a:	2301      	movs	r3, #1
 800814c:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 8008150:	e1d1      	b.n	80084f6 <UART_SetConfig+0xca2>
 8008152:	bf00      	nop
 8008154:	40011c00 	.word	0x40011c00
 8008158:	58024400 	.word	0x58024400
 800815c:	58000c00 	.word	0x58000c00
 8008160:	03d09000 	.word	0x03d09000
 8008164:	003d0900 	.word	0x003d0900
 8008168:	0800c1f8 	.word	0x0800c1f8
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800816c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800816e:	2200      	movs	r2, #0
 8008170:	60bb      	str	r3, [r7, #8]
 8008172:	60fa      	str	r2, [r7, #12]
 8008174:	697b      	ldr	r3, [r7, #20]
 8008176:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008178:	4ac0      	ldr	r2, [pc, #768]	@ (800847c <UART_SetConfig+0xc28>)
 800817a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800817e:	b29b      	uxth	r3, r3
 8008180:	2200      	movs	r2, #0
 8008182:	603b      	str	r3, [r7, #0]
 8008184:	607a      	str	r2, [r7, #4]
 8008186:	e9d7 2300 	ldrd	r2, r3, [r7]
 800818a:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800818e:	f7f8 f927 	bl	80003e0 <__aeabi_uldivmod>
 8008192:	4602      	mov	r2, r0
 8008194:	460b      	mov	r3, r1
 8008196:	4610      	mov	r0, r2
 8008198:	4619      	mov	r1, r3
 800819a:	f04f 0200 	mov.w	r2, #0
 800819e:	f04f 0300 	mov.w	r3, #0
 80081a2:	020b      	lsls	r3, r1, #8
 80081a4:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 80081a8:	0202      	lsls	r2, r0, #8
 80081aa:	6979      	ldr	r1, [r7, #20]
 80081ac:	6849      	ldr	r1, [r1, #4]
 80081ae:	0849      	lsrs	r1, r1, #1
 80081b0:	2000      	movs	r0, #0
 80081b2:	460c      	mov	r4, r1
 80081b4:	4605      	mov	r5, r0
 80081b6:	eb12 0804 	adds.w	r8, r2, r4
 80081ba:	eb43 0905 	adc.w	r9, r3, r5
 80081be:	697b      	ldr	r3, [r7, #20]
 80081c0:	685b      	ldr	r3, [r3, #4]
 80081c2:	2200      	movs	r2, #0
 80081c4:	469a      	mov	sl, r3
 80081c6:	4693      	mov	fp, r2
 80081c8:	4652      	mov	r2, sl
 80081ca:	465b      	mov	r3, fp
 80081cc:	4640      	mov	r0, r8
 80081ce:	4649      	mov	r1, r9
 80081d0:	f7f8 f906 	bl	80003e0 <__aeabi_uldivmod>
 80081d4:	4602      	mov	r2, r0
 80081d6:	460b      	mov	r3, r1
 80081d8:	4613      	mov	r3, r2
 80081da:	63bb      	str	r3, [r7, #56]	@ 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80081dc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80081de:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80081e2:	d308      	bcc.n	80081f6 <UART_SetConfig+0x9a2>
 80081e4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80081e6:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80081ea:	d204      	bcs.n	80081f6 <UART_SetConfig+0x9a2>
        {
          huart->Instance->BRR = usartdiv;
 80081ec:	697b      	ldr	r3, [r7, #20]
 80081ee:	681b      	ldr	r3, [r3, #0]
 80081f0:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80081f2:	60da      	str	r2, [r3, #12]
 80081f4:	e17f      	b.n	80084f6 <UART_SetConfig+0xca2>
        }
        else
        {
          ret = HAL_ERROR;
 80081f6:	2301      	movs	r3, #1
 80081f8:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 80081fc:	e17b      	b.n	80084f6 <UART_SetConfig+0xca2>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80081fe:	697b      	ldr	r3, [r7, #20]
 8008200:	69db      	ldr	r3, [r3, #28]
 8008202:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8008206:	f040 80bd 	bne.w	8008384 <UART_SetConfig+0xb30>
  {
    switch (clocksource)
 800820a:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 800820e:	2b20      	cmp	r3, #32
 8008210:	dc48      	bgt.n	80082a4 <UART_SetConfig+0xa50>
 8008212:	2b00      	cmp	r3, #0
 8008214:	db7b      	blt.n	800830e <UART_SetConfig+0xaba>
 8008216:	2b20      	cmp	r3, #32
 8008218:	d879      	bhi.n	800830e <UART_SetConfig+0xaba>
 800821a:	a201      	add	r2, pc, #4	@ (adr r2, 8008220 <UART_SetConfig+0x9cc>)
 800821c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008220:	080082ab 	.word	0x080082ab
 8008224:	080082b3 	.word	0x080082b3
 8008228:	0800830f 	.word	0x0800830f
 800822c:	0800830f 	.word	0x0800830f
 8008230:	080082bb 	.word	0x080082bb
 8008234:	0800830f 	.word	0x0800830f
 8008238:	0800830f 	.word	0x0800830f
 800823c:	0800830f 	.word	0x0800830f
 8008240:	080082cb 	.word	0x080082cb
 8008244:	0800830f 	.word	0x0800830f
 8008248:	0800830f 	.word	0x0800830f
 800824c:	0800830f 	.word	0x0800830f
 8008250:	0800830f 	.word	0x0800830f
 8008254:	0800830f 	.word	0x0800830f
 8008258:	0800830f 	.word	0x0800830f
 800825c:	0800830f 	.word	0x0800830f
 8008260:	080082db 	.word	0x080082db
 8008264:	0800830f 	.word	0x0800830f
 8008268:	0800830f 	.word	0x0800830f
 800826c:	0800830f 	.word	0x0800830f
 8008270:	0800830f 	.word	0x0800830f
 8008274:	0800830f 	.word	0x0800830f
 8008278:	0800830f 	.word	0x0800830f
 800827c:	0800830f 	.word	0x0800830f
 8008280:	0800830f 	.word	0x0800830f
 8008284:	0800830f 	.word	0x0800830f
 8008288:	0800830f 	.word	0x0800830f
 800828c:	0800830f 	.word	0x0800830f
 8008290:	0800830f 	.word	0x0800830f
 8008294:	0800830f 	.word	0x0800830f
 8008298:	0800830f 	.word	0x0800830f
 800829c:	0800830f 	.word	0x0800830f
 80082a0:	08008301 	.word	0x08008301
 80082a4:	2b40      	cmp	r3, #64	@ 0x40
 80082a6:	d02e      	beq.n	8008306 <UART_SetConfig+0xab2>
 80082a8:	e031      	b.n	800830e <UART_SetConfig+0xaba>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80082aa:	f7fc f86d 	bl	8004388 <HAL_RCC_GetPCLK1Freq>
 80082ae:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 80082b0:	e033      	b.n	800831a <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80082b2:	f7fc f87f 	bl	80043b4 <HAL_RCC_GetPCLK2Freq>
 80082b6:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 80082b8:	e02f      	b.n	800831a <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80082ba:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80082be:	4618      	mov	r0, r3
 80082c0:	f7fd fa44 	bl	800574c <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 80082c4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80082c6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80082c8:	e027      	b.n	800831a <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80082ca:	f107 0318 	add.w	r3, r7, #24
 80082ce:	4618      	mov	r0, r3
 80082d0:	f7fd fb90 	bl	80059f4 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 80082d4:	69fb      	ldr	r3, [r7, #28]
 80082d6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80082d8:	e01f      	b.n	800831a <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80082da:	4b69      	ldr	r3, [pc, #420]	@ (8008480 <UART_SetConfig+0xc2c>)
 80082dc:	681b      	ldr	r3, [r3, #0]
 80082de:	f003 0320 	and.w	r3, r3, #32
 80082e2:	2b00      	cmp	r3, #0
 80082e4:	d009      	beq.n	80082fa <UART_SetConfig+0xaa6>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 80082e6:	4b66      	ldr	r3, [pc, #408]	@ (8008480 <UART_SetConfig+0xc2c>)
 80082e8:	681b      	ldr	r3, [r3, #0]
 80082ea:	08db      	lsrs	r3, r3, #3
 80082ec:	f003 0303 	and.w	r3, r3, #3
 80082f0:	4a64      	ldr	r2, [pc, #400]	@ (8008484 <UART_SetConfig+0xc30>)
 80082f2:	fa22 f303 	lsr.w	r3, r2, r3
 80082f6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 80082f8:	e00f      	b.n	800831a <UART_SetConfig+0xac6>
          pclk = (uint32_t) HSI_VALUE;
 80082fa:	4b62      	ldr	r3, [pc, #392]	@ (8008484 <UART_SetConfig+0xc30>)
 80082fc:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80082fe:	e00c      	b.n	800831a <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8008300:	4b61      	ldr	r3, [pc, #388]	@ (8008488 <UART_SetConfig+0xc34>)
 8008302:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008304:	e009      	b.n	800831a <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8008306:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800830a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800830c:	e005      	b.n	800831a <UART_SetConfig+0xac6>
      default:
        pclk = 0U;
 800830e:	2300      	movs	r3, #0
 8008310:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 8008312:	2301      	movs	r3, #1
 8008314:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 8008318:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800831a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800831c:	2b00      	cmp	r3, #0
 800831e:	f000 80ea 	beq.w	80084f6 <UART_SetConfig+0xca2>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8008322:	697b      	ldr	r3, [r7, #20]
 8008324:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008326:	4a55      	ldr	r2, [pc, #340]	@ (800847c <UART_SetConfig+0xc28>)
 8008328:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800832c:	461a      	mov	r2, r3
 800832e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008330:	fbb3 f3f2 	udiv	r3, r3, r2
 8008334:	005a      	lsls	r2, r3, #1
 8008336:	697b      	ldr	r3, [r7, #20]
 8008338:	685b      	ldr	r3, [r3, #4]
 800833a:	085b      	lsrs	r3, r3, #1
 800833c:	441a      	add	r2, r3
 800833e:	697b      	ldr	r3, [r7, #20]
 8008340:	685b      	ldr	r3, [r3, #4]
 8008342:	fbb2 f3f3 	udiv	r3, r2, r3
 8008346:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8008348:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800834a:	2b0f      	cmp	r3, #15
 800834c:	d916      	bls.n	800837c <UART_SetConfig+0xb28>
 800834e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008350:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8008354:	d212      	bcs.n	800837c <UART_SetConfig+0xb28>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8008356:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008358:	b29b      	uxth	r3, r3
 800835a:	f023 030f 	bic.w	r3, r3, #15
 800835e:	86fb      	strh	r3, [r7, #54]	@ 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8008360:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008362:	085b      	lsrs	r3, r3, #1
 8008364:	b29b      	uxth	r3, r3
 8008366:	f003 0307 	and.w	r3, r3, #7
 800836a:	b29a      	uxth	r2, r3
 800836c:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 800836e:	4313      	orrs	r3, r2
 8008370:	86fb      	strh	r3, [r7, #54]	@ 0x36
        huart->Instance->BRR = brrtemp;
 8008372:	697b      	ldr	r3, [r7, #20]
 8008374:	681b      	ldr	r3, [r3, #0]
 8008376:	8efa      	ldrh	r2, [r7, #54]	@ 0x36
 8008378:	60da      	str	r2, [r3, #12]
 800837a:	e0bc      	b.n	80084f6 <UART_SetConfig+0xca2>
      }
      else
      {
        ret = HAL_ERROR;
 800837c:	2301      	movs	r3, #1
 800837e:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 8008382:	e0b8      	b.n	80084f6 <UART_SetConfig+0xca2>
      }
    }
  }
  else
  {
    switch (clocksource)
 8008384:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 8008388:	2b20      	cmp	r3, #32
 800838a:	dc4b      	bgt.n	8008424 <UART_SetConfig+0xbd0>
 800838c:	2b00      	cmp	r3, #0
 800838e:	f2c0 8087 	blt.w	80084a0 <UART_SetConfig+0xc4c>
 8008392:	2b20      	cmp	r3, #32
 8008394:	f200 8084 	bhi.w	80084a0 <UART_SetConfig+0xc4c>
 8008398:	a201      	add	r2, pc, #4	@ (adr r2, 80083a0 <UART_SetConfig+0xb4c>)
 800839a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800839e:	bf00      	nop
 80083a0:	0800842b 	.word	0x0800842b
 80083a4:	08008433 	.word	0x08008433
 80083a8:	080084a1 	.word	0x080084a1
 80083ac:	080084a1 	.word	0x080084a1
 80083b0:	0800843b 	.word	0x0800843b
 80083b4:	080084a1 	.word	0x080084a1
 80083b8:	080084a1 	.word	0x080084a1
 80083bc:	080084a1 	.word	0x080084a1
 80083c0:	0800844b 	.word	0x0800844b
 80083c4:	080084a1 	.word	0x080084a1
 80083c8:	080084a1 	.word	0x080084a1
 80083cc:	080084a1 	.word	0x080084a1
 80083d0:	080084a1 	.word	0x080084a1
 80083d4:	080084a1 	.word	0x080084a1
 80083d8:	080084a1 	.word	0x080084a1
 80083dc:	080084a1 	.word	0x080084a1
 80083e0:	0800845b 	.word	0x0800845b
 80083e4:	080084a1 	.word	0x080084a1
 80083e8:	080084a1 	.word	0x080084a1
 80083ec:	080084a1 	.word	0x080084a1
 80083f0:	080084a1 	.word	0x080084a1
 80083f4:	080084a1 	.word	0x080084a1
 80083f8:	080084a1 	.word	0x080084a1
 80083fc:	080084a1 	.word	0x080084a1
 8008400:	080084a1 	.word	0x080084a1
 8008404:	080084a1 	.word	0x080084a1
 8008408:	080084a1 	.word	0x080084a1
 800840c:	080084a1 	.word	0x080084a1
 8008410:	080084a1 	.word	0x080084a1
 8008414:	080084a1 	.word	0x080084a1
 8008418:	080084a1 	.word	0x080084a1
 800841c:	080084a1 	.word	0x080084a1
 8008420:	08008493 	.word	0x08008493
 8008424:	2b40      	cmp	r3, #64	@ 0x40
 8008426:	d037      	beq.n	8008498 <UART_SetConfig+0xc44>
 8008428:	e03a      	b.n	80084a0 <UART_SetConfig+0xc4c>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800842a:	f7fb ffad 	bl	8004388 <HAL_RCC_GetPCLK1Freq>
 800842e:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8008430:	e03c      	b.n	80084ac <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8008432:	f7fb ffbf 	bl	80043b4 <HAL_RCC_GetPCLK2Freq>
 8008436:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8008438:	e038      	b.n	80084ac <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800843a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800843e:	4618      	mov	r0, r3
 8008440:	f7fd f984 	bl	800574c <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8008444:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008446:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008448:	e030      	b.n	80084ac <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800844a:	f107 0318 	add.w	r3, r7, #24
 800844e:	4618      	mov	r0, r3
 8008450:	f7fd fad0 	bl	80059f4 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8008454:	69fb      	ldr	r3, [r7, #28]
 8008456:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008458:	e028      	b.n	80084ac <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800845a:	4b09      	ldr	r3, [pc, #36]	@ (8008480 <UART_SetConfig+0xc2c>)
 800845c:	681b      	ldr	r3, [r3, #0]
 800845e:	f003 0320 	and.w	r3, r3, #32
 8008462:	2b00      	cmp	r3, #0
 8008464:	d012      	beq.n	800848c <UART_SetConfig+0xc38>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8008466:	4b06      	ldr	r3, [pc, #24]	@ (8008480 <UART_SetConfig+0xc2c>)
 8008468:	681b      	ldr	r3, [r3, #0]
 800846a:	08db      	lsrs	r3, r3, #3
 800846c:	f003 0303 	and.w	r3, r3, #3
 8008470:	4a04      	ldr	r2, [pc, #16]	@ (8008484 <UART_SetConfig+0xc30>)
 8008472:	fa22 f303 	lsr.w	r3, r2, r3
 8008476:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8008478:	e018      	b.n	80084ac <UART_SetConfig+0xc58>
 800847a:	bf00      	nop
 800847c:	0800c1f8 	.word	0x0800c1f8
 8008480:	58024400 	.word	0x58024400
 8008484:	03d09000 	.word	0x03d09000
 8008488:	003d0900 	.word	0x003d0900
          pclk = (uint32_t) HSI_VALUE;
 800848c:	4b24      	ldr	r3, [pc, #144]	@ (8008520 <UART_SetConfig+0xccc>)
 800848e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008490:	e00c      	b.n	80084ac <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8008492:	4b24      	ldr	r3, [pc, #144]	@ (8008524 <UART_SetConfig+0xcd0>)
 8008494:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008496:	e009      	b.n	80084ac <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8008498:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800849c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800849e:	e005      	b.n	80084ac <UART_SetConfig+0xc58>
      default:
        pclk = 0U;
 80084a0:	2300      	movs	r3, #0
 80084a2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 80084a4:	2301      	movs	r3, #1
 80084a6:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 80084aa:	bf00      	nop
    }

    if (pclk != 0U)
 80084ac:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80084ae:	2b00      	cmp	r3, #0
 80084b0:	d021      	beq.n	80084f6 <UART_SetConfig+0xca2>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80084b2:	697b      	ldr	r3, [r7, #20]
 80084b4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80084b6:	4a1c      	ldr	r2, [pc, #112]	@ (8008528 <UART_SetConfig+0xcd4>)
 80084b8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80084bc:	461a      	mov	r2, r3
 80084be:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80084c0:	fbb3 f2f2 	udiv	r2, r3, r2
 80084c4:	697b      	ldr	r3, [r7, #20]
 80084c6:	685b      	ldr	r3, [r3, #4]
 80084c8:	085b      	lsrs	r3, r3, #1
 80084ca:	441a      	add	r2, r3
 80084cc:	697b      	ldr	r3, [r7, #20]
 80084ce:	685b      	ldr	r3, [r3, #4]
 80084d0:	fbb2 f3f3 	udiv	r3, r2, r3
 80084d4:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80084d6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80084d8:	2b0f      	cmp	r3, #15
 80084da:	d909      	bls.n	80084f0 <UART_SetConfig+0xc9c>
 80084dc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80084de:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80084e2:	d205      	bcs.n	80084f0 <UART_SetConfig+0xc9c>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80084e4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80084e6:	b29a      	uxth	r2, r3
 80084e8:	697b      	ldr	r3, [r7, #20]
 80084ea:	681b      	ldr	r3, [r3, #0]
 80084ec:	60da      	str	r2, [r3, #12]
 80084ee:	e002      	b.n	80084f6 <UART_SetConfig+0xca2>
      }
      else
      {
        ret = HAL_ERROR;
 80084f0:	2301      	movs	r3, #1
 80084f2:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 80084f6:	697b      	ldr	r3, [r7, #20]
 80084f8:	2201      	movs	r2, #1
 80084fa:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 80084fe:	697b      	ldr	r3, [r7, #20]
 8008500:	2201      	movs	r2, #1
 8008502:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8008506:	697b      	ldr	r3, [r7, #20]
 8008508:	2200      	movs	r2, #0
 800850a:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 800850c:	697b      	ldr	r3, [r7, #20]
 800850e:	2200      	movs	r2, #0
 8008510:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 8008512:	f897 3042 	ldrb.w	r3, [r7, #66]	@ 0x42
}
 8008516:	4618      	mov	r0, r3
 8008518:	3748      	adds	r7, #72	@ 0x48
 800851a:	46bd      	mov	sp, r7
 800851c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8008520:	03d09000 	.word	0x03d09000
 8008524:	003d0900 	.word	0x003d0900
 8008528:	0800c1f8 	.word	0x0800c1f8

0800852c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800852c:	b480      	push	{r7}
 800852e:	b083      	sub	sp, #12
 8008530:	af00      	add	r7, sp, #0
 8008532:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8008534:	687b      	ldr	r3, [r7, #4]
 8008536:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008538:	f003 0308 	and.w	r3, r3, #8
 800853c:	2b00      	cmp	r3, #0
 800853e:	d00a      	beq.n	8008556 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8008540:	687b      	ldr	r3, [r7, #4]
 8008542:	681b      	ldr	r3, [r3, #0]
 8008544:	685b      	ldr	r3, [r3, #4]
 8008546:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 800854a:	687b      	ldr	r3, [r7, #4]
 800854c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800854e:	687b      	ldr	r3, [r7, #4]
 8008550:	681b      	ldr	r3, [r3, #0]
 8008552:	430a      	orrs	r2, r1
 8008554:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8008556:	687b      	ldr	r3, [r7, #4]
 8008558:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800855a:	f003 0301 	and.w	r3, r3, #1
 800855e:	2b00      	cmp	r3, #0
 8008560:	d00a      	beq.n	8008578 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8008562:	687b      	ldr	r3, [r7, #4]
 8008564:	681b      	ldr	r3, [r3, #0]
 8008566:	685b      	ldr	r3, [r3, #4]
 8008568:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 800856c:	687b      	ldr	r3, [r7, #4]
 800856e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008570:	687b      	ldr	r3, [r7, #4]
 8008572:	681b      	ldr	r3, [r3, #0]
 8008574:	430a      	orrs	r2, r1
 8008576:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8008578:	687b      	ldr	r3, [r7, #4]
 800857a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800857c:	f003 0302 	and.w	r3, r3, #2
 8008580:	2b00      	cmp	r3, #0
 8008582:	d00a      	beq.n	800859a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8008584:	687b      	ldr	r3, [r7, #4]
 8008586:	681b      	ldr	r3, [r3, #0]
 8008588:	685b      	ldr	r3, [r3, #4]
 800858a:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800858e:	687b      	ldr	r3, [r7, #4]
 8008590:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8008592:	687b      	ldr	r3, [r7, #4]
 8008594:	681b      	ldr	r3, [r3, #0]
 8008596:	430a      	orrs	r2, r1
 8008598:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800859a:	687b      	ldr	r3, [r7, #4]
 800859c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800859e:	f003 0304 	and.w	r3, r3, #4
 80085a2:	2b00      	cmp	r3, #0
 80085a4:	d00a      	beq.n	80085bc <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80085a6:	687b      	ldr	r3, [r7, #4]
 80085a8:	681b      	ldr	r3, [r3, #0]
 80085aa:	685b      	ldr	r3, [r3, #4]
 80085ac:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 80085b0:	687b      	ldr	r3, [r7, #4]
 80085b2:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80085b4:	687b      	ldr	r3, [r7, #4]
 80085b6:	681b      	ldr	r3, [r3, #0]
 80085b8:	430a      	orrs	r2, r1
 80085ba:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80085bc:	687b      	ldr	r3, [r7, #4]
 80085be:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80085c0:	f003 0310 	and.w	r3, r3, #16
 80085c4:	2b00      	cmp	r3, #0
 80085c6:	d00a      	beq.n	80085de <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80085c8:	687b      	ldr	r3, [r7, #4]
 80085ca:	681b      	ldr	r3, [r3, #0]
 80085cc:	689b      	ldr	r3, [r3, #8]
 80085ce:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 80085d2:	687b      	ldr	r3, [r7, #4]
 80085d4:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80085d6:	687b      	ldr	r3, [r7, #4]
 80085d8:	681b      	ldr	r3, [r3, #0]
 80085da:	430a      	orrs	r2, r1
 80085dc:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80085de:	687b      	ldr	r3, [r7, #4]
 80085e0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80085e2:	f003 0320 	and.w	r3, r3, #32
 80085e6:	2b00      	cmp	r3, #0
 80085e8:	d00a      	beq.n	8008600 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80085ea:	687b      	ldr	r3, [r7, #4]
 80085ec:	681b      	ldr	r3, [r3, #0]
 80085ee:	689b      	ldr	r3, [r3, #8]
 80085f0:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 80085f4:	687b      	ldr	r3, [r7, #4]
 80085f6:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80085f8:	687b      	ldr	r3, [r7, #4]
 80085fa:	681b      	ldr	r3, [r3, #0]
 80085fc:	430a      	orrs	r2, r1
 80085fe:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8008600:	687b      	ldr	r3, [r7, #4]
 8008602:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008604:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008608:	2b00      	cmp	r3, #0
 800860a:	d01a      	beq.n	8008642 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800860c:	687b      	ldr	r3, [r7, #4]
 800860e:	681b      	ldr	r3, [r3, #0]
 8008610:	685b      	ldr	r3, [r3, #4]
 8008612:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8008616:	687b      	ldr	r3, [r7, #4]
 8008618:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800861a:	687b      	ldr	r3, [r7, #4]
 800861c:	681b      	ldr	r3, [r3, #0]
 800861e:	430a      	orrs	r2, r1
 8008620:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8008622:	687b      	ldr	r3, [r7, #4]
 8008624:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008626:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800862a:	d10a      	bne.n	8008642 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800862c:	687b      	ldr	r3, [r7, #4]
 800862e:	681b      	ldr	r3, [r3, #0]
 8008630:	685b      	ldr	r3, [r3, #4]
 8008632:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8008636:	687b      	ldr	r3, [r7, #4]
 8008638:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800863a:	687b      	ldr	r3, [r7, #4]
 800863c:	681b      	ldr	r3, [r3, #0]
 800863e:	430a      	orrs	r2, r1
 8008640:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8008642:	687b      	ldr	r3, [r7, #4]
 8008644:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008646:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800864a:	2b00      	cmp	r3, #0
 800864c:	d00a      	beq.n	8008664 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800864e:	687b      	ldr	r3, [r7, #4]
 8008650:	681b      	ldr	r3, [r3, #0]
 8008652:	685b      	ldr	r3, [r3, #4]
 8008654:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8008658:	687b      	ldr	r3, [r7, #4]
 800865a:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800865c:	687b      	ldr	r3, [r7, #4]
 800865e:	681b      	ldr	r3, [r3, #0]
 8008660:	430a      	orrs	r2, r1
 8008662:	605a      	str	r2, [r3, #4]
  }
}
 8008664:	bf00      	nop
 8008666:	370c      	adds	r7, #12
 8008668:	46bd      	mov	sp, r7
 800866a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800866e:	4770      	bx	lr

08008670 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8008670:	b580      	push	{r7, lr}
 8008672:	b098      	sub	sp, #96	@ 0x60
 8008674:	af02      	add	r7, sp, #8
 8008676:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008678:	687b      	ldr	r3, [r7, #4]
 800867a:	2200      	movs	r2, #0
 800867c:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8008680:	f7f9 f998 	bl	80019b4 <HAL_GetTick>
 8008684:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8008686:	687b      	ldr	r3, [r7, #4]
 8008688:	681b      	ldr	r3, [r3, #0]
 800868a:	681b      	ldr	r3, [r3, #0]
 800868c:	f003 0308 	and.w	r3, r3, #8
 8008690:	2b08      	cmp	r3, #8
 8008692:	d12f      	bne.n	80086f4 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8008694:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8008698:	9300      	str	r3, [sp, #0]
 800869a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800869c:	2200      	movs	r2, #0
 800869e:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 80086a2:	6878      	ldr	r0, [r7, #4]
 80086a4:	f000 f88e 	bl	80087c4 <UART_WaitOnFlagUntilTimeout>
 80086a8:	4603      	mov	r3, r0
 80086aa:	2b00      	cmp	r3, #0
 80086ac:	d022      	beq.n	80086f4 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 80086ae:	687b      	ldr	r3, [r7, #4]
 80086b0:	681b      	ldr	r3, [r3, #0]
 80086b2:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80086b4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80086b6:	e853 3f00 	ldrex	r3, [r3]
 80086ba:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80086bc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80086be:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80086c2:	653b      	str	r3, [r7, #80]	@ 0x50
 80086c4:	687b      	ldr	r3, [r7, #4]
 80086c6:	681b      	ldr	r3, [r3, #0]
 80086c8:	461a      	mov	r2, r3
 80086ca:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80086cc:	647b      	str	r3, [r7, #68]	@ 0x44
 80086ce:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80086d0:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80086d2:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80086d4:	e841 2300 	strex	r3, r2, [r1]
 80086d8:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80086da:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80086dc:	2b00      	cmp	r3, #0
 80086de:	d1e6      	bne.n	80086ae <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 80086e0:	687b      	ldr	r3, [r7, #4]
 80086e2:	2220      	movs	r2, #32
 80086e4:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 80086e8:	687b      	ldr	r3, [r7, #4]
 80086ea:	2200      	movs	r2, #0
 80086ec:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80086f0:	2303      	movs	r3, #3
 80086f2:	e063      	b.n	80087bc <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80086f4:	687b      	ldr	r3, [r7, #4]
 80086f6:	681b      	ldr	r3, [r3, #0]
 80086f8:	681b      	ldr	r3, [r3, #0]
 80086fa:	f003 0304 	and.w	r3, r3, #4
 80086fe:	2b04      	cmp	r3, #4
 8008700:	d149      	bne.n	8008796 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8008702:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8008706:	9300      	str	r3, [sp, #0]
 8008708:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800870a:	2200      	movs	r2, #0
 800870c:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8008710:	6878      	ldr	r0, [r7, #4]
 8008712:	f000 f857 	bl	80087c4 <UART_WaitOnFlagUntilTimeout>
 8008716:	4603      	mov	r3, r0
 8008718:	2b00      	cmp	r3, #0
 800871a:	d03c      	beq.n	8008796 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800871c:	687b      	ldr	r3, [r7, #4]
 800871e:	681b      	ldr	r3, [r3, #0]
 8008720:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008722:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008724:	e853 3f00 	ldrex	r3, [r3]
 8008728:	623b      	str	r3, [r7, #32]
   return(result);
 800872a:	6a3b      	ldr	r3, [r7, #32]
 800872c:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8008730:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8008732:	687b      	ldr	r3, [r7, #4]
 8008734:	681b      	ldr	r3, [r3, #0]
 8008736:	461a      	mov	r2, r3
 8008738:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800873a:	633b      	str	r3, [r7, #48]	@ 0x30
 800873c:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800873e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8008740:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8008742:	e841 2300 	strex	r3, r2, [r1]
 8008746:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8008748:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800874a:	2b00      	cmp	r3, #0
 800874c:	d1e6      	bne.n	800871c <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800874e:	687b      	ldr	r3, [r7, #4]
 8008750:	681b      	ldr	r3, [r3, #0]
 8008752:	3308      	adds	r3, #8
 8008754:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008756:	693b      	ldr	r3, [r7, #16]
 8008758:	e853 3f00 	ldrex	r3, [r3]
 800875c:	60fb      	str	r3, [r7, #12]
   return(result);
 800875e:	68fb      	ldr	r3, [r7, #12]
 8008760:	f023 0301 	bic.w	r3, r3, #1
 8008764:	64bb      	str	r3, [r7, #72]	@ 0x48
 8008766:	687b      	ldr	r3, [r7, #4]
 8008768:	681b      	ldr	r3, [r3, #0]
 800876a:	3308      	adds	r3, #8
 800876c:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800876e:	61fa      	str	r2, [r7, #28]
 8008770:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008772:	69b9      	ldr	r1, [r7, #24]
 8008774:	69fa      	ldr	r2, [r7, #28]
 8008776:	e841 2300 	strex	r3, r2, [r1]
 800877a:	617b      	str	r3, [r7, #20]
   return(result);
 800877c:	697b      	ldr	r3, [r7, #20]
 800877e:	2b00      	cmp	r3, #0
 8008780:	d1e5      	bne.n	800874e <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 8008782:	687b      	ldr	r3, [r7, #4]
 8008784:	2220      	movs	r2, #32
 8008786:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 800878a:	687b      	ldr	r3, [r7, #4]
 800878c:	2200      	movs	r2, #0
 800878e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8008792:	2303      	movs	r3, #3
 8008794:	e012      	b.n	80087bc <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8008796:	687b      	ldr	r3, [r7, #4]
 8008798:	2220      	movs	r2, #32
 800879a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 800879e:	687b      	ldr	r3, [r7, #4]
 80087a0:	2220      	movs	r2, #32
 80087a2:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80087a6:	687b      	ldr	r3, [r7, #4]
 80087a8:	2200      	movs	r2, #0
 80087aa:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80087ac:	687b      	ldr	r3, [r7, #4]
 80087ae:	2200      	movs	r2, #0
 80087b0:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 80087b2:	687b      	ldr	r3, [r7, #4]
 80087b4:	2200      	movs	r2, #0
 80087b6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80087ba:	2300      	movs	r3, #0
}
 80087bc:	4618      	mov	r0, r3
 80087be:	3758      	adds	r7, #88	@ 0x58
 80087c0:	46bd      	mov	sp, r7
 80087c2:	bd80      	pop	{r7, pc}

080087c4 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80087c4:	b580      	push	{r7, lr}
 80087c6:	b084      	sub	sp, #16
 80087c8:	af00      	add	r7, sp, #0
 80087ca:	60f8      	str	r0, [r7, #12]
 80087cc:	60b9      	str	r1, [r7, #8]
 80087ce:	603b      	str	r3, [r7, #0]
 80087d0:	4613      	mov	r3, r2
 80087d2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80087d4:	e04f      	b.n	8008876 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80087d6:	69bb      	ldr	r3, [r7, #24]
 80087d8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80087dc:	d04b      	beq.n	8008876 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80087de:	f7f9 f8e9 	bl	80019b4 <HAL_GetTick>
 80087e2:	4602      	mov	r2, r0
 80087e4:	683b      	ldr	r3, [r7, #0]
 80087e6:	1ad3      	subs	r3, r2, r3
 80087e8:	69ba      	ldr	r2, [r7, #24]
 80087ea:	429a      	cmp	r2, r3
 80087ec:	d302      	bcc.n	80087f4 <UART_WaitOnFlagUntilTimeout+0x30>
 80087ee:	69bb      	ldr	r3, [r7, #24]
 80087f0:	2b00      	cmp	r3, #0
 80087f2:	d101      	bne.n	80087f8 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80087f4:	2303      	movs	r3, #3
 80087f6:	e04e      	b.n	8008896 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80087f8:	68fb      	ldr	r3, [r7, #12]
 80087fa:	681b      	ldr	r3, [r3, #0]
 80087fc:	681b      	ldr	r3, [r3, #0]
 80087fe:	f003 0304 	and.w	r3, r3, #4
 8008802:	2b00      	cmp	r3, #0
 8008804:	d037      	beq.n	8008876 <UART_WaitOnFlagUntilTimeout+0xb2>
 8008806:	68bb      	ldr	r3, [r7, #8]
 8008808:	2b80      	cmp	r3, #128	@ 0x80
 800880a:	d034      	beq.n	8008876 <UART_WaitOnFlagUntilTimeout+0xb2>
 800880c:	68bb      	ldr	r3, [r7, #8]
 800880e:	2b40      	cmp	r3, #64	@ 0x40
 8008810:	d031      	beq.n	8008876 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8008812:	68fb      	ldr	r3, [r7, #12]
 8008814:	681b      	ldr	r3, [r3, #0]
 8008816:	69db      	ldr	r3, [r3, #28]
 8008818:	f003 0308 	and.w	r3, r3, #8
 800881c:	2b08      	cmp	r3, #8
 800881e:	d110      	bne.n	8008842 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8008820:	68fb      	ldr	r3, [r7, #12]
 8008822:	681b      	ldr	r3, [r3, #0]
 8008824:	2208      	movs	r2, #8
 8008826:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8008828:	68f8      	ldr	r0, [r7, #12]
 800882a:	f000 f95b 	bl	8008ae4 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800882e:	68fb      	ldr	r3, [r7, #12]
 8008830:	2208      	movs	r2, #8
 8008832:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8008836:	68fb      	ldr	r3, [r7, #12]
 8008838:	2200      	movs	r2, #0
 800883a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 800883e:	2301      	movs	r3, #1
 8008840:	e029      	b.n	8008896 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8008842:	68fb      	ldr	r3, [r7, #12]
 8008844:	681b      	ldr	r3, [r3, #0]
 8008846:	69db      	ldr	r3, [r3, #28]
 8008848:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800884c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8008850:	d111      	bne.n	8008876 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8008852:	68fb      	ldr	r3, [r7, #12]
 8008854:	681b      	ldr	r3, [r3, #0]
 8008856:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800885a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800885c:	68f8      	ldr	r0, [r7, #12]
 800885e:	f000 f941 	bl	8008ae4 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8008862:	68fb      	ldr	r3, [r7, #12]
 8008864:	2220      	movs	r2, #32
 8008866:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800886a:	68fb      	ldr	r3, [r7, #12]
 800886c:	2200      	movs	r2, #0
 800886e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 8008872:	2303      	movs	r3, #3
 8008874:	e00f      	b.n	8008896 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008876:	68fb      	ldr	r3, [r7, #12]
 8008878:	681b      	ldr	r3, [r3, #0]
 800887a:	69da      	ldr	r2, [r3, #28]
 800887c:	68bb      	ldr	r3, [r7, #8]
 800887e:	4013      	ands	r3, r2
 8008880:	68ba      	ldr	r2, [r7, #8]
 8008882:	429a      	cmp	r2, r3
 8008884:	bf0c      	ite	eq
 8008886:	2301      	moveq	r3, #1
 8008888:	2300      	movne	r3, #0
 800888a:	b2db      	uxtb	r3, r3
 800888c:	461a      	mov	r2, r3
 800888e:	79fb      	ldrb	r3, [r7, #7]
 8008890:	429a      	cmp	r2, r3
 8008892:	d0a0      	beq.n	80087d6 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8008894:	2300      	movs	r3, #0
}
 8008896:	4618      	mov	r0, r3
 8008898:	3710      	adds	r7, #16
 800889a:	46bd      	mov	sp, r7
 800889c:	bd80      	pop	{r7, pc}
	...

080088a0 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80088a0:	b480      	push	{r7}
 80088a2:	b0a3      	sub	sp, #140	@ 0x8c
 80088a4:	af00      	add	r7, sp, #0
 80088a6:	60f8      	str	r0, [r7, #12]
 80088a8:	60b9      	str	r1, [r7, #8]
 80088aa:	4613      	mov	r3, r2
 80088ac:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 80088ae:	68fb      	ldr	r3, [r7, #12]
 80088b0:	68ba      	ldr	r2, [r7, #8]
 80088b2:	659a      	str	r2, [r3, #88]	@ 0x58
  huart->RxXferSize  = Size;
 80088b4:	68fb      	ldr	r3, [r7, #12]
 80088b6:	88fa      	ldrh	r2, [r7, #6]
 80088b8:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
  huart->RxXferCount = Size;
 80088bc:	68fb      	ldr	r3, [r7, #12]
 80088be:	88fa      	ldrh	r2, [r7, #6]
 80088c0:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
  huart->RxISR       = NULL;
 80088c4:	68fb      	ldr	r3, [r7, #12]
 80088c6:	2200      	movs	r2, #0
 80088c8:	675a      	str	r2, [r3, #116]	@ 0x74

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 80088ca:	68fb      	ldr	r3, [r7, #12]
 80088cc:	689b      	ldr	r3, [r3, #8]
 80088ce:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80088d2:	d10e      	bne.n	80088f2 <UART_Start_Receive_IT+0x52>
 80088d4:	68fb      	ldr	r3, [r7, #12]
 80088d6:	691b      	ldr	r3, [r3, #16]
 80088d8:	2b00      	cmp	r3, #0
 80088da:	d105      	bne.n	80088e8 <UART_Start_Receive_IT+0x48>
 80088dc:	68fb      	ldr	r3, [r7, #12]
 80088de:	f240 12ff 	movw	r2, #511	@ 0x1ff
 80088e2:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 80088e6:	e02d      	b.n	8008944 <UART_Start_Receive_IT+0xa4>
 80088e8:	68fb      	ldr	r3, [r7, #12]
 80088ea:	22ff      	movs	r2, #255	@ 0xff
 80088ec:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 80088f0:	e028      	b.n	8008944 <UART_Start_Receive_IT+0xa4>
 80088f2:	68fb      	ldr	r3, [r7, #12]
 80088f4:	689b      	ldr	r3, [r3, #8]
 80088f6:	2b00      	cmp	r3, #0
 80088f8:	d10d      	bne.n	8008916 <UART_Start_Receive_IT+0x76>
 80088fa:	68fb      	ldr	r3, [r7, #12]
 80088fc:	691b      	ldr	r3, [r3, #16]
 80088fe:	2b00      	cmp	r3, #0
 8008900:	d104      	bne.n	800890c <UART_Start_Receive_IT+0x6c>
 8008902:	68fb      	ldr	r3, [r7, #12]
 8008904:	22ff      	movs	r2, #255	@ 0xff
 8008906:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 800890a:	e01b      	b.n	8008944 <UART_Start_Receive_IT+0xa4>
 800890c:	68fb      	ldr	r3, [r7, #12]
 800890e:	227f      	movs	r2, #127	@ 0x7f
 8008910:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8008914:	e016      	b.n	8008944 <UART_Start_Receive_IT+0xa4>
 8008916:	68fb      	ldr	r3, [r7, #12]
 8008918:	689b      	ldr	r3, [r3, #8]
 800891a:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800891e:	d10d      	bne.n	800893c <UART_Start_Receive_IT+0x9c>
 8008920:	68fb      	ldr	r3, [r7, #12]
 8008922:	691b      	ldr	r3, [r3, #16]
 8008924:	2b00      	cmp	r3, #0
 8008926:	d104      	bne.n	8008932 <UART_Start_Receive_IT+0x92>
 8008928:	68fb      	ldr	r3, [r7, #12]
 800892a:	227f      	movs	r2, #127	@ 0x7f
 800892c:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8008930:	e008      	b.n	8008944 <UART_Start_Receive_IT+0xa4>
 8008932:	68fb      	ldr	r3, [r7, #12]
 8008934:	223f      	movs	r2, #63	@ 0x3f
 8008936:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 800893a:	e003      	b.n	8008944 <UART_Start_Receive_IT+0xa4>
 800893c:	68fb      	ldr	r3, [r7, #12]
 800893e:	2200      	movs	r2, #0
 8008940:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008944:	68fb      	ldr	r3, [r7, #12]
 8008946:	2200      	movs	r2, #0
 8008948:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800894c:	68fb      	ldr	r3, [r7, #12]
 800894e:	2222      	movs	r2, #34	@ 0x22
 8008950:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008954:	68fb      	ldr	r3, [r7, #12]
 8008956:	681b      	ldr	r3, [r3, #0]
 8008958:	3308      	adds	r3, #8
 800895a:	667b      	str	r3, [r7, #100]	@ 0x64
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800895c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800895e:	e853 3f00 	ldrex	r3, [r3]
 8008962:	663b      	str	r3, [r7, #96]	@ 0x60
   return(result);
 8008964:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8008966:	f043 0301 	orr.w	r3, r3, #1
 800896a:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800896e:	68fb      	ldr	r3, [r7, #12]
 8008970:	681b      	ldr	r3, [r3, #0]
 8008972:	3308      	adds	r3, #8
 8008974:	f8d7 2084 	ldr.w	r2, [r7, #132]	@ 0x84
 8008978:	673a      	str	r2, [r7, #112]	@ 0x70
 800897a:	66fb      	str	r3, [r7, #108]	@ 0x6c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800897c:	6ef9      	ldr	r1, [r7, #108]	@ 0x6c
 800897e:	6f3a      	ldr	r2, [r7, #112]	@ 0x70
 8008980:	e841 2300 	strex	r3, r2, [r1]
 8008984:	66bb      	str	r3, [r7, #104]	@ 0x68
   return(result);
 8008986:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8008988:	2b00      	cmp	r3, #0
 800898a:	d1e3      	bne.n	8008954 <UART_Start_Receive_IT+0xb4>

  /* Configure Rx interrupt processing */
  if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 800898c:	68fb      	ldr	r3, [r7, #12]
 800898e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8008990:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8008994:	d14f      	bne.n	8008a36 <UART_Start_Receive_IT+0x196>
 8008996:	68fb      	ldr	r3, [r7, #12]
 8008998:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 800899c:	88fa      	ldrh	r2, [r7, #6]
 800899e:	429a      	cmp	r2, r3
 80089a0:	d349      	bcc.n	8008a36 <UART_Start_Receive_IT+0x196>
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80089a2:	68fb      	ldr	r3, [r7, #12]
 80089a4:	689b      	ldr	r3, [r3, #8]
 80089a6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80089aa:	d107      	bne.n	80089bc <UART_Start_Receive_IT+0x11c>
 80089ac:	68fb      	ldr	r3, [r7, #12]
 80089ae:	691b      	ldr	r3, [r3, #16]
 80089b0:	2b00      	cmp	r3, #0
 80089b2:	d103      	bne.n	80089bc <UART_Start_Receive_IT+0x11c>
    {
      huart->RxISR = UART_RxISR_16BIT_FIFOEN;
 80089b4:	68fb      	ldr	r3, [r7, #12]
 80089b6:	4a47      	ldr	r2, [pc, #284]	@ (8008ad4 <UART_Start_Receive_IT+0x234>)
 80089b8:	675a      	str	r2, [r3, #116]	@ 0x74
 80089ba:	e002      	b.n	80089c2 <UART_Start_Receive_IT+0x122>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT_FIFOEN;
 80089bc:	68fb      	ldr	r3, [r7, #12]
 80089be:	4a46      	ldr	r2, [pc, #280]	@ (8008ad8 <UART_Start_Receive_IT+0x238>)
 80089c0:	675a      	str	r2, [r3, #116]	@ 0x74
    }

    /* Enable the UART Parity Error interrupt and RX FIFO Threshold interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 80089c2:	68fb      	ldr	r3, [r7, #12]
 80089c4:	691b      	ldr	r3, [r3, #16]
 80089c6:	2b00      	cmp	r3, #0
 80089c8:	d01a      	beq.n	8008a00 <UART_Start_Receive_IT+0x160>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80089ca:	68fb      	ldr	r3, [r7, #12]
 80089cc:	681b      	ldr	r3, [r3, #0]
 80089ce:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80089d0:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80089d2:	e853 3f00 	ldrex	r3, [r3]
 80089d6:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 80089d8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80089da:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80089de:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 80089e2:	68fb      	ldr	r3, [r7, #12]
 80089e4:	681b      	ldr	r3, [r3, #0]
 80089e6:	461a      	mov	r2, r3
 80089e8:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 80089ec:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80089ee:	65ba      	str	r2, [r7, #88]	@ 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80089f0:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 80089f2:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 80089f4:	e841 2300 	strex	r3, r2, [r1]
 80089f8:	657b      	str	r3, [r7, #84]	@ 0x54
   return(result);
 80089fa:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80089fc:	2b00      	cmp	r3, #0
 80089fe:	d1e4      	bne.n	80089ca <UART_Start_Receive_IT+0x12a>
    }
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8008a00:	68fb      	ldr	r3, [r7, #12]
 8008a02:	681b      	ldr	r3, [r3, #0]
 8008a04:	3308      	adds	r3, #8
 8008a06:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008a08:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008a0a:	e853 3f00 	ldrex	r3, [r3]
 8008a0e:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8008a10:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008a12:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8008a16:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8008a18:	68fb      	ldr	r3, [r7, #12]
 8008a1a:	681b      	ldr	r3, [r3, #0]
 8008a1c:	3308      	adds	r3, #8
 8008a1e:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 8008a20:	64ba      	str	r2, [r7, #72]	@ 0x48
 8008a22:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008a24:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8008a26:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8008a28:	e841 2300 	strex	r3, r2, [r1]
 8008a2c:	643b      	str	r3, [r7, #64]	@ 0x40
   return(result);
 8008a2e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8008a30:	2b00      	cmp	r3, #0
 8008a32:	d1e5      	bne.n	8008a00 <UART_Start_Receive_IT+0x160>
 8008a34:	e046      	b.n	8008ac4 <UART_Start_Receive_IT+0x224>
  }
  else
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008a36:	68fb      	ldr	r3, [r7, #12]
 8008a38:	689b      	ldr	r3, [r3, #8]
 8008a3a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8008a3e:	d107      	bne.n	8008a50 <UART_Start_Receive_IT+0x1b0>
 8008a40:	68fb      	ldr	r3, [r7, #12]
 8008a42:	691b      	ldr	r3, [r3, #16]
 8008a44:	2b00      	cmp	r3, #0
 8008a46:	d103      	bne.n	8008a50 <UART_Start_Receive_IT+0x1b0>
    {
      huart->RxISR = UART_RxISR_16BIT;
 8008a48:	68fb      	ldr	r3, [r7, #12]
 8008a4a:	4a24      	ldr	r2, [pc, #144]	@ (8008adc <UART_Start_Receive_IT+0x23c>)
 8008a4c:	675a      	str	r2, [r3, #116]	@ 0x74
 8008a4e:	e002      	b.n	8008a56 <UART_Start_Receive_IT+0x1b6>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT;
 8008a50:	68fb      	ldr	r3, [r7, #12]
 8008a52:	4a23      	ldr	r2, [pc, #140]	@ (8008ae0 <UART_Start_Receive_IT+0x240>)
 8008a54:	675a      	str	r2, [r3, #116]	@ 0x74
    }

    /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 8008a56:	68fb      	ldr	r3, [r7, #12]
 8008a58:	691b      	ldr	r3, [r3, #16]
 8008a5a:	2b00      	cmp	r3, #0
 8008a5c:	d019      	beq.n	8008a92 <UART_Start_Receive_IT+0x1f2>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
 8008a5e:	68fb      	ldr	r3, [r7, #12]
 8008a60:	681b      	ldr	r3, [r3, #0]
 8008a62:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008a64:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008a66:	e853 3f00 	ldrex	r3, [r3]
 8008a6a:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8008a6c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008a6e:	f443 7390 	orr.w	r3, r3, #288	@ 0x120
 8008a72:	677b      	str	r3, [r7, #116]	@ 0x74
 8008a74:	68fb      	ldr	r3, [r7, #12]
 8008a76:	681b      	ldr	r3, [r3, #0]
 8008a78:	461a      	mov	r2, r3
 8008a7a:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8008a7c:	637b      	str	r3, [r7, #52]	@ 0x34
 8008a7e:	633a      	str	r2, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008a80:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8008a82:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8008a84:	e841 2300 	strex	r3, r2, [r1]
 8008a88:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 8008a8a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008a8c:	2b00      	cmp	r3, #0
 8008a8e:	d1e6      	bne.n	8008a5e <UART_Start_Receive_IT+0x1be>
 8008a90:	e018      	b.n	8008ac4 <UART_Start_Receive_IT+0x224>
    }
    else
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8008a92:	68fb      	ldr	r3, [r7, #12]
 8008a94:	681b      	ldr	r3, [r3, #0]
 8008a96:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008a98:	697b      	ldr	r3, [r7, #20]
 8008a9a:	e853 3f00 	ldrex	r3, [r3]
 8008a9e:	613b      	str	r3, [r7, #16]
   return(result);
 8008aa0:	693b      	ldr	r3, [r7, #16]
 8008aa2:	f043 0320 	orr.w	r3, r3, #32
 8008aa6:	67bb      	str	r3, [r7, #120]	@ 0x78
 8008aa8:	68fb      	ldr	r3, [r7, #12]
 8008aaa:	681b      	ldr	r3, [r3, #0]
 8008aac:	461a      	mov	r2, r3
 8008aae:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8008ab0:	623b      	str	r3, [r7, #32]
 8008ab2:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008ab4:	69f9      	ldr	r1, [r7, #28]
 8008ab6:	6a3a      	ldr	r2, [r7, #32]
 8008ab8:	e841 2300 	strex	r3, r2, [r1]
 8008abc:	61bb      	str	r3, [r7, #24]
   return(result);
 8008abe:	69bb      	ldr	r3, [r7, #24]
 8008ac0:	2b00      	cmp	r3, #0
 8008ac2:	d1e6      	bne.n	8008a92 <UART_Start_Receive_IT+0x1f2>
    }
  }
  return HAL_OK;
 8008ac4:	2300      	movs	r3, #0
}
 8008ac6:	4618      	mov	r0, r3
 8008ac8:	378c      	adds	r7, #140	@ 0x8c
 8008aca:	46bd      	mov	sp, r7
 8008acc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ad0:	4770      	bx	lr
 8008ad2:	bf00      	nop
 8008ad4:	08009301 	.word	0x08009301
 8008ad8:	08008f9d 	.word	0x08008f9d
 8008adc:	08008de5 	.word	0x08008de5
 8008ae0:	08008c2d 	.word	0x08008c2d

08008ae4 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8008ae4:	b480      	push	{r7}
 8008ae6:	b095      	sub	sp, #84	@ 0x54
 8008ae8:	af00      	add	r7, sp, #0
 8008aea:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8008aec:	687b      	ldr	r3, [r7, #4]
 8008aee:	681b      	ldr	r3, [r3, #0]
 8008af0:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008af2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008af4:	e853 3f00 	ldrex	r3, [r3]
 8008af8:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8008afa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008afc:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8008b00:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8008b02:	687b      	ldr	r3, [r7, #4]
 8008b04:	681b      	ldr	r3, [r3, #0]
 8008b06:	461a      	mov	r2, r3
 8008b08:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8008b0a:	643b      	str	r3, [r7, #64]	@ 0x40
 8008b0c:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008b0e:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8008b10:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8008b12:	e841 2300 	strex	r3, r2, [r1]
 8008b16:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8008b18:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008b1a:	2b00      	cmp	r3, #0
 8008b1c:	d1e6      	bne.n	8008aec <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8008b1e:	687b      	ldr	r3, [r7, #4]
 8008b20:	681b      	ldr	r3, [r3, #0]
 8008b22:	3308      	adds	r3, #8
 8008b24:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008b26:	6a3b      	ldr	r3, [r7, #32]
 8008b28:	e853 3f00 	ldrex	r3, [r3]
 8008b2c:	61fb      	str	r3, [r7, #28]
   return(result);
 8008b2e:	69fa      	ldr	r2, [r7, #28]
 8008b30:	4b1e      	ldr	r3, [pc, #120]	@ (8008bac <UART_EndRxTransfer+0xc8>)
 8008b32:	4013      	ands	r3, r2
 8008b34:	64bb      	str	r3, [r7, #72]	@ 0x48
 8008b36:	687b      	ldr	r3, [r7, #4]
 8008b38:	681b      	ldr	r3, [r3, #0]
 8008b3a:	3308      	adds	r3, #8
 8008b3c:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8008b3e:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8008b40:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008b42:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8008b44:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8008b46:	e841 2300 	strex	r3, r2, [r1]
 8008b4a:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8008b4c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008b4e:	2b00      	cmp	r3, #0
 8008b50:	d1e5      	bne.n	8008b1e <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008b52:	687b      	ldr	r3, [r7, #4]
 8008b54:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8008b56:	2b01      	cmp	r3, #1
 8008b58:	d118      	bne.n	8008b8c <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008b5a:	687b      	ldr	r3, [r7, #4]
 8008b5c:	681b      	ldr	r3, [r3, #0]
 8008b5e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008b60:	68fb      	ldr	r3, [r7, #12]
 8008b62:	e853 3f00 	ldrex	r3, [r3]
 8008b66:	60bb      	str	r3, [r7, #8]
   return(result);
 8008b68:	68bb      	ldr	r3, [r7, #8]
 8008b6a:	f023 0310 	bic.w	r3, r3, #16
 8008b6e:	647b      	str	r3, [r7, #68]	@ 0x44
 8008b70:	687b      	ldr	r3, [r7, #4]
 8008b72:	681b      	ldr	r3, [r3, #0]
 8008b74:	461a      	mov	r2, r3
 8008b76:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8008b78:	61bb      	str	r3, [r7, #24]
 8008b7a:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008b7c:	6979      	ldr	r1, [r7, #20]
 8008b7e:	69ba      	ldr	r2, [r7, #24]
 8008b80:	e841 2300 	strex	r3, r2, [r1]
 8008b84:	613b      	str	r3, [r7, #16]
   return(result);
 8008b86:	693b      	ldr	r3, [r7, #16]
 8008b88:	2b00      	cmp	r3, #0
 8008b8a:	d1e6      	bne.n	8008b5a <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8008b8c:	687b      	ldr	r3, [r7, #4]
 8008b8e:	2220      	movs	r2, #32
 8008b90:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008b94:	687b      	ldr	r3, [r7, #4]
 8008b96:	2200      	movs	r2, #0
 8008b98:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8008b9a:	687b      	ldr	r3, [r7, #4]
 8008b9c:	2200      	movs	r2, #0
 8008b9e:	675a      	str	r2, [r3, #116]	@ 0x74
}
 8008ba0:	bf00      	nop
 8008ba2:	3754      	adds	r7, #84	@ 0x54
 8008ba4:	46bd      	mov	sp, r7
 8008ba6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008baa:	4770      	bx	lr
 8008bac:	effffffe 	.word	0xeffffffe

08008bb0 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8008bb0:	b580      	push	{r7, lr}
 8008bb2:	b084      	sub	sp, #16
 8008bb4:	af00      	add	r7, sp, #0
 8008bb6:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8008bb8:	687b      	ldr	r3, [r7, #4]
 8008bba:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008bbc:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8008bbe:	68fb      	ldr	r3, [r7, #12]
 8008bc0:	2200      	movs	r2, #0
 8008bc2:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8008bc6:	68f8      	ldr	r0, [r7, #12]
 8008bc8:	f7fe fe2e 	bl	8007828 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8008bcc:	bf00      	nop
 8008bce:	3710      	adds	r7, #16
 8008bd0:	46bd      	mov	sp, r7
 8008bd2:	bd80      	pop	{r7, pc}

08008bd4 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8008bd4:	b580      	push	{r7, lr}
 8008bd6:	b088      	sub	sp, #32
 8008bd8:	af00      	add	r7, sp, #0
 8008bda:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8008bdc:	687b      	ldr	r3, [r7, #4]
 8008bde:	681b      	ldr	r3, [r3, #0]
 8008be0:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008be2:	68fb      	ldr	r3, [r7, #12]
 8008be4:	e853 3f00 	ldrex	r3, [r3]
 8008be8:	60bb      	str	r3, [r7, #8]
   return(result);
 8008bea:	68bb      	ldr	r3, [r7, #8]
 8008bec:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8008bf0:	61fb      	str	r3, [r7, #28]
 8008bf2:	687b      	ldr	r3, [r7, #4]
 8008bf4:	681b      	ldr	r3, [r3, #0]
 8008bf6:	461a      	mov	r2, r3
 8008bf8:	69fb      	ldr	r3, [r7, #28]
 8008bfa:	61bb      	str	r3, [r7, #24]
 8008bfc:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008bfe:	6979      	ldr	r1, [r7, #20]
 8008c00:	69ba      	ldr	r2, [r7, #24]
 8008c02:	e841 2300 	strex	r3, r2, [r1]
 8008c06:	613b      	str	r3, [r7, #16]
   return(result);
 8008c08:	693b      	ldr	r3, [r7, #16]
 8008c0a:	2b00      	cmp	r3, #0
 8008c0c:	d1e6      	bne.n	8008bdc <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8008c0e:	687b      	ldr	r3, [r7, #4]
 8008c10:	2220      	movs	r2, #32
 8008c12:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8008c16:	687b      	ldr	r3, [r7, #4]
 8008c18:	2200      	movs	r2, #0
 8008c1a:	679a      	str	r2, [r3, #120]	@ 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8008c1c:	6878      	ldr	r0, [r7, #4]
 8008c1e:	f7fe fdf9 	bl	8007814 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8008c22:	bf00      	nop
 8008c24:	3720      	adds	r7, #32
 8008c26:	46bd      	mov	sp, r7
 8008c28:	bd80      	pop	{r7, pc}
	...

08008c2c <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8008c2c:	b580      	push	{r7, lr}
 8008c2e:	b09c      	sub	sp, #112	@ 0x70
 8008c30:	af00      	add	r7, sp, #0
 8008c32:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8008c34:	687b      	ldr	r3, [r7, #4]
 8008c36:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 8008c3a:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8008c3e:	687b      	ldr	r3, [r7, #4]
 8008c40:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8008c44:	2b22      	cmp	r3, #34	@ 0x22
 8008c46:	f040 80be 	bne.w	8008dc6 <UART_RxISR_8BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8008c4a:	687b      	ldr	r3, [r7, #4]
 8008c4c:	681b      	ldr	r3, [r3, #0]
 8008c4e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008c50:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8008c54:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 8008c58:	b2d9      	uxtb	r1, r3
 8008c5a:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 8008c5e:	b2da      	uxtb	r2, r3
 8008c60:	687b      	ldr	r3, [r7, #4]
 8008c62:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008c64:	400a      	ands	r2, r1
 8008c66:	b2d2      	uxtb	r2, r2
 8008c68:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 8008c6a:	687b      	ldr	r3, [r7, #4]
 8008c6c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008c6e:	1c5a      	adds	r2, r3, #1
 8008c70:	687b      	ldr	r3, [r7, #4]
 8008c72:	659a      	str	r2, [r3, #88]	@ 0x58
    huart->RxXferCount--;
 8008c74:	687b      	ldr	r3, [r7, #4]
 8008c76:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8008c7a:	b29b      	uxth	r3, r3
 8008c7c:	3b01      	subs	r3, #1
 8008c7e:	b29a      	uxth	r2, r3
 8008c80:	687b      	ldr	r3, [r7, #4]
 8008c82:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

    if (huart->RxXferCount == 0U)
 8008c86:	687b      	ldr	r3, [r7, #4]
 8008c88:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8008c8c:	b29b      	uxth	r3, r3
 8008c8e:	2b00      	cmp	r3, #0
 8008c90:	f040 80a1 	bne.w	8008dd6 <UART_RxISR_8BIT+0x1aa>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8008c94:	687b      	ldr	r3, [r7, #4]
 8008c96:	681b      	ldr	r3, [r3, #0]
 8008c98:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008c9a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8008c9c:	e853 3f00 	ldrex	r3, [r3]
 8008ca0:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8008ca2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8008ca4:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8008ca8:	66bb      	str	r3, [r7, #104]	@ 0x68
 8008caa:	687b      	ldr	r3, [r7, #4]
 8008cac:	681b      	ldr	r3, [r3, #0]
 8008cae:	461a      	mov	r2, r3
 8008cb0:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8008cb2:	65bb      	str	r3, [r7, #88]	@ 0x58
 8008cb4:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008cb6:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8008cb8:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8008cba:	e841 2300 	strex	r3, r2, [r1]
 8008cbe:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8008cc0:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8008cc2:	2b00      	cmp	r3, #0
 8008cc4:	d1e6      	bne.n	8008c94 <UART_RxISR_8BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008cc6:	687b      	ldr	r3, [r7, #4]
 8008cc8:	681b      	ldr	r3, [r3, #0]
 8008cca:	3308      	adds	r3, #8
 8008ccc:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008cce:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008cd0:	e853 3f00 	ldrex	r3, [r3]
 8008cd4:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8008cd6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008cd8:	f023 0301 	bic.w	r3, r3, #1
 8008cdc:	667b      	str	r3, [r7, #100]	@ 0x64
 8008cde:	687b      	ldr	r3, [r7, #4]
 8008ce0:	681b      	ldr	r3, [r3, #0]
 8008ce2:	3308      	adds	r3, #8
 8008ce4:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 8008ce6:	647a      	str	r2, [r7, #68]	@ 0x44
 8008ce8:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008cea:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8008cec:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8008cee:	e841 2300 	strex	r3, r2, [r1]
 8008cf2:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8008cf4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008cf6:	2b00      	cmp	r3, #0
 8008cf8:	d1e5      	bne.n	8008cc6 <UART_RxISR_8BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8008cfa:	687b      	ldr	r3, [r7, #4]
 8008cfc:	2220      	movs	r2, #32
 8008cfe:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8008d02:	687b      	ldr	r3, [r7, #4]
 8008d04:	2200      	movs	r2, #0
 8008d06:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8008d08:	687b      	ldr	r3, [r7, #4]
 8008d0a:	2200      	movs	r2, #0
 8008d0c:	671a      	str	r2, [r3, #112]	@ 0x70

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8008d0e:	687b      	ldr	r3, [r7, #4]
 8008d10:	681b      	ldr	r3, [r3, #0]
 8008d12:	4a33      	ldr	r2, [pc, #204]	@ (8008de0 <UART_RxISR_8BIT+0x1b4>)
 8008d14:	4293      	cmp	r3, r2
 8008d16:	d01f      	beq.n	8008d58 <UART_RxISR_8BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8008d18:	687b      	ldr	r3, [r7, #4]
 8008d1a:	681b      	ldr	r3, [r3, #0]
 8008d1c:	685b      	ldr	r3, [r3, #4]
 8008d1e:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8008d22:	2b00      	cmp	r3, #0
 8008d24:	d018      	beq.n	8008d58 <UART_RxISR_8BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8008d26:	687b      	ldr	r3, [r7, #4]
 8008d28:	681b      	ldr	r3, [r3, #0]
 8008d2a:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008d2c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008d2e:	e853 3f00 	ldrex	r3, [r3]
 8008d32:	623b      	str	r3, [r7, #32]
   return(result);
 8008d34:	6a3b      	ldr	r3, [r7, #32]
 8008d36:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8008d3a:	663b      	str	r3, [r7, #96]	@ 0x60
 8008d3c:	687b      	ldr	r3, [r7, #4]
 8008d3e:	681b      	ldr	r3, [r3, #0]
 8008d40:	461a      	mov	r2, r3
 8008d42:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8008d44:	633b      	str	r3, [r7, #48]	@ 0x30
 8008d46:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008d48:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8008d4a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8008d4c:	e841 2300 	strex	r3, r2, [r1]
 8008d50:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8008d52:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008d54:	2b00      	cmp	r3, #0
 8008d56:	d1e6      	bne.n	8008d26 <UART_RxISR_8BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008d58:	687b      	ldr	r3, [r7, #4]
 8008d5a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8008d5c:	2b01      	cmp	r3, #1
 8008d5e:	d12e      	bne.n	8008dbe <UART_RxISR_8BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008d60:	687b      	ldr	r3, [r7, #4]
 8008d62:	2200      	movs	r2, #0
 8008d64:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008d66:	687b      	ldr	r3, [r7, #4]
 8008d68:	681b      	ldr	r3, [r3, #0]
 8008d6a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008d6c:	693b      	ldr	r3, [r7, #16]
 8008d6e:	e853 3f00 	ldrex	r3, [r3]
 8008d72:	60fb      	str	r3, [r7, #12]
   return(result);
 8008d74:	68fb      	ldr	r3, [r7, #12]
 8008d76:	f023 0310 	bic.w	r3, r3, #16
 8008d7a:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8008d7c:	687b      	ldr	r3, [r7, #4]
 8008d7e:	681b      	ldr	r3, [r3, #0]
 8008d80:	461a      	mov	r2, r3
 8008d82:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8008d84:	61fb      	str	r3, [r7, #28]
 8008d86:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008d88:	69b9      	ldr	r1, [r7, #24]
 8008d8a:	69fa      	ldr	r2, [r7, #28]
 8008d8c:	e841 2300 	strex	r3, r2, [r1]
 8008d90:	617b      	str	r3, [r7, #20]
   return(result);
 8008d92:	697b      	ldr	r3, [r7, #20]
 8008d94:	2b00      	cmp	r3, #0
 8008d96:	d1e6      	bne.n	8008d66 <UART_RxISR_8BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8008d98:	687b      	ldr	r3, [r7, #4]
 8008d9a:	681b      	ldr	r3, [r3, #0]
 8008d9c:	69db      	ldr	r3, [r3, #28]
 8008d9e:	f003 0310 	and.w	r3, r3, #16
 8008da2:	2b10      	cmp	r3, #16
 8008da4:	d103      	bne.n	8008dae <UART_RxISR_8BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8008da6:	687b      	ldr	r3, [r7, #4]
 8008da8:	681b      	ldr	r3, [r3, #0]
 8008daa:	2210      	movs	r2, #16
 8008dac:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8008dae:	687b      	ldr	r3, [r7, #4]
 8008db0:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8008db4:	4619      	mov	r1, r3
 8008db6:	6878      	ldr	r0, [r7, #4]
 8008db8:	f7fe fd40 	bl	800783c <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8008dbc:	e00b      	b.n	8008dd6 <UART_RxISR_8BIT+0x1aa>
        HAL_UART_RxCpltCallback(huart);
 8008dbe:	6878      	ldr	r0, [r7, #4]
 8008dc0:	f7f7 fd1e 	bl	8000800 <HAL_UART_RxCpltCallback>
}
 8008dc4:	e007      	b.n	8008dd6 <UART_RxISR_8BIT+0x1aa>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8008dc6:	687b      	ldr	r3, [r7, #4]
 8008dc8:	681b      	ldr	r3, [r3, #0]
 8008dca:	699a      	ldr	r2, [r3, #24]
 8008dcc:	687b      	ldr	r3, [r7, #4]
 8008dce:	681b      	ldr	r3, [r3, #0]
 8008dd0:	f042 0208 	orr.w	r2, r2, #8
 8008dd4:	619a      	str	r2, [r3, #24]
}
 8008dd6:	bf00      	nop
 8008dd8:	3770      	adds	r7, #112	@ 0x70
 8008dda:	46bd      	mov	sp, r7
 8008ddc:	bd80      	pop	{r7, pc}
 8008dde:	bf00      	nop
 8008de0:	58000c00 	.word	0x58000c00

08008de4 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8008de4:	b580      	push	{r7, lr}
 8008de6:	b09c      	sub	sp, #112	@ 0x70
 8008de8:	af00      	add	r7, sp, #0
 8008dea:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8008dec:	687b      	ldr	r3, [r7, #4]
 8008dee:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 8008df2:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8008df6:	687b      	ldr	r3, [r7, #4]
 8008df8:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8008dfc:	2b22      	cmp	r3, #34	@ 0x22
 8008dfe:	f040 80be 	bne.w	8008f7e <UART_RxISR_16BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8008e02:	687b      	ldr	r3, [r7, #4]
 8008e04:	681b      	ldr	r3, [r3, #0]
 8008e06:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008e08:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8008e0c:	687b      	ldr	r3, [r7, #4]
 8008e0e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008e10:	66bb      	str	r3, [r7, #104]	@ 0x68
    *tmp = (uint16_t)(uhdata & uhMask);
 8008e12:	f8b7 206c 	ldrh.w	r2, [r7, #108]	@ 0x6c
 8008e16:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 8008e1a:	4013      	ands	r3, r2
 8008e1c:	b29a      	uxth	r2, r3
 8008e1e:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8008e20:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 8008e22:	687b      	ldr	r3, [r7, #4]
 8008e24:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008e26:	1c9a      	adds	r2, r3, #2
 8008e28:	687b      	ldr	r3, [r7, #4]
 8008e2a:	659a      	str	r2, [r3, #88]	@ 0x58
    huart->RxXferCount--;
 8008e2c:	687b      	ldr	r3, [r7, #4]
 8008e2e:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8008e32:	b29b      	uxth	r3, r3
 8008e34:	3b01      	subs	r3, #1
 8008e36:	b29a      	uxth	r2, r3
 8008e38:	687b      	ldr	r3, [r7, #4]
 8008e3a:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

    if (huart->RxXferCount == 0U)
 8008e3e:	687b      	ldr	r3, [r7, #4]
 8008e40:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8008e44:	b29b      	uxth	r3, r3
 8008e46:	2b00      	cmp	r3, #0
 8008e48:	f040 80a1 	bne.w	8008f8e <UART_RxISR_16BIT+0x1aa>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8008e4c:	687b      	ldr	r3, [r7, #4]
 8008e4e:	681b      	ldr	r3, [r3, #0]
 8008e50:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008e52:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8008e54:	e853 3f00 	ldrex	r3, [r3]
 8008e58:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 8008e5a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8008e5c:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8008e60:	667b      	str	r3, [r7, #100]	@ 0x64
 8008e62:	687b      	ldr	r3, [r7, #4]
 8008e64:	681b      	ldr	r3, [r3, #0]
 8008e66:	461a      	mov	r2, r3
 8008e68:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8008e6a:	657b      	str	r3, [r7, #84]	@ 0x54
 8008e6c:	653a      	str	r2, [r7, #80]	@ 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008e6e:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8008e70:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8008e72:	e841 2300 	strex	r3, r2, [r1]
 8008e76:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 8008e78:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8008e7a:	2b00      	cmp	r3, #0
 8008e7c:	d1e6      	bne.n	8008e4c <UART_RxISR_16BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008e7e:	687b      	ldr	r3, [r7, #4]
 8008e80:	681b      	ldr	r3, [r3, #0]
 8008e82:	3308      	adds	r3, #8
 8008e84:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008e86:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008e88:	e853 3f00 	ldrex	r3, [r3]
 8008e8c:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8008e8e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008e90:	f023 0301 	bic.w	r3, r3, #1
 8008e94:	663b      	str	r3, [r7, #96]	@ 0x60
 8008e96:	687b      	ldr	r3, [r7, #4]
 8008e98:	681b      	ldr	r3, [r3, #0]
 8008e9a:	3308      	adds	r3, #8
 8008e9c:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8008e9e:	643a      	str	r2, [r7, #64]	@ 0x40
 8008ea0:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008ea2:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8008ea4:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8008ea6:	e841 2300 	strex	r3, r2, [r1]
 8008eaa:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8008eac:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008eae:	2b00      	cmp	r3, #0
 8008eb0:	d1e5      	bne.n	8008e7e <UART_RxISR_16BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8008eb2:	687b      	ldr	r3, [r7, #4]
 8008eb4:	2220      	movs	r2, #32
 8008eb6:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8008eba:	687b      	ldr	r3, [r7, #4]
 8008ebc:	2200      	movs	r2, #0
 8008ebe:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8008ec0:	687b      	ldr	r3, [r7, #4]
 8008ec2:	2200      	movs	r2, #0
 8008ec4:	671a      	str	r2, [r3, #112]	@ 0x70

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8008ec6:	687b      	ldr	r3, [r7, #4]
 8008ec8:	681b      	ldr	r3, [r3, #0]
 8008eca:	4a33      	ldr	r2, [pc, #204]	@ (8008f98 <UART_RxISR_16BIT+0x1b4>)
 8008ecc:	4293      	cmp	r3, r2
 8008ece:	d01f      	beq.n	8008f10 <UART_RxISR_16BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8008ed0:	687b      	ldr	r3, [r7, #4]
 8008ed2:	681b      	ldr	r3, [r3, #0]
 8008ed4:	685b      	ldr	r3, [r3, #4]
 8008ed6:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8008eda:	2b00      	cmp	r3, #0
 8008edc:	d018      	beq.n	8008f10 <UART_RxISR_16BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8008ede:	687b      	ldr	r3, [r7, #4]
 8008ee0:	681b      	ldr	r3, [r3, #0]
 8008ee2:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008ee4:	6a3b      	ldr	r3, [r7, #32]
 8008ee6:	e853 3f00 	ldrex	r3, [r3]
 8008eea:	61fb      	str	r3, [r7, #28]
   return(result);
 8008eec:	69fb      	ldr	r3, [r7, #28]
 8008eee:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8008ef2:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8008ef4:	687b      	ldr	r3, [r7, #4]
 8008ef6:	681b      	ldr	r3, [r3, #0]
 8008ef8:	461a      	mov	r2, r3
 8008efa:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8008efc:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8008efe:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008f00:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8008f02:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8008f04:	e841 2300 	strex	r3, r2, [r1]
 8008f08:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8008f0a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008f0c:	2b00      	cmp	r3, #0
 8008f0e:	d1e6      	bne.n	8008ede <UART_RxISR_16BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008f10:	687b      	ldr	r3, [r7, #4]
 8008f12:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8008f14:	2b01      	cmp	r3, #1
 8008f16:	d12e      	bne.n	8008f76 <UART_RxISR_16BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008f18:	687b      	ldr	r3, [r7, #4]
 8008f1a:	2200      	movs	r2, #0
 8008f1c:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008f1e:	687b      	ldr	r3, [r7, #4]
 8008f20:	681b      	ldr	r3, [r3, #0]
 8008f22:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008f24:	68fb      	ldr	r3, [r7, #12]
 8008f26:	e853 3f00 	ldrex	r3, [r3]
 8008f2a:	60bb      	str	r3, [r7, #8]
   return(result);
 8008f2c:	68bb      	ldr	r3, [r7, #8]
 8008f2e:	f023 0310 	bic.w	r3, r3, #16
 8008f32:	65bb      	str	r3, [r7, #88]	@ 0x58
 8008f34:	687b      	ldr	r3, [r7, #4]
 8008f36:	681b      	ldr	r3, [r3, #0]
 8008f38:	461a      	mov	r2, r3
 8008f3a:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8008f3c:	61bb      	str	r3, [r7, #24]
 8008f3e:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008f40:	6979      	ldr	r1, [r7, #20]
 8008f42:	69ba      	ldr	r2, [r7, #24]
 8008f44:	e841 2300 	strex	r3, r2, [r1]
 8008f48:	613b      	str	r3, [r7, #16]
   return(result);
 8008f4a:	693b      	ldr	r3, [r7, #16]
 8008f4c:	2b00      	cmp	r3, #0
 8008f4e:	d1e6      	bne.n	8008f1e <UART_RxISR_16BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8008f50:	687b      	ldr	r3, [r7, #4]
 8008f52:	681b      	ldr	r3, [r3, #0]
 8008f54:	69db      	ldr	r3, [r3, #28]
 8008f56:	f003 0310 	and.w	r3, r3, #16
 8008f5a:	2b10      	cmp	r3, #16
 8008f5c:	d103      	bne.n	8008f66 <UART_RxISR_16BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8008f5e:	687b      	ldr	r3, [r7, #4]
 8008f60:	681b      	ldr	r3, [r3, #0]
 8008f62:	2210      	movs	r2, #16
 8008f64:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8008f66:	687b      	ldr	r3, [r7, #4]
 8008f68:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8008f6c:	4619      	mov	r1, r3
 8008f6e:	6878      	ldr	r0, [r7, #4]
 8008f70:	f7fe fc64 	bl	800783c <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8008f74:	e00b      	b.n	8008f8e <UART_RxISR_16BIT+0x1aa>
        HAL_UART_RxCpltCallback(huart);
 8008f76:	6878      	ldr	r0, [r7, #4]
 8008f78:	f7f7 fc42 	bl	8000800 <HAL_UART_RxCpltCallback>
}
 8008f7c:	e007      	b.n	8008f8e <UART_RxISR_16BIT+0x1aa>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8008f7e:	687b      	ldr	r3, [r7, #4]
 8008f80:	681b      	ldr	r3, [r3, #0]
 8008f82:	699a      	ldr	r2, [r3, #24]
 8008f84:	687b      	ldr	r3, [r7, #4]
 8008f86:	681b      	ldr	r3, [r3, #0]
 8008f88:	f042 0208 	orr.w	r2, r2, #8
 8008f8c:	619a      	str	r2, [r3, #24]
}
 8008f8e:	bf00      	nop
 8008f90:	3770      	adds	r7, #112	@ 0x70
 8008f92:	46bd      	mov	sp, r7
 8008f94:	bd80      	pop	{r7, pc}
 8008f96:	bf00      	nop
 8008f98:	58000c00 	.word	0x58000c00

08008f9c <UART_RxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8008f9c:	b580      	push	{r7, lr}
 8008f9e:	b0ac      	sub	sp, #176	@ 0xb0
 8008fa0:	af00      	add	r7, sp, #0
 8008fa2:	6078      	str	r0, [r7, #4]
  uint16_t  uhMask = huart->Mask;
 8008fa4:	687b      	ldr	r3, [r7, #4]
 8008fa6:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 8008faa:	f8a7 30aa 	strh.w	r3, [r7, #170]	@ 0xaa
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 8008fae:	687b      	ldr	r3, [r7, #4]
 8008fb0:	681b      	ldr	r3, [r3, #0]
 8008fb2:	69db      	ldr	r3, [r3, #28]
 8008fb4:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 8008fb8:	687b      	ldr	r3, [r7, #4]
 8008fba:	681b      	ldr	r3, [r3, #0]
 8008fbc:	681b      	ldr	r3, [r3, #0]
 8008fbe:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 8008fc2:	687b      	ldr	r3, [r7, #4]
 8008fc4:	681b      	ldr	r3, [r3, #0]
 8008fc6:	689b      	ldr	r3, [r3, #8]
 8008fc8:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8008fcc:	687b      	ldr	r3, [r7, #4]
 8008fce:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8008fd2:	2b22      	cmp	r3, #34	@ 0x22
 8008fd4:	f040 8181 	bne.w	80092da <UART_RxISR_8BIT_FIFOEN+0x33e>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 8008fd8:	687b      	ldr	r3, [r7, #4]
 8008fda:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 8008fde:	f8a7 309e 	strh.w	r3, [r7, #158]	@ 0x9e
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8008fe2:	e124      	b.n	800922e <UART_RxISR_8BIT_FIFOEN+0x292>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8008fe4:	687b      	ldr	r3, [r7, #4]
 8008fe6:	681b      	ldr	r3, [r3, #0]
 8008fe8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008fea:	f8a7 309c 	strh.w	r3, [r7, #156]	@ 0x9c
      *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8008fee:	f8b7 309c 	ldrh.w	r3, [r7, #156]	@ 0x9c
 8008ff2:	b2d9      	uxtb	r1, r3
 8008ff4:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	@ 0xaa
 8008ff8:	b2da      	uxtb	r2, r3
 8008ffa:	687b      	ldr	r3, [r7, #4]
 8008ffc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008ffe:	400a      	ands	r2, r1
 8009000:	b2d2      	uxtb	r2, r2
 8009002:	701a      	strb	r2, [r3, #0]
      huart->pRxBuffPtr++;
 8009004:	687b      	ldr	r3, [r7, #4]
 8009006:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009008:	1c5a      	adds	r2, r3, #1
 800900a:	687b      	ldr	r3, [r7, #4]
 800900c:	659a      	str	r2, [r3, #88]	@ 0x58
      huart->RxXferCount--;
 800900e:	687b      	ldr	r3, [r7, #4]
 8009010:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8009014:	b29b      	uxth	r3, r3
 8009016:	3b01      	subs	r3, #1
 8009018:	b29a      	uxth	r2, r3
 800901a:	687b      	ldr	r3, [r7, #4]
 800901c:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 8009020:	687b      	ldr	r3, [r7, #4]
 8009022:	681b      	ldr	r3, [r3, #0]
 8009024:	69db      	ldr	r3, [r3, #28]
 8009026:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 800902a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800902e:	f003 0307 	and.w	r3, r3, #7
 8009032:	2b00      	cmp	r3, #0
 8009034:	d053      	beq.n	80090de <UART_RxISR_8BIT_FIFOEN+0x142>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8009036:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800903a:	f003 0301 	and.w	r3, r3, #1
 800903e:	2b00      	cmp	r3, #0
 8009040:	d011      	beq.n	8009066 <UART_RxISR_8BIT_FIFOEN+0xca>
 8009042:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8009046:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800904a:	2b00      	cmp	r3, #0
 800904c:	d00b      	beq.n	8009066 <UART_RxISR_8BIT_FIFOEN+0xca>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800904e:	687b      	ldr	r3, [r7, #4]
 8009050:	681b      	ldr	r3, [r3, #0]
 8009052:	2201      	movs	r2, #1
 8009054:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 8009056:	687b      	ldr	r3, [r7, #4]
 8009058:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800905c:	f043 0201 	orr.w	r2, r3, #1
 8009060:	687b      	ldr	r3, [r7, #4]
 8009062:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8009066:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800906a:	f003 0302 	and.w	r3, r3, #2
 800906e:	2b00      	cmp	r3, #0
 8009070:	d011      	beq.n	8009096 <UART_RxISR_8BIT_FIFOEN+0xfa>
 8009072:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8009076:	f003 0301 	and.w	r3, r3, #1
 800907a:	2b00      	cmp	r3, #0
 800907c:	d00b      	beq.n	8009096 <UART_RxISR_8BIT_FIFOEN+0xfa>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800907e:	687b      	ldr	r3, [r7, #4]
 8009080:	681b      	ldr	r3, [r3, #0]
 8009082:	2202      	movs	r2, #2
 8009084:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 8009086:	687b      	ldr	r3, [r7, #4]
 8009088:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800908c:	f043 0204 	orr.w	r2, r3, #4
 8009090:	687b      	ldr	r3, [r7, #4]
 8009092:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8009096:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800909a:	f003 0304 	and.w	r3, r3, #4
 800909e:	2b00      	cmp	r3, #0
 80090a0:	d011      	beq.n	80090c6 <UART_RxISR_8BIT_FIFOEN+0x12a>
 80090a2:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80090a6:	f003 0301 	and.w	r3, r3, #1
 80090aa:	2b00      	cmp	r3, #0
 80090ac:	d00b      	beq.n	80090c6 <UART_RxISR_8BIT_FIFOEN+0x12a>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80090ae:	687b      	ldr	r3, [r7, #4]
 80090b0:	681b      	ldr	r3, [r3, #0]
 80090b2:	2204      	movs	r2, #4
 80090b4:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 80090b6:	687b      	ldr	r3, [r7, #4]
 80090b8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80090bc:	f043 0202 	orr.w	r2, r3, #2
 80090c0:	687b      	ldr	r3, [r7, #4]
 80090c2:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80090c6:	687b      	ldr	r3, [r7, #4]
 80090c8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80090cc:	2b00      	cmp	r3, #0
 80090ce:	d006      	beq.n	80090de <UART_RxISR_8BIT_FIFOEN+0x142>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80090d0:	6878      	ldr	r0, [r7, #4]
 80090d2:	f7fe fba9 	bl	8007828 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 80090d6:	687b      	ldr	r3, [r7, #4]
 80090d8:	2200      	movs	r2, #0
 80090da:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }
      }

      if (huart->RxXferCount == 0U)
 80090de:	687b      	ldr	r3, [r7, #4]
 80090e0:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 80090e4:	b29b      	uxth	r3, r3
 80090e6:	2b00      	cmp	r3, #0
 80090e8:	f040 80a1 	bne.w	800922e <UART_RxISR_8BIT_FIFOEN+0x292>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80090ec:	687b      	ldr	r3, [r7, #4]
 80090ee:	681b      	ldr	r3, [r3, #0]
 80090f0:	673b      	str	r3, [r7, #112]	@ 0x70
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80090f2:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80090f4:	e853 3f00 	ldrex	r3, [r3]
 80090f8:	66fb      	str	r3, [r7, #108]	@ 0x6c
   return(result);
 80090fa:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80090fc:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8009100:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8009104:	687b      	ldr	r3, [r7, #4]
 8009106:	681b      	ldr	r3, [r3, #0]
 8009108:	461a      	mov	r2, r3
 800910a:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800910e:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8009110:	67ba      	str	r2, [r7, #120]	@ 0x78
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009112:	6fb9      	ldr	r1, [r7, #120]	@ 0x78
 8009114:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 8009116:	e841 2300 	strex	r3, r2, [r1]
 800911a:	677b      	str	r3, [r7, #116]	@ 0x74
   return(result);
 800911c:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800911e:	2b00      	cmp	r3, #0
 8009120:	d1e4      	bne.n	80090ec <UART_RxISR_8BIT_FIFOEN+0x150>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8009122:	687b      	ldr	r3, [r7, #4]
 8009124:	681b      	ldr	r3, [r3, #0]
 8009126:	3308      	adds	r3, #8
 8009128:	65fb      	str	r3, [r7, #92]	@ 0x5c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800912a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800912c:	e853 3f00 	ldrex	r3, [r3]
 8009130:	65bb      	str	r3, [r7, #88]	@ 0x58
   return(result);
 8009132:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8009134:	4b6f      	ldr	r3, [pc, #444]	@ (80092f4 <UART_RxISR_8BIT_FIFOEN+0x358>)
 8009136:	4013      	ands	r3, r2
 8009138:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800913c:	687b      	ldr	r3, [r7, #4]
 800913e:	681b      	ldr	r3, [r3, #0]
 8009140:	3308      	adds	r3, #8
 8009142:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8009146:	66ba      	str	r2, [r7, #104]	@ 0x68
 8009148:	667b      	str	r3, [r7, #100]	@ 0x64
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800914a:	6e79      	ldr	r1, [r7, #100]	@ 0x64
 800914c:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 800914e:	e841 2300 	strex	r3, r2, [r1]
 8009152:	663b      	str	r3, [r7, #96]	@ 0x60
   return(result);
 8009154:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8009156:	2b00      	cmp	r3, #0
 8009158:	d1e3      	bne.n	8009122 <UART_RxISR_8BIT_FIFOEN+0x186>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800915a:	687b      	ldr	r3, [r7, #4]
 800915c:	2220      	movs	r2, #32
 800915e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8009162:	687b      	ldr	r3, [r7, #4]
 8009164:	2200      	movs	r2, #0
 8009166:	675a      	str	r2, [r3, #116]	@ 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 8009168:	687b      	ldr	r3, [r7, #4]
 800916a:	2200      	movs	r2, #0
 800916c:	671a      	str	r2, [r3, #112]	@ 0x70

        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800916e:	687b      	ldr	r3, [r7, #4]
 8009170:	681b      	ldr	r3, [r3, #0]
 8009172:	4a61      	ldr	r2, [pc, #388]	@ (80092f8 <UART_RxISR_8BIT_FIFOEN+0x35c>)
 8009174:	4293      	cmp	r3, r2
 8009176:	d021      	beq.n	80091bc <UART_RxISR_8BIT_FIFOEN+0x220>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8009178:	687b      	ldr	r3, [r7, #4]
 800917a:	681b      	ldr	r3, [r3, #0]
 800917c:	685b      	ldr	r3, [r3, #4]
 800917e:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8009182:	2b00      	cmp	r3, #0
 8009184:	d01a      	beq.n	80091bc <UART_RxISR_8BIT_FIFOEN+0x220>
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8009186:	687b      	ldr	r3, [r7, #4]
 8009188:	681b      	ldr	r3, [r3, #0]
 800918a:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800918c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800918e:	e853 3f00 	ldrex	r3, [r3]
 8009192:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 8009194:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8009196:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800919a:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800919e:	687b      	ldr	r3, [r7, #4]
 80091a0:	681b      	ldr	r3, [r3, #0]
 80091a2:	461a      	mov	r2, r3
 80091a4:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 80091a8:	657b      	str	r3, [r7, #84]	@ 0x54
 80091aa:	653a      	str	r2, [r7, #80]	@ 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80091ac:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 80091ae:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 80091b0:	e841 2300 	strex	r3, r2, [r1]
 80091b4:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 80091b6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80091b8:	2b00      	cmp	r3, #0
 80091ba:	d1e4      	bne.n	8009186 <UART_RxISR_8BIT_FIFOEN+0x1ea>
          }
        }

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80091bc:	687b      	ldr	r3, [r7, #4]
 80091be:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80091c0:	2b01      	cmp	r3, #1
 80091c2:	d130      	bne.n	8009226 <UART_RxISR_8BIT_FIFOEN+0x28a>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80091c4:	687b      	ldr	r3, [r7, #4]
 80091c6:	2200      	movs	r2, #0
 80091c8:	66da      	str	r2, [r3, #108]	@ 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80091ca:	687b      	ldr	r3, [r7, #4]
 80091cc:	681b      	ldr	r3, [r3, #0]
 80091ce:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80091d0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80091d2:	e853 3f00 	ldrex	r3, [r3]
 80091d6:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80091d8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80091da:	f023 0310 	bic.w	r3, r3, #16
 80091de:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 80091e2:	687b      	ldr	r3, [r7, #4]
 80091e4:	681b      	ldr	r3, [r3, #0]
 80091e6:	461a      	mov	r2, r3
 80091e8:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80091ec:	643b      	str	r3, [r7, #64]	@ 0x40
 80091ee:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80091f0:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80091f2:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80091f4:	e841 2300 	strex	r3, r2, [r1]
 80091f8:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80091fa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80091fc:	2b00      	cmp	r3, #0
 80091fe:	d1e4      	bne.n	80091ca <UART_RxISR_8BIT_FIFOEN+0x22e>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8009200:	687b      	ldr	r3, [r7, #4]
 8009202:	681b      	ldr	r3, [r3, #0]
 8009204:	69db      	ldr	r3, [r3, #28]
 8009206:	f003 0310 	and.w	r3, r3, #16
 800920a:	2b10      	cmp	r3, #16
 800920c:	d103      	bne.n	8009216 <UART_RxISR_8BIT_FIFOEN+0x27a>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800920e:	687b      	ldr	r3, [r7, #4]
 8009210:	681b      	ldr	r3, [r3, #0]
 8009212:	2210      	movs	r2, #16
 8009214:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8009216:	687b      	ldr	r3, [r7, #4]
 8009218:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800921c:	4619      	mov	r1, r3
 800921e:	6878      	ldr	r0, [r7, #4]
 8009220:	f7fe fb0c 	bl	800783c <HAL_UARTEx_RxEventCallback>
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        }
        break;
 8009224:	e00e      	b.n	8009244 <UART_RxISR_8BIT_FIFOEN+0x2a8>
          HAL_UART_RxCpltCallback(huart);
 8009226:	6878      	ldr	r0, [r7, #4]
 8009228:	f7f7 faea 	bl	8000800 <HAL_UART_RxCpltCallback>
        break;
 800922c:	e00a      	b.n	8009244 <UART_RxISR_8BIT_FIFOEN+0x2a8>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800922e:	f8b7 309e 	ldrh.w	r3, [r7, #158]	@ 0x9e
 8009232:	2b00      	cmp	r3, #0
 8009234:	d006      	beq.n	8009244 <UART_RxISR_8BIT_FIFOEN+0x2a8>
 8009236:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800923a:	f003 0320 	and.w	r3, r3, #32
 800923e:	2b00      	cmp	r3, #0
 8009240:	f47f aed0 	bne.w	8008fe4 <UART_RxISR_8BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 8009244:	687b      	ldr	r3, [r7, #4]
 8009246:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800924a:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 800924e:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 8009252:	2b00      	cmp	r3, #0
 8009254:	d049      	beq.n	80092ea <UART_RxISR_8BIT_FIFOEN+0x34e>
 8009256:	687b      	ldr	r3, [r7, #4]
 8009258:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 800925c:	f8b7 208a 	ldrh.w	r2, [r7, #138]	@ 0x8a
 8009260:	429a      	cmp	r2, r3
 8009262:	d242      	bcs.n	80092ea <UART_RxISR_8BIT_FIFOEN+0x34e>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8009264:	687b      	ldr	r3, [r7, #4]
 8009266:	681b      	ldr	r3, [r3, #0]
 8009268:	3308      	adds	r3, #8
 800926a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800926c:	6a3b      	ldr	r3, [r7, #32]
 800926e:	e853 3f00 	ldrex	r3, [r3]
 8009272:	61fb      	str	r3, [r7, #28]
   return(result);
 8009274:	69fb      	ldr	r3, [r7, #28]
 8009276:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800927a:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800927e:	687b      	ldr	r3, [r7, #4]
 8009280:	681b      	ldr	r3, [r3, #0]
 8009282:	3308      	adds	r3, #8
 8009284:	f8d7 2084 	ldr.w	r2, [r7, #132]	@ 0x84
 8009288:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800928a:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800928c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800928e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8009290:	e841 2300 	strex	r3, r2, [r1]
 8009294:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8009296:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009298:	2b00      	cmp	r3, #0
 800929a:	d1e3      	bne.n	8009264 <UART_RxISR_8BIT_FIFOEN+0x2c8>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_8BIT;
 800929c:	687b      	ldr	r3, [r7, #4]
 800929e:	4a17      	ldr	r2, [pc, #92]	@ (80092fc <UART_RxISR_8BIT_FIFOEN+0x360>)
 80092a0:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 80092a2:	687b      	ldr	r3, [r7, #4]
 80092a4:	681b      	ldr	r3, [r3, #0]
 80092a6:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80092a8:	68fb      	ldr	r3, [r7, #12]
 80092aa:	e853 3f00 	ldrex	r3, [r3]
 80092ae:	60bb      	str	r3, [r7, #8]
   return(result);
 80092b0:	68bb      	ldr	r3, [r7, #8]
 80092b2:	f043 0320 	orr.w	r3, r3, #32
 80092b6:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 80092ba:	687b      	ldr	r3, [r7, #4]
 80092bc:	681b      	ldr	r3, [r3, #0]
 80092be:	461a      	mov	r2, r3
 80092c0:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 80092c4:	61bb      	str	r3, [r7, #24]
 80092c6:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80092c8:	6979      	ldr	r1, [r7, #20]
 80092ca:	69ba      	ldr	r2, [r7, #24]
 80092cc:	e841 2300 	strex	r3, r2, [r1]
 80092d0:	613b      	str	r3, [r7, #16]
   return(result);
 80092d2:	693b      	ldr	r3, [r7, #16]
 80092d4:	2b00      	cmp	r3, #0
 80092d6:	d1e4      	bne.n	80092a2 <UART_RxISR_8BIT_FIFOEN+0x306>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80092d8:	e007      	b.n	80092ea <UART_RxISR_8BIT_FIFOEN+0x34e>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80092da:	687b      	ldr	r3, [r7, #4]
 80092dc:	681b      	ldr	r3, [r3, #0]
 80092de:	699a      	ldr	r2, [r3, #24]
 80092e0:	687b      	ldr	r3, [r7, #4]
 80092e2:	681b      	ldr	r3, [r3, #0]
 80092e4:	f042 0208 	orr.w	r2, r2, #8
 80092e8:	619a      	str	r2, [r3, #24]
}
 80092ea:	bf00      	nop
 80092ec:	37b0      	adds	r7, #176	@ 0xb0
 80092ee:	46bd      	mov	sp, r7
 80092f0:	bd80      	pop	{r7, pc}
 80092f2:	bf00      	nop
 80092f4:	effffffe 	.word	0xeffffffe
 80092f8:	58000c00 	.word	0x58000c00
 80092fc:	08008c2d 	.word	0x08008c2d

08009300 <UART_RxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8009300:	b580      	push	{r7, lr}
 8009302:	b0ae      	sub	sp, #184	@ 0xb8
 8009304:	af00      	add	r7, sp, #0
 8009306:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t  uhMask = huart->Mask;
 8009308:	687b      	ldr	r3, [r7, #4]
 800930a:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 800930e:	f8a7 30b2 	strh.w	r3, [r7, #178]	@ 0xb2
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 8009312:	687b      	ldr	r3, [r7, #4]
 8009314:	681b      	ldr	r3, [r3, #0]
 8009316:	69db      	ldr	r3, [r3, #28]
 8009318:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 800931c:	687b      	ldr	r3, [r7, #4]
 800931e:	681b      	ldr	r3, [r3, #0]
 8009320:	681b      	ldr	r3, [r3, #0]
 8009322:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 8009326:	687b      	ldr	r3, [r7, #4]
 8009328:	681b      	ldr	r3, [r3, #0]
 800932a:	689b      	ldr	r3, [r3, #8]
 800932c:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8009330:	687b      	ldr	r3, [r7, #4]
 8009332:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8009336:	2b22      	cmp	r3, #34	@ 0x22
 8009338:	f040 8185 	bne.w	8009646 <UART_RxISR_16BIT_FIFOEN+0x346>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 800933c:	687b      	ldr	r3, [r7, #4]
 800933e:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 8009342:	f8a7 30a6 	strh.w	r3, [r7, #166]	@ 0xa6
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8009346:	e128      	b.n	800959a <UART_RxISR_16BIT_FIFOEN+0x29a>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8009348:	687b      	ldr	r3, [r7, #4]
 800934a:	681b      	ldr	r3, [r3, #0]
 800934c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800934e:	f8a7 30a4 	strh.w	r3, [r7, #164]	@ 0xa4
      tmp = (uint16_t *) huart->pRxBuffPtr ;
 8009352:	687b      	ldr	r3, [r7, #4]
 8009354:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009356:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
      *tmp = (uint16_t)(uhdata & uhMask);
 800935a:	f8b7 20a4 	ldrh.w	r2, [r7, #164]	@ 0xa4
 800935e:	f8b7 30b2 	ldrh.w	r3, [r7, #178]	@ 0xb2
 8009362:	4013      	ands	r3, r2
 8009364:	b29a      	uxth	r2, r3
 8009366:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800936a:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800936c:	687b      	ldr	r3, [r7, #4]
 800936e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009370:	1c9a      	adds	r2, r3, #2
 8009372:	687b      	ldr	r3, [r7, #4]
 8009374:	659a      	str	r2, [r3, #88]	@ 0x58
      huart->RxXferCount--;
 8009376:	687b      	ldr	r3, [r7, #4]
 8009378:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800937c:	b29b      	uxth	r3, r3
 800937e:	3b01      	subs	r3, #1
 8009380:	b29a      	uxth	r2, r3
 8009382:	687b      	ldr	r3, [r7, #4]
 8009384:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 8009388:	687b      	ldr	r3, [r7, #4]
 800938a:	681b      	ldr	r3, [r3, #0]
 800938c:	69db      	ldr	r3, [r3, #28]
 800938e:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 8009392:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8009396:	f003 0307 	and.w	r3, r3, #7
 800939a:	2b00      	cmp	r3, #0
 800939c:	d053      	beq.n	8009446 <UART_RxISR_16BIT_FIFOEN+0x146>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800939e:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 80093a2:	f003 0301 	and.w	r3, r3, #1
 80093a6:	2b00      	cmp	r3, #0
 80093a8:	d011      	beq.n	80093ce <UART_RxISR_16BIT_FIFOEN+0xce>
 80093aa:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80093ae:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80093b2:	2b00      	cmp	r3, #0
 80093b4:	d00b      	beq.n	80093ce <UART_RxISR_16BIT_FIFOEN+0xce>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80093b6:	687b      	ldr	r3, [r7, #4]
 80093b8:	681b      	ldr	r3, [r3, #0]
 80093ba:	2201      	movs	r2, #1
 80093bc:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 80093be:	687b      	ldr	r3, [r7, #4]
 80093c0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80093c4:	f043 0201 	orr.w	r2, r3, #1
 80093c8:	687b      	ldr	r3, [r7, #4]
 80093ca:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80093ce:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 80093d2:	f003 0302 	and.w	r3, r3, #2
 80093d6:	2b00      	cmp	r3, #0
 80093d8:	d011      	beq.n	80093fe <UART_RxISR_16BIT_FIFOEN+0xfe>
 80093da:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 80093de:	f003 0301 	and.w	r3, r3, #1
 80093e2:	2b00      	cmp	r3, #0
 80093e4:	d00b      	beq.n	80093fe <UART_RxISR_16BIT_FIFOEN+0xfe>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80093e6:	687b      	ldr	r3, [r7, #4]
 80093e8:	681b      	ldr	r3, [r3, #0]
 80093ea:	2202      	movs	r2, #2
 80093ec:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 80093ee:	687b      	ldr	r3, [r7, #4]
 80093f0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80093f4:	f043 0204 	orr.w	r2, r3, #4
 80093f8:	687b      	ldr	r3, [r7, #4]
 80093fa:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80093fe:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8009402:	f003 0304 	and.w	r3, r3, #4
 8009406:	2b00      	cmp	r3, #0
 8009408:	d011      	beq.n	800942e <UART_RxISR_16BIT_FIFOEN+0x12e>
 800940a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800940e:	f003 0301 	and.w	r3, r3, #1
 8009412:	2b00      	cmp	r3, #0
 8009414:	d00b      	beq.n	800942e <UART_RxISR_16BIT_FIFOEN+0x12e>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8009416:	687b      	ldr	r3, [r7, #4]
 8009418:	681b      	ldr	r3, [r3, #0]
 800941a:	2204      	movs	r2, #4
 800941c:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 800941e:	687b      	ldr	r3, [r7, #4]
 8009420:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009424:	f043 0202 	orr.w	r2, r3, #2
 8009428:	687b      	ldr	r3, [r7, #4]
 800942a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800942e:	687b      	ldr	r3, [r7, #4]
 8009430:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009434:	2b00      	cmp	r3, #0
 8009436:	d006      	beq.n	8009446 <UART_RxISR_16BIT_FIFOEN+0x146>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8009438:	6878      	ldr	r0, [r7, #4]
 800943a:	f7fe f9f5 	bl	8007828 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 800943e:	687b      	ldr	r3, [r7, #4]
 8009440:	2200      	movs	r2, #0
 8009442:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }
      }

      if (huart->RxXferCount == 0U)
 8009446:	687b      	ldr	r3, [r7, #4]
 8009448:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800944c:	b29b      	uxth	r3, r3
 800944e:	2b00      	cmp	r3, #0
 8009450:	f040 80a3 	bne.w	800959a <UART_RxISR_16BIT_FIFOEN+0x29a>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8009454:	687b      	ldr	r3, [r7, #4]
 8009456:	681b      	ldr	r3, [r3, #0]
 8009458:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800945a:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800945c:	e853 3f00 	ldrex	r3, [r3]
 8009460:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8009462:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8009464:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8009468:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800946c:	687b      	ldr	r3, [r7, #4]
 800946e:	681b      	ldr	r3, [r3, #0]
 8009470:	461a      	mov	r2, r3
 8009472:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8009476:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800947a:	67fa      	str	r2, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800947c:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 800947e:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8009482:	e841 2300 	strex	r3, r2, [r1]
 8009486:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8009488:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800948a:	2b00      	cmp	r3, #0
 800948c:	d1e2      	bne.n	8009454 <UART_RxISR_16BIT_FIFOEN+0x154>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800948e:	687b      	ldr	r3, [r7, #4]
 8009490:	681b      	ldr	r3, [r3, #0]
 8009492:	3308      	adds	r3, #8
 8009494:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009496:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8009498:	e853 3f00 	ldrex	r3, [r3]
 800949c:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 800949e:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 80094a0:	4b6f      	ldr	r3, [pc, #444]	@ (8009660 <UART_RxISR_16BIT_FIFOEN+0x360>)
 80094a2:	4013      	ands	r3, r2
 80094a4:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 80094a8:	687b      	ldr	r3, [r7, #4]
 80094aa:	681b      	ldr	r3, [r3, #0]
 80094ac:	3308      	adds	r3, #8
 80094ae:	f8d7 2098 	ldr.w	r2, [r7, #152]	@ 0x98
 80094b2:	66fa      	str	r2, [r7, #108]	@ 0x6c
 80094b4:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80094b6:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 80094b8:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 80094ba:	e841 2300 	strex	r3, r2, [r1]
 80094be:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 80094c0:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80094c2:	2b00      	cmp	r3, #0
 80094c4:	d1e3      	bne.n	800948e <UART_RxISR_16BIT_FIFOEN+0x18e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80094c6:	687b      	ldr	r3, [r7, #4]
 80094c8:	2220      	movs	r2, #32
 80094ca:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 80094ce:	687b      	ldr	r3, [r7, #4]
 80094d0:	2200      	movs	r2, #0
 80094d2:	675a      	str	r2, [r3, #116]	@ 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 80094d4:	687b      	ldr	r3, [r7, #4]
 80094d6:	2200      	movs	r2, #0
 80094d8:	671a      	str	r2, [r3, #112]	@ 0x70

        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 80094da:	687b      	ldr	r3, [r7, #4]
 80094dc:	681b      	ldr	r3, [r3, #0]
 80094de:	4a61      	ldr	r2, [pc, #388]	@ (8009664 <UART_RxISR_16BIT_FIFOEN+0x364>)
 80094e0:	4293      	cmp	r3, r2
 80094e2:	d021      	beq.n	8009528 <UART_RxISR_16BIT_FIFOEN+0x228>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80094e4:	687b      	ldr	r3, [r7, #4]
 80094e6:	681b      	ldr	r3, [r3, #0]
 80094e8:	685b      	ldr	r3, [r3, #4]
 80094ea:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80094ee:	2b00      	cmp	r3, #0
 80094f0:	d01a      	beq.n	8009528 <UART_RxISR_16BIT_FIFOEN+0x228>
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80094f2:	687b      	ldr	r3, [r7, #4]
 80094f4:	681b      	ldr	r3, [r3, #0]
 80094f6:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80094f8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80094fa:	e853 3f00 	ldrex	r3, [r3]
 80094fe:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8009500:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8009502:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8009506:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800950a:	687b      	ldr	r3, [r7, #4]
 800950c:	681b      	ldr	r3, [r3, #0]
 800950e:	461a      	mov	r2, r3
 8009510:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8009514:	65bb      	str	r3, [r7, #88]	@ 0x58
 8009516:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009518:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800951a:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800951c:	e841 2300 	strex	r3, r2, [r1]
 8009520:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8009522:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8009524:	2b00      	cmp	r3, #0
 8009526:	d1e4      	bne.n	80094f2 <UART_RxISR_16BIT_FIFOEN+0x1f2>
          }
        }

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009528:	687b      	ldr	r3, [r7, #4]
 800952a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800952c:	2b01      	cmp	r3, #1
 800952e:	d130      	bne.n	8009592 <UART_RxISR_16BIT_FIFOEN+0x292>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009530:	687b      	ldr	r3, [r7, #4]
 8009532:	2200      	movs	r2, #0
 8009534:	66da      	str	r2, [r3, #108]	@ 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009536:	687b      	ldr	r3, [r7, #4]
 8009538:	681b      	ldr	r3, [r3, #0]
 800953a:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800953c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800953e:	e853 3f00 	ldrex	r3, [r3]
 8009542:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8009544:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009546:	f023 0310 	bic.w	r3, r3, #16
 800954a:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800954e:	687b      	ldr	r3, [r7, #4]
 8009550:	681b      	ldr	r3, [r3, #0]
 8009552:	461a      	mov	r2, r3
 8009554:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8009558:	647b      	str	r3, [r7, #68]	@ 0x44
 800955a:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800955c:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800955e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8009560:	e841 2300 	strex	r3, r2, [r1]
 8009564:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8009566:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009568:	2b00      	cmp	r3, #0
 800956a:	d1e4      	bne.n	8009536 <UART_RxISR_16BIT_FIFOEN+0x236>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800956c:	687b      	ldr	r3, [r7, #4]
 800956e:	681b      	ldr	r3, [r3, #0]
 8009570:	69db      	ldr	r3, [r3, #28]
 8009572:	f003 0310 	and.w	r3, r3, #16
 8009576:	2b10      	cmp	r3, #16
 8009578:	d103      	bne.n	8009582 <UART_RxISR_16BIT_FIFOEN+0x282>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800957a:	687b      	ldr	r3, [r7, #4]
 800957c:	681b      	ldr	r3, [r3, #0]
 800957e:	2210      	movs	r2, #16
 8009580:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8009582:	687b      	ldr	r3, [r7, #4]
 8009584:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8009588:	4619      	mov	r1, r3
 800958a:	6878      	ldr	r0, [r7, #4]
 800958c:	f7fe f956 	bl	800783c <HAL_UARTEx_RxEventCallback>
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        }
        break;
 8009590:	e00e      	b.n	80095b0 <UART_RxISR_16BIT_FIFOEN+0x2b0>
          HAL_UART_RxCpltCallback(huart);
 8009592:	6878      	ldr	r0, [r7, #4]
 8009594:	f7f7 f934 	bl	8000800 <HAL_UART_RxCpltCallback>
        break;
 8009598:	e00a      	b.n	80095b0 <UART_RxISR_16BIT_FIFOEN+0x2b0>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800959a:	f8b7 30a6 	ldrh.w	r3, [r7, #166]	@ 0xa6
 800959e:	2b00      	cmp	r3, #0
 80095a0:	d006      	beq.n	80095b0 <UART_RxISR_16BIT_FIFOEN+0x2b0>
 80095a2:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 80095a6:	f003 0320 	and.w	r3, r3, #32
 80095aa:	2b00      	cmp	r3, #0
 80095ac:	f47f aecc 	bne.w	8009348 <UART_RxISR_16BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 80095b0:	687b      	ldr	r3, [r7, #4]
 80095b2:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 80095b6:	f8a7 308e 	strh.w	r3, [r7, #142]	@ 0x8e
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 80095ba:	f8b7 308e 	ldrh.w	r3, [r7, #142]	@ 0x8e
 80095be:	2b00      	cmp	r3, #0
 80095c0:	d049      	beq.n	8009656 <UART_RxISR_16BIT_FIFOEN+0x356>
 80095c2:	687b      	ldr	r3, [r7, #4]
 80095c4:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 80095c8:	f8b7 208e 	ldrh.w	r2, [r7, #142]	@ 0x8e
 80095cc:	429a      	cmp	r2, r3
 80095ce:	d242      	bcs.n	8009656 <UART_RxISR_16BIT_FIFOEN+0x356>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 80095d0:	687b      	ldr	r3, [r7, #4]
 80095d2:	681b      	ldr	r3, [r3, #0]
 80095d4:	3308      	adds	r3, #8
 80095d6:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80095d8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80095da:	e853 3f00 	ldrex	r3, [r3]
 80095de:	623b      	str	r3, [r7, #32]
   return(result);
 80095e0:	6a3b      	ldr	r3, [r7, #32]
 80095e2:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80095e6:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 80095ea:	687b      	ldr	r3, [r7, #4]
 80095ec:	681b      	ldr	r3, [r3, #0]
 80095ee:	3308      	adds	r3, #8
 80095f0:	f8d7 2088 	ldr.w	r2, [r7, #136]	@ 0x88
 80095f4:	633a      	str	r2, [r7, #48]	@ 0x30
 80095f6:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80095f8:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80095fa:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80095fc:	e841 2300 	strex	r3, r2, [r1]
 8009600:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8009602:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009604:	2b00      	cmp	r3, #0
 8009606:	d1e3      	bne.n	80095d0 <UART_RxISR_16BIT_FIFOEN+0x2d0>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_16BIT;
 8009608:	687b      	ldr	r3, [r7, #4]
 800960a:	4a17      	ldr	r2, [pc, #92]	@ (8009668 <UART_RxISR_16BIT_FIFOEN+0x368>)
 800960c:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 800960e:	687b      	ldr	r3, [r7, #4]
 8009610:	681b      	ldr	r3, [r3, #0]
 8009612:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009614:	693b      	ldr	r3, [r7, #16]
 8009616:	e853 3f00 	ldrex	r3, [r3]
 800961a:	60fb      	str	r3, [r7, #12]
   return(result);
 800961c:	68fb      	ldr	r3, [r7, #12]
 800961e:	f043 0320 	orr.w	r3, r3, #32
 8009622:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8009626:	687b      	ldr	r3, [r7, #4]
 8009628:	681b      	ldr	r3, [r3, #0]
 800962a:	461a      	mov	r2, r3
 800962c:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8009630:	61fb      	str	r3, [r7, #28]
 8009632:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009634:	69b9      	ldr	r1, [r7, #24]
 8009636:	69fa      	ldr	r2, [r7, #28]
 8009638:	e841 2300 	strex	r3, r2, [r1]
 800963c:	617b      	str	r3, [r7, #20]
   return(result);
 800963e:	697b      	ldr	r3, [r7, #20]
 8009640:	2b00      	cmp	r3, #0
 8009642:	d1e4      	bne.n	800960e <UART_RxISR_16BIT_FIFOEN+0x30e>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8009644:	e007      	b.n	8009656 <UART_RxISR_16BIT_FIFOEN+0x356>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8009646:	687b      	ldr	r3, [r7, #4]
 8009648:	681b      	ldr	r3, [r3, #0]
 800964a:	699a      	ldr	r2, [r3, #24]
 800964c:	687b      	ldr	r3, [r7, #4]
 800964e:	681b      	ldr	r3, [r3, #0]
 8009650:	f042 0208 	orr.w	r2, r2, #8
 8009654:	619a      	str	r2, [r3, #24]
}
 8009656:	bf00      	nop
 8009658:	37b8      	adds	r7, #184	@ 0xb8
 800965a:	46bd      	mov	sp, r7
 800965c:	bd80      	pop	{r7, pc}
 800965e:	bf00      	nop
 8009660:	effffffe 	.word	0xeffffffe
 8009664:	58000c00 	.word	0x58000c00
 8009668:	08008de5 	.word	0x08008de5

0800966c <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800966c:	b480      	push	{r7}
 800966e:	b083      	sub	sp, #12
 8009670:	af00      	add	r7, sp, #0
 8009672:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8009674:	bf00      	nop
 8009676:	370c      	adds	r7, #12
 8009678:	46bd      	mov	sp, r7
 800967a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800967e:	4770      	bx	lr

08009680 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 8009680:	b480      	push	{r7}
 8009682:	b083      	sub	sp, #12
 8009684:	af00      	add	r7, sp, #0
 8009686:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 8009688:	bf00      	nop
 800968a:	370c      	adds	r7, #12
 800968c:	46bd      	mov	sp, r7
 800968e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009692:	4770      	bx	lr

08009694 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 8009694:	b480      	push	{r7}
 8009696:	b083      	sub	sp, #12
 8009698:	af00      	add	r7, sp, #0
 800969a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 800969c:	bf00      	nop
 800969e:	370c      	adds	r7, #12
 80096a0:	46bd      	mov	sp, r7
 80096a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096a6:	4770      	bx	lr

080096a8 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 80096a8:	b480      	push	{r7}
 80096aa:	b085      	sub	sp, #20
 80096ac:	af00      	add	r7, sp, #0
 80096ae:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 80096b0:	687b      	ldr	r3, [r7, #4]
 80096b2:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 80096b6:	2b01      	cmp	r3, #1
 80096b8:	d101      	bne.n	80096be <HAL_UARTEx_DisableFifoMode+0x16>
 80096ba:	2302      	movs	r3, #2
 80096bc:	e027      	b.n	800970e <HAL_UARTEx_DisableFifoMode+0x66>
 80096be:	687b      	ldr	r3, [r7, #4]
 80096c0:	2201      	movs	r2, #1
 80096c2:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80096c6:	687b      	ldr	r3, [r7, #4]
 80096c8:	2224      	movs	r2, #36	@ 0x24
 80096ca:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80096ce:	687b      	ldr	r3, [r7, #4]
 80096d0:	681b      	ldr	r3, [r3, #0]
 80096d2:	681b      	ldr	r3, [r3, #0]
 80096d4:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80096d6:	687b      	ldr	r3, [r7, #4]
 80096d8:	681b      	ldr	r3, [r3, #0]
 80096da:	681a      	ldr	r2, [r3, #0]
 80096dc:	687b      	ldr	r3, [r7, #4]
 80096de:	681b      	ldr	r3, [r3, #0]
 80096e0:	f022 0201 	bic.w	r2, r2, #1
 80096e4:	601a      	str	r2, [r3, #0]

  /* Disable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 80096e6:	68fb      	ldr	r3, [r7, #12]
 80096e8:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 80096ec:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 80096ee:	687b      	ldr	r3, [r7, #4]
 80096f0:	2200      	movs	r2, #0
 80096f2:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80096f4:	687b      	ldr	r3, [r7, #4]
 80096f6:	681b      	ldr	r3, [r3, #0]
 80096f8:	68fa      	ldr	r2, [r7, #12]
 80096fa:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80096fc:	687b      	ldr	r3, [r7, #4]
 80096fe:	2220      	movs	r2, #32
 8009700:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8009704:	687b      	ldr	r3, [r7, #4]
 8009706:	2200      	movs	r2, #0
 8009708:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800970c:	2300      	movs	r3, #0
}
 800970e:	4618      	mov	r0, r3
 8009710:	3714      	adds	r7, #20
 8009712:	46bd      	mov	sp, r7
 8009714:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009718:	4770      	bx	lr

0800971a <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800971a:	b580      	push	{r7, lr}
 800971c:	b084      	sub	sp, #16
 800971e:	af00      	add	r7, sp, #0
 8009720:	6078      	str	r0, [r7, #4]
 8009722:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8009724:	687b      	ldr	r3, [r7, #4]
 8009726:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800972a:	2b01      	cmp	r3, #1
 800972c:	d101      	bne.n	8009732 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800972e:	2302      	movs	r3, #2
 8009730:	e02d      	b.n	800978e <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8009732:	687b      	ldr	r3, [r7, #4]
 8009734:	2201      	movs	r2, #1
 8009736:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800973a:	687b      	ldr	r3, [r7, #4]
 800973c:	2224      	movs	r2, #36	@ 0x24
 800973e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8009742:	687b      	ldr	r3, [r7, #4]
 8009744:	681b      	ldr	r3, [r3, #0]
 8009746:	681b      	ldr	r3, [r3, #0]
 8009748:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800974a:	687b      	ldr	r3, [r7, #4]
 800974c:	681b      	ldr	r3, [r3, #0]
 800974e:	681a      	ldr	r2, [r3, #0]
 8009750:	687b      	ldr	r3, [r7, #4]
 8009752:	681b      	ldr	r3, [r3, #0]
 8009754:	f022 0201 	bic.w	r2, r2, #1
 8009758:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800975a:	687b      	ldr	r3, [r7, #4]
 800975c:	681b      	ldr	r3, [r3, #0]
 800975e:	689b      	ldr	r3, [r3, #8]
 8009760:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 8009764:	687b      	ldr	r3, [r7, #4]
 8009766:	681b      	ldr	r3, [r3, #0]
 8009768:	683a      	ldr	r2, [r7, #0]
 800976a:	430a      	orrs	r2, r1
 800976c:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800976e:	6878      	ldr	r0, [r7, #4]
 8009770:	f000 f850 	bl	8009814 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8009774:	687b      	ldr	r3, [r7, #4]
 8009776:	681b      	ldr	r3, [r3, #0]
 8009778:	68fa      	ldr	r2, [r7, #12]
 800977a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800977c:	687b      	ldr	r3, [r7, #4]
 800977e:	2220      	movs	r2, #32
 8009780:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8009784:	687b      	ldr	r3, [r7, #4]
 8009786:	2200      	movs	r2, #0
 8009788:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800978c:	2300      	movs	r3, #0
}
 800978e:	4618      	mov	r0, r3
 8009790:	3710      	adds	r7, #16
 8009792:	46bd      	mov	sp, r7
 8009794:	bd80      	pop	{r7, pc}

08009796 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8009796:	b580      	push	{r7, lr}
 8009798:	b084      	sub	sp, #16
 800979a:	af00      	add	r7, sp, #0
 800979c:	6078      	str	r0, [r7, #4]
 800979e:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80097a0:	687b      	ldr	r3, [r7, #4]
 80097a2:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 80097a6:	2b01      	cmp	r3, #1
 80097a8:	d101      	bne.n	80097ae <HAL_UARTEx_SetRxFifoThreshold+0x18>
 80097aa:	2302      	movs	r3, #2
 80097ac:	e02d      	b.n	800980a <HAL_UARTEx_SetRxFifoThreshold+0x74>
 80097ae:	687b      	ldr	r3, [r7, #4]
 80097b0:	2201      	movs	r2, #1
 80097b2:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80097b6:	687b      	ldr	r3, [r7, #4]
 80097b8:	2224      	movs	r2, #36	@ 0x24
 80097ba:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80097be:	687b      	ldr	r3, [r7, #4]
 80097c0:	681b      	ldr	r3, [r3, #0]
 80097c2:	681b      	ldr	r3, [r3, #0]
 80097c4:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80097c6:	687b      	ldr	r3, [r7, #4]
 80097c8:	681b      	ldr	r3, [r3, #0]
 80097ca:	681a      	ldr	r2, [r3, #0]
 80097cc:	687b      	ldr	r3, [r7, #4]
 80097ce:	681b      	ldr	r3, [r3, #0]
 80097d0:	f022 0201 	bic.w	r2, r2, #1
 80097d4:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 80097d6:	687b      	ldr	r3, [r7, #4]
 80097d8:	681b      	ldr	r3, [r3, #0]
 80097da:	689b      	ldr	r3, [r3, #8]
 80097dc:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 80097e0:	687b      	ldr	r3, [r7, #4]
 80097e2:	681b      	ldr	r3, [r3, #0]
 80097e4:	683a      	ldr	r2, [r7, #0]
 80097e6:	430a      	orrs	r2, r1
 80097e8:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80097ea:	6878      	ldr	r0, [r7, #4]
 80097ec:	f000 f812 	bl	8009814 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80097f0:	687b      	ldr	r3, [r7, #4]
 80097f2:	681b      	ldr	r3, [r3, #0]
 80097f4:	68fa      	ldr	r2, [r7, #12]
 80097f6:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80097f8:	687b      	ldr	r3, [r7, #4]
 80097fa:	2220      	movs	r2, #32
 80097fc:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8009800:	687b      	ldr	r3, [r7, #4]
 8009802:	2200      	movs	r2, #0
 8009804:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8009808:	2300      	movs	r3, #0
}
 800980a:	4618      	mov	r0, r3
 800980c:	3710      	adds	r7, #16
 800980e:	46bd      	mov	sp, r7
 8009810:	bd80      	pop	{r7, pc}
	...

08009814 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8009814:	b480      	push	{r7}
 8009816:	b085      	sub	sp, #20
 8009818:	af00      	add	r7, sp, #0
 800981a:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800981c:	687b      	ldr	r3, [r7, #4]
 800981e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8009820:	2b00      	cmp	r3, #0
 8009822:	d108      	bne.n	8009836 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8009824:	687b      	ldr	r3, [r7, #4]
 8009826:	2201      	movs	r2, #1
 8009828:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 800982c:	687b      	ldr	r3, [r7, #4]
 800982e:	2201      	movs	r2, #1
 8009830:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8009834:	e031      	b.n	800989a <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8009836:	2310      	movs	r3, #16
 8009838:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800983a:	2310      	movs	r3, #16
 800983c:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800983e:	687b      	ldr	r3, [r7, #4]
 8009840:	681b      	ldr	r3, [r3, #0]
 8009842:	689b      	ldr	r3, [r3, #8]
 8009844:	0e5b      	lsrs	r3, r3, #25
 8009846:	b2db      	uxtb	r3, r3
 8009848:	f003 0307 	and.w	r3, r3, #7
 800984c:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800984e:	687b      	ldr	r3, [r7, #4]
 8009850:	681b      	ldr	r3, [r3, #0]
 8009852:	689b      	ldr	r3, [r3, #8]
 8009854:	0f5b      	lsrs	r3, r3, #29
 8009856:	b2db      	uxtb	r3, r3
 8009858:	f003 0307 	and.w	r3, r3, #7
 800985c:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800985e:	7bbb      	ldrb	r3, [r7, #14]
 8009860:	7b3a      	ldrb	r2, [r7, #12]
 8009862:	4911      	ldr	r1, [pc, #68]	@ (80098a8 <UARTEx_SetNbDataToProcess+0x94>)
 8009864:	5c8a      	ldrb	r2, [r1, r2]
 8009866:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800986a:	7b3a      	ldrb	r2, [r7, #12]
 800986c:	490f      	ldr	r1, [pc, #60]	@ (80098ac <UARTEx_SetNbDataToProcess+0x98>)
 800986e:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8009870:	fb93 f3f2 	sdiv	r3, r3, r2
 8009874:	b29a      	uxth	r2, r3
 8009876:	687b      	ldr	r3, [r7, #4]
 8009878:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800987c:	7bfb      	ldrb	r3, [r7, #15]
 800987e:	7b7a      	ldrb	r2, [r7, #13]
 8009880:	4909      	ldr	r1, [pc, #36]	@ (80098a8 <UARTEx_SetNbDataToProcess+0x94>)
 8009882:	5c8a      	ldrb	r2, [r1, r2]
 8009884:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8009888:	7b7a      	ldrb	r2, [r7, #13]
 800988a:	4908      	ldr	r1, [pc, #32]	@ (80098ac <UARTEx_SetNbDataToProcess+0x98>)
 800988c:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800988e:	fb93 f3f2 	sdiv	r3, r3, r2
 8009892:	b29a      	uxth	r2, r3
 8009894:	687b      	ldr	r3, [r7, #4]
 8009896:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 800989a:	bf00      	nop
 800989c:	3714      	adds	r7, #20
 800989e:	46bd      	mov	sp, r7
 80098a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098a4:	4770      	bx	lr
 80098a6:	bf00      	nop
 80098a8:	0800c210 	.word	0x0800c210
 80098ac:	0800c218 	.word	0x0800c218

080098b0 <__cvt>:
 80098b0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80098b2:	ed2d 8b02 	vpush	{d8}
 80098b6:	eeb0 8b40 	vmov.f64	d8, d0
 80098ba:	b085      	sub	sp, #20
 80098bc:	4617      	mov	r7, r2
 80098be:	9d0d      	ldr	r5, [sp, #52]	@ 0x34
 80098c0:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 80098c2:	ee18 2a90 	vmov	r2, s17
 80098c6:	f025 0520 	bic.w	r5, r5, #32
 80098ca:	2a00      	cmp	r2, #0
 80098cc:	bfb6      	itet	lt
 80098ce:	222d      	movlt	r2, #45	@ 0x2d
 80098d0:	2200      	movge	r2, #0
 80098d2:	eeb1 8b40 	vneglt.f64	d8, d0
 80098d6:	2d46      	cmp	r5, #70	@ 0x46
 80098d8:	460c      	mov	r4, r1
 80098da:	701a      	strb	r2, [r3, #0]
 80098dc:	d004      	beq.n	80098e8 <__cvt+0x38>
 80098de:	2d45      	cmp	r5, #69	@ 0x45
 80098e0:	d100      	bne.n	80098e4 <__cvt+0x34>
 80098e2:	3401      	adds	r4, #1
 80098e4:	2102      	movs	r1, #2
 80098e6:	e000      	b.n	80098ea <__cvt+0x3a>
 80098e8:	2103      	movs	r1, #3
 80098ea:	ab03      	add	r3, sp, #12
 80098ec:	9301      	str	r3, [sp, #4]
 80098ee:	ab02      	add	r3, sp, #8
 80098f0:	9300      	str	r3, [sp, #0]
 80098f2:	4622      	mov	r2, r4
 80098f4:	4633      	mov	r3, r6
 80098f6:	eeb0 0b48 	vmov.f64	d0, d8
 80098fa:	f000 fed1 	bl	800a6a0 <_dtoa_r>
 80098fe:	2d47      	cmp	r5, #71	@ 0x47
 8009900:	d114      	bne.n	800992c <__cvt+0x7c>
 8009902:	07fb      	lsls	r3, r7, #31
 8009904:	d50a      	bpl.n	800991c <__cvt+0x6c>
 8009906:	1902      	adds	r2, r0, r4
 8009908:	eeb5 8b40 	vcmp.f64	d8, #0.0
 800990c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009910:	bf08      	it	eq
 8009912:	9203      	streq	r2, [sp, #12]
 8009914:	2130      	movs	r1, #48	@ 0x30
 8009916:	9b03      	ldr	r3, [sp, #12]
 8009918:	4293      	cmp	r3, r2
 800991a:	d319      	bcc.n	8009950 <__cvt+0xa0>
 800991c:	9b03      	ldr	r3, [sp, #12]
 800991e:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8009920:	1a1b      	subs	r3, r3, r0
 8009922:	6013      	str	r3, [r2, #0]
 8009924:	b005      	add	sp, #20
 8009926:	ecbd 8b02 	vpop	{d8}
 800992a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800992c:	2d46      	cmp	r5, #70	@ 0x46
 800992e:	eb00 0204 	add.w	r2, r0, r4
 8009932:	d1e9      	bne.n	8009908 <__cvt+0x58>
 8009934:	7803      	ldrb	r3, [r0, #0]
 8009936:	2b30      	cmp	r3, #48	@ 0x30
 8009938:	d107      	bne.n	800994a <__cvt+0x9a>
 800993a:	eeb5 8b40 	vcmp.f64	d8, #0.0
 800993e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009942:	bf1c      	itt	ne
 8009944:	f1c4 0401 	rsbne	r4, r4, #1
 8009948:	6034      	strne	r4, [r6, #0]
 800994a:	6833      	ldr	r3, [r6, #0]
 800994c:	441a      	add	r2, r3
 800994e:	e7db      	b.n	8009908 <__cvt+0x58>
 8009950:	1c5c      	adds	r4, r3, #1
 8009952:	9403      	str	r4, [sp, #12]
 8009954:	7019      	strb	r1, [r3, #0]
 8009956:	e7de      	b.n	8009916 <__cvt+0x66>

08009958 <__exponent>:
 8009958:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800995a:	2900      	cmp	r1, #0
 800995c:	bfba      	itte	lt
 800995e:	4249      	neglt	r1, r1
 8009960:	232d      	movlt	r3, #45	@ 0x2d
 8009962:	232b      	movge	r3, #43	@ 0x2b
 8009964:	2909      	cmp	r1, #9
 8009966:	7002      	strb	r2, [r0, #0]
 8009968:	7043      	strb	r3, [r0, #1]
 800996a:	dd29      	ble.n	80099c0 <__exponent+0x68>
 800996c:	f10d 0307 	add.w	r3, sp, #7
 8009970:	461d      	mov	r5, r3
 8009972:	270a      	movs	r7, #10
 8009974:	461a      	mov	r2, r3
 8009976:	fbb1 f6f7 	udiv	r6, r1, r7
 800997a:	fb07 1416 	mls	r4, r7, r6, r1
 800997e:	3430      	adds	r4, #48	@ 0x30
 8009980:	f802 4c01 	strb.w	r4, [r2, #-1]
 8009984:	460c      	mov	r4, r1
 8009986:	2c63      	cmp	r4, #99	@ 0x63
 8009988:	f103 33ff 	add.w	r3, r3, #4294967295
 800998c:	4631      	mov	r1, r6
 800998e:	dcf1      	bgt.n	8009974 <__exponent+0x1c>
 8009990:	3130      	adds	r1, #48	@ 0x30
 8009992:	1e94      	subs	r4, r2, #2
 8009994:	f803 1c01 	strb.w	r1, [r3, #-1]
 8009998:	1c41      	adds	r1, r0, #1
 800999a:	4623      	mov	r3, r4
 800999c:	42ab      	cmp	r3, r5
 800999e:	d30a      	bcc.n	80099b6 <__exponent+0x5e>
 80099a0:	f10d 0309 	add.w	r3, sp, #9
 80099a4:	1a9b      	subs	r3, r3, r2
 80099a6:	42ac      	cmp	r4, r5
 80099a8:	bf88      	it	hi
 80099aa:	2300      	movhi	r3, #0
 80099ac:	3302      	adds	r3, #2
 80099ae:	4403      	add	r3, r0
 80099b0:	1a18      	subs	r0, r3, r0
 80099b2:	b003      	add	sp, #12
 80099b4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80099b6:	f813 6b01 	ldrb.w	r6, [r3], #1
 80099ba:	f801 6f01 	strb.w	r6, [r1, #1]!
 80099be:	e7ed      	b.n	800999c <__exponent+0x44>
 80099c0:	2330      	movs	r3, #48	@ 0x30
 80099c2:	3130      	adds	r1, #48	@ 0x30
 80099c4:	7083      	strb	r3, [r0, #2]
 80099c6:	70c1      	strb	r1, [r0, #3]
 80099c8:	1d03      	adds	r3, r0, #4
 80099ca:	e7f1      	b.n	80099b0 <__exponent+0x58>
 80099cc:	0000      	movs	r0, r0
	...

080099d0 <_printf_float>:
 80099d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80099d4:	b08d      	sub	sp, #52	@ 0x34
 80099d6:	460c      	mov	r4, r1
 80099d8:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 80099dc:	4616      	mov	r6, r2
 80099de:	461f      	mov	r7, r3
 80099e0:	4605      	mov	r5, r0
 80099e2:	f000 fd4f 	bl	800a484 <_localeconv_r>
 80099e6:	f8d0 b000 	ldr.w	fp, [r0]
 80099ea:	4658      	mov	r0, fp
 80099ec:	f7f6 fcf0 	bl	80003d0 <strlen>
 80099f0:	2300      	movs	r3, #0
 80099f2:	930a      	str	r3, [sp, #40]	@ 0x28
 80099f4:	f8d8 3000 	ldr.w	r3, [r8]
 80099f8:	f894 9018 	ldrb.w	r9, [r4, #24]
 80099fc:	6822      	ldr	r2, [r4, #0]
 80099fe:	9005      	str	r0, [sp, #20]
 8009a00:	3307      	adds	r3, #7
 8009a02:	f023 0307 	bic.w	r3, r3, #7
 8009a06:	f103 0108 	add.w	r1, r3, #8
 8009a0a:	f8c8 1000 	str.w	r1, [r8]
 8009a0e:	ed93 0b00 	vldr	d0, [r3]
 8009a12:	ed9f 6b97 	vldr	d6, [pc, #604]	@ 8009c70 <_printf_float+0x2a0>
 8009a16:	eeb0 7bc0 	vabs.f64	d7, d0
 8009a1a:	eeb4 7b46 	vcmp.f64	d7, d6
 8009a1e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009a22:	ed84 0b12 	vstr	d0, [r4, #72]	@ 0x48
 8009a26:	dd24      	ble.n	8009a72 <_printf_float+0xa2>
 8009a28:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 8009a2c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009a30:	d502      	bpl.n	8009a38 <_printf_float+0x68>
 8009a32:	232d      	movs	r3, #45	@ 0x2d
 8009a34:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8009a38:	498f      	ldr	r1, [pc, #572]	@ (8009c78 <_printf_float+0x2a8>)
 8009a3a:	4b90      	ldr	r3, [pc, #576]	@ (8009c7c <_printf_float+0x2ac>)
 8009a3c:	f1b9 0f47 	cmp.w	r9, #71	@ 0x47
 8009a40:	bf8c      	ite	hi
 8009a42:	4688      	movhi	r8, r1
 8009a44:	4698      	movls	r8, r3
 8009a46:	f022 0204 	bic.w	r2, r2, #4
 8009a4a:	2303      	movs	r3, #3
 8009a4c:	6123      	str	r3, [r4, #16]
 8009a4e:	6022      	str	r2, [r4, #0]
 8009a50:	f04f 0a00 	mov.w	sl, #0
 8009a54:	9700      	str	r7, [sp, #0]
 8009a56:	4633      	mov	r3, r6
 8009a58:	aa0b      	add	r2, sp, #44	@ 0x2c
 8009a5a:	4621      	mov	r1, r4
 8009a5c:	4628      	mov	r0, r5
 8009a5e:	f000 f9d1 	bl	8009e04 <_printf_common>
 8009a62:	3001      	adds	r0, #1
 8009a64:	f040 8089 	bne.w	8009b7a <_printf_float+0x1aa>
 8009a68:	f04f 30ff 	mov.w	r0, #4294967295
 8009a6c:	b00d      	add	sp, #52	@ 0x34
 8009a6e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009a72:	eeb4 0b40 	vcmp.f64	d0, d0
 8009a76:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009a7a:	d709      	bvc.n	8009a90 <_printf_float+0xc0>
 8009a7c:	ee10 3a90 	vmov	r3, s1
 8009a80:	2b00      	cmp	r3, #0
 8009a82:	bfbc      	itt	lt
 8009a84:	232d      	movlt	r3, #45	@ 0x2d
 8009a86:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 8009a8a:	497d      	ldr	r1, [pc, #500]	@ (8009c80 <_printf_float+0x2b0>)
 8009a8c:	4b7d      	ldr	r3, [pc, #500]	@ (8009c84 <_printf_float+0x2b4>)
 8009a8e:	e7d5      	b.n	8009a3c <_printf_float+0x6c>
 8009a90:	6863      	ldr	r3, [r4, #4]
 8009a92:	1c59      	adds	r1, r3, #1
 8009a94:	f009 0adf 	and.w	sl, r9, #223	@ 0xdf
 8009a98:	d139      	bne.n	8009b0e <_printf_float+0x13e>
 8009a9a:	2306      	movs	r3, #6
 8009a9c:	6063      	str	r3, [r4, #4]
 8009a9e:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8009aa2:	2300      	movs	r3, #0
 8009aa4:	6022      	str	r2, [r4, #0]
 8009aa6:	9303      	str	r3, [sp, #12]
 8009aa8:	ab0a      	add	r3, sp, #40	@ 0x28
 8009aaa:	e9cd 9301 	strd	r9, r3, [sp, #4]
 8009aae:	ab09      	add	r3, sp, #36	@ 0x24
 8009ab0:	9300      	str	r3, [sp, #0]
 8009ab2:	6861      	ldr	r1, [r4, #4]
 8009ab4:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 8009ab8:	4628      	mov	r0, r5
 8009aba:	f7ff fef9 	bl	80098b0 <__cvt>
 8009abe:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 8009ac2:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8009ac4:	4680      	mov	r8, r0
 8009ac6:	d129      	bne.n	8009b1c <_printf_float+0x14c>
 8009ac8:	1cc8      	adds	r0, r1, #3
 8009aca:	db02      	blt.n	8009ad2 <_printf_float+0x102>
 8009acc:	6863      	ldr	r3, [r4, #4]
 8009ace:	4299      	cmp	r1, r3
 8009ad0:	dd41      	ble.n	8009b56 <_printf_float+0x186>
 8009ad2:	f1a9 0902 	sub.w	r9, r9, #2
 8009ad6:	fa5f f989 	uxtb.w	r9, r9
 8009ada:	3901      	subs	r1, #1
 8009adc:	464a      	mov	r2, r9
 8009ade:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 8009ae2:	9109      	str	r1, [sp, #36]	@ 0x24
 8009ae4:	f7ff ff38 	bl	8009958 <__exponent>
 8009ae8:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8009aea:	1813      	adds	r3, r2, r0
 8009aec:	2a01      	cmp	r2, #1
 8009aee:	4682      	mov	sl, r0
 8009af0:	6123      	str	r3, [r4, #16]
 8009af2:	dc02      	bgt.n	8009afa <_printf_float+0x12a>
 8009af4:	6822      	ldr	r2, [r4, #0]
 8009af6:	07d2      	lsls	r2, r2, #31
 8009af8:	d501      	bpl.n	8009afe <_printf_float+0x12e>
 8009afa:	3301      	adds	r3, #1
 8009afc:	6123      	str	r3, [r4, #16]
 8009afe:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 8009b02:	2b00      	cmp	r3, #0
 8009b04:	d0a6      	beq.n	8009a54 <_printf_float+0x84>
 8009b06:	232d      	movs	r3, #45	@ 0x2d
 8009b08:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8009b0c:	e7a2      	b.n	8009a54 <_printf_float+0x84>
 8009b0e:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 8009b12:	d1c4      	bne.n	8009a9e <_printf_float+0xce>
 8009b14:	2b00      	cmp	r3, #0
 8009b16:	d1c2      	bne.n	8009a9e <_printf_float+0xce>
 8009b18:	2301      	movs	r3, #1
 8009b1a:	e7bf      	b.n	8009a9c <_printf_float+0xcc>
 8009b1c:	f1b9 0f65 	cmp.w	r9, #101	@ 0x65
 8009b20:	d9db      	bls.n	8009ada <_printf_float+0x10a>
 8009b22:	f1b9 0f66 	cmp.w	r9, #102	@ 0x66
 8009b26:	d118      	bne.n	8009b5a <_printf_float+0x18a>
 8009b28:	2900      	cmp	r1, #0
 8009b2a:	6863      	ldr	r3, [r4, #4]
 8009b2c:	dd0b      	ble.n	8009b46 <_printf_float+0x176>
 8009b2e:	6121      	str	r1, [r4, #16]
 8009b30:	b913      	cbnz	r3, 8009b38 <_printf_float+0x168>
 8009b32:	6822      	ldr	r2, [r4, #0]
 8009b34:	07d0      	lsls	r0, r2, #31
 8009b36:	d502      	bpl.n	8009b3e <_printf_float+0x16e>
 8009b38:	3301      	adds	r3, #1
 8009b3a:	440b      	add	r3, r1
 8009b3c:	6123      	str	r3, [r4, #16]
 8009b3e:	65a1      	str	r1, [r4, #88]	@ 0x58
 8009b40:	f04f 0a00 	mov.w	sl, #0
 8009b44:	e7db      	b.n	8009afe <_printf_float+0x12e>
 8009b46:	b913      	cbnz	r3, 8009b4e <_printf_float+0x17e>
 8009b48:	6822      	ldr	r2, [r4, #0]
 8009b4a:	07d2      	lsls	r2, r2, #31
 8009b4c:	d501      	bpl.n	8009b52 <_printf_float+0x182>
 8009b4e:	3302      	adds	r3, #2
 8009b50:	e7f4      	b.n	8009b3c <_printf_float+0x16c>
 8009b52:	2301      	movs	r3, #1
 8009b54:	e7f2      	b.n	8009b3c <_printf_float+0x16c>
 8009b56:	f04f 0967 	mov.w	r9, #103	@ 0x67
 8009b5a:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8009b5c:	4299      	cmp	r1, r3
 8009b5e:	db05      	blt.n	8009b6c <_printf_float+0x19c>
 8009b60:	6823      	ldr	r3, [r4, #0]
 8009b62:	6121      	str	r1, [r4, #16]
 8009b64:	07d8      	lsls	r0, r3, #31
 8009b66:	d5ea      	bpl.n	8009b3e <_printf_float+0x16e>
 8009b68:	1c4b      	adds	r3, r1, #1
 8009b6a:	e7e7      	b.n	8009b3c <_printf_float+0x16c>
 8009b6c:	2900      	cmp	r1, #0
 8009b6e:	bfd4      	ite	le
 8009b70:	f1c1 0202 	rsble	r2, r1, #2
 8009b74:	2201      	movgt	r2, #1
 8009b76:	4413      	add	r3, r2
 8009b78:	e7e0      	b.n	8009b3c <_printf_float+0x16c>
 8009b7a:	6823      	ldr	r3, [r4, #0]
 8009b7c:	055a      	lsls	r2, r3, #21
 8009b7e:	d407      	bmi.n	8009b90 <_printf_float+0x1c0>
 8009b80:	6923      	ldr	r3, [r4, #16]
 8009b82:	4642      	mov	r2, r8
 8009b84:	4631      	mov	r1, r6
 8009b86:	4628      	mov	r0, r5
 8009b88:	47b8      	blx	r7
 8009b8a:	3001      	adds	r0, #1
 8009b8c:	d12a      	bne.n	8009be4 <_printf_float+0x214>
 8009b8e:	e76b      	b.n	8009a68 <_printf_float+0x98>
 8009b90:	f1b9 0f65 	cmp.w	r9, #101	@ 0x65
 8009b94:	f240 80e0 	bls.w	8009d58 <_printf_float+0x388>
 8009b98:	ed94 7b12 	vldr	d7, [r4, #72]	@ 0x48
 8009b9c:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8009ba0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009ba4:	d133      	bne.n	8009c0e <_printf_float+0x23e>
 8009ba6:	4a38      	ldr	r2, [pc, #224]	@ (8009c88 <_printf_float+0x2b8>)
 8009ba8:	2301      	movs	r3, #1
 8009baa:	4631      	mov	r1, r6
 8009bac:	4628      	mov	r0, r5
 8009bae:	47b8      	blx	r7
 8009bb0:	3001      	adds	r0, #1
 8009bb2:	f43f af59 	beq.w	8009a68 <_printf_float+0x98>
 8009bb6:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 8009bba:	4543      	cmp	r3, r8
 8009bbc:	db02      	blt.n	8009bc4 <_printf_float+0x1f4>
 8009bbe:	6823      	ldr	r3, [r4, #0]
 8009bc0:	07d8      	lsls	r0, r3, #31
 8009bc2:	d50f      	bpl.n	8009be4 <_printf_float+0x214>
 8009bc4:	9b05      	ldr	r3, [sp, #20]
 8009bc6:	465a      	mov	r2, fp
 8009bc8:	4631      	mov	r1, r6
 8009bca:	4628      	mov	r0, r5
 8009bcc:	47b8      	blx	r7
 8009bce:	3001      	adds	r0, #1
 8009bd0:	f43f af4a 	beq.w	8009a68 <_printf_float+0x98>
 8009bd4:	f04f 0900 	mov.w	r9, #0
 8009bd8:	f108 38ff 	add.w	r8, r8, #4294967295
 8009bdc:	f104 0a1a 	add.w	sl, r4, #26
 8009be0:	45c8      	cmp	r8, r9
 8009be2:	dc09      	bgt.n	8009bf8 <_printf_float+0x228>
 8009be4:	6823      	ldr	r3, [r4, #0]
 8009be6:	079b      	lsls	r3, r3, #30
 8009be8:	f100 8107 	bmi.w	8009dfa <_printf_float+0x42a>
 8009bec:	68e0      	ldr	r0, [r4, #12]
 8009bee:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8009bf0:	4298      	cmp	r0, r3
 8009bf2:	bfb8      	it	lt
 8009bf4:	4618      	movlt	r0, r3
 8009bf6:	e739      	b.n	8009a6c <_printf_float+0x9c>
 8009bf8:	2301      	movs	r3, #1
 8009bfa:	4652      	mov	r2, sl
 8009bfc:	4631      	mov	r1, r6
 8009bfe:	4628      	mov	r0, r5
 8009c00:	47b8      	blx	r7
 8009c02:	3001      	adds	r0, #1
 8009c04:	f43f af30 	beq.w	8009a68 <_printf_float+0x98>
 8009c08:	f109 0901 	add.w	r9, r9, #1
 8009c0c:	e7e8      	b.n	8009be0 <_printf_float+0x210>
 8009c0e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009c10:	2b00      	cmp	r3, #0
 8009c12:	dc3b      	bgt.n	8009c8c <_printf_float+0x2bc>
 8009c14:	4a1c      	ldr	r2, [pc, #112]	@ (8009c88 <_printf_float+0x2b8>)
 8009c16:	2301      	movs	r3, #1
 8009c18:	4631      	mov	r1, r6
 8009c1a:	4628      	mov	r0, r5
 8009c1c:	47b8      	blx	r7
 8009c1e:	3001      	adds	r0, #1
 8009c20:	f43f af22 	beq.w	8009a68 <_printf_float+0x98>
 8009c24:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 8009c28:	ea59 0303 	orrs.w	r3, r9, r3
 8009c2c:	d102      	bne.n	8009c34 <_printf_float+0x264>
 8009c2e:	6823      	ldr	r3, [r4, #0]
 8009c30:	07d9      	lsls	r1, r3, #31
 8009c32:	d5d7      	bpl.n	8009be4 <_printf_float+0x214>
 8009c34:	9b05      	ldr	r3, [sp, #20]
 8009c36:	465a      	mov	r2, fp
 8009c38:	4631      	mov	r1, r6
 8009c3a:	4628      	mov	r0, r5
 8009c3c:	47b8      	blx	r7
 8009c3e:	3001      	adds	r0, #1
 8009c40:	f43f af12 	beq.w	8009a68 <_printf_float+0x98>
 8009c44:	f04f 0a00 	mov.w	sl, #0
 8009c48:	f104 0b1a 	add.w	fp, r4, #26
 8009c4c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009c4e:	425b      	negs	r3, r3
 8009c50:	4553      	cmp	r3, sl
 8009c52:	dc01      	bgt.n	8009c58 <_printf_float+0x288>
 8009c54:	464b      	mov	r3, r9
 8009c56:	e794      	b.n	8009b82 <_printf_float+0x1b2>
 8009c58:	2301      	movs	r3, #1
 8009c5a:	465a      	mov	r2, fp
 8009c5c:	4631      	mov	r1, r6
 8009c5e:	4628      	mov	r0, r5
 8009c60:	47b8      	blx	r7
 8009c62:	3001      	adds	r0, #1
 8009c64:	f43f af00 	beq.w	8009a68 <_printf_float+0x98>
 8009c68:	f10a 0a01 	add.w	sl, sl, #1
 8009c6c:	e7ee      	b.n	8009c4c <_printf_float+0x27c>
 8009c6e:	bf00      	nop
 8009c70:	ffffffff 	.word	0xffffffff
 8009c74:	7fefffff 	.word	0x7fefffff
 8009c78:	0800c224 	.word	0x0800c224
 8009c7c:	0800c220 	.word	0x0800c220
 8009c80:	0800c22c 	.word	0x0800c22c
 8009c84:	0800c228 	.word	0x0800c228
 8009c88:	0800c230 	.word	0x0800c230
 8009c8c:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8009c8e:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8009c92:	4553      	cmp	r3, sl
 8009c94:	bfa8      	it	ge
 8009c96:	4653      	movge	r3, sl
 8009c98:	2b00      	cmp	r3, #0
 8009c9a:	4699      	mov	r9, r3
 8009c9c:	dc37      	bgt.n	8009d0e <_printf_float+0x33e>
 8009c9e:	2300      	movs	r3, #0
 8009ca0:	9307      	str	r3, [sp, #28]
 8009ca2:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8009ca6:	f104 021a 	add.w	r2, r4, #26
 8009caa:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8009cac:	9907      	ldr	r1, [sp, #28]
 8009cae:	9306      	str	r3, [sp, #24]
 8009cb0:	eba3 0309 	sub.w	r3, r3, r9
 8009cb4:	428b      	cmp	r3, r1
 8009cb6:	dc31      	bgt.n	8009d1c <_printf_float+0x34c>
 8009cb8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009cba:	459a      	cmp	sl, r3
 8009cbc:	dc3b      	bgt.n	8009d36 <_printf_float+0x366>
 8009cbe:	6823      	ldr	r3, [r4, #0]
 8009cc0:	07da      	lsls	r2, r3, #31
 8009cc2:	d438      	bmi.n	8009d36 <_printf_float+0x366>
 8009cc4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009cc6:	ebaa 0903 	sub.w	r9, sl, r3
 8009cca:	9b06      	ldr	r3, [sp, #24]
 8009ccc:	ebaa 0303 	sub.w	r3, sl, r3
 8009cd0:	4599      	cmp	r9, r3
 8009cd2:	bfa8      	it	ge
 8009cd4:	4699      	movge	r9, r3
 8009cd6:	f1b9 0f00 	cmp.w	r9, #0
 8009cda:	dc34      	bgt.n	8009d46 <_printf_float+0x376>
 8009cdc:	f04f 0800 	mov.w	r8, #0
 8009ce0:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8009ce4:	f104 0b1a 	add.w	fp, r4, #26
 8009ce8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009cea:	ebaa 0303 	sub.w	r3, sl, r3
 8009cee:	eba3 0309 	sub.w	r3, r3, r9
 8009cf2:	4543      	cmp	r3, r8
 8009cf4:	f77f af76 	ble.w	8009be4 <_printf_float+0x214>
 8009cf8:	2301      	movs	r3, #1
 8009cfa:	465a      	mov	r2, fp
 8009cfc:	4631      	mov	r1, r6
 8009cfe:	4628      	mov	r0, r5
 8009d00:	47b8      	blx	r7
 8009d02:	3001      	adds	r0, #1
 8009d04:	f43f aeb0 	beq.w	8009a68 <_printf_float+0x98>
 8009d08:	f108 0801 	add.w	r8, r8, #1
 8009d0c:	e7ec      	b.n	8009ce8 <_printf_float+0x318>
 8009d0e:	4642      	mov	r2, r8
 8009d10:	4631      	mov	r1, r6
 8009d12:	4628      	mov	r0, r5
 8009d14:	47b8      	blx	r7
 8009d16:	3001      	adds	r0, #1
 8009d18:	d1c1      	bne.n	8009c9e <_printf_float+0x2ce>
 8009d1a:	e6a5      	b.n	8009a68 <_printf_float+0x98>
 8009d1c:	2301      	movs	r3, #1
 8009d1e:	4631      	mov	r1, r6
 8009d20:	4628      	mov	r0, r5
 8009d22:	9206      	str	r2, [sp, #24]
 8009d24:	47b8      	blx	r7
 8009d26:	3001      	adds	r0, #1
 8009d28:	f43f ae9e 	beq.w	8009a68 <_printf_float+0x98>
 8009d2c:	9b07      	ldr	r3, [sp, #28]
 8009d2e:	9a06      	ldr	r2, [sp, #24]
 8009d30:	3301      	adds	r3, #1
 8009d32:	9307      	str	r3, [sp, #28]
 8009d34:	e7b9      	b.n	8009caa <_printf_float+0x2da>
 8009d36:	9b05      	ldr	r3, [sp, #20]
 8009d38:	465a      	mov	r2, fp
 8009d3a:	4631      	mov	r1, r6
 8009d3c:	4628      	mov	r0, r5
 8009d3e:	47b8      	blx	r7
 8009d40:	3001      	adds	r0, #1
 8009d42:	d1bf      	bne.n	8009cc4 <_printf_float+0x2f4>
 8009d44:	e690      	b.n	8009a68 <_printf_float+0x98>
 8009d46:	9a06      	ldr	r2, [sp, #24]
 8009d48:	464b      	mov	r3, r9
 8009d4a:	4442      	add	r2, r8
 8009d4c:	4631      	mov	r1, r6
 8009d4e:	4628      	mov	r0, r5
 8009d50:	47b8      	blx	r7
 8009d52:	3001      	adds	r0, #1
 8009d54:	d1c2      	bne.n	8009cdc <_printf_float+0x30c>
 8009d56:	e687      	b.n	8009a68 <_printf_float+0x98>
 8009d58:	f8dd 9028 	ldr.w	r9, [sp, #40]	@ 0x28
 8009d5c:	f1b9 0f01 	cmp.w	r9, #1
 8009d60:	dc01      	bgt.n	8009d66 <_printf_float+0x396>
 8009d62:	07db      	lsls	r3, r3, #31
 8009d64:	d536      	bpl.n	8009dd4 <_printf_float+0x404>
 8009d66:	2301      	movs	r3, #1
 8009d68:	4642      	mov	r2, r8
 8009d6a:	4631      	mov	r1, r6
 8009d6c:	4628      	mov	r0, r5
 8009d6e:	47b8      	blx	r7
 8009d70:	3001      	adds	r0, #1
 8009d72:	f43f ae79 	beq.w	8009a68 <_printf_float+0x98>
 8009d76:	9b05      	ldr	r3, [sp, #20]
 8009d78:	465a      	mov	r2, fp
 8009d7a:	4631      	mov	r1, r6
 8009d7c:	4628      	mov	r0, r5
 8009d7e:	47b8      	blx	r7
 8009d80:	3001      	adds	r0, #1
 8009d82:	f43f ae71 	beq.w	8009a68 <_printf_float+0x98>
 8009d86:	ed94 7b12 	vldr	d7, [r4, #72]	@ 0x48
 8009d8a:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8009d8e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009d92:	f109 39ff 	add.w	r9, r9, #4294967295
 8009d96:	d018      	beq.n	8009dca <_printf_float+0x3fa>
 8009d98:	464b      	mov	r3, r9
 8009d9a:	f108 0201 	add.w	r2, r8, #1
 8009d9e:	4631      	mov	r1, r6
 8009da0:	4628      	mov	r0, r5
 8009da2:	47b8      	blx	r7
 8009da4:	3001      	adds	r0, #1
 8009da6:	d10c      	bne.n	8009dc2 <_printf_float+0x3f2>
 8009da8:	e65e      	b.n	8009a68 <_printf_float+0x98>
 8009daa:	2301      	movs	r3, #1
 8009dac:	465a      	mov	r2, fp
 8009dae:	4631      	mov	r1, r6
 8009db0:	4628      	mov	r0, r5
 8009db2:	47b8      	blx	r7
 8009db4:	3001      	adds	r0, #1
 8009db6:	f43f ae57 	beq.w	8009a68 <_printf_float+0x98>
 8009dba:	f108 0801 	add.w	r8, r8, #1
 8009dbe:	45c8      	cmp	r8, r9
 8009dc0:	dbf3      	blt.n	8009daa <_printf_float+0x3da>
 8009dc2:	4653      	mov	r3, sl
 8009dc4:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 8009dc8:	e6dc      	b.n	8009b84 <_printf_float+0x1b4>
 8009dca:	f04f 0800 	mov.w	r8, #0
 8009dce:	f104 0b1a 	add.w	fp, r4, #26
 8009dd2:	e7f4      	b.n	8009dbe <_printf_float+0x3ee>
 8009dd4:	2301      	movs	r3, #1
 8009dd6:	4642      	mov	r2, r8
 8009dd8:	e7e1      	b.n	8009d9e <_printf_float+0x3ce>
 8009dda:	2301      	movs	r3, #1
 8009ddc:	464a      	mov	r2, r9
 8009dde:	4631      	mov	r1, r6
 8009de0:	4628      	mov	r0, r5
 8009de2:	47b8      	blx	r7
 8009de4:	3001      	adds	r0, #1
 8009de6:	f43f ae3f 	beq.w	8009a68 <_printf_float+0x98>
 8009dea:	f108 0801 	add.w	r8, r8, #1
 8009dee:	68e3      	ldr	r3, [r4, #12]
 8009df0:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8009df2:	1a5b      	subs	r3, r3, r1
 8009df4:	4543      	cmp	r3, r8
 8009df6:	dcf0      	bgt.n	8009dda <_printf_float+0x40a>
 8009df8:	e6f8      	b.n	8009bec <_printf_float+0x21c>
 8009dfa:	f04f 0800 	mov.w	r8, #0
 8009dfe:	f104 0919 	add.w	r9, r4, #25
 8009e02:	e7f4      	b.n	8009dee <_printf_float+0x41e>

08009e04 <_printf_common>:
 8009e04:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009e08:	4616      	mov	r6, r2
 8009e0a:	4698      	mov	r8, r3
 8009e0c:	688a      	ldr	r2, [r1, #8]
 8009e0e:	690b      	ldr	r3, [r1, #16]
 8009e10:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8009e14:	4293      	cmp	r3, r2
 8009e16:	bfb8      	it	lt
 8009e18:	4613      	movlt	r3, r2
 8009e1a:	6033      	str	r3, [r6, #0]
 8009e1c:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8009e20:	4607      	mov	r7, r0
 8009e22:	460c      	mov	r4, r1
 8009e24:	b10a      	cbz	r2, 8009e2a <_printf_common+0x26>
 8009e26:	3301      	adds	r3, #1
 8009e28:	6033      	str	r3, [r6, #0]
 8009e2a:	6823      	ldr	r3, [r4, #0]
 8009e2c:	0699      	lsls	r1, r3, #26
 8009e2e:	bf42      	ittt	mi
 8009e30:	6833      	ldrmi	r3, [r6, #0]
 8009e32:	3302      	addmi	r3, #2
 8009e34:	6033      	strmi	r3, [r6, #0]
 8009e36:	6825      	ldr	r5, [r4, #0]
 8009e38:	f015 0506 	ands.w	r5, r5, #6
 8009e3c:	d106      	bne.n	8009e4c <_printf_common+0x48>
 8009e3e:	f104 0a19 	add.w	sl, r4, #25
 8009e42:	68e3      	ldr	r3, [r4, #12]
 8009e44:	6832      	ldr	r2, [r6, #0]
 8009e46:	1a9b      	subs	r3, r3, r2
 8009e48:	42ab      	cmp	r3, r5
 8009e4a:	dc26      	bgt.n	8009e9a <_printf_common+0x96>
 8009e4c:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8009e50:	6822      	ldr	r2, [r4, #0]
 8009e52:	3b00      	subs	r3, #0
 8009e54:	bf18      	it	ne
 8009e56:	2301      	movne	r3, #1
 8009e58:	0692      	lsls	r2, r2, #26
 8009e5a:	d42b      	bmi.n	8009eb4 <_printf_common+0xb0>
 8009e5c:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8009e60:	4641      	mov	r1, r8
 8009e62:	4638      	mov	r0, r7
 8009e64:	47c8      	blx	r9
 8009e66:	3001      	adds	r0, #1
 8009e68:	d01e      	beq.n	8009ea8 <_printf_common+0xa4>
 8009e6a:	6823      	ldr	r3, [r4, #0]
 8009e6c:	6922      	ldr	r2, [r4, #16]
 8009e6e:	f003 0306 	and.w	r3, r3, #6
 8009e72:	2b04      	cmp	r3, #4
 8009e74:	bf02      	ittt	eq
 8009e76:	68e5      	ldreq	r5, [r4, #12]
 8009e78:	6833      	ldreq	r3, [r6, #0]
 8009e7a:	1aed      	subeq	r5, r5, r3
 8009e7c:	68a3      	ldr	r3, [r4, #8]
 8009e7e:	bf0c      	ite	eq
 8009e80:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8009e84:	2500      	movne	r5, #0
 8009e86:	4293      	cmp	r3, r2
 8009e88:	bfc4      	itt	gt
 8009e8a:	1a9b      	subgt	r3, r3, r2
 8009e8c:	18ed      	addgt	r5, r5, r3
 8009e8e:	2600      	movs	r6, #0
 8009e90:	341a      	adds	r4, #26
 8009e92:	42b5      	cmp	r5, r6
 8009e94:	d11a      	bne.n	8009ecc <_printf_common+0xc8>
 8009e96:	2000      	movs	r0, #0
 8009e98:	e008      	b.n	8009eac <_printf_common+0xa8>
 8009e9a:	2301      	movs	r3, #1
 8009e9c:	4652      	mov	r2, sl
 8009e9e:	4641      	mov	r1, r8
 8009ea0:	4638      	mov	r0, r7
 8009ea2:	47c8      	blx	r9
 8009ea4:	3001      	adds	r0, #1
 8009ea6:	d103      	bne.n	8009eb0 <_printf_common+0xac>
 8009ea8:	f04f 30ff 	mov.w	r0, #4294967295
 8009eac:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009eb0:	3501      	adds	r5, #1
 8009eb2:	e7c6      	b.n	8009e42 <_printf_common+0x3e>
 8009eb4:	18e1      	adds	r1, r4, r3
 8009eb6:	1c5a      	adds	r2, r3, #1
 8009eb8:	2030      	movs	r0, #48	@ 0x30
 8009eba:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8009ebe:	4422      	add	r2, r4
 8009ec0:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8009ec4:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8009ec8:	3302      	adds	r3, #2
 8009eca:	e7c7      	b.n	8009e5c <_printf_common+0x58>
 8009ecc:	2301      	movs	r3, #1
 8009ece:	4622      	mov	r2, r4
 8009ed0:	4641      	mov	r1, r8
 8009ed2:	4638      	mov	r0, r7
 8009ed4:	47c8      	blx	r9
 8009ed6:	3001      	adds	r0, #1
 8009ed8:	d0e6      	beq.n	8009ea8 <_printf_common+0xa4>
 8009eda:	3601      	adds	r6, #1
 8009edc:	e7d9      	b.n	8009e92 <_printf_common+0x8e>
	...

08009ee0 <_printf_i>:
 8009ee0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8009ee4:	7e0f      	ldrb	r7, [r1, #24]
 8009ee6:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8009ee8:	2f78      	cmp	r7, #120	@ 0x78
 8009eea:	4691      	mov	r9, r2
 8009eec:	4680      	mov	r8, r0
 8009eee:	460c      	mov	r4, r1
 8009ef0:	469a      	mov	sl, r3
 8009ef2:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8009ef6:	d807      	bhi.n	8009f08 <_printf_i+0x28>
 8009ef8:	2f62      	cmp	r7, #98	@ 0x62
 8009efa:	d80a      	bhi.n	8009f12 <_printf_i+0x32>
 8009efc:	2f00      	cmp	r7, #0
 8009efe:	f000 80d1 	beq.w	800a0a4 <_printf_i+0x1c4>
 8009f02:	2f58      	cmp	r7, #88	@ 0x58
 8009f04:	f000 80b8 	beq.w	800a078 <_printf_i+0x198>
 8009f08:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8009f0c:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8009f10:	e03a      	b.n	8009f88 <_printf_i+0xa8>
 8009f12:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8009f16:	2b15      	cmp	r3, #21
 8009f18:	d8f6      	bhi.n	8009f08 <_printf_i+0x28>
 8009f1a:	a101      	add	r1, pc, #4	@ (adr r1, 8009f20 <_printf_i+0x40>)
 8009f1c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8009f20:	08009f79 	.word	0x08009f79
 8009f24:	08009f8d 	.word	0x08009f8d
 8009f28:	08009f09 	.word	0x08009f09
 8009f2c:	08009f09 	.word	0x08009f09
 8009f30:	08009f09 	.word	0x08009f09
 8009f34:	08009f09 	.word	0x08009f09
 8009f38:	08009f8d 	.word	0x08009f8d
 8009f3c:	08009f09 	.word	0x08009f09
 8009f40:	08009f09 	.word	0x08009f09
 8009f44:	08009f09 	.word	0x08009f09
 8009f48:	08009f09 	.word	0x08009f09
 8009f4c:	0800a08b 	.word	0x0800a08b
 8009f50:	08009fb7 	.word	0x08009fb7
 8009f54:	0800a045 	.word	0x0800a045
 8009f58:	08009f09 	.word	0x08009f09
 8009f5c:	08009f09 	.word	0x08009f09
 8009f60:	0800a0ad 	.word	0x0800a0ad
 8009f64:	08009f09 	.word	0x08009f09
 8009f68:	08009fb7 	.word	0x08009fb7
 8009f6c:	08009f09 	.word	0x08009f09
 8009f70:	08009f09 	.word	0x08009f09
 8009f74:	0800a04d 	.word	0x0800a04d
 8009f78:	6833      	ldr	r3, [r6, #0]
 8009f7a:	1d1a      	adds	r2, r3, #4
 8009f7c:	681b      	ldr	r3, [r3, #0]
 8009f7e:	6032      	str	r2, [r6, #0]
 8009f80:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8009f84:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8009f88:	2301      	movs	r3, #1
 8009f8a:	e09c      	b.n	800a0c6 <_printf_i+0x1e6>
 8009f8c:	6833      	ldr	r3, [r6, #0]
 8009f8e:	6820      	ldr	r0, [r4, #0]
 8009f90:	1d19      	adds	r1, r3, #4
 8009f92:	6031      	str	r1, [r6, #0]
 8009f94:	0606      	lsls	r6, r0, #24
 8009f96:	d501      	bpl.n	8009f9c <_printf_i+0xbc>
 8009f98:	681d      	ldr	r5, [r3, #0]
 8009f9a:	e003      	b.n	8009fa4 <_printf_i+0xc4>
 8009f9c:	0645      	lsls	r5, r0, #25
 8009f9e:	d5fb      	bpl.n	8009f98 <_printf_i+0xb8>
 8009fa0:	f9b3 5000 	ldrsh.w	r5, [r3]
 8009fa4:	2d00      	cmp	r5, #0
 8009fa6:	da03      	bge.n	8009fb0 <_printf_i+0xd0>
 8009fa8:	232d      	movs	r3, #45	@ 0x2d
 8009faa:	426d      	negs	r5, r5
 8009fac:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8009fb0:	4858      	ldr	r0, [pc, #352]	@ (800a114 <_printf_i+0x234>)
 8009fb2:	230a      	movs	r3, #10
 8009fb4:	e011      	b.n	8009fda <_printf_i+0xfa>
 8009fb6:	6821      	ldr	r1, [r4, #0]
 8009fb8:	6833      	ldr	r3, [r6, #0]
 8009fba:	0608      	lsls	r0, r1, #24
 8009fbc:	f853 5b04 	ldr.w	r5, [r3], #4
 8009fc0:	d402      	bmi.n	8009fc8 <_printf_i+0xe8>
 8009fc2:	0649      	lsls	r1, r1, #25
 8009fc4:	bf48      	it	mi
 8009fc6:	b2ad      	uxthmi	r5, r5
 8009fc8:	2f6f      	cmp	r7, #111	@ 0x6f
 8009fca:	4852      	ldr	r0, [pc, #328]	@ (800a114 <_printf_i+0x234>)
 8009fcc:	6033      	str	r3, [r6, #0]
 8009fce:	bf14      	ite	ne
 8009fd0:	230a      	movne	r3, #10
 8009fd2:	2308      	moveq	r3, #8
 8009fd4:	2100      	movs	r1, #0
 8009fd6:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8009fda:	6866      	ldr	r6, [r4, #4]
 8009fdc:	60a6      	str	r6, [r4, #8]
 8009fde:	2e00      	cmp	r6, #0
 8009fe0:	db05      	blt.n	8009fee <_printf_i+0x10e>
 8009fe2:	6821      	ldr	r1, [r4, #0]
 8009fe4:	432e      	orrs	r6, r5
 8009fe6:	f021 0104 	bic.w	r1, r1, #4
 8009fea:	6021      	str	r1, [r4, #0]
 8009fec:	d04b      	beq.n	800a086 <_printf_i+0x1a6>
 8009fee:	4616      	mov	r6, r2
 8009ff0:	fbb5 f1f3 	udiv	r1, r5, r3
 8009ff4:	fb03 5711 	mls	r7, r3, r1, r5
 8009ff8:	5dc7      	ldrb	r7, [r0, r7]
 8009ffa:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8009ffe:	462f      	mov	r7, r5
 800a000:	42bb      	cmp	r3, r7
 800a002:	460d      	mov	r5, r1
 800a004:	d9f4      	bls.n	8009ff0 <_printf_i+0x110>
 800a006:	2b08      	cmp	r3, #8
 800a008:	d10b      	bne.n	800a022 <_printf_i+0x142>
 800a00a:	6823      	ldr	r3, [r4, #0]
 800a00c:	07df      	lsls	r7, r3, #31
 800a00e:	d508      	bpl.n	800a022 <_printf_i+0x142>
 800a010:	6923      	ldr	r3, [r4, #16]
 800a012:	6861      	ldr	r1, [r4, #4]
 800a014:	4299      	cmp	r1, r3
 800a016:	bfde      	ittt	le
 800a018:	2330      	movle	r3, #48	@ 0x30
 800a01a:	f806 3c01 	strble.w	r3, [r6, #-1]
 800a01e:	f106 36ff 	addle.w	r6, r6, #4294967295
 800a022:	1b92      	subs	r2, r2, r6
 800a024:	6122      	str	r2, [r4, #16]
 800a026:	f8cd a000 	str.w	sl, [sp]
 800a02a:	464b      	mov	r3, r9
 800a02c:	aa03      	add	r2, sp, #12
 800a02e:	4621      	mov	r1, r4
 800a030:	4640      	mov	r0, r8
 800a032:	f7ff fee7 	bl	8009e04 <_printf_common>
 800a036:	3001      	adds	r0, #1
 800a038:	d14a      	bne.n	800a0d0 <_printf_i+0x1f0>
 800a03a:	f04f 30ff 	mov.w	r0, #4294967295
 800a03e:	b004      	add	sp, #16
 800a040:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a044:	6823      	ldr	r3, [r4, #0]
 800a046:	f043 0320 	orr.w	r3, r3, #32
 800a04a:	6023      	str	r3, [r4, #0]
 800a04c:	4832      	ldr	r0, [pc, #200]	@ (800a118 <_printf_i+0x238>)
 800a04e:	2778      	movs	r7, #120	@ 0x78
 800a050:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800a054:	6823      	ldr	r3, [r4, #0]
 800a056:	6831      	ldr	r1, [r6, #0]
 800a058:	061f      	lsls	r7, r3, #24
 800a05a:	f851 5b04 	ldr.w	r5, [r1], #4
 800a05e:	d402      	bmi.n	800a066 <_printf_i+0x186>
 800a060:	065f      	lsls	r7, r3, #25
 800a062:	bf48      	it	mi
 800a064:	b2ad      	uxthmi	r5, r5
 800a066:	6031      	str	r1, [r6, #0]
 800a068:	07d9      	lsls	r1, r3, #31
 800a06a:	bf44      	itt	mi
 800a06c:	f043 0320 	orrmi.w	r3, r3, #32
 800a070:	6023      	strmi	r3, [r4, #0]
 800a072:	b11d      	cbz	r5, 800a07c <_printf_i+0x19c>
 800a074:	2310      	movs	r3, #16
 800a076:	e7ad      	b.n	8009fd4 <_printf_i+0xf4>
 800a078:	4826      	ldr	r0, [pc, #152]	@ (800a114 <_printf_i+0x234>)
 800a07a:	e7e9      	b.n	800a050 <_printf_i+0x170>
 800a07c:	6823      	ldr	r3, [r4, #0]
 800a07e:	f023 0320 	bic.w	r3, r3, #32
 800a082:	6023      	str	r3, [r4, #0]
 800a084:	e7f6      	b.n	800a074 <_printf_i+0x194>
 800a086:	4616      	mov	r6, r2
 800a088:	e7bd      	b.n	800a006 <_printf_i+0x126>
 800a08a:	6833      	ldr	r3, [r6, #0]
 800a08c:	6825      	ldr	r5, [r4, #0]
 800a08e:	6961      	ldr	r1, [r4, #20]
 800a090:	1d18      	adds	r0, r3, #4
 800a092:	6030      	str	r0, [r6, #0]
 800a094:	062e      	lsls	r6, r5, #24
 800a096:	681b      	ldr	r3, [r3, #0]
 800a098:	d501      	bpl.n	800a09e <_printf_i+0x1be>
 800a09a:	6019      	str	r1, [r3, #0]
 800a09c:	e002      	b.n	800a0a4 <_printf_i+0x1c4>
 800a09e:	0668      	lsls	r0, r5, #25
 800a0a0:	d5fb      	bpl.n	800a09a <_printf_i+0x1ba>
 800a0a2:	8019      	strh	r1, [r3, #0]
 800a0a4:	2300      	movs	r3, #0
 800a0a6:	6123      	str	r3, [r4, #16]
 800a0a8:	4616      	mov	r6, r2
 800a0aa:	e7bc      	b.n	800a026 <_printf_i+0x146>
 800a0ac:	6833      	ldr	r3, [r6, #0]
 800a0ae:	1d1a      	adds	r2, r3, #4
 800a0b0:	6032      	str	r2, [r6, #0]
 800a0b2:	681e      	ldr	r6, [r3, #0]
 800a0b4:	6862      	ldr	r2, [r4, #4]
 800a0b6:	2100      	movs	r1, #0
 800a0b8:	4630      	mov	r0, r6
 800a0ba:	f7f6 f939 	bl	8000330 <memchr>
 800a0be:	b108      	cbz	r0, 800a0c4 <_printf_i+0x1e4>
 800a0c0:	1b80      	subs	r0, r0, r6
 800a0c2:	6060      	str	r0, [r4, #4]
 800a0c4:	6863      	ldr	r3, [r4, #4]
 800a0c6:	6123      	str	r3, [r4, #16]
 800a0c8:	2300      	movs	r3, #0
 800a0ca:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800a0ce:	e7aa      	b.n	800a026 <_printf_i+0x146>
 800a0d0:	6923      	ldr	r3, [r4, #16]
 800a0d2:	4632      	mov	r2, r6
 800a0d4:	4649      	mov	r1, r9
 800a0d6:	4640      	mov	r0, r8
 800a0d8:	47d0      	blx	sl
 800a0da:	3001      	adds	r0, #1
 800a0dc:	d0ad      	beq.n	800a03a <_printf_i+0x15a>
 800a0de:	6823      	ldr	r3, [r4, #0]
 800a0e0:	079b      	lsls	r3, r3, #30
 800a0e2:	d413      	bmi.n	800a10c <_printf_i+0x22c>
 800a0e4:	68e0      	ldr	r0, [r4, #12]
 800a0e6:	9b03      	ldr	r3, [sp, #12]
 800a0e8:	4298      	cmp	r0, r3
 800a0ea:	bfb8      	it	lt
 800a0ec:	4618      	movlt	r0, r3
 800a0ee:	e7a6      	b.n	800a03e <_printf_i+0x15e>
 800a0f0:	2301      	movs	r3, #1
 800a0f2:	4632      	mov	r2, r6
 800a0f4:	4649      	mov	r1, r9
 800a0f6:	4640      	mov	r0, r8
 800a0f8:	47d0      	blx	sl
 800a0fa:	3001      	adds	r0, #1
 800a0fc:	d09d      	beq.n	800a03a <_printf_i+0x15a>
 800a0fe:	3501      	adds	r5, #1
 800a100:	68e3      	ldr	r3, [r4, #12]
 800a102:	9903      	ldr	r1, [sp, #12]
 800a104:	1a5b      	subs	r3, r3, r1
 800a106:	42ab      	cmp	r3, r5
 800a108:	dcf2      	bgt.n	800a0f0 <_printf_i+0x210>
 800a10a:	e7eb      	b.n	800a0e4 <_printf_i+0x204>
 800a10c:	2500      	movs	r5, #0
 800a10e:	f104 0619 	add.w	r6, r4, #25
 800a112:	e7f5      	b.n	800a100 <_printf_i+0x220>
 800a114:	0800c232 	.word	0x0800c232
 800a118:	0800c243 	.word	0x0800c243

0800a11c <std>:
 800a11c:	2300      	movs	r3, #0
 800a11e:	b510      	push	{r4, lr}
 800a120:	4604      	mov	r4, r0
 800a122:	e9c0 3300 	strd	r3, r3, [r0]
 800a126:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800a12a:	6083      	str	r3, [r0, #8]
 800a12c:	8181      	strh	r1, [r0, #12]
 800a12e:	6643      	str	r3, [r0, #100]	@ 0x64
 800a130:	81c2      	strh	r2, [r0, #14]
 800a132:	6183      	str	r3, [r0, #24]
 800a134:	4619      	mov	r1, r3
 800a136:	2208      	movs	r2, #8
 800a138:	305c      	adds	r0, #92	@ 0x5c
 800a13a:	f000 f99b 	bl	800a474 <memset>
 800a13e:	4b0d      	ldr	r3, [pc, #52]	@ (800a174 <std+0x58>)
 800a140:	6263      	str	r3, [r4, #36]	@ 0x24
 800a142:	4b0d      	ldr	r3, [pc, #52]	@ (800a178 <std+0x5c>)
 800a144:	62a3      	str	r3, [r4, #40]	@ 0x28
 800a146:	4b0d      	ldr	r3, [pc, #52]	@ (800a17c <std+0x60>)
 800a148:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800a14a:	4b0d      	ldr	r3, [pc, #52]	@ (800a180 <std+0x64>)
 800a14c:	6323      	str	r3, [r4, #48]	@ 0x30
 800a14e:	4b0d      	ldr	r3, [pc, #52]	@ (800a184 <std+0x68>)
 800a150:	6224      	str	r4, [r4, #32]
 800a152:	429c      	cmp	r4, r3
 800a154:	d006      	beq.n	800a164 <std+0x48>
 800a156:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800a15a:	4294      	cmp	r4, r2
 800a15c:	d002      	beq.n	800a164 <std+0x48>
 800a15e:	33d0      	adds	r3, #208	@ 0xd0
 800a160:	429c      	cmp	r4, r3
 800a162:	d105      	bne.n	800a170 <std+0x54>
 800a164:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800a168:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a16c:	f000 b9fe 	b.w	800a56c <__retarget_lock_init_recursive>
 800a170:	bd10      	pop	{r4, pc}
 800a172:	bf00      	nop
 800a174:	0800a2c5 	.word	0x0800a2c5
 800a178:	0800a2e7 	.word	0x0800a2e7
 800a17c:	0800a31f 	.word	0x0800a31f
 800a180:	0800a343 	.word	0x0800a343
 800a184:	240005a0 	.word	0x240005a0

0800a188 <stdio_exit_handler>:
 800a188:	4a02      	ldr	r2, [pc, #8]	@ (800a194 <stdio_exit_handler+0xc>)
 800a18a:	4903      	ldr	r1, [pc, #12]	@ (800a198 <stdio_exit_handler+0x10>)
 800a18c:	4803      	ldr	r0, [pc, #12]	@ (800a19c <stdio_exit_handler+0x14>)
 800a18e:	f000 b869 	b.w	800a264 <_fwalk_sglue>
 800a192:	bf00      	nop
 800a194:	24000010 	.word	0x24000010
 800a198:	0800bddd 	.word	0x0800bddd
 800a19c:	24000020 	.word	0x24000020

0800a1a0 <cleanup_stdio>:
 800a1a0:	6841      	ldr	r1, [r0, #4]
 800a1a2:	4b0c      	ldr	r3, [pc, #48]	@ (800a1d4 <cleanup_stdio+0x34>)
 800a1a4:	4299      	cmp	r1, r3
 800a1a6:	b510      	push	{r4, lr}
 800a1a8:	4604      	mov	r4, r0
 800a1aa:	d001      	beq.n	800a1b0 <cleanup_stdio+0x10>
 800a1ac:	f001 fe16 	bl	800bddc <_fflush_r>
 800a1b0:	68a1      	ldr	r1, [r4, #8]
 800a1b2:	4b09      	ldr	r3, [pc, #36]	@ (800a1d8 <cleanup_stdio+0x38>)
 800a1b4:	4299      	cmp	r1, r3
 800a1b6:	d002      	beq.n	800a1be <cleanup_stdio+0x1e>
 800a1b8:	4620      	mov	r0, r4
 800a1ba:	f001 fe0f 	bl	800bddc <_fflush_r>
 800a1be:	68e1      	ldr	r1, [r4, #12]
 800a1c0:	4b06      	ldr	r3, [pc, #24]	@ (800a1dc <cleanup_stdio+0x3c>)
 800a1c2:	4299      	cmp	r1, r3
 800a1c4:	d004      	beq.n	800a1d0 <cleanup_stdio+0x30>
 800a1c6:	4620      	mov	r0, r4
 800a1c8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a1cc:	f001 be06 	b.w	800bddc <_fflush_r>
 800a1d0:	bd10      	pop	{r4, pc}
 800a1d2:	bf00      	nop
 800a1d4:	240005a0 	.word	0x240005a0
 800a1d8:	24000608 	.word	0x24000608
 800a1dc:	24000670 	.word	0x24000670

0800a1e0 <global_stdio_init.part.0>:
 800a1e0:	b510      	push	{r4, lr}
 800a1e2:	4b0b      	ldr	r3, [pc, #44]	@ (800a210 <global_stdio_init.part.0+0x30>)
 800a1e4:	4c0b      	ldr	r4, [pc, #44]	@ (800a214 <global_stdio_init.part.0+0x34>)
 800a1e6:	4a0c      	ldr	r2, [pc, #48]	@ (800a218 <global_stdio_init.part.0+0x38>)
 800a1e8:	601a      	str	r2, [r3, #0]
 800a1ea:	4620      	mov	r0, r4
 800a1ec:	2200      	movs	r2, #0
 800a1ee:	2104      	movs	r1, #4
 800a1f0:	f7ff ff94 	bl	800a11c <std>
 800a1f4:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800a1f8:	2201      	movs	r2, #1
 800a1fa:	2109      	movs	r1, #9
 800a1fc:	f7ff ff8e 	bl	800a11c <std>
 800a200:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800a204:	2202      	movs	r2, #2
 800a206:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a20a:	2112      	movs	r1, #18
 800a20c:	f7ff bf86 	b.w	800a11c <std>
 800a210:	240006d8 	.word	0x240006d8
 800a214:	240005a0 	.word	0x240005a0
 800a218:	0800a189 	.word	0x0800a189

0800a21c <__sfp_lock_acquire>:
 800a21c:	4801      	ldr	r0, [pc, #4]	@ (800a224 <__sfp_lock_acquire+0x8>)
 800a21e:	f000 b9a6 	b.w	800a56e <__retarget_lock_acquire_recursive>
 800a222:	bf00      	nop
 800a224:	240006e1 	.word	0x240006e1

0800a228 <__sfp_lock_release>:
 800a228:	4801      	ldr	r0, [pc, #4]	@ (800a230 <__sfp_lock_release+0x8>)
 800a22a:	f000 b9a1 	b.w	800a570 <__retarget_lock_release_recursive>
 800a22e:	bf00      	nop
 800a230:	240006e1 	.word	0x240006e1

0800a234 <__sinit>:
 800a234:	b510      	push	{r4, lr}
 800a236:	4604      	mov	r4, r0
 800a238:	f7ff fff0 	bl	800a21c <__sfp_lock_acquire>
 800a23c:	6a23      	ldr	r3, [r4, #32]
 800a23e:	b11b      	cbz	r3, 800a248 <__sinit+0x14>
 800a240:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a244:	f7ff bff0 	b.w	800a228 <__sfp_lock_release>
 800a248:	4b04      	ldr	r3, [pc, #16]	@ (800a25c <__sinit+0x28>)
 800a24a:	6223      	str	r3, [r4, #32]
 800a24c:	4b04      	ldr	r3, [pc, #16]	@ (800a260 <__sinit+0x2c>)
 800a24e:	681b      	ldr	r3, [r3, #0]
 800a250:	2b00      	cmp	r3, #0
 800a252:	d1f5      	bne.n	800a240 <__sinit+0xc>
 800a254:	f7ff ffc4 	bl	800a1e0 <global_stdio_init.part.0>
 800a258:	e7f2      	b.n	800a240 <__sinit+0xc>
 800a25a:	bf00      	nop
 800a25c:	0800a1a1 	.word	0x0800a1a1
 800a260:	240006d8 	.word	0x240006d8

0800a264 <_fwalk_sglue>:
 800a264:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a268:	4607      	mov	r7, r0
 800a26a:	4688      	mov	r8, r1
 800a26c:	4614      	mov	r4, r2
 800a26e:	2600      	movs	r6, #0
 800a270:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800a274:	f1b9 0901 	subs.w	r9, r9, #1
 800a278:	d505      	bpl.n	800a286 <_fwalk_sglue+0x22>
 800a27a:	6824      	ldr	r4, [r4, #0]
 800a27c:	2c00      	cmp	r4, #0
 800a27e:	d1f7      	bne.n	800a270 <_fwalk_sglue+0xc>
 800a280:	4630      	mov	r0, r6
 800a282:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a286:	89ab      	ldrh	r3, [r5, #12]
 800a288:	2b01      	cmp	r3, #1
 800a28a:	d907      	bls.n	800a29c <_fwalk_sglue+0x38>
 800a28c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800a290:	3301      	adds	r3, #1
 800a292:	d003      	beq.n	800a29c <_fwalk_sglue+0x38>
 800a294:	4629      	mov	r1, r5
 800a296:	4638      	mov	r0, r7
 800a298:	47c0      	blx	r8
 800a29a:	4306      	orrs	r6, r0
 800a29c:	3568      	adds	r5, #104	@ 0x68
 800a29e:	e7e9      	b.n	800a274 <_fwalk_sglue+0x10>

0800a2a0 <iprintf>:
 800a2a0:	b40f      	push	{r0, r1, r2, r3}
 800a2a2:	b507      	push	{r0, r1, r2, lr}
 800a2a4:	4906      	ldr	r1, [pc, #24]	@ (800a2c0 <iprintf+0x20>)
 800a2a6:	ab04      	add	r3, sp, #16
 800a2a8:	6808      	ldr	r0, [r1, #0]
 800a2aa:	f853 2b04 	ldr.w	r2, [r3], #4
 800a2ae:	6881      	ldr	r1, [r0, #8]
 800a2b0:	9301      	str	r3, [sp, #4]
 800a2b2:	f001 fbf7 	bl	800baa4 <_vfiprintf_r>
 800a2b6:	b003      	add	sp, #12
 800a2b8:	f85d eb04 	ldr.w	lr, [sp], #4
 800a2bc:	b004      	add	sp, #16
 800a2be:	4770      	bx	lr
 800a2c0:	2400001c 	.word	0x2400001c

0800a2c4 <__sread>:
 800a2c4:	b510      	push	{r4, lr}
 800a2c6:	460c      	mov	r4, r1
 800a2c8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a2cc:	f000 f900 	bl	800a4d0 <_read_r>
 800a2d0:	2800      	cmp	r0, #0
 800a2d2:	bfab      	itete	ge
 800a2d4:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800a2d6:	89a3      	ldrhlt	r3, [r4, #12]
 800a2d8:	181b      	addge	r3, r3, r0
 800a2da:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800a2de:	bfac      	ite	ge
 800a2e0:	6563      	strge	r3, [r4, #84]	@ 0x54
 800a2e2:	81a3      	strhlt	r3, [r4, #12]
 800a2e4:	bd10      	pop	{r4, pc}

0800a2e6 <__swrite>:
 800a2e6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a2ea:	461f      	mov	r7, r3
 800a2ec:	898b      	ldrh	r3, [r1, #12]
 800a2ee:	05db      	lsls	r3, r3, #23
 800a2f0:	4605      	mov	r5, r0
 800a2f2:	460c      	mov	r4, r1
 800a2f4:	4616      	mov	r6, r2
 800a2f6:	d505      	bpl.n	800a304 <__swrite+0x1e>
 800a2f8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a2fc:	2302      	movs	r3, #2
 800a2fe:	2200      	movs	r2, #0
 800a300:	f000 f8d4 	bl	800a4ac <_lseek_r>
 800a304:	89a3      	ldrh	r3, [r4, #12]
 800a306:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800a30a:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800a30e:	81a3      	strh	r3, [r4, #12]
 800a310:	4632      	mov	r2, r6
 800a312:	463b      	mov	r3, r7
 800a314:	4628      	mov	r0, r5
 800a316:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800a31a:	f000 b8eb 	b.w	800a4f4 <_write_r>

0800a31e <__sseek>:
 800a31e:	b510      	push	{r4, lr}
 800a320:	460c      	mov	r4, r1
 800a322:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a326:	f000 f8c1 	bl	800a4ac <_lseek_r>
 800a32a:	1c43      	adds	r3, r0, #1
 800a32c:	89a3      	ldrh	r3, [r4, #12]
 800a32e:	bf15      	itete	ne
 800a330:	6560      	strne	r0, [r4, #84]	@ 0x54
 800a332:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800a336:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800a33a:	81a3      	strheq	r3, [r4, #12]
 800a33c:	bf18      	it	ne
 800a33e:	81a3      	strhne	r3, [r4, #12]
 800a340:	bd10      	pop	{r4, pc}

0800a342 <__sclose>:
 800a342:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a346:	f000 b8a1 	b.w	800a48c <_close_r>

0800a34a <__swbuf_r>:
 800a34a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a34c:	460e      	mov	r6, r1
 800a34e:	4614      	mov	r4, r2
 800a350:	4605      	mov	r5, r0
 800a352:	b118      	cbz	r0, 800a35c <__swbuf_r+0x12>
 800a354:	6a03      	ldr	r3, [r0, #32]
 800a356:	b90b      	cbnz	r3, 800a35c <__swbuf_r+0x12>
 800a358:	f7ff ff6c 	bl	800a234 <__sinit>
 800a35c:	69a3      	ldr	r3, [r4, #24]
 800a35e:	60a3      	str	r3, [r4, #8]
 800a360:	89a3      	ldrh	r3, [r4, #12]
 800a362:	071a      	lsls	r2, r3, #28
 800a364:	d501      	bpl.n	800a36a <__swbuf_r+0x20>
 800a366:	6923      	ldr	r3, [r4, #16]
 800a368:	b943      	cbnz	r3, 800a37c <__swbuf_r+0x32>
 800a36a:	4621      	mov	r1, r4
 800a36c:	4628      	mov	r0, r5
 800a36e:	f000 f82b 	bl	800a3c8 <__swsetup_r>
 800a372:	b118      	cbz	r0, 800a37c <__swbuf_r+0x32>
 800a374:	f04f 37ff 	mov.w	r7, #4294967295
 800a378:	4638      	mov	r0, r7
 800a37a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a37c:	6823      	ldr	r3, [r4, #0]
 800a37e:	6922      	ldr	r2, [r4, #16]
 800a380:	1a98      	subs	r0, r3, r2
 800a382:	6963      	ldr	r3, [r4, #20]
 800a384:	b2f6      	uxtb	r6, r6
 800a386:	4283      	cmp	r3, r0
 800a388:	4637      	mov	r7, r6
 800a38a:	dc05      	bgt.n	800a398 <__swbuf_r+0x4e>
 800a38c:	4621      	mov	r1, r4
 800a38e:	4628      	mov	r0, r5
 800a390:	f001 fd24 	bl	800bddc <_fflush_r>
 800a394:	2800      	cmp	r0, #0
 800a396:	d1ed      	bne.n	800a374 <__swbuf_r+0x2a>
 800a398:	68a3      	ldr	r3, [r4, #8]
 800a39a:	3b01      	subs	r3, #1
 800a39c:	60a3      	str	r3, [r4, #8]
 800a39e:	6823      	ldr	r3, [r4, #0]
 800a3a0:	1c5a      	adds	r2, r3, #1
 800a3a2:	6022      	str	r2, [r4, #0]
 800a3a4:	701e      	strb	r6, [r3, #0]
 800a3a6:	6962      	ldr	r2, [r4, #20]
 800a3a8:	1c43      	adds	r3, r0, #1
 800a3aa:	429a      	cmp	r2, r3
 800a3ac:	d004      	beq.n	800a3b8 <__swbuf_r+0x6e>
 800a3ae:	89a3      	ldrh	r3, [r4, #12]
 800a3b0:	07db      	lsls	r3, r3, #31
 800a3b2:	d5e1      	bpl.n	800a378 <__swbuf_r+0x2e>
 800a3b4:	2e0a      	cmp	r6, #10
 800a3b6:	d1df      	bne.n	800a378 <__swbuf_r+0x2e>
 800a3b8:	4621      	mov	r1, r4
 800a3ba:	4628      	mov	r0, r5
 800a3bc:	f001 fd0e 	bl	800bddc <_fflush_r>
 800a3c0:	2800      	cmp	r0, #0
 800a3c2:	d0d9      	beq.n	800a378 <__swbuf_r+0x2e>
 800a3c4:	e7d6      	b.n	800a374 <__swbuf_r+0x2a>
	...

0800a3c8 <__swsetup_r>:
 800a3c8:	b538      	push	{r3, r4, r5, lr}
 800a3ca:	4b29      	ldr	r3, [pc, #164]	@ (800a470 <__swsetup_r+0xa8>)
 800a3cc:	4605      	mov	r5, r0
 800a3ce:	6818      	ldr	r0, [r3, #0]
 800a3d0:	460c      	mov	r4, r1
 800a3d2:	b118      	cbz	r0, 800a3dc <__swsetup_r+0x14>
 800a3d4:	6a03      	ldr	r3, [r0, #32]
 800a3d6:	b90b      	cbnz	r3, 800a3dc <__swsetup_r+0x14>
 800a3d8:	f7ff ff2c 	bl	800a234 <__sinit>
 800a3dc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a3e0:	0719      	lsls	r1, r3, #28
 800a3e2:	d422      	bmi.n	800a42a <__swsetup_r+0x62>
 800a3e4:	06da      	lsls	r2, r3, #27
 800a3e6:	d407      	bmi.n	800a3f8 <__swsetup_r+0x30>
 800a3e8:	2209      	movs	r2, #9
 800a3ea:	602a      	str	r2, [r5, #0]
 800a3ec:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800a3f0:	81a3      	strh	r3, [r4, #12]
 800a3f2:	f04f 30ff 	mov.w	r0, #4294967295
 800a3f6:	e033      	b.n	800a460 <__swsetup_r+0x98>
 800a3f8:	0758      	lsls	r0, r3, #29
 800a3fa:	d512      	bpl.n	800a422 <__swsetup_r+0x5a>
 800a3fc:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800a3fe:	b141      	cbz	r1, 800a412 <__swsetup_r+0x4a>
 800a400:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800a404:	4299      	cmp	r1, r3
 800a406:	d002      	beq.n	800a40e <__swsetup_r+0x46>
 800a408:	4628      	mov	r0, r5
 800a40a:	f000 fea7 	bl	800b15c <_free_r>
 800a40e:	2300      	movs	r3, #0
 800a410:	6363      	str	r3, [r4, #52]	@ 0x34
 800a412:	89a3      	ldrh	r3, [r4, #12]
 800a414:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800a418:	81a3      	strh	r3, [r4, #12]
 800a41a:	2300      	movs	r3, #0
 800a41c:	6063      	str	r3, [r4, #4]
 800a41e:	6923      	ldr	r3, [r4, #16]
 800a420:	6023      	str	r3, [r4, #0]
 800a422:	89a3      	ldrh	r3, [r4, #12]
 800a424:	f043 0308 	orr.w	r3, r3, #8
 800a428:	81a3      	strh	r3, [r4, #12]
 800a42a:	6923      	ldr	r3, [r4, #16]
 800a42c:	b94b      	cbnz	r3, 800a442 <__swsetup_r+0x7a>
 800a42e:	89a3      	ldrh	r3, [r4, #12]
 800a430:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800a434:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800a438:	d003      	beq.n	800a442 <__swsetup_r+0x7a>
 800a43a:	4621      	mov	r1, r4
 800a43c:	4628      	mov	r0, r5
 800a43e:	f001 fd1b 	bl	800be78 <__smakebuf_r>
 800a442:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a446:	f013 0201 	ands.w	r2, r3, #1
 800a44a:	d00a      	beq.n	800a462 <__swsetup_r+0x9a>
 800a44c:	2200      	movs	r2, #0
 800a44e:	60a2      	str	r2, [r4, #8]
 800a450:	6962      	ldr	r2, [r4, #20]
 800a452:	4252      	negs	r2, r2
 800a454:	61a2      	str	r2, [r4, #24]
 800a456:	6922      	ldr	r2, [r4, #16]
 800a458:	b942      	cbnz	r2, 800a46c <__swsetup_r+0xa4>
 800a45a:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800a45e:	d1c5      	bne.n	800a3ec <__swsetup_r+0x24>
 800a460:	bd38      	pop	{r3, r4, r5, pc}
 800a462:	0799      	lsls	r1, r3, #30
 800a464:	bf58      	it	pl
 800a466:	6962      	ldrpl	r2, [r4, #20]
 800a468:	60a2      	str	r2, [r4, #8]
 800a46a:	e7f4      	b.n	800a456 <__swsetup_r+0x8e>
 800a46c:	2000      	movs	r0, #0
 800a46e:	e7f7      	b.n	800a460 <__swsetup_r+0x98>
 800a470:	2400001c 	.word	0x2400001c

0800a474 <memset>:
 800a474:	4402      	add	r2, r0
 800a476:	4603      	mov	r3, r0
 800a478:	4293      	cmp	r3, r2
 800a47a:	d100      	bne.n	800a47e <memset+0xa>
 800a47c:	4770      	bx	lr
 800a47e:	f803 1b01 	strb.w	r1, [r3], #1
 800a482:	e7f9      	b.n	800a478 <memset+0x4>

0800a484 <_localeconv_r>:
 800a484:	4800      	ldr	r0, [pc, #0]	@ (800a488 <_localeconv_r+0x4>)
 800a486:	4770      	bx	lr
 800a488:	2400015c 	.word	0x2400015c

0800a48c <_close_r>:
 800a48c:	b538      	push	{r3, r4, r5, lr}
 800a48e:	4d06      	ldr	r5, [pc, #24]	@ (800a4a8 <_close_r+0x1c>)
 800a490:	2300      	movs	r3, #0
 800a492:	4604      	mov	r4, r0
 800a494:	4608      	mov	r0, r1
 800a496:	602b      	str	r3, [r5, #0]
 800a498:	f7f7 f8c8 	bl	800162c <_close>
 800a49c:	1c43      	adds	r3, r0, #1
 800a49e:	d102      	bne.n	800a4a6 <_close_r+0x1a>
 800a4a0:	682b      	ldr	r3, [r5, #0]
 800a4a2:	b103      	cbz	r3, 800a4a6 <_close_r+0x1a>
 800a4a4:	6023      	str	r3, [r4, #0]
 800a4a6:	bd38      	pop	{r3, r4, r5, pc}
 800a4a8:	240006dc 	.word	0x240006dc

0800a4ac <_lseek_r>:
 800a4ac:	b538      	push	{r3, r4, r5, lr}
 800a4ae:	4d07      	ldr	r5, [pc, #28]	@ (800a4cc <_lseek_r+0x20>)
 800a4b0:	4604      	mov	r4, r0
 800a4b2:	4608      	mov	r0, r1
 800a4b4:	4611      	mov	r1, r2
 800a4b6:	2200      	movs	r2, #0
 800a4b8:	602a      	str	r2, [r5, #0]
 800a4ba:	461a      	mov	r2, r3
 800a4bc:	f7f7 f8dd 	bl	800167a <_lseek>
 800a4c0:	1c43      	adds	r3, r0, #1
 800a4c2:	d102      	bne.n	800a4ca <_lseek_r+0x1e>
 800a4c4:	682b      	ldr	r3, [r5, #0]
 800a4c6:	b103      	cbz	r3, 800a4ca <_lseek_r+0x1e>
 800a4c8:	6023      	str	r3, [r4, #0]
 800a4ca:	bd38      	pop	{r3, r4, r5, pc}
 800a4cc:	240006dc 	.word	0x240006dc

0800a4d0 <_read_r>:
 800a4d0:	b538      	push	{r3, r4, r5, lr}
 800a4d2:	4d07      	ldr	r5, [pc, #28]	@ (800a4f0 <_read_r+0x20>)
 800a4d4:	4604      	mov	r4, r0
 800a4d6:	4608      	mov	r0, r1
 800a4d8:	4611      	mov	r1, r2
 800a4da:	2200      	movs	r2, #0
 800a4dc:	602a      	str	r2, [r5, #0]
 800a4de:	461a      	mov	r2, r3
 800a4e0:	f7f7 f86b 	bl	80015ba <_read>
 800a4e4:	1c43      	adds	r3, r0, #1
 800a4e6:	d102      	bne.n	800a4ee <_read_r+0x1e>
 800a4e8:	682b      	ldr	r3, [r5, #0]
 800a4ea:	b103      	cbz	r3, 800a4ee <_read_r+0x1e>
 800a4ec:	6023      	str	r3, [r4, #0]
 800a4ee:	bd38      	pop	{r3, r4, r5, pc}
 800a4f0:	240006dc 	.word	0x240006dc

0800a4f4 <_write_r>:
 800a4f4:	b538      	push	{r3, r4, r5, lr}
 800a4f6:	4d07      	ldr	r5, [pc, #28]	@ (800a514 <_write_r+0x20>)
 800a4f8:	4604      	mov	r4, r0
 800a4fa:	4608      	mov	r0, r1
 800a4fc:	4611      	mov	r1, r2
 800a4fe:	2200      	movs	r2, #0
 800a500:	602a      	str	r2, [r5, #0]
 800a502:	461a      	mov	r2, r3
 800a504:	f7f7 f876 	bl	80015f4 <_write>
 800a508:	1c43      	adds	r3, r0, #1
 800a50a:	d102      	bne.n	800a512 <_write_r+0x1e>
 800a50c:	682b      	ldr	r3, [r5, #0]
 800a50e:	b103      	cbz	r3, 800a512 <_write_r+0x1e>
 800a510:	6023      	str	r3, [r4, #0]
 800a512:	bd38      	pop	{r3, r4, r5, pc}
 800a514:	240006dc 	.word	0x240006dc

0800a518 <__errno>:
 800a518:	4b01      	ldr	r3, [pc, #4]	@ (800a520 <__errno+0x8>)
 800a51a:	6818      	ldr	r0, [r3, #0]
 800a51c:	4770      	bx	lr
 800a51e:	bf00      	nop
 800a520:	2400001c 	.word	0x2400001c

0800a524 <__libc_init_array>:
 800a524:	b570      	push	{r4, r5, r6, lr}
 800a526:	4d0d      	ldr	r5, [pc, #52]	@ (800a55c <__libc_init_array+0x38>)
 800a528:	4c0d      	ldr	r4, [pc, #52]	@ (800a560 <__libc_init_array+0x3c>)
 800a52a:	1b64      	subs	r4, r4, r5
 800a52c:	10a4      	asrs	r4, r4, #2
 800a52e:	2600      	movs	r6, #0
 800a530:	42a6      	cmp	r6, r4
 800a532:	d109      	bne.n	800a548 <__libc_init_array+0x24>
 800a534:	4d0b      	ldr	r5, [pc, #44]	@ (800a564 <__libc_init_array+0x40>)
 800a536:	4c0c      	ldr	r4, [pc, #48]	@ (800a568 <__libc_init_array+0x44>)
 800a538:	f001 fdbc 	bl	800c0b4 <_init>
 800a53c:	1b64      	subs	r4, r4, r5
 800a53e:	10a4      	asrs	r4, r4, #2
 800a540:	2600      	movs	r6, #0
 800a542:	42a6      	cmp	r6, r4
 800a544:	d105      	bne.n	800a552 <__libc_init_array+0x2e>
 800a546:	bd70      	pop	{r4, r5, r6, pc}
 800a548:	f855 3b04 	ldr.w	r3, [r5], #4
 800a54c:	4798      	blx	r3
 800a54e:	3601      	adds	r6, #1
 800a550:	e7ee      	b.n	800a530 <__libc_init_array+0xc>
 800a552:	f855 3b04 	ldr.w	r3, [r5], #4
 800a556:	4798      	blx	r3
 800a558:	3601      	adds	r6, #1
 800a55a:	e7f2      	b.n	800a542 <__libc_init_array+0x1e>
 800a55c:	0800c59c 	.word	0x0800c59c
 800a560:	0800c59c 	.word	0x0800c59c
 800a564:	0800c59c 	.word	0x0800c59c
 800a568:	0800c5a0 	.word	0x0800c5a0

0800a56c <__retarget_lock_init_recursive>:
 800a56c:	4770      	bx	lr

0800a56e <__retarget_lock_acquire_recursive>:
 800a56e:	4770      	bx	lr

0800a570 <__retarget_lock_release_recursive>:
 800a570:	4770      	bx	lr

0800a572 <memcpy>:
 800a572:	440a      	add	r2, r1
 800a574:	4291      	cmp	r1, r2
 800a576:	f100 33ff 	add.w	r3, r0, #4294967295
 800a57a:	d100      	bne.n	800a57e <memcpy+0xc>
 800a57c:	4770      	bx	lr
 800a57e:	b510      	push	{r4, lr}
 800a580:	f811 4b01 	ldrb.w	r4, [r1], #1
 800a584:	f803 4f01 	strb.w	r4, [r3, #1]!
 800a588:	4291      	cmp	r1, r2
 800a58a:	d1f9      	bne.n	800a580 <memcpy+0xe>
 800a58c:	bd10      	pop	{r4, pc}

0800a58e <quorem>:
 800a58e:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a592:	6903      	ldr	r3, [r0, #16]
 800a594:	690c      	ldr	r4, [r1, #16]
 800a596:	42a3      	cmp	r3, r4
 800a598:	4607      	mov	r7, r0
 800a59a:	db7e      	blt.n	800a69a <quorem+0x10c>
 800a59c:	3c01      	subs	r4, #1
 800a59e:	f101 0814 	add.w	r8, r1, #20
 800a5a2:	00a3      	lsls	r3, r4, #2
 800a5a4:	f100 0514 	add.w	r5, r0, #20
 800a5a8:	9300      	str	r3, [sp, #0]
 800a5aa:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800a5ae:	9301      	str	r3, [sp, #4]
 800a5b0:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800a5b4:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800a5b8:	3301      	adds	r3, #1
 800a5ba:	429a      	cmp	r2, r3
 800a5bc:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800a5c0:	fbb2 f6f3 	udiv	r6, r2, r3
 800a5c4:	d32e      	bcc.n	800a624 <quorem+0x96>
 800a5c6:	f04f 0a00 	mov.w	sl, #0
 800a5ca:	46c4      	mov	ip, r8
 800a5cc:	46ae      	mov	lr, r5
 800a5ce:	46d3      	mov	fp, sl
 800a5d0:	f85c 3b04 	ldr.w	r3, [ip], #4
 800a5d4:	b298      	uxth	r0, r3
 800a5d6:	fb06 a000 	mla	r0, r6, r0, sl
 800a5da:	0c02      	lsrs	r2, r0, #16
 800a5dc:	0c1b      	lsrs	r3, r3, #16
 800a5de:	fb06 2303 	mla	r3, r6, r3, r2
 800a5e2:	f8de 2000 	ldr.w	r2, [lr]
 800a5e6:	b280      	uxth	r0, r0
 800a5e8:	b292      	uxth	r2, r2
 800a5ea:	1a12      	subs	r2, r2, r0
 800a5ec:	445a      	add	r2, fp
 800a5ee:	f8de 0000 	ldr.w	r0, [lr]
 800a5f2:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800a5f6:	b29b      	uxth	r3, r3
 800a5f8:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 800a5fc:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 800a600:	b292      	uxth	r2, r2
 800a602:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 800a606:	45e1      	cmp	r9, ip
 800a608:	f84e 2b04 	str.w	r2, [lr], #4
 800a60c:	ea4f 4b23 	mov.w	fp, r3, asr #16
 800a610:	d2de      	bcs.n	800a5d0 <quorem+0x42>
 800a612:	9b00      	ldr	r3, [sp, #0]
 800a614:	58eb      	ldr	r3, [r5, r3]
 800a616:	b92b      	cbnz	r3, 800a624 <quorem+0x96>
 800a618:	9b01      	ldr	r3, [sp, #4]
 800a61a:	3b04      	subs	r3, #4
 800a61c:	429d      	cmp	r5, r3
 800a61e:	461a      	mov	r2, r3
 800a620:	d32f      	bcc.n	800a682 <quorem+0xf4>
 800a622:	613c      	str	r4, [r7, #16]
 800a624:	4638      	mov	r0, r7
 800a626:	f001 f90b 	bl	800b840 <__mcmp>
 800a62a:	2800      	cmp	r0, #0
 800a62c:	db25      	blt.n	800a67a <quorem+0xec>
 800a62e:	4629      	mov	r1, r5
 800a630:	2000      	movs	r0, #0
 800a632:	f858 2b04 	ldr.w	r2, [r8], #4
 800a636:	f8d1 c000 	ldr.w	ip, [r1]
 800a63a:	fa1f fe82 	uxth.w	lr, r2
 800a63e:	fa1f f38c 	uxth.w	r3, ip
 800a642:	eba3 030e 	sub.w	r3, r3, lr
 800a646:	4403      	add	r3, r0
 800a648:	0c12      	lsrs	r2, r2, #16
 800a64a:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 800a64e:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 800a652:	b29b      	uxth	r3, r3
 800a654:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800a658:	45c1      	cmp	r9, r8
 800a65a:	f841 3b04 	str.w	r3, [r1], #4
 800a65e:	ea4f 4022 	mov.w	r0, r2, asr #16
 800a662:	d2e6      	bcs.n	800a632 <quorem+0xa4>
 800a664:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800a668:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800a66c:	b922      	cbnz	r2, 800a678 <quorem+0xea>
 800a66e:	3b04      	subs	r3, #4
 800a670:	429d      	cmp	r5, r3
 800a672:	461a      	mov	r2, r3
 800a674:	d30b      	bcc.n	800a68e <quorem+0x100>
 800a676:	613c      	str	r4, [r7, #16]
 800a678:	3601      	adds	r6, #1
 800a67a:	4630      	mov	r0, r6
 800a67c:	b003      	add	sp, #12
 800a67e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a682:	6812      	ldr	r2, [r2, #0]
 800a684:	3b04      	subs	r3, #4
 800a686:	2a00      	cmp	r2, #0
 800a688:	d1cb      	bne.n	800a622 <quorem+0x94>
 800a68a:	3c01      	subs	r4, #1
 800a68c:	e7c6      	b.n	800a61c <quorem+0x8e>
 800a68e:	6812      	ldr	r2, [r2, #0]
 800a690:	3b04      	subs	r3, #4
 800a692:	2a00      	cmp	r2, #0
 800a694:	d1ef      	bne.n	800a676 <quorem+0xe8>
 800a696:	3c01      	subs	r4, #1
 800a698:	e7ea      	b.n	800a670 <quorem+0xe2>
 800a69a:	2000      	movs	r0, #0
 800a69c:	e7ee      	b.n	800a67c <quorem+0xee>
	...

0800a6a0 <_dtoa_r>:
 800a6a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a6a4:	ed2d 8b02 	vpush	{d8}
 800a6a8:	69c7      	ldr	r7, [r0, #28]
 800a6aa:	b091      	sub	sp, #68	@ 0x44
 800a6ac:	ed8d 0b02 	vstr	d0, [sp, #8]
 800a6b0:	ec55 4b10 	vmov	r4, r5, d0
 800a6b4:	9e1c      	ldr	r6, [sp, #112]	@ 0x70
 800a6b6:	9107      	str	r1, [sp, #28]
 800a6b8:	4681      	mov	r9, r0
 800a6ba:	9209      	str	r2, [sp, #36]	@ 0x24
 800a6bc:	930d      	str	r3, [sp, #52]	@ 0x34
 800a6be:	b97f      	cbnz	r7, 800a6e0 <_dtoa_r+0x40>
 800a6c0:	2010      	movs	r0, #16
 800a6c2:	f000 fd95 	bl	800b1f0 <malloc>
 800a6c6:	4602      	mov	r2, r0
 800a6c8:	f8c9 001c 	str.w	r0, [r9, #28]
 800a6cc:	b920      	cbnz	r0, 800a6d8 <_dtoa_r+0x38>
 800a6ce:	4ba0      	ldr	r3, [pc, #640]	@ (800a950 <_dtoa_r+0x2b0>)
 800a6d0:	21ef      	movs	r1, #239	@ 0xef
 800a6d2:	48a0      	ldr	r0, [pc, #640]	@ (800a954 <_dtoa_r+0x2b4>)
 800a6d4:	f001 fc3e 	bl	800bf54 <__assert_func>
 800a6d8:	e9c0 7701 	strd	r7, r7, [r0, #4]
 800a6dc:	6007      	str	r7, [r0, #0]
 800a6de:	60c7      	str	r7, [r0, #12]
 800a6e0:	f8d9 301c 	ldr.w	r3, [r9, #28]
 800a6e4:	6819      	ldr	r1, [r3, #0]
 800a6e6:	b159      	cbz	r1, 800a700 <_dtoa_r+0x60>
 800a6e8:	685a      	ldr	r2, [r3, #4]
 800a6ea:	604a      	str	r2, [r1, #4]
 800a6ec:	2301      	movs	r3, #1
 800a6ee:	4093      	lsls	r3, r2
 800a6f0:	608b      	str	r3, [r1, #8]
 800a6f2:	4648      	mov	r0, r9
 800a6f4:	f000 fe72 	bl	800b3dc <_Bfree>
 800a6f8:	f8d9 301c 	ldr.w	r3, [r9, #28]
 800a6fc:	2200      	movs	r2, #0
 800a6fe:	601a      	str	r2, [r3, #0]
 800a700:	1e2b      	subs	r3, r5, #0
 800a702:	bfbb      	ittet	lt
 800a704:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 800a708:	9303      	strlt	r3, [sp, #12]
 800a70a:	2300      	movge	r3, #0
 800a70c:	2201      	movlt	r2, #1
 800a70e:	bfac      	ite	ge
 800a710:	6033      	strge	r3, [r6, #0]
 800a712:	6032      	strlt	r2, [r6, #0]
 800a714:	4b90      	ldr	r3, [pc, #576]	@ (800a958 <_dtoa_r+0x2b8>)
 800a716:	9e03      	ldr	r6, [sp, #12]
 800a718:	43b3      	bics	r3, r6
 800a71a:	d110      	bne.n	800a73e <_dtoa_r+0x9e>
 800a71c:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800a71e:	f242 730f 	movw	r3, #9999	@ 0x270f
 800a722:	6013      	str	r3, [r2, #0]
 800a724:	f3c6 0313 	ubfx	r3, r6, #0, #20
 800a728:	4323      	orrs	r3, r4
 800a72a:	f000 84e6 	beq.w	800b0fa <_dtoa_r+0xa5a>
 800a72e:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 800a730:	4f8a      	ldr	r7, [pc, #552]	@ (800a95c <_dtoa_r+0x2bc>)
 800a732:	2b00      	cmp	r3, #0
 800a734:	f000 84e8 	beq.w	800b108 <_dtoa_r+0xa68>
 800a738:	1cfb      	adds	r3, r7, #3
 800a73a:	f000 bce3 	b.w	800b104 <_dtoa_r+0xa64>
 800a73e:	ed9d 8b02 	vldr	d8, [sp, #8]
 800a742:	eeb5 8b40 	vcmp.f64	d8, #0.0
 800a746:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a74a:	d10a      	bne.n	800a762 <_dtoa_r+0xc2>
 800a74c:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800a74e:	2301      	movs	r3, #1
 800a750:	6013      	str	r3, [r2, #0]
 800a752:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 800a754:	b113      	cbz	r3, 800a75c <_dtoa_r+0xbc>
 800a756:	9a1d      	ldr	r2, [sp, #116]	@ 0x74
 800a758:	4b81      	ldr	r3, [pc, #516]	@ (800a960 <_dtoa_r+0x2c0>)
 800a75a:	6013      	str	r3, [r2, #0]
 800a75c:	4f81      	ldr	r7, [pc, #516]	@ (800a964 <_dtoa_r+0x2c4>)
 800a75e:	f000 bcd3 	b.w	800b108 <_dtoa_r+0xa68>
 800a762:	aa0e      	add	r2, sp, #56	@ 0x38
 800a764:	a90f      	add	r1, sp, #60	@ 0x3c
 800a766:	4648      	mov	r0, r9
 800a768:	eeb0 0b48 	vmov.f64	d0, d8
 800a76c:	f001 f918 	bl	800b9a0 <__d2b>
 800a770:	f3c6 530a 	ubfx	r3, r6, #20, #11
 800a774:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800a776:	9001      	str	r0, [sp, #4]
 800a778:	2b00      	cmp	r3, #0
 800a77a:	d045      	beq.n	800a808 <_dtoa_r+0x168>
 800a77c:	eeb0 7b48 	vmov.f64	d7, d8
 800a780:	ee18 1a90 	vmov	r1, s17
 800a784:	f3c1 0113 	ubfx	r1, r1, #0, #20
 800a788:	f041 517f 	orr.w	r1, r1, #1069547520	@ 0x3fc00000
 800a78c:	f441 1140 	orr.w	r1, r1, #3145728	@ 0x300000
 800a790:	f2a3 33ff 	subw	r3, r3, #1023	@ 0x3ff
 800a794:	2500      	movs	r5, #0
 800a796:	ee07 1a90 	vmov	s15, r1
 800a79a:	eeb7 6b08 	vmov.f64	d6, #120	@ 0x3fc00000  1.5
 800a79e:	ed9f 5b66 	vldr	d5, [pc, #408]	@ 800a938 <_dtoa_r+0x298>
 800a7a2:	ee37 7b46 	vsub.f64	d7, d7, d6
 800a7a6:	ed9f 6b66 	vldr	d6, [pc, #408]	@ 800a940 <_dtoa_r+0x2a0>
 800a7aa:	eea7 6b05 	vfma.f64	d6, d7, d5
 800a7ae:	ed9f 5b66 	vldr	d5, [pc, #408]	@ 800a948 <_dtoa_r+0x2a8>
 800a7b2:	ee07 3a90 	vmov	s15, r3
 800a7b6:	eeb8 4be7 	vcvt.f64.s32	d4, s15
 800a7ba:	eeb0 7b46 	vmov.f64	d7, d6
 800a7be:	eea4 7b05 	vfma.f64	d7, d4, d5
 800a7c2:	eefd 6bc7 	vcvt.s32.f64	s13, d7
 800a7c6:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 800a7ca:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a7ce:	ee16 8a90 	vmov	r8, s13
 800a7d2:	d508      	bpl.n	800a7e6 <_dtoa_r+0x146>
 800a7d4:	eeb8 6be6 	vcvt.f64.s32	d6, s13
 800a7d8:	eeb4 6b47 	vcmp.f64	d6, d7
 800a7dc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a7e0:	bf18      	it	ne
 800a7e2:	f108 38ff 	addne.w	r8, r8, #4294967295
 800a7e6:	f1b8 0f16 	cmp.w	r8, #22
 800a7ea:	d82b      	bhi.n	800a844 <_dtoa_r+0x1a4>
 800a7ec:	495e      	ldr	r1, [pc, #376]	@ (800a968 <_dtoa_r+0x2c8>)
 800a7ee:	eb01 01c8 	add.w	r1, r1, r8, lsl #3
 800a7f2:	ed91 7b00 	vldr	d7, [r1]
 800a7f6:	eeb4 8bc7 	vcmpe.f64	d8, d7
 800a7fa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a7fe:	d501      	bpl.n	800a804 <_dtoa_r+0x164>
 800a800:	f108 38ff 	add.w	r8, r8, #4294967295
 800a804:	2100      	movs	r1, #0
 800a806:	e01e      	b.n	800a846 <_dtoa_r+0x1a6>
 800a808:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800a80a:	4413      	add	r3, r2
 800a80c:	f203 4132 	addw	r1, r3, #1074	@ 0x432
 800a810:	2920      	cmp	r1, #32
 800a812:	bfc1      	itttt	gt
 800a814:	f1c1 0140 	rsbgt	r1, r1, #64	@ 0x40
 800a818:	408e      	lslgt	r6, r1
 800a81a:	f203 4112 	addwgt	r1, r3, #1042	@ 0x412
 800a81e:	fa24 f101 	lsrgt.w	r1, r4, r1
 800a822:	bfd6      	itet	le
 800a824:	f1c1 0120 	rsble	r1, r1, #32
 800a828:	4331      	orrgt	r1, r6
 800a82a:	fa04 f101 	lslle.w	r1, r4, r1
 800a82e:	ee07 1a90 	vmov	s15, r1
 800a832:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 800a836:	3b01      	subs	r3, #1
 800a838:	ee17 1a90 	vmov	r1, s15
 800a83c:	2501      	movs	r5, #1
 800a83e:	f1a1 71f8 	sub.w	r1, r1, #32505856	@ 0x1f00000
 800a842:	e7a8      	b.n	800a796 <_dtoa_r+0xf6>
 800a844:	2101      	movs	r1, #1
 800a846:	1ad2      	subs	r2, r2, r3
 800a848:	1e53      	subs	r3, r2, #1
 800a84a:	9306      	str	r3, [sp, #24]
 800a84c:	bf45      	ittet	mi
 800a84e:	f1c2 0301 	rsbmi	r3, r2, #1
 800a852:	9304      	strmi	r3, [sp, #16]
 800a854:	2300      	movpl	r3, #0
 800a856:	2300      	movmi	r3, #0
 800a858:	bf4c      	ite	mi
 800a85a:	9306      	strmi	r3, [sp, #24]
 800a85c:	9304      	strpl	r3, [sp, #16]
 800a85e:	f1b8 0f00 	cmp.w	r8, #0
 800a862:	910c      	str	r1, [sp, #48]	@ 0x30
 800a864:	db18      	blt.n	800a898 <_dtoa_r+0x1f8>
 800a866:	9b06      	ldr	r3, [sp, #24]
 800a868:	f8cd 8028 	str.w	r8, [sp, #40]	@ 0x28
 800a86c:	4443      	add	r3, r8
 800a86e:	9306      	str	r3, [sp, #24]
 800a870:	2300      	movs	r3, #0
 800a872:	9a07      	ldr	r2, [sp, #28]
 800a874:	2a09      	cmp	r2, #9
 800a876:	d845      	bhi.n	800a904 <_dtoa_r+0x264>
 800a878:	2a05      	cmp	r2, #5
 800a87a:	bfc4      	itt	gt
 800a87c:	3a04      	subgt	r2, #4
 800a87e:	9207      	strgt	r2, [sp, #28]
 800a880:	9a07      	ldr	r2, [sp, #28]
 800a882:	f1a2 0202 	sub.w	r2, r2, #2
 800a886:	bfcc      	ite	gt
 800a888:	2400      	movgt	r4, #0
 800a88a:	2401      	movle	r4, #1
 800a88c:	2a03      	cmp	r2, #3
 800a88e:	d844      	bhi.n	800a91a <_dtoa_r+0x27a>
 800a890:	e8df f002 	tbb	[pc, r2]
 800a894:	0b173634 	.word	0x0b173634
 800a898:	9b04      	ldr	r3, [sp, #16]
 800a89a:	2200      	movs	r2, #0
 800a89c:	eba3 0308 	sub.w	r3, r3, r8
 800a8a0:	9304      	str	r3, [sp, #16]
 800a8a2:	920a      	str	r2, [sp, #40]	@ 0x28
 800a8a4:	f1c8 0300 	rsb	r3, r8, #0
 800a8a8:	e7e3      	b.n	800a872 <_dtoa_r+0x1d2>
 800a8aa:	2201      	movs	r2, #1
 800a8ac:	9208      	str	r2, [sp, #32]
 800a8ae:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800a8b0:	eb08 0b02 	add.w	fp, r8, r2
 800a8b4:	f10b 0a01 	add.w	sl, fp, #1
 800a8b8:	4652      	mov	r2, sl
 800a8ba:	2a01      	cmp	r2, #1
 800a8bc:	bfb8      	it	lt
 800a8be:	2201      	movlt	r2, #1
 800a8c0:	e006      	b.n	800a8d0 <_dtoa_r+0x230>
 800a8c2:	2201      	movs	r2, #1
 800a8c4:	9208      	str	r2, [sp, #32]
 800a8c6:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800a8c8:	2a00      	cmp	r2, #0
 800a8ca:	dd29      	ble.n	800a920 <_dtoa_r+0x280>
 800a8cc:	4693      	mov	fp, r2
 800a8ce:	4692      	mov	sl, r2
 800a8d0:	f8d9 701c 	ldr.w	r7, [r9, #28]
 800a8d4:	2100      	movs	r1, #0
 800a8d6:	2004      	movs	r0, #4
 800a8d8:	f100 0614 	add.w	r6, r0, #20
 800a8dc:	4296      	cmp	r6, r2
 800a8de:	d926      	bls.n	800a92e <_dtoa_r+0x28e>
 800a8e0:	6079      	str	r1, [r7, #4]
 800a8e2:	4648      	mov	r0, r9
 800a8e4:	9305      	str	r3, [sp, #20]
 800a8e6:	f000 fd39 	bl	800b35c <_Balloc>
 800a8ea:	9b05      	ldr	r3, [sp, #20]
 800a8ec:	4607      	mov	r7, r0
 800a8ee:	2800      	cmp	r0, #0
 800a8f0:	d13e      	bne.n	800a970 <_dtoa_r+0x2d0>
 800a8f2:	4b1e      	ldr	r3, [pc, #120]	@ (800a96c <_dtoa_r+0x2cc>)
 800a8f4:	4602      	mov	r2, r0
 800a8f6:	f240 11af 	movw	r1, #431	@ 0x1af
 800a8fa:	e6ea      	b.n	800a6d2 <_dtoa_r+0x32>
 800a8fc:	2200      	movs	r2, #0
 800a8fe:	e7e1      	b.n	800a8c4 <_dtoa_r+0x224>
 800a900:	2200      	movs	r2, #0
 800a902:	e7d3      	b.n	800a8ac <_dtoa_r+0x20c>
 800a904:	2401      	movs	r4, #1
 800a906:	2200      	movs	r2, #0
 800a908:	e9cd 2407 	strd	r2, r4, [sp, #28]
 800a90c:	f04f 3bff 	mov.w	fp, #4294967295
 800a910:	2100      	movs	r1, #0
 800a912:	46da      	mov	sl, fp
 800a914:	2212      	movs	r2, #18
 800a916:	9109      	str	r1, [sp, #36]	@ 0x24
 800a918:	e7da      	b.n	800a8d0 <_dtoa_r+0x230>
 800a91a:	2201      	movs	r2, #1
 800a91c:	9208      	str	r2, [sp, #32]
 800a91e:	e7f5      	b.n	800a90c <_dtoa_r+0x26c>
 800a920:	f04f 0b01 	mov.w	fp, #1
 800a924:	46da      	mov	sl, fp
 800a926:	465a      	mov	r2, fp
 800a928:	f8cd b024 	str.w	fp, [sp, #36]	@ 0x24
 800a92c:	e7d0      	b.n	800a8d0 <_dtoa_r+0x230>
 800a92e:	3101      	adds	r1, #1
 800a930:	0040      	lsls	r0, r0, #1
 800a932:	e7d1      	b.n	800a8d8 <_dtoa_r+0x238>
 800a934:	f3af 8000 	nop.w
 800a938:	636f4361 	.word	0x636f4361
 800a93c:	3fd287a7 	.word	0x3fd287a7
 800a940:	8b60c8b3 	.word	0x8b60c8b3
 800a944:	3fc68a28 	.word	0x3fc68a28
 800a948:	509f79fb 	.word	0x509f79fb
 800a94c:	3fd34413 	.word	0x3fd34413
 800a950:	0800c261 	.word	0x0800c261
 800a954:	0800c278 	.word	0x0800c278
 800a958:	7ff00000 	.word	0x7ff00000
 800a95c:	0800c25d 	.word	0x0800c25d
 800a960:	0800c231 	.word	0x0800c231
 800a964:	0800c230 	.word	0x0800c230
 800a968:	0800c3c8 	.word	0x0800c3c8
 800a96c:	0800c2d0 	.word	0x0800c2d0
 800a970:	f8d9 201c 	ldr.w	r2, [r9, #28]
 800a974:	f1ba 0f0e 	cmp.w	sl, #14
 800a978:	6010      	str	r0, [r2, #0]
 800a97a:	d86e      	bhi.n	800aa5a <_dtoa_r+0x3ba>
 800a97c:	2c00      	cmp	r4, #0
 800a97e:	d06c      	beq.n	800aa5a <_dtoa_r+0x3ba>
 800a980:	f1b8 0f00 	cmp.w	r8, #0
 800a984:	f340 80b4 	ble.w	800aaf0 <_dtoa_r+0x450>
 800a988:	4ac8      	ldr	r2, [pc, #800]	@ (800acac <_dtoa_r+0x60c>)
 800a98a:	f008 010f 	and.w	r1, r8, #15
 800a98e:	eb02 02c1 	add.w	r2, r2, r1, lsl #3
 800a992:	f418 7f80 	tst.w	r8, #256	@ 0x100
 800a996:	ed92 7b00 	vldr	d7, [r2]
 800a99a:	ea4f 1128 	mov.w	r1, r8, asr #4
 800a99e:	f000 809b 	beq.w	800aad8 <_dtoa_r+0x438>
 800a9a2:	4ac3      	ldr	r2, [pc, #780]	@ (800acb0 <_dtoa_r+0x610>)
 800a9a4:	ed92 6b08 	vldr	d6, [r2, #32]
 800a9a8:	ee88 6b06 	vdiv.f64	d6, d8, d6
 800a9ac:	ed8d 6b02 	vstr	d6, [sp, #8]
 800a9b0:	f001 010f 	and.w	r1, r1, #15
 800a9b4:	2203      	movs	r2, #3
 800a9b6:	48be      	ldr	r0, [pc, #760]	@ (800acb0 <_dtoa_r+0x610>)
 800a9b8:	2900      	cmp	r1, #0
 800a9ba:	f040 808f 	bne.w	800aadc <_dtoa_r+0x43c>
 800a9be:	ed9d 6b02 	vldr	d6, [sp, #8]
 800a9c2:	ee86 7b07 	vdiv.f64	d7, d6, d7
 800a9c6:	ed8d 7b02 	vstr	d7, [sp, #8]
 800a9ca:	990c      	ldr	r1, [sp, #48]	@ 0x30
 800a9cc:	ed9d 7b02 	vldr	d7, [sp, #8]
 800a9d0:	2900      	cmp	r1, #0
 800a9d2:	f000 80b3 	beq.w	800ab3c <_dtoa_r+0x49c>
 800a9d6:	eeb7 6b00 	vmov.f64	d6, #112	@ 0x3f800000  1.0
 800a9da:	eeb4 7bc6 	vcmpe.f64	d7, d6
 800a9de:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a9e2:	f140 80ab 	bpl.w	800ab3c <_dtoa_r+0x49c>
 800a9e6:	f1ba 0f00 	cmp.w	sl, #0
 800a9ea:	f000 80a7 	beq.w	800ab3c <_dtoa_r+0x49c>
 800a9ee:	f1bb 0f00 	cmp.w	fp, #0
 800a9f2:	dd30      	ble.n	800aa56 <_dtoa_r+0x3b6>
 800a9f4:	eeb2 6b04 	vmov.f64	d6, #36	@ 0x41200000  10.0
 800a9f8:	ee27 7b06 	vmul.f64	d7, d7, d6
 800a9fc:	ed8d 7b02 	vstr	d7, [sp, #8]
 800aa00:	f108 31ff 	add.w	r1, r8, #4294967295
 800aa04:	9105      	str	r1, [sp, #20]
 800aa06:	3201      	adds	r2, #1
 800aa08:	465c      	mov	r4, fp
 800aa0a:	ed9d 6b02 	vldr	d6, [sp, #8]
 800aa0e:	eeb1 5b0c 	vmov.f64	d5, #28	@ 0x40e00000  7.0
 800aa12:	ee07 2a90 	vmov	s15, r2
 800aa16:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 800aa1a:	eea7 5b06 	vfma.f64	d5, d7, d6
 800aa1e:	ee15 2a90 	vmov	r2, s11
 800aa22:	ec51 0b15 	vmov	r0, r1, d5
 800aa26:	f1a2 7150 	sub.w	r1, r2, #54525952	@ 0x3400000
 800aa2a:	2c00      	cmp	r4, #0
 800aa2c:	f040 808a 	bne.w	800ab44 <_dtoa_r+0x4a4>
 800aa30:	eeb1 7b04 	vmov.f64	d7, #20	@ 0x40a00000  5.0
 800aa34:	ee36 6b47 	vsub.f64	d6, d6, d7
 800aa38:	ec41 0b17 	vmov	d7, r0, r1
 800aa3c:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800aa40:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800aa44:	f300 826a 	bgt.w	800af1c <_dtoa_r+0x87c>
 800aa48:	eeb1 7b47 	vneg.f64	d7, d7
 800aa4c:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800aa50:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800aa54:	d423      	bmi.n	800aa9e <_dtoa_r+0x3fe>
 800aa56:	ed8d 8b02 	vstr	d8, [sp, #8]
 800aa5a:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 800aa5c:	2a00      	cmp	r2, #0
 800aa5e:	f2c0 8129 	blt.w	800acb4 <_dtoa_r+0x614>
 800aa62:	f1b8 0f0e 	cmp.w	r8, #14
 800aa66:	f300 8125 	bgt.w	800acb4 <_dtoa_r+0x614>
 800aa6a:	4b90      	ldr	r3, [pc, #576]	@ (800acac <_dtoa_r+0x60c>)
 800aa6c:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 800aa70:	ed93 6b00 	vldr	d6, [r3]
 800aa74:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800aa76:	2b00      	cmp	r3, #0
 800aa78:	f280 80c8 	bge.w	800ac0c <_dtoa_r+0x56c>
 800aa7c:	f1ba 0f00 	cmp.w	sl, #0
 800aa80:	f300 80c4 	bgt.w	800ac0c <_dtoa_r+0x56c>
 800aa84:	d10b      	bne.n	800aa9e <_dtoa_r+0x3fe>
 800aa86:	eeb1 7b04 	vmov.f64	d7, #20	@ 0x40a00000  5.0
 800aa8a:	ee26 6b07 	vmul.f64	d6, d6, d7
 800aa8e:	ed9d 7b02 	vldr	d7, [sp, #8]
 800aa92:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800aa96:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800aa9a:	f2c0 823c 	blt.w	800af16 <_dtoa_r+0x876>
 800aa9e:	2400      	movs	r4, #0
 800aaa0:	4625      	mov	r5, r4
 800aaa2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800aaa4:	43db      	mvns	r3, r3
 800aaa6:	9305      	str	r3, [sp, #20]
 800aaa8:	463e      	mov	r6, r7
 800aaaa:	f04f 0800 	mov.w	r8, #0
 800aaae:	4621      	mov	r1, r4
 800aab0:	4648      	mov	r0, r9
 800aab2:	f000 fc93 	bl	800b3dc <_Bfree>
 800aab6:	2d00      	cmp	r5, #0
 800aab8:	f000 80a2 	beq.w	800ac00 <_dtoa_r+0x560>
 800aabc:	f1b8 0f00 	cmp.w	r8, #0
 800aac0:	d005      	beq.n	800aace <_dtoa_r+0x42e>
 800aac2:	45a8      	cmp	r8, r5
 800aac4:	d003      	beq.n	800aace <_dtoa_r+0x42e>
 800aac6:	4641      	mov	r1, r8
 800aac8:	4648      	mov	r0, r9
 800aaca:	f000 fc87 	bl	800b3dc <_Bfree>
 800aace:	4629      	mov	r1, r5
 800aad0:	4648      	mov	r0, r9
 800aad2:	f000 fc83 	bl	800b3dc <_Bfree>
 800aad6:	e093      	b.n	800ac00 <_dtoa_r+0x560>
 800aad8:	2202      	movs	r2, #2
 800aada:	e76c      	b.n	800a9b6 <_dtoa_r+0x316>
 800aadc:	07cc      	lsls	r4, r1, #31
 800aade:	d504      	bpl.n	800aaea <_dtoa_r+0x44a>
 800aae0:	ed90 6b00 	vldr	d6, [r0]
 800aae4:	3201      	adds	r2, #1
 800aae6:	ee27 7b06 	vmul.f64	d7, d7, d6
 800aaea:	1049      	asrs	r1, r1, #1
 800aaec:	3008      	adds	r0, #8
 800aaee:	e763      	b.n	800a9b8 <_dtoa_r+0x318>
 800aaf0:	d022      	beq.n	800ab38 <_dtoa_r+0x498>
 800aaf2:	f1c8 0100 	rsb	r1, r8, #0
 800aaf6:	4a6d      	ldr	r2, [pc, #436]	@ (800acac <_dtoa_r+0x60c>)
 800aaf8:	f001 000f 	and.w	r0, r1, #15
 800aafc:	eb02 02c0 	add.w	r2, r2, r0, lsl #3
 800ab00:	ed92 7b00 	vldr	d7, [r2]
 800ab04:	ee28 7b07 	vmul.f64	d7, d8, d7
 800ab08:	ed8d 7b02 	vstr	d7, [sp, #8]
 800ab0c:	4868      	ldr	r0, [pc, #416]	@ (800acb0 <_dtoa_r+0x610>)
 800ab0e:	1109      	asrs	r1, r1, #4
 800ab10:	2400      	movs	r4, #0
 800ab12:	2202      	movs	r2, #2
 800ab14:	b929      	cbnz	r1, 800ab22 <_dtoa_r+0x482>
 800ab16:	2c00      	cmp	r4, #0
 800ab18:	f43f af57 	beq.w	800a9ca <_dtoa_r+0x32a>
 800ab1c:	ed8d 7b02 	vstr	d7, [sp, #8]
 800ab20:	e753      	b.n	800a9ca <_dtoa_r+0x32a>
 800ab22:	07ce      	lsls	r6, r1, #31
 800ab24:	d505      	bpl.n	800ab32 <_dtoa_r+0x492>
 800ab26:	ed90 6b00 	vldr	d6, [r0]
 800ab2a:	3201      	adds	r2, #1
 800ab2c:	2401      	movs	r4, #1
 800ab2e:	ee27 7b06 	vmul.f64	d7, d7, d6
 800ab32:	1049      	asrs	r1, r1, #1
 800ab34:	3008      	adds	r0, #8
 800ab36:	e7ed      	b.n	800ab14 <_dtoa_r+0x474>
 800ab38:	2202      	movs	r2, #2
 800ab3a:	e746      	b.n	800a9ca <_dtoa_r+0x32a>
 800ab3c:	f8cd 8014 	str.w	r8, [sp, #20]
 800ab40:	4654      	mov	r4, sl
 800ab42:	e762      	b.n	800aa0a <_dtoa_r+0x36a>
 800ab44:	4a59      	ldr	r2, [pc, #356]	@ (800acac <_dtoa_r+0x60c>)
 800ab46:	eb02 02c4 	add.w	r2, r2, r4, lsl #3
 800ab4a:	ed12 4b02 	vldr	d4, [r2, #-8]
 800ab4e:	9a08      	ldr	r2, [sp, #32]
 800ab50:	ec41 0b17 	vmov	d7, r0, r1
 800ab54:	443c      	add	r4, r7
 800ab56:	b34a      	cbz	r2, 800abac <_dtoa_r+0x50c>
 800ab58:	eeb6 3b00 	vmov.f64	d3, #96	@ 0x3f000000  0.5
 800ab5c:	eeb7 2b00 	vmov.f64	d2, #112	@ 0x3f800000  1.0
 800ab60:	463e      	mov	r6, r7
 800ab62:	ee83 5b04 	vdiv.f64	d5, d3, d4
 800ab66:	eeb2 3b04 	vmov.f64	d3, #36	@ 0x41200000  10.0
 800ab6a:	ee35 7b47 	vsub.f64	d7, d5, d7
 800ab6e:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 800ab72:	ee14 2a90 	vmov	r2, s9
 800ab76:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 800ab7a:	3230      	adds	r2, #48	@ 0x30
 800ab7c:	ee36 6b45 	vsub.f64	d6, d6, d5
 800ab80:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800ab84:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ab88:	f806 2b01 	strb.w	r2, [r6], #1
 800ab8c:	d438      	bmi.n	800ac00 <_dtoa_r+0x560>
 800ab8e:	ee32 5b46 	vsub.f64	d5, d2, d6
 800ab92:	eeb4 5bc7 	vcmpe.f64	d5, d7
 800ab96:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ab9a:	d46e      	bmi.n	800ac7a <_dtoa_r+0x5da>
 800ab9c:	42a6      	cmp	r6, r4
 800ab9e:	f43f af5a 	beq.w	800aa56 <_dtoa_r+0x3b6>
 800aba2:	ee27 7b03 	vmul.f64	d7, d7, d3
 800aba6:	ee26 6b03 	vmul.f64	d6, d6, d3
 800abaa:	e7e0      	b.n	800ab6e <_dtoa_r+0x4ce>
 800abac:	4621      	mov	r1, r4
 800abae:	463e      	mov	r6, r7
 800abb0:	ee27 7b04 	vmul.f64	d7, d7, d4
 800abb4:	eeb2 3b04 	vmov.f64	d3, #36	@ 0x41200000  10.0
 800abb8:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 800abbc:	ee14 2a90 	vmov	r2, s9
 800abc0:	3230      	adds	r2, #48	@ 0x30
 800abc2:	f806 2b01 	strb.w	r2, [r6], #1
 800abc6:	42a6      	cmp	r6, r4
 800abc8:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 800abcc:	ee36 6b45 	vsub.f64	d6, d6, d5
 800abd0:	d119      	bne.n	800ac06 <_dtoa_r+0x566>
 800abd2:	eeb6 5b00 	vmov.f64	d5, #96	@ 0x3f000000  0.5
 800abd6:	ee37 4b05 	vadd.f64	d4, d7, d5
 800abda:	eeb4 6bc4 	vcmpe.f64	d6, d4
 800abde:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800abe2:	dc4a      	bgt.n	800ac7a <_dtoa_r+0x5da>
 800abe4:	ee35 5b47 	vsub.f64	d5, d5, d7
 800abe8:	eeb4 6bc5 	vcmpe.f64	d6, d5
 800abec:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800abf0:	f57f af31 	bpl.w	800aa56 <_dtoa_r+0x3b6>
 800abf4:	460e      	mov	r6, r1
 800abf6:	3901      	subs	r1, #1
 800abf8:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800abfc:	2b30      	cmp	r3, #48	@ 0x30
 800abfe:	d0f9      	beq.n	800abf4 <_dtoa_r+0x554>
 800ac00:	f8dd 8014 	ldr.w	r8, [sp, #20]
 800ac04:	e027      	b.n	800ac56 <_dtoa_r+0x5b6>
 800ac06:	ee26 6b03 	vmul.f64	d6, d6, d3
 800ac0a:	e7d5      	b.n	800abb8 <_dtoa_r+0x518>
 800ac0c:	ed9d 7b02 	vldr	d7, [sp, #8]
 800ac10:	eeb2 4b04 	vmov.f64	d4, #36	@ 0x41200000  10.0
 800ac14:	463e      	mov	r6, r7
 800ac16:	ee87 5b06 	vdiv.f64	d5, d7, d6
 800ac1a:	eebd 5bc5 	vcvt.s32.f64	s10, d5
 800ac1e:	ee15 3a10 	vmov	r3, s10
 800ac22:	3330      	adds	r3, #48	@ 0x30
 800ac24:	f806 3b01 	strb.w	r3, [r6], #1
 800ac28:	1bf3      	subs	r3, r6, r7
 800ac2a:	459a      	cmp	sl, r3
 800ac2c:	eeb8 3bc5 	vcvt.f64.s32	d3, s10
 800ac30:	eea3 7b46 	vfms.f64	d7, d3, d6
 800ac34:	d132      	bne.n	800ac9c <_dtoa_r+0x5fc>
 800ac36:	ee37 7b07 	vadd.f64	d7, d7, d7
 800ac3a:	eeb4 7bc6 	vcmpe.f64	d7, d6
 800ac3e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ac42:	dc18      	bgt.n	800ac76 <_dtoa_r+0x5d6>
 800ac44:	eeb4 7b46 	vcmp.f64	d7, d6
 800ac48:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ac4c:	d103      	bne.n	800ac56 <_dtoa_r+0x5b6>
 800ac4e:	ee15 3a10 	vmov	r3, s10
 800ac52:	07db      	lsls	r3, r3, #31
 800ac54:	d40f      	bmi.n	800ac76 <_dtoa_r+0x5d6>
 800ac56:	9901      	ldr	r1, [sp, #4]
 800ac58:	4648      	mov	r0, r9
 800ac5a:	f000 fbbf 	bl	800b3dc <_Bfree>
 800ac5e:	2300      	movs	r3, #0
 800ac60:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800ac62:	7033      	strb	r3, [r6, #0]
 800ac64:	f108 0301 	add.w	r3, r8, #1
 800ac68:	6013      	str	r3, [r2, #0]
 800ac6a:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 800ac6c:	2b00      	cmp	r3, #0
 800ac6e:	f000 824b 	beq.w	800b108 <_dtoa_r+0xa68>
 800ac72:	601e      	str	r6, [r3, #0]
 800ac74:	e248      	b.n	800b108 <_dtoa_r+0xa68>
 800ac76:	f8cd 8014 	str.w	r8, [sp, #20]
 800ac7a:	4633      	mov	r3, r6
 800ac7c:	461e      	mov	r6, r3
 800ac7e:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800ac82:	2a39      	cmp	r2, #57	@ 0x39
 800ac84:	d106      	bne.n	800ac94 <_dtoa_r+0x5f4>
 800ac86:	429f      	cmp	r7, r3
 800ac88:	d1f8      	bne.n	800ac7c <_dtoa_r+0x5dc>
 800ac8a:	9a05      	ldr	r2, [sp, #20]
 800ac8c:	3201      	adds	r2, #1
 800ac8e:	9205      	str	r2, [sp, #20]
 800ac90:	2230      	movs	r2, #48	@ 0x30
 800ac92:	703a      	strb	r2, [r7, #0]
 800ac94:	781a      	ldrb	r2, [r3, #0]
 800ac96:	3201      	adds	r2, #1
 800ac98:	701a      	strb	r2, [r3, #0]
 800ac9a:	e7b1      	b.n	800ac00 <_dtoa_r+0x560>
 800ac9c:	ee27 7b04 	vmul.f64	d7, d7, d4
 800aca0:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800aca4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800aca8:	d1b5      	bne.n	800ac16 <_dtoa_r+0x576>
 800acaa:	e7d4      	b.n	800ac56 <_dtoa_r+0x5b6>
 800acac:	0800c3c8 	.word	0x0800c3c8
 800acb0:	0800c3a0 	.word	0x0800c3a0
 800acb4:	9908      	ldr	r1, [sp, #32]
 800acb6:	2900      	cmp	r1, #0
 800acb8:	f000 80e9 	beq.w	800ae8e <_dtoa_r+0x7ee>
 800acbc:	9907      	ldr	r1, [sp, #28]
 800acbe:	2901      	cmp	r1, #1
 800acc0:	f300 80cb 	bgt.w	800ae5a <_dtoa_r+0x7ba>
 800acc4:	2d00      	cmp	r5, #0
 800acc6:	f000 80c4 	beq.w	800ae52 <_dtoa_r+0x7b2>
 800acca:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 800acce:	9e04      	ldr	r6, [sp, #16]
 800acd0:	461c      	mov	r4, r3
 800acd2:	9305      	str	r3, [sp, #20]
 800acd4:	9b04      	ldr	r3, [sp, #16]
 800acd6:	4413      	add	r3, r2
 800acd8:	9304      	str	r3, [sp, #16]
 800acda:	9b06      	ldr	r3, [sp, #24]
 800acdc:	2101      	movs	r1, #1
 800acde:	4413      	add	r3, r2
 800ace0:	4648      	mov	r0, r9
 800ace2:	9306      	str	r3, [sp, #24]
 800ace4:	f000 fc2e 	bl	800b544 <__i2b>
 800ace8:	9b05      	ldr	r3, [sp, #20]
 800acea:	4605      	mov	r5, r0
 800acec:	b166      	cbz	r6, 800ad08 <_dtoa_r+0x668>
 800acee:	9a06      	ldr	r2, [sp, #24]
 800acf0:	2a00      	cmp	r2, #0
 800acf2:	dd09      	ble.n	800ad08 <_dtoa_r+0x668>
 800acf4:	42b2      	cmp	r2, r6
 800acf6:	9904      	ldr	r1, [sp, #16]
 800acf8:	bfa8      	it	ge
 800acfa:	4632      	movge	r2, r6
 800acfc:	1a89      	subs	r1, r1, r2
 800acfe:	9104      	str	r1, [sp, #16]
 800ad00:	9906      	ldr	r1, [sp, #24]
 800ad02:	1ab6      	subs	r6, r6, r2
 800ad04:	1a8a      	subs	r2, r1, r2
 800ad06:	9206      	str	r2, [sp, #24]
 800ad08:	b30b      	cbz	r3, 800ad4e <_dtoa_r+0x6ae>
 800ad0a:	9a08      	ldr	r2, [sp, #32]
 800ad0c:	2a00      	cmp	r2, #0
 800ad0e:	f000 80c5 	beq.w	800ae9c <_dtoa_r+0x7fc>
 800ad12:	2c00      	cmp	r4, #0
 800ad14:	f000 80bf 	beq.w	800ae96 <_dtoa_r+0x7f6>
 800ad18:	4629      	mov	r1, r5
 800ad1a:	4622      	mov	r2, r4
 800ad1c:	4648      	mov	r0, r9
 800ad1e:	930b      	str	r3, [sp, #44]	@ 0x2c
 800ad20:	f000 fcc8 	bl	800b6b4 <__pow5mult>
 800ad24:	9a01      	ldr	r2, [sp, #4]
 800ad26:	4601      	mov	r1, r0
 800ad28:	4605      	mov	r5, r0
 800ad2a:	4648      	mov	r0, r9
 800ad2c:	f000 fc20 	bl	800b570 <__multiply>
 800ad30:	9901      	ldr	r1, [sp, #4]
 800ad32:	9005      	str	r0, [sp, #20]
 800ad34:	4648      	mov	r0, r9
 800ad36:	f000 fb51 	bl	800b3dc <_Bfree>
 800ad3a:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800ad3c:	1b1b      	subs	r3, r3, r4
 800ad3e:	f000 80b0 	beq.w	800aea2 <_dtoa_r+0x802>
 800ad42:	9905      	ldr	r1, [sp, #20]
 800ad44:	461a      	mov	r2, r3
 800ad46:	4648      	mov	r0, r9
 800ad48:	f000 fcb4 	bl	800b6b4 <__pow5mult>
 800ad4c:	9001      	str	r0, [sp, #4]
 800ad4e:	2101      	movs	r1, #1
 800ad50:	4648      	mov	r0, r9
 800ad52:	f000 fbf7 	bl	800b544 <__i2b>
 800ad56:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800ad58:	4604      	mov	r4, r0
 800ad5a:	2b00      	cmp	r3, #0
 800ad5c:	f000 81da 	beq.w	800b114 <_dtoa_r+0xa74>
 800ad60:	461a      	mov	r2, r3
 800ad62:	4601      	mov	r1, r0
 800ad64:	4648      	mov	r0, r9
 800ad66:	f000 fca5 	bl	800b6b4 <__pow5mult>
 800ad6a:	9b07      	ldr	r3, [sp, #28]
 800ad6c:	2b01      	cmp	r3, #1
 800ad6e:	4604      	mov	r4, r0
 800ad70:	f300 80a0 	bgt.w	800aeb4 <_dtoa_r+0x814>
 800ad74:	9b02      	ldr	r3, [sp, #8]
 800ad76:	2b00      	cmp	r3, #0
 800ad78:	f040 8096 	bne.w	800aea8 <_dtoa_r+0x808>
 800ad7c:	9b03      	ldr	r3, [sp, #12]
 800ad7e:	f3c3 0213 	ubfx	r2, r3, #0, #20
 800ad82:	2a00      	cmp	r2, #0
 800ad84:	f040 8092 	bne.w	800aeac <_dtoa_r+0x80c>
 800ad88:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 800ad8c:	0d12      	lsrs	r2, r2, #20
 800ad8e:	0512      	lsls	r2, r2, #20
 800ad90:	2a00      	cmp	r2, #0
 800ad92:	f000 808d 	beq.w	800aeb0 <_dtoa_r+0x810>
 800ad96:	9b04      	ldr	r3, [sp, #16]
 800ad98:	3301      	adds	r3, #1
 800ad9a:	9304      	str	r3, [sp, #16]
 800ad9c:	9b06      	ldr	r3, [sp, #24]
 800ad9e:	3301      	adds	r3, #1
 800ada0:	9306      	str	r3, [sp, #24]
 800ada2:	2301      	movs	r3, #1
 800ada4:	930b      	str	r3, [sp, #44]	@ 0x2c
 800ada6:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800ada8:	2b00      	cmp	r3, #0
 800adaa:	f000 81b9 	beq.w	800b120 <_dtoa_r+0xa80>
 800adae:	6922      	ldr	r2, [r4, #16]
 800adb0:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 800adb4:	6910      	ldr	r0, [r2, #16]
 800adb6:	f000 fb79 	bl	800b4ac <__hi0bits>
 800adba:	f1c0 0020 	rsb	r0, r0, #32
 800adbe:	9b06      	ldr	r3, [sp, #24]
 800adc0:	4418      	add	r0, r3
 800adc2:	f010 001f 	ands.w	r0, r0, #31
 800adc6:	f000 8081 	beq.w	800aecc <_dtoa_r+0x82c>
 800adca:	f1c0 0220 	rsb	r2, r0, #32
 800adce:	2a04      	cmp	r2, #4
 800add0:	dd73      	ble.n	800aeba <_dtoa_r+0x81a>
 800add2:	9b04      	ldr	r3, [sp, #16]
 800add4:	f1c0 001c 	rsb	r0, r0, #28
 800add8:	4403      	add	r3, r0
 800adda:	9304      	str	r3, [sp, #16]
 800addc:	9b06      	ldr	r3, [sp, #24]
 800adde:	4406      	add	r6, r0
 800ade0:	4403      	add	r3, r0
 800ade2:	9306      	str	r3, [sp, #24]
 800ade4:	9b04      	ldr	r3, [sp, #16]
 800ade6:	2b00      	cmp	r3, #0
 800ade8:	dd05      	ble.n	800adf6 <_dtoa_r+0x756>
 800adea:	9901      	ldr	r1, [sp, #4]
 800adec:	461a      	mov	r2, r3
 800adee:	4648      	mov	r0, r9
 800adf0:	f000 fcba 	bl	800b768 <__lshift>
 800adf4:	9001      	str	r0, [sp, #4]
 800adf6:	9b06      	ldr	r3, [sp, #24]
 800adf8:	2b00      	cmp	r3, #0
 800adfa:	dd05      	ble.n	800ae08 <_dtoa_r+0x768>
 800adfc:	4621      	mov	r1, r4
 800adfe:	461a      	mov	r2, r3
 800ae00:	4648      	mov	r0, r9
 800ae02:	f000 fcb1 	bl	800b768 <__lshift>
 800ae06:	4604      	mov	r4, r0
 800ae08:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800ae0a:	2b00      	cmp	r3, #0
 800ae0c:	d060      	beq.n	800aed0 <_dtoa_r+0x830>
 800ae0e:	9801      	ldr	r0, [sp, #4]
 800ae10:	4621      	mov	r1, r4
 800ae12:	f000 fd15 	bl	800b840 <__mcmp>
 800ae16:	2800      	cmp	r0, #0
 800ae18:	da5a      	bge.n	800aed0 <_dtoa_r+0x830>
 800ae1a:	f108 33ff 	add.w	r3, r8, #4294967295
 800ae1e:	9305      	str	r3, [sp, #20]
 800ae20:	9901      	ldr	r1, [sp, #4]
 800ae22:	2300      	movs	r3, #0
 800ae24:	220a      	movs	r2, #10
 800ae26:	4648      	mov	r0, r9
 800ae28:	f000 fafa 	bl	800b420 <__multadd>
 800ae2c:	9b08      	ldr	r3, [sp, #32]
 800ae2e:	9001      	str	r0, [sp, #4]
 800ae30:	2b00      	cmp	r3, #0
 800ae32:	f000 8177 	beq.w	800b124 <_dtoa_r+0xa84>
 800ae36:	4629      	mov	r1, r5
 800ae38:	2300      	movs	r3, #0
 800ae3a:	220a      	movs	r2, #10
 800ae3c:	4648      	mov	r0, r9
 800ae3e:	f000 faef 	bl	800b420 <__multadd>
 800ae42:	f1bb 0f00 	cmp.w	fp, #0
 800ae46:	4605      	mov	r5, r0
 800ae48:	dc6e      	bgt.n	800af28 <_dtoa_r+0x888>
 800ae4a:	9b07      	ldr	r3, [sp, #28]
 800ae4c:	2b02      	cmp	r3, #2
 800ae4e:	dc48      	bgt.n	800aee2 <_dtoa_r+0x842>
 800ae50:	e06a      	b.n	800af28 <_dtoa_r+0x888>
 800ae52:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800ae54:	f1c2 0236 	rsb	r2, r2, #54	@ 0x36
 800ae58:	e739      	b.n	800acce <_dtoa_r+0x62e>
 800ae5a:	f10a 34ff 	add.w	r4, sl, #4294967295
 800ae5e:	42a3      	cmp	r3, r4
 800ae60:	db07      	blt.n	800ae72 <_dtoa_r+0x7d2>
 800ae62:	f1ba 0f00 	cmp.w	sl, #0
 800ae66:	eba3 0404 	sub.w	r4, r3, r4
 800ae6a:	db0b      	blt.n	800ae84 <_dtoa_r+0x7e4>
 800ae6c:	9e04      	ldr	r6, [sp, #16]
 800ae6e:	4652      	mov	r2, sl
 800ae70:	e72f      	b.n	800acd2 <_dtoa_r+0x632>
 800ae72:	1ae2      	subs	r2, r4, r3
 800ae74:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800ae76:	9e04      	ldr	r6, [sp, #16]
 800ae78:	4413      	add	r3, r2
 800ae7a:	930a      	str	r3, [sp, #40]	@ 0x28
 800ae7c:	4652      	mov	r2, sl
 800ae7e:	4623      	mov	r3, r4
 800ae80:	2400      	movs	r4, #0
 800ae82:	e726      	b.n	800acd2 <_dtoa_r+0x632>
 800ae84:	9a04      	ldr	r2, [sp, #16]
 800ae86:	eba2 060a 	sub.w	r6, r2, sl
 800ae8a:	2200      	movs	r2, #0
 800ae8c:	e721      	b.n	800acd2 <_dtoa_r+0x632>
 800ae8e:	9e04      	ldr	r6, [sp, #16]
 800ae90:	9d08      	ldr	r5, [sp, #32]
 800ae92:	461c      	mov	r4, r3
 800ae94:	e72a      	b.n	800acec <_dtoa_r+0x64c>
 800ae96:	9a01      	ldr	r2, [sp, #4]
 800ae98:	9205      	str	r2, [sp, #20]
 800ae9a:	e752      	b.n	800ad42 <_dtoa_r+0x6a2>
 800ae9c:	9901      	ldr	r1, [sp, #4]
 800ae9e:	461a      	mov	r2, r3
 800aea0:	e751      	b.n	800ad46 <_dtoa_r+0x6a6>
 800aea2:	9b05      	ldr	r3, [sp, #20]
 800aea4:	9301      	str	r3, [sp, #4]
 800aea6:	e752      	b.n	800ad4e <_dtoa_r+0x6ae>
 800aea8:	2300      	movs	r3, #0
 800aeaa:	e77b      	b.n	800ada4 <_dtoa_r+0x704>
 800aeac:	9b02      	ldr	r3, [sp, #8]
 800aeae:	e779      	b.n	800ada4 <_dtoa_r+0x704>
 800aeb0:	920b      	str	r2, [sp, #44]	@ 0x2c
 800aeb2:	e778      	b.n	800ada6 <_dtoa_r+0x706>
 800aeb4:	2300      	movs	r3, #0
 800aeb6:	930b      	str	r3, [sp, #44]	@ 0x2c
 800aeb8:	e779      	b.n	800adae <_dtoa_r+0x70e>
 800aeba:	d093      	beq.n	800ade4 <_dtoa_r+0x744>
 800aebc:	9b04      	ldr	r3, [sp, #16]
 800aebe:	321c      	adds	r2, #28
 800aec0:	4413      	add	r3, r2
 800aec2:	9304      	str	r3, [sp, #16]
 800aec4:	9b06      	ldr	r3, [sp, #24]
 800aec6:	4416      	add	r6, r2
 800aec8:	4413      	add	r3, r2
 800aeca:	e78a      	b.n	800ade2 <_dtoa_r+0x742>
 800aecc:	4602      	mov	r2, r0
 800aece:	e7f5      	b.n	800aebc <_dtoa_r+0x81c>
 800aed0:	f1ba 0f00 	cmp.w	sl, #0
 800aed4:	f8cd 8014 	str.w	r8, [sp, #20]
 800aed8:	46d3      	mov	fp, sl
 800aeda:	dc21      	bgt.n	800af20 <_dtoa_r+0x880>
 800aedc:	9b07      	ldr	r3, [sp, #28]
 800aede:	2b02      	cmp	r3, #2
 800aee0:	dd1e      	ble.n	800af20 <_dtoa_r+0x880>
 800aee2:	f1bb 0f00 	cmp.w	fp, #0
 800aee6:	f47f addc 	bne.w	800aaa2 <_dtoa_r+0x402>
 800aeea:	4621      	mov	r1, r4
 800aeec:	465b      	mov	r3, fp
 800aeee:	2205      	movs	r2, #5
 800aef0:	4648      	mov	r0, r9
 800aef2:	f000 fa95 	bl	800b420 <__multadd>
 800aef6:	4601      	mov	r1, r0
 800aef8:	4604      	mov	r4, r0
 800aefa:	9801      	ldr	r0, [sp, #4]
 800aefc:	f000 fca0 	bl	800b840 <__mcmp>
 800af00:	2800      	cmp	r0, #0
 800af02:	f77f adce 	ble.w	800aaa2 <_dtoa_r+0x402>
 800af06:	463e      	mov	r6, r7
 800af08:	2331      	movs	r3, #49	@ 0x31
 800af0a:	f806 3b01 	strb.w	r3, [r6], #1
 800af0e:	9b05      	ldr	r3, [sp, #20]
 800af10:	3301      	adds	r3, #1
 800af12:	9305      	str	r3, [sp, #20]
 800af14:	e5c9      	b.n	800aaaa <_dtoa_r+0x40a>
 800af16:	f8cd 8014 	str.w	r8, [sp, #20]
 800af1a:	4654      	mov	r4, sl
 800af1c:	4625      	mov	r5, r4
 800af1e:	e7f2      	b.n	800af06 <_dtoa_r+0x866>
 800af20:	9b08      	ldr	r3, [sp, #32]
 800af22:	2b00      	cmp	r3, #0
 800af24:	f000 8102 	beq.w	800b12c <_dtoa_r+0xa8c>
 800af28:	2e00      	cmp	r6, #0
 800af2a:	dd05      	ble.n	800af38 <_dtoa_r+0x898>
 800af2c:	4629      	mov	r1, r5
 800af2e:	4632      	mov	r2, r6
 800af30:	4648      	mov	r0, r9
 800af32:	f000 fc19 	bl	800b768 <__lshift>
 800af36:	4605      	mov	r5, r0
 800af38:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800af3a:	2b00      	cmp	r3, #0
 800af3c:	d058      	beq.n	800aff0 <_dtoa_r+0x950>
 800af3e:	6869      	ldr	r1, [r5, #4]
 800af40:	4648      	mov	r0, r9
 800af42:	f000 fa0b 	bl	800b35c <_Balloc>
 800af46:	4606      	mov	r6, r0
 800af48:	b928      	cbnz	r0, 800af56 <_dtoa_r+0x8b6>
 800af4a:	4b82      	ldr	r3, [pc, #520]	@ (800b154 <_dtoa_r+0xab4>)
 800af4c:	4602      	mov	r2, r0
 800af4e:	f240 21ef 	movw	r1, #751	@ 0x2ef
 800af52:	f7ff bbbe 	b.w	800a6d2 <_dtoa_r+0x32>
 800af56:	692a      	ldr	r2, [r5, #16]
 800af58:	3202      	adds	r2, #2
 800af5a:	0092      	lsls	r2, r2, #2
 800af5c:	f105 010c 	add.w	r1, r5, #12
 800af60:	300c      	adds	r0, #12
 800af62:	f7ff fb06 	bl	800a572 <memcpy>
 800af66:	2201      	movs	r2, #1
 800af68:	4631      	mov	r1, r6
 800af6a:	4648      	mov	r0, r9
 800af6c:	f000 fbfc 	bl	800b768 <__lshift>
 800af70:	1c7b      	adds	r3, r7, #1
 800af72:	9304      	str	r3, [sp, #16]
 800af74:	eb07 030b 	add.w	r3, r7, fp
 800af78:	9309      	str	r3, [sp, #36]	@ 0x24
 800af7a:	9b02      	ldr	r3, [sp, #8]
 800af7c:	f003 0301 	and.w	r3, r3, #1
 800af80:	46a8      	mov	r8, r5
 800af82:	9308      	str	r3, [sp, #32]
 800af84:	4605      	mov	r5, r0
 800af86:	9b04      	ldr	r3, [sp, #16]
 800af88:	9801      	ldr	r0, [sp, #4]
 800af8a:	4621      	mov	r1, r4
 800af8c:	f103 3bff 	add.w	fp, r3, #4294967295
 800af90:	f7ff fafd 	bl	800a58e <quorem>
 800af94:	4641      	mov	r1, r8
 800af96:	9002      	str	r0, [sp, #8]
 800af98:	f100 0a30 	add.w	sl, r0, #48	@ 0x30
 800af9c:	9801      	ldr	r0, [sp, #4]
 800af9e:	f000 fc4f 	bl	800b840 <__mcmp>
 800afa2:	462a      	mov	r2, r5
 800afa4:	9006      	str	r0, [sp, #24]
 800afa6:	4621      	mov	r1, r4
 800afa8:	4648      	mov	r0, r9
 800afaa:	f000 fc65 	bl	800b878 <__mdiff>
 800afae:	68c2      	ldr	r2, [r0, #12]
 800afb0:	4606      	mov	r6, r0
 800afb2:	b9fa      	cbnz	r2, 800aff4 <_dtoa_r+0x954>
 800afb4:	4601      	mov	r1, r0
 800afb6:	9801      	ldr	r0, [sp, #4]
 800afb8:	f000 fc42 	bl	800b840 <__mcmp>
 800afbc:	4602      	mov	r2, r0
 800afbe:	4631      	mov	r1, r6
 800afc0:	4648      	mov	r0, r9
 800afc2:	920a      	str	r2, [sp, #40]	@ 0x28
 800afc4:	f000 fa0a 	bl	800b3dc <_Bfree>
 800afc8:	9b07      	ldr	r3, [sp, #28]
 800afca:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800afcc:	9e04      	ldr	r6, [sp, #16]
 800afce:	ea42 0103 	orr.w	r1, r2, r3
 800afd2:	9b08      	ldr	r3, [sp, #32]
 800afd4:	4319      	orrs	r1, r3
 800afd6:	d10f      	bne.n	800aff8 <_dtoa_r+0x958>
 800afd8:	f1ba 0f39 	cmp.w	sl, #57	@ 0x39
 800afdc:	d028      	beq.n	800b030 <_dtoa_r+0x990>
 800afde:	9b06      	ldr	r3, [sp, #24]
 800afe0:	2b00      	cmp	r3, #0
 800afe2:	dd02      	ble.n	800afea <_dtoa_r+0x94a>
 800afe4:	9b02      	ldr	r3, [sp, #8]
 800afe6:	f103 0a31 	add.w	sl, r3, #49	@ 0x31
 800afea:	f88b a000 	strb.w	sl, [fp]
 800afee:	e55e      	b.n	800aaae <_dtoa_r+0x40e>
 800aff0:	4628      	mov	r0, r5
 800aff2:	e7bd      	b.n	800af70 <_dtoa_r+0x8d0>
 800aff4:	2201      	movs	r2, #1
 800aff6:	e7e2      	b.n	800afbe <_dtoa_r+0x91e>
 800aff8:	9b06      	ldr	r3, [sp, #24]
 800affa:	2b00      	cmp	r3, #0
 800affc:	db04      	blt.n	800b008 <_dtoa_r+0x968>
 800affe:	9907      	ldr	r1, [sp, #28]
 800b000:	430b      	orrs	r3, r1
 800b002:	9908      	ldr	r1, [sp, #32]
 800b004:	430b      	orrs	r3, r1
 800b006:	d120      	bne.n	800b04a <_dtoa_r+0x9aa>
 800b008:	2a00      	cmp	r2, #0
 800b00a:	ddee      	ble.n	800afea <_dtoa_r+0x94a>
 800b00c:	9901      	ldr	r1, [sp, #4]
 800b00e:	2201      	movs	r2, #1
 800b010:	4648      	mov	r0, r9
 800b012:	f000 fba9 	bl	800b768 <__lshift>
 800b016:	4621      	mov	r1, r4
 800b018:	9001      	str	r0, [sp, #4]
 800b01a:	f000 fc11 	bl	800b840 <__mcmp>
 800b01e:	2800      	cmp	r0, #0
 800b020:	dc03      	bgt.n	800b02a <_dtoa_r+0x98a>
 800b022:	d1e2      	bne.n	800afea <_dtoa_r+0x94a>
 800b024:	f01a 0f01 	tst.w	sl, #1
 800b028:	d0df      	beq.n	800afea <_dtoa_r+0x94a>
 800b02a:	f1ba 0f39 	cmp.w	sl, #57	@ 0x39
 800b02e:	d1d9      	bne.n	800afe4 <_dtoa_r+0x944>
 800b030:	2339      	movs	r3, #57	@ 0x39
 800b032:	f88b 3000 	strb.w	r3, [fp]
 800b036:	4633      	mov	r3, r6
 800b038:	461e      	mov	r6, r3
 800b03a:	3b01      	subs	r3, #1
 800b03c:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 800b040:	2a39      	cmp	r2, #57	@ 0x39
 800b042:	d052      	beq.n	800b0ea <_dtoa_r+0xa4a>
 800b044:	3201      	adds	r2, #1
 800b046:	701a      	strb	r2, [r3, #0]
 800b048:	e531      	b.n	800aaae <_dtoa_r+0x40e>
 800b04a:	2a00      	cmp	r2, #0
 800b04c:	dd07      	ble.n	800b05e <_dtoa_r+0x9be>
 800b04e:	f1ba 0f39 	cmp.w	sl, #57	@ 0x39
 800b052:	d0ed      	beq.n	800b030 <_dtoa_r+0x990>
 800b054:	f10a 0301 	add.w	r3, sl, #1
 800b058:	f88b 3000 	strb.w	r3, [fp]
 800b05c:	e527      	b.n	800aaae <_dtoa_r+0x40e>
 800b05e:	9b04      	ldr	r3, [sp, #16]
 800b060:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800b062:	f803 ac01 	strb.w	sl, [r3, #-1]
 800b066:	4293      	cmp	r3, r2
 800b068:	d029      	beq.n	800b0be <_dtoa_r+0xa1e>
 800b06a:	9901      	ldr	r1, [sp, #4]
 800b06c:	2300      	movs	r3, #0
 800b06e:	220a      	movs	r2, #10
 800b070:	4648      	mov	r0, r9
 800b072:	f000 f9d5 	bl	800b420 <__multadd>
 800b076:	45a8      	cmp	r8, r5
 800b078:	9001      	str	r0, [sp, #4]
 800b07a:	f04f 0300 	mov.w	r3, #0
 800b07e:	f04f 020a 	mov.w	r2, #10
 800b082:	4641      	mov	r1, r8
 800b084:	4648      	mov	r0, r9
 800b086:	d107      	bne.n	800b098 <_dtoa_r+0x9f8>
 800b088:	f000 f9ca 	bl	800b420 <__multadd>
 800b08c:	4680      	mov	r8, r0
 800b08e:	4605      	mov	r5, r0
 800b090:	9b04      	ldr	r3, [sp, #16]
 800b092:	3301      	adds	r3, #1
 800b094:	9304      	str	r3, [sp, #16]
 800b096:	e776      	b.n	800af86 <_dtoa_r+0x8e6>
 800b098:	f000 f9c2 	bl	800b420 <__multadd>
 800b09c:	4629      	mov	r1, r5
 800b09e:	4680      	mov	r8, r0
 800b0a0:	2300      	movs	r3, #0
 800b0a2:	220a      	movs	r2, #10
 800b0a4:	4648      	mov	r0, r9
 800b0a6:	f000 f9bb 	bl	800b420 <__multadd>
 800b0aa:	4605      	mov	r5, r0
 800b0ac:	e7f0      	b.n	800b090 <_dtoa_r+0x9f0>
 800b0ae:	f1bb 0f00 	cmp.w	fp, #0
 800b0b2:	bfcc      	ite	gt
 800b0b4:	465e      	movgt	r6, fp
 800b0b6:	2601      	movle	r6, #1
 800b0b8:	443e      	add	r6, r7
 800b0ba:	f04f 0800 	mov.w	r8, #0
 800b0be:	9901      	ldr	r1, [sp, #4]
 800b0c0:	2201      	movs	r2, #1
 800b0c2:	4648      	mov	r0, r9
 800b0c4:	f000 fb50 	bl	800b768 <__lshift>
 800b0c8:	4621      	mov	r1, r4
 800b0ca:	9001      	str	r0, [sp, #4]
 800b0cc:	f000 fbb8 	bl	800b840 <__mcmp>
 800b0d0:	2800      	cmp	r0, #0
 800b0d2:	dcb0      	bgt.n	800b036 <_dtoa_r+0x996>
 800b0d4:	d102      	bne.n	800b0dc <_dtoa_r+0xa3c>
 800b0d6:	f01a 0f01 	tst.w	sl, #1
 800b0da:	d1ac      	bne.n	800b036 <_dtoa_r+0x996>
 800b0dc:	4633      	mov	r3, r6
 800b0de:	461e      	mov	r6, r3
 800b0e0:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800b0e4:	2a30      	cmp	r2, #48	@ 0x30
 800b0e6:	d0fa      	beq.n	800b0de <_dtoa_r+0xa3e>
 800b0e8:	e4e1      	b.n	800aaae <_dtoa_r+0x40e>
 800b0ea:	429f      	cmp	r7, r3
 800b0ec:	d1a4      	bne.n	800b038 <_dtoa_r+0x998>
 800b0ee:	9b05      	ldr	r3, [sp, #20]
 800b0f0:	3301      	adds	r3, #1
 800b0f2:	9305      	str	r3, [sp, #20]
 800b0f4:	2331      	movs	r3, #49	@ 0x31
 800b0f6:	703b      	strb	r3, [r7, #0]
 800b0f8:	e4d9      	b.n	800aaae <_dtoa_r+0x40e>
 800b0fa:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 800b0fc:	4f16      	ldr	r7, [pc, #88]	@ (800b158 <_dtoa_r+0xab8>)
 800b0fe:	b11b      	cbz	r3, 800b108 <_dtoa_r+0xa68>
 800b100:	f107 0308 	add.w	r3, r7, #8
 800b104:	9a1d      	ldr	r2, [sp, #116]	@ 0x74
 800b106:	6013      	str	r3, [r2, #0]
 800b108:	4638      	mov	r0, r7
 800b10a:	b011      	add	sp, #68	@ 0x44
 800b10c:	ecbd 8b02 	vpop	{d8}
 800b110:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b114:	9b07      	ldr	r3, [sp, #28]
 800b116:	2b01      	cmp	r3, #1
 800b118:	f77f ae2c 	ble.w	800ad74 <_dtoa_r+0x6d4>
 800b11c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800b11e:	930b      	str	r3, [sp, #44]	@ 0x2c
 800b120:	2001      	movs	r0, #1
 800b122:	e64c      	b.n	800adbe <_dtoa_r+0x71e>
 800b124:	f1bb 0f00 	cmp.w	fp, #0
 800b128:	f77f aed8 	ble.w	800aedc <_dtoa_r+0x83c>
 800b12c:	463e      	mov	r6, r7
 800b12e:	9801      	ldr	r0, [sp, #4]
 800b130:	4621      	mov	r1, r4
 800b132:	f7ff fa2c 	bl	800a58e <quorem>
 800b136:	f100 0a30 	add.w	sl, r0, #48	@ 0x30
 800b13a:	f806 ab01 	strb.w	sl, [r6], #1
 800b13e:	1bf2      	subs	r2, r6, r7
 800b140:	4593      	cmp	fp, r2
 800b142:	ddb4      	ble.n	800b0ae <_dtoa_r+0xa0e>
 800b144:	9901      	ldr	r1, [sp, #4]
 800b146:	2300      	movs	r3, #0
 800b148:	220a      	movs	r2, #10
 800b14a:	4648      	mov	r0, r9
 800b14c:	f000 f968 	bl	800b420 <__multadd>
 800b150:	9001      	str	r0, [sp, #4]
 800b152:	e7ec      	b.n	800b12e <_dtoa_r+0xa8e>
 800b154:	0800c2d0 	.word	0x0800c2d0
 800b158:	0800c254 	.word	0x0800c254

0800b15c <_free_r>:
 800b15c:	b538      	push	{r3, r4, r5, lr}
 800b15e:	4605      	mov	r5, r0
 800b160:	2900      	cmp	r1, #0
 800b162:	d041      	beq.n	800b1e8 <_free_r+0x8c>
 800b164:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800b168:	1f0c      	subs	r4, r1, #4
 800b16a:	2b00      	cmp	r3, #0
 800b16c:	bfb8      	it	lt
 800b16e:	18e4      	addlt	r4, r4, r3
 800b170:	f000 f8e8 	bl	800b344 <__malloc_lock>
 800b174:	4a1d      	ldr	r2, [pc, #116]	@ (800b1ec <_free_r+0x90>)
 800b176:	6813      	ldr	r3, [r2, #0]
 800b178:	b933      	cbnz	r3, 800b188 <_free_r+0x2c>
 800b17a:	6063      	str	r3, [r4, #4]
 800b17c:	6014      	str	r4, [r2, #0]
 800b17e:	4628      	mov	r0, r5
 800b180:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800b184:	f000 b8e4 	b.w	800b350 <__malloc_unlock>
 800b188:	42a3      	cmp	r3, r4
 800b18a:	d908      	bls.n	800b19e <_free_r+0x42>
 800b18c:	6820      	ldr	r0, [r4, #0]
 800b18e:	1821      	adds	r1, r4, r0
 800b190:	428b      	cmp	r3, r1
 800b192:	bf01      	itttt	eq
 800b194:	6819      	ldreq	r1, [r3, #0]
 800b196:	685b      	ldreq	r3, [r3, #4]
 800b198:	1809      	addeq	r1, r1, r0
 800b19a:	6021      	streq	r1, [r4, #0]
 800b19c:	e7ed      	b.n	800b17a <_free_r+0x1e>
 800b19e:	461a      	mov	r2, r3
 800b1a0:	685b      	ldr	r3, [r3, #4]
 800b1a2:	b10b      	cbz	r3, 800b1a8 <_free_r+0x4c>
 800b1a4:	42a3      	cmp	r3, r4
 800b1a6:	d9fa      	bls.n	800b19e <_free_r+0x42>
 800b1a8:	6811      	ldr	r1, [r2, #0]
 800b1aa:	1850      	adds	r0, r2, r1
 800b1ac:	42a0      	cmp	r0, r4
 800b1ae:	d10b      	bne.n	800b1c8 <_free_r+0x6c>
 800b1b0:	6820      	ldr	r0, [r4, #0]
 800b1b2:	4401      	add	r1, r0
 800b1b4:	1850      	adds	r0, r2, r1
 800b1b6:	4283      	cmp	r3, r0
 800b1b8:	6011      	str	r1, [r2, #0]
 800b1ba:	d1e0      	bne.n	800b17e <_free_r+0x22>
 800b1bc:	6818      	ldr	r0, [r3, #0]
 800b1be:	685b      	ldr	r3, [r3, #4]
 800b1c0:	6053      	str	r3, [r2, #4]
 800b1c2:	4408      	add	r0, r1
 800b1c4:	6010      	str	r0, [r2, #0]
 800b1c6:	e7da      	b.n	800b17e <_free_r+0x22>
 800b1c8:	d902      	bls.n	800b1d0 <_free_r+0x74>
 800b1ca:	230c      	movs	r3, #12
 800b1cc:	602b      	str	r3, [r5, #0]
 800b1ce:	e7d6      	b.n	800b17e <_free_r+0x22>
 800b1d0:	6820      	ldr	r0, [r4, #0]
 800b1d2:	1821      	adds	r1, r4, r0
 800b1d4:	428b      	cmp	r3, r1
 800b1d6:	bf04      	itt	eq
 800b1d8:	6819      	ldreq	r1, [r3, #0]
 800b1da:	685b      	ldreq	r3, [r3, #4]
 800b1dc:	6063      	str	r3, [r4, #4]
 800b1de:	bf04      	itt	eq
 800b1e0:	1809      	addeq	r1, r1, r0
 800b1e2:	6021      	streq	r1, [r4, #0]
 800b1e4:	6054      	str	r4, [r2, #4]
 800b1e6:	e7ca      	b.n	800b17e <_free_r+0x22>
 800b1e8:	bd38      	pop	{r3, r4, r5, pc}
 800b1ea:	bf00      	nop
 800b1ec:	240006e8 	.word	0x240006e8

0800b1f0 <malloc>:
 800b1f0:	4b02      	ldr	r3, [pc, #8]	@ (800b1fc <malloc+0xc>)
 800b1f2:	4601      	mov	r1, r0
 800b1f4:	6818      	ldr	r0, [r3, #0]
 800b1f6:	f000 b825 	b.w	800b244 <_malloc_r>
 800b1fa:	bf00      	nop
 800b1fc:	2400001c 	.word	0x2400001c

0800b200 <sbrk_aligned>:
 800b200:	b570      	push	{r4, r5, r6, lr}
 800b202:	4e0f      	ldr	r6, [pc, #60]	@ (800b240 <sbrk_aligned+0x40>)
 800b204:	460c      	mov	r4, r1
 800b206:	6831      	ldr	r1, [r6, #0]
 800b208:	4605      	mov	r5, r0
 800b20a:	b911      	cbnz	r1, 800b212 <sbrk_aligned+0x12>
 800b20c:	f000 fe92 	bl	800bf34 <_sbrk_r>
 800b210:	6030      	str	r0, [r6, #0]
 800b212:	4621      	mov	r1, r4
 800b214:	4628      	mov	r0, r5
 800b216:	f000 fe8d 	bl	800bf34 <_sbrk_r>
 800b21a:	1c43      	adds	r3, r0, #1
 800b21c:	d103      	bne.n	800b226 <sbrk_aligned+0x26>
 800b21e:	f04f 34ff 	mov.w	r4, #4294967295
 800b222:	4620      	mov	r0, r4
 800b224:	bd70      	pop	{r4, r5, r6, pc}
 800b226:	1cc4      	adds	r4, r0, #3
 800b228:	f024 0403 	bic.w	r4, r4, #3
 800b22c:	42a0      	cmp	r0, r4
 800b22e:	d0f8      	beq.n	800b222 <sbrk_aligned+0x22>
 800b230:	1a21      	subs	r1, r4, r0
 800b232:	4628      	mov	r0, r5
 800b234:	f000 fe7e 	bl	800bf34 <_sbrk_r>
 800b238:	3001      	adds	r0, #1
 800b23a:	d1f2      	bne.n	800b222 <sbrk_aligned+0x22>
 800b23c:	e7ef      	b.n	800b21e <sbrk_aligned+0x1e>
 800b23e:	bf00      	nop
 800b240:	240006e4 	.word	0x240006e4

0800b244 <_malloc_r>:
 800b244:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b248:	1ccd      	adds	r5, r1, #3
 800b24a:	f025 0503 	bic.w	r5, r5, #3
 800b24e:	3508      	adds	r5, #8
 800b250:	2d0c      	cmp	r5, #12
 800b252:	bf38      	it	cc
 800b254:	250c      	movcc	r5, #12
 800b256:	2d00      	cmp	r5, #0
 800b258:	4606      	mov	r6, r0
 800b25a:	db01      	blt.n	800b260 <_malloc_r+0x1c>
 800b25c:	42a9      	cmp	r1, r5
 800b25e:	d904      	bls.n	800b26a <_malloc_r+0x26>
 800b260:	230c      	movs	r3, #12
 800b262:	6033      	str	r3, [r6, #0]
 800b264:	2000      	movs	r0, #0
 800b266:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b26a:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800b340 <_malloc_r+0xfc>
 800b26e:	f000 f869 	bl	800b344 <__malloc_lock>
 800b272:	f8d8 3000 	ldr.w	r3, [r8]
 800b276:	461c      	mov	r4, r3
 800b278:	bb44      	cbnz	r4, 800b2cc <_malloc_r+0x88>
 800b27a:	4629      	mov	r1, r5
 800b27c:	4630      	mov	r0, r6
 800b27e:	f7ff ffbf 	bl	800b200 <sbrk_aligned>
 800b282:	1c43      	adds	r3, r0, #1
 800b284:	4604      	mov	r4, r0
 800b286:	d158      	bne.n	800b33a <_malloc_r+0xf6>
 800b288:	f8d8 4000 	ldr.w	r4, [r8]
 800b28c:	4627      	mov	r7, r4
 800b28e:	2f00      	cmp	r7, #0
 800b290:	d143      	bne.n	800b31a <_malloc_r+0xd6>
 800b292:	2c00      	cmp	r4, #0
 800b294:	d04b      	beq.n	800b32e <_malloc_r+0xea>
 800b296:	6823      	ldr	r3, [r4, #0]
 800b298:	4639      	mov	r1, r7
 800b29a:	4630      	mov	r0, r6
 800b29c:	eb04 0903 	add.w	r9, r4, r3
 800b2a0:	f000 fe48 	bl	800bf34 <_sbrk_r>
 800b2a4:	4581      	cmp	r9, r0
 800b2a6:	d142      	bne.n	800b32e <_malloc_r+0xea>
 800b2a8:	6821      	ldr	r1, [r4, #0]
 800b2aa:	1a6d      	subs	r5, r5, r1
 800b2ac:	4629      	mov	r1, r5
 800b2ae:	4630      	mov	r0, r6
 800b2b0:	f7ff ffa6 	bl	800b200 <sbrk_aligned>
 800b2b4:	3001      	adds	r0, #1
 800b2b6:	d03a      	beq.n	800b32e <_malloc_r+0xea>
 800b2b8:	6823      	ldr	r3, [r4, #0]
 800b2ba:	442b      	add	r3, r5
 800b2bc:	6023      	str	r3, [r4, #0]
 800b2be:	f8d8 3000 	ldr.w	r3, [r8]
 800b2c2:	685a      	ldr	r2, [r3, #4]
 800b2c4:	bb62      	cbnz	r2, 800b320 <_malloc_r+0xdc>
 800b2c6:	f8c8 7000 	str.w	r7, [r8]
 800b2ca:	e00f      	b.n	800b2ec <_malloc_r+0xa8>
 800b2cc:	6822      	ldr	r2, [r4, #0]
 800b2ce:	1b52      	subs	r2, r2, r5
 800b2d0:	d420      	bmi.n	800b314 <_malloc_r+0xd0>
 800b2d2:	2a0b      	cmp	r2, #11
 800b2d4:	d917      	bls.n	800b306 <_malloc_r+0xc2>
 800b2d6:	1961      	adds	r1, r4, r5
 800b2d8:	42a3      	cmp	r3, r4
 800b2da:	6025      	str	r5, [r4, #0]
 800b2dc:	bf18      	it	ne
 800b2de:	6059      	strne	r1, [r3, #4]
 800b2e0:	6863      	ldr	r3, [r4, #4]
 800b2e2:	bf08      	it	eq
 800b2e4:	f8c8 1000 	streq.w	r1, [r8]
 800b2e8:	5162      	str	r2, [r4, r5]
 800b2ea:	604b      	str	r3, [r1, #4]
 800b2ec:	4630      	mov	r0, r6
 800b2ee:	f000 f82f 	bl	800b350 <__malloc_unlock>
 800b2f2:	f104 000b 	add.w	r0, r4, #11
 800b2f6:	1d23      	adds	r3, r4, #4
 800b2f8:	f020 0007 	bic.w	r0, r0, #7
 800b2fc:	1ac2      	subs	r2, r0, r3
 800b2fe:	bf1c      	itt	ne
 800b300:	1a1b      	subne	r3, r3, r0
 800b302:	50a3      	strne	r3, [r4, r2]
 800b304:	e7af      	b.n	800b266 <_malloc_r+0x22>
 800b306:	6862      	ldr	r2, [r4, #4]
 800b308:	42a3      	cmp	r3, r4
 800b30a:	bf0c      	ite	eq
 800b30c:	f8c8 2000 	streq.w	r2, [r8]
 800b310:	605a      	strne	r2, [r3, #4]
 800b312:	e7eb      	b.n	800b2ec <_malloc_r+0xa8>
 800b314:	4623      	mov	r3, r4
 800b316:	6864      	ldr	r4, [r4, #4]
 800b318:	e7ae      	b.n	800b278 <_malloc_r+0x34>
 800b31a:	463c      	mov	r4, r7
 800b31c:	687f      	ldr	r7, [r7, #4]
 800b31e:	e7b6      	b.n	800b28e <_malloc_r+0x4a>
 800b320:	461a      	mov	r2, r3
 800b322:	685b      	ldr	r3, [r3, #4]
 800b324:	42a3      	cmp	r3, r4
 800b326:	d1fb      	bne.n	800b320 <_malloc_r+0xdc>
 800b328:	2300      	movs	r3, #0
 800b32a:	6053      	str	r3, [r2, #4]
 800b32c:	e7de      	b.n	800b2ec <_malloc_r+0xa8>
 800b32e:	230c      	movs	r3, #12
 800b330:	6033      	str	r3, [r6, #0]
 800b332:	4630      	mov	r0, r6
 800b334:	f000 f80c 	bl	800b350 <__malloc_unlock>
 800b338:	e794      	b.n	800b264 <_malloc_r+0x20>
 800b33a:	6005      	str	r5, [r0, #0]
 800b33c:	e7d6      	b.n	800b2ec <_malloc_r+0xa8>
 800b33e:	bf00      	nop
 800b340:	240006e8 	.word	0x240006e8

0800b344 <__malloc_lock>:
 800b344:	4801      	ldr	r0, [pc, #4]	@ (800b34c <__malloc_lock+0x8>)
 800b346:	f7ff b912 	b.w	800a56e <__retarget_lock_acquire_recursive>
 800b34a:	bf00      	nop
 800b34c:	240006e0 	.word	0x240006e0

0800b350 <__malloc_unlock>:
 800b350:	4801      	ldr	r0, [pc, #4]	@ (800b358 <__malloc_unlock+0x8>)
 800b352:	f7ff b90d 	b.w	800a570 <__retarget_lock_release_recursive>
 800b356:	bf00      	nop
 800b358:	240006e0 	.word	0x240006e0

0800b35c <_Balloc>:
 800b35c:	b570      	push	{r4, r5, r6, lr}
 800b35e:	69c6      	ldr	r6, [r0, #28]
 800b360:	4604      	mov	r4, r0
 800b362:	460d      	mov	r5, r1
 800b364:	b976      	cbnz	r6, 800b384 <_Balloc+0x28>
 800b366:	2010      	movs	r0, #16
 800b368:	f7ff ff42 	bl	800b1f0 <malloc>
 800b36c:	4602      	mov	r2, r0
 800b36e:	61e0      	str	r0, [r4, #28]
 800b370:	b920      	cbnz	r0, 800b37c <_Balloc+0x20>
 800b372:	4b18      	ldr	r3, [pc, #96]	@ (800b3d4 <_Balloc+0x78>)
 800b374:	4818      	ldr	r0, [pc, #96]	@ (800b3d8 <_Balloc+0x7c>)
 800b376:	216b      	movs	r1, #107	@ 0x6b
 800b378:	f000 fdec 	bl	800bf54 <__assert_func>
 800b37c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800b380:	6006      	str	r6, [r0, #0]
 800b382:	60c6      	str	r6, [r0, #12]
 800b384:	69e6      	ldr	r6, [r4, #28]
 800b386:	68f3      	ldr	r3, [r6, #12]
 800b388:	b183      	cbz	r3, 800b3ac <_Balloc+0x50>
 800b38a:	69e3      	ldr	r3, [r4, #28]
 800b38c:	68db      	ldr	r3, [r3, #12]
 800b38e:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800b392:	b9b8      	cbnz	r0, 800b3c4 <_Balloc+0x68>
 800b394:	2101      	movs	r1, #1
 800b396:	fa01 f605 	lsl.w	r6, r1, r5
 800b39a:	1d72      	adds	r2, r6, #5
 800b39c:	0092      	lsls	r2, r2, #2
 800b39e:	4620      	mov	r0, r4
 800b3a0:	f000 fdf6 	bl	800bf90 <_calloc_r>
 800b3a4:	b160      	cbz	r0, 800b3c0 <_Balloc+0x64>
 800b3a6:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800b3aa:	e00e      	b.n	800b3ca <_Balloc+0x6e>
 800b3ac:	2221      	movs	r2, #33	@ 0x21
 800b3ae:	2104      	movs	r1, #4
 800b3b0:	4620      	mov	r0, r4
 800b3b2:	f000 fded 	bl	800bf90 <_calloc_r>
 800b3b6:	69e3      	ldr	r3, [r4, #28]
 800b3b8:	60f0      	str	r0, [r6, #12]
 800b3ba:	68db      	ldr	r3, [r3, #12]
 800b3bc:	2b00      	cmp	r3, #0
 800b3be:	d1e4      	bne.n	800b38a <_Balloc+0x2e>
 800b3c0:	2000      	movs	r0, #0
 800b3c2:	bd70      	pop	{r4, r5, r6, pc}
 800b3c4:	6802      	ldr	r2, [r0, #0]
 800b3c6:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800b3ca:	2300      	movs	r3, #0
 800b3cc:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800b3d0:	e7f7      	b.n	800b3c2 <_Balloc+0x66>
 800b3d2:	bf00      	nop
 800b3d4:	0800c261 	.word	0x0800c261
 800b3d8:	0800c2e1 	.word	0x0800c2e1

0800b3dc <_Bfree>:
 800b3dc:	b570      	push	{r4, r5, r6, lr}
 800b3de:	69c6      	ldr	r6, [r0, #28]
 800b3e0:	4605      	mov	r5, r0
 800b3e2:	460c      	mov	r4, r1
 800b3e4:	b976      	cbnz	r6, 800b404 <_Bfree+0x28>
 800b3e6:	2010      	movs	r0, #16
 800b3e8:	f7ff ff02 	bl	800b1f0 <malloc>
 800b3ec:	4602      	mov	r2, r0
 800b3ee:	61e8      	str	r0, [r5, #28]
 800b3f0:	b920      	cbnz	r0, 800b3fc <_Bfree+0x20>
 800b3f2:	4b09      	ldr	r3, [pc, #36]	@ (800b418 <_Bfree+0x3c>)
 800b3f4:	4809      	ldr	r0, [pc, #36]	@ (800b41c <_Bfree+0x40>)
 800b3f6:	218f      	movs	r1, #143	@ 0x8f
 800b3f8:	f000 fdac 	bl	800bf54 <__assert_func>
 800b3fc:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800b400:	6006      	str	r6, [r0, #0]
 800b402:	60c6      	str	r6, [r0, #12]
 800b404:	b13c      	cbz	r4, 800b416 <_Bfree+0x3a>
 800b406:	69eb      	ldr	r3, [r5, #28]
 800b408:	6862      	ldr	r2, [r4, #4]
 800b40a:	68db      	ldr	r3, [r3, #12]
 800b40c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800b410:	6021      	str	r1, [r4, #0]
 800b412:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800b416:	bd70      	pop	{r4, r5, r6, pc}
 800b418:	0800c261 	.word	0x0800c261
 800b41c:	0800c2e1 	.word	0x0800c2e1

0800b420 <__multadd>:
 800b420:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b424:	690d      	ldr	r5, [r1, #16]
 800b426:	4607      	mov	r7, r0
 800b428:	460c      	mov	r4, r1
 800b42a:	461e      	mov	r6, r3
 800b42c:	f101 0c14 	add.w	ip, r1, #20
 800b430:	2000      	movs	r0, #0
 800b432:	f8dc 3000 	ldr.w	r3, [ip]
 800b436:	b299      	uxth	r1, r3
 800b438:	fb02 6101 	mla	r1, r2, r1, r6
 800b43c:	0c1e      	lsrs	r6, r3, #16
 800b43e:	0c0b      	lsrs	r3, r1, #16
 800b440:	fb02 3306 	mla	r3, r2, r6, r3
 800b444:	b289      	uxth	r1, r1
 800b446:	3001      	adds	r0, #1
 800b448:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800b44c:	4285      	cmp	r5, r0
 800b44e:	f84c 1b04 	str.w	r1, [ip], #4
 800b452:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800b456:	dcec      	bgt.n	800b432 <__multadd+0x12>
 800b458:	b30e      	cbz	r6, 800b49e <__multadd+0x7e>
 800b45a:	68a3      	ldr	r3, [r4, #8]
 800b45c:	42ab      	cmp	r3, r5
 800b45e:	dc19      	bgt.n	800b494 <__multadd+0x74>
 800b460:	6861      	ldr	r1, [r4, #4]
 800b462:	4638      	mov	r0, r7
 800b464:	3101      	adds	r1, #1
 800b466:	f7ff ff79 	bl	800b35c <_Balloc>
 800b46a:	4680      	mov	r8, r0
 800b46c:	b928      	cbnz	r0, 800b47a <__multadd+0x5a>
 800b46e:	4602      	mov	r2, r0
 800b470:	4b0c      	ldr	r3, [pc, #48]	@ (800b4a4 <__multadd+0x84>)
 800b472:	480d      	ldr	r0, [pc, #52]	@ (800b4a8 <__multadd+0x88>)
 800b474:	21ba      	movs	r1, #186	@ 0xba
 800b476:	f000 fd6d 	bl	800bf54 <__assert_func>
 800b47a:	6922      	ldr	r2, [r4, #16]
 800b47c:	3202      	adds	r2, #2
 800b47e:	f104 010c 	add.w	r1, r4, #12
 800b482:	0092      	lsls	r2, r2, #2
 800b484:	300c      	adds	r0, #12
 800b486:	f7ff f874 	bl	800a572 <memcpy>
 800b48a:	4621      	mov	r1, r4
 800b48c:	4638      	mov	r0, r7
 800b48e:	f7ff ffa5 	bl	800b3dc <_Bfree>
 800b492:	4644      	mov	r4, r8
 800b494:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800b498:	3501      	adds	r5, #1
 800b49a:	615e      	str	r6, [r3, #20]
 800b49c:	6125      	str	r5, [r4, #16]
 800b49e:	4620      	mov	r0, r4
 800b4a0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b4a4:	0800c2d0 	.word	0x0800c2d0
 800b4a8:	0800c2e1 	.word	0x0800c2e1

0800b4ac <__hi0bits>:
 800b4ac:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 800b4b0:	4603      	mov	r3, r0
 800b4b2:	bf36      	itet	cc
 800b4b4:	0403      	lslcc	r3, r0, #16
 800b4b6:	2000      	movcs	r0, #0
 800b4b8:	2010      	movcc	r0, #16
 800b4ba:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800b4be:	bf3c      	itt	cc
 800b4c0:	021b      	lslcc	r3, r3, #8
 800b4c2:	3008      	addcc	r0, #8
 800b4c4:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800b4c8:	bf3c      	itt	cc
 800b4ca:	011b      	lslcc	r3, r3, #4
 800b4cc:	3004      	addcc	r0, #4
 800b4ce:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800b4d2:	bf3c      	itt	cc
 800b4d4:	009b      	lslcc	r3, r3, #2
 800b4d6:	3002      	addcc	r0, #2
 800b4d8:	2b00      	cmp	r3, #0
 800b4da:	db05      	blt.n	800b4e8 <__hi0bits+0x3c>
 800b4dc:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 800b4e0:	f100 0001 	add.w	r0, r0, #1
 800b4e4:	bf08      	it	eq
 800b4e6:	2020      	moveq	r0, #32
 800b4e8:	4770      	bx	lr

0800b4ea <__lo0bits>:
 800b4ea:	6803      	ldr	r3, [r0, #0]
 800b4ec:	4602      	mov	r2, r0
 800b4ee:	f013 0007 	ands.w	r0, r3, #7
 800b4f2:	d00b      	beq.n	800b50c <__lo0bits+0x22>
 800b4f4:	07d9      	lsls	r1, r3, #31
 800b4f6:	d421      	bmi.n	800b53c <__lo0bits+0x52>
 800b4f8:	0798      	lsls	r0, r3, #30
 800b4fa:	bf49      	itett	mi
 800b4fc:	085b      	lsrmi	r3, r3, #1
 800b4fe:	089b      	lsrpl	r3, r3, #2
 800b500:	2001      	movmi	r0, #1
 800b502:	6013      	strmi	r3, [r2, #0]
 800b504:	bf5c      	itt	pl
 800b506:	6013      	strpl	r3, [r2, #0]
 800b508:	2002      	movpl	r0, #2
 800b50a:	4770      	bx	lr
 800b50c:	b299      	uxth	r1, r3
 800b50e:	b909      	cbnz	r1, 800b514 <__lo0bits+0x2a>
 800b510:	0c1b      	lsrs	r3, r3, #16
 800b512:	2010      	movs	r0, #16
 800b514:	b2d9      	uxtb	r1, r3
 800b516:	b909      	cbnz	r1, 800b51c <__lo0bits+0x32>
 800b518:	3008      	adds	r0, #8
 800b51a:	0a1b      	lsrs	r3, r3, #8
 800b51c:	0719      	lsls	r1, r3, #28
 800b51e:	bf04      	itt	eq
 800b520:	091b      	lsreq	r3, r3, #4
 800b522:	3004      	addeq	r0, #4
 800b524:	0799      	lsls	r1, r3, #30
 800b526:	bf04      	itt	eq
 800b528:	089b      	lsreq	r3, r3, #2
 800b52a:	3002      	addeq	r0, #2
 800b52c:	07d9      	lsls	r1, r3, #31
 800b52e:	d403      	bmi.n	800b538 <__lo0bits+0x4e>
 800b530:	085b      	lsrs	r3, r3, #1
 800b532:	f100 0001 	add.w	r0, r0, #1
 800b536:	d003      	beq.n	800b540 <__lo0bits+0x56>
 800b538:	6013      	str	r3, [r2, #0]
 800b53a:	4770      	bx	lr
 800b53c:	2000      	movs	r0, #0
 800b53e:	4770      	bx	lr
 800b540:	2020      	movs	r0, #32
 800b542:	4770      	bx	lr

0800b544 <__i2b>:
 800b544:	b510      	push	{r4, lr}
 800b546:	460c      	mov	r4, r1
 800b548:	2101      	movs	r1, #1
 800b54a:	f7ff ff07 	bl	800b35c <_Balloc>
 800b54e:	4602      	mov	r2, r0
 800b550:	b928      	cbnz	r0, 800b55e <__i2b+0x1a>
 800b552:	4b05      	ldr	r3, [pc, #20]	@ (800b568 <__i2b+0x24>)
 800b554:	4805      	ldr	r0, [pc, #20]	@ (800b56c <__i2b+0x28>)
 800b556:	f240 1145 	movw	r1, #325	@ 0x145
 800b55a:	f000 fcfb 	bl	800bf54 <__assert_func>
 800b55e:	2301      	movs	r3, #1
 800b560:	6144      	str	r4, [r0, #20]
 800b562:	6103      	str	r3, [r0, #16]
 800b564:	bd10      	pop	{r4, pc}
 800b566:	bf00      	nop
 800b568:	0800c2d0 	.word	0x0800c2d0
 800b56c:	0800c2e1 	.word	0x0800c2e1

0800b570 <__multiply>:
 800b570:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b574:	4617      	mov	r7, r2
 800b576:	690a      	ldr	r2, [r1, #16]
 800b578:	693b      	ldr	r3, [r7, #16]
 800b57a:	429a      	cmp	r2, r3
 800b57c:	bfa8      	it	ge
 800b57e:	463b      	movge	r3, r7
 800b580:	4689      	mov	r9, r1
 800b582:	bfa4      	itt	ge
 800b584:	460f      	movge	r7, r1
 800b586:	4699      	movge	r9, r3
 800b588:	693d      	ldr	r5, [r7, #16]
 800b58a:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800b58e:	68bb      	ldr	r3, [r7, #8]
 800b590:	6879      	ldr	r1, [r7, #4]
 800b592:	eb05 060a 	add.w	r6, r5, sl
 800b596:	42b3      	cmp	r3, r6
 800b598:	b085      	sub	sp, #20
 800b59a:	bfb8      	it	lt
 800b59c:	3101      	addlt	r1, #1
 800b59e:	f7ff fedd 	bl	800b35c <_Balloc>
 800b5a2:	b930      	cbnz	r0, 800b5b2 <__multiply+0x42>
 800b5a4:	4602      	mov	r2, r0
 800b5a6:	4b41      	ldr	r3, [pc, #260]	@ (800b6ac <__multiply+0x13c>)
 800b5a8:	4841      	ldr	r0, [pc, #260]	@ (800b6b0 <__multiply+0x140>)
 800b5aa:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 800b5ae:	f000 fcd1 	bl	800bf54 <__assert_func>
 800b5b2:	f100 0414 	add.w	r4, r0, #20
 800b5b6:	eb04 0e86 	add.w	lr, r4, r6, lsl #2
 800b5ba:	4623      	mov	r3, r4
 800b5bc:	2200      	movs	r2, #0
 800b5be:	4573      	cmp	r3, lr
 800b5c0:	d320      	bcc.n	800b604 <__multiply+0x94>
 800b5c2:	f107 0814 	add.w	r8, r7, #20
 800b5c6:	f109 0114 	add.w	r1, r9, #20
 800b5ca:	eb08 0585 	add.w	r5, r8, r5, lsl #2
 800b5ce:	eb01 038a 	add.w	r3, r1, sl, lsl #2
 800b5d2:	9302      	str	r3, [sp, #8]
 800b5d4:	1beb      	subs	r3, r5, r7
 800b5d6:	3b15      	subs	r3, #21
 800b5d8:	f023 0303 	bic.w	r3, r3, #3
 800b5dc:	3304      	adds	r3, #4
 800b5de:	3715      	adds	r7, #21
 800b5e0:	42bd      	cmp	r5, r7
 800b5e2:	bf38      	it	cc
 800b5e4:	2304      	movcc	r3, #4
 800b5e6:	9301      	str	r3, [sp, #4]
 800b5e8:	9b02      	ldr	r3, [sp, #8]
 800b5ea:	9103      	str	r1, [sp, #12]
 800b5ec:	428b      	cmp	r3, r1
 800b5ee:	d80c      	bhi.n	800b60a <__multiply+0x9a>
 800b5f0:	2e00      	cmp	r6, #0
 800b5f2:	dd03      	ble.n	800b5fc <__multiply+0x8c>
 800b5f4:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 800b5f8:	2b00      	cmp	r3, #0
 800b5fa:	d055      	beq.n	800b6a8 <__multiply+0x138>
 800b5fc:	6106      	str	r6, [r0, #16]
 800b5fe:	b005      	add	sp, #20
 800b600:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b604:	f843 2b04 	str.w	r2, [r3], #4
 800b608:	e7d9      	b.n	800b5be <__multiply+0x4e>
 800b60a:	f8b1 a000 	ldrh.w	sl, [r1]
 800b60e:	f1ba 0f00 	cmp.w	sl, #0
 800b612:	d01f      	beq.n	800b654 <__multiply+0xe4>
 800b614:	46c4      	mov	ip, r8
 800b616:	46a1      	mov	r9, r4
 800b618:	2700      	movs	r7, #0
 800b61a:	f85c 2b04 	ldr.w	r2, [ip], #4
 800b61e:	f8d9 3000 	ldr.w	r3, [r9]
 800b622:	fa1f fb82 	uxth.w	fp, r2
 800b626:	b29b      	uxth	r3, r3
 800b628:	fb0a 330b 	mla	r3, sl, fp, r3
 800b62c:	443b      	add	r3, r7
 800b62e:	f8d9 7000 	ldr.w	r7, [r9]
 800b632:	0c12      	lsrs	r2, r2, #16
 800b634:	0c3f      	lsrs	r7, r7, #16
 800b636:	fb0a 7202 	mla	r2, sl, r2, r7
 800b63a:	eb02 4213 	add.w	r2, r2, r3, lsr #16
 800b63e:	b29b      	uxth	r3, r3
 800b640:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800b644:	4565      	cmp	r5, ip
 800b646:	f849 3b04 	str.w	r3, [r9], #4
 800b64a:	ea4f 4712 	mov.w	r7, r2, lsr #16
 800b64e:	d8e4      	bhi.n	800b61a <__multiply+0xaa>
 800b650:	9b01      	ldr	r3, [sp, #4]
 800b652:	50e7      	str	r7, [r4, r3]
 800b654:	9b03      	ldr	r3, [sp, #12]
 800b656:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 800b65a:	3104      	adds	r1, #4
 800b65c:	f1b9 0f00 	cmp.w	r9, #0
 800b660:	d020      	beq.n	800b6a4 <__multiply+0x134>
 800b662:	6823      	ldr	r3, [r4, #0]
 800b664:	4647      	mov	r7, r8
 800b666:	46a4      	mov	ip, r4
 800b668:	f04f 0a00 	mov.w	sl, #0
 800b66c:	f8b7 b000 	ldrh.w	fp, [r7]
 800b670:	f8bc 2002 	ldrh.w	r2, [ip, #2]
 800b674:	fb09 220b 	mla	r2, r9, fp, r2
 800b678:	4452      	add	r2, sl
 800b67a:	b29b      	uxth	r3, r3
 800b67c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800b680:	f84c 3b04 	str.w	r3, [ip], #4
 800b684:	f857 3b04 	ldr.w	r3, [r7], #4
 800b688:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800b68c:	f8bc 3000 	ldrh.w	r3, [ip]
 800b690:	fb09 330a 	mla	r3, r9, sl, r3
 800b694:	eb03 4312 	add.w	r3, r3, r2, lsr #16
 800b698:	42bd      	cmp	r5, r7
 800b69a:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800b69e:	d8e5      	bhi.n	800b66c <__multiply+0xfc>
 800b6a0:	9a01      	ldr	r2, [sp, #4]
 800b6a2:	50a3      	str	r3, [r4, r2]
 800b6a4:	3404      	adds	r4, #4
 800b6a6:	e79f      	b.n	800b5e8 <__multiply+0x78>
 800b6a8:	3e01      	subs	r6, #1
 800b6aa:	e7a1      	b.n	800b5f0 <__multiply+0x80>
 800b6ac:	0800c2d0 	.word	0x0800c2d0
 800b6b0:	0800c2e1 	.word	0x0800c2e1

0800b6b4 <__pow5mult>:
 800b6b4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b6b8:	4615      	mov	r5, r2
 800b6ba:	f012 0203 	ands.w	r2, r2, #3
 800b6be:	4607      	mov	r7, r0
 800b6c0:	460e      	mov	r6, r1
 800b6c2:	d007      	beq.n	800b6d4 <__pow5mult+0x20>
 800b6c4:	4c25      	ldr	r4, [pc, #148]	@ (800b75c <__pow5mult+0xa8>)
 800b6c6:	3a01      	subs	r2, #1
 800b6c8:	2300      	movs	r3, #0
 800b6ca:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800b6ce:	f7ff fea7 	bl	800b420 <__multadd>
 800b6d2:	4606      	mov	r6, r0
 800b6d4:	10ad      	asrs	r5, r5, #2
 800b6d6:	d03d      	beq.n	800b754 <__pow5mult+0xa0>
 800b6d8:	69fc      	ldr	r4, [r7, #28]
 800b6da:	b97c      	cbnz	r4, 800b6fc <__pow5mult+0x48>
 800b6dc:	2010      	movs	r0, #16
 800b6de:	f7ff fd87 	bl	800b1f0 <malloc>
 800b6e2:	4602      	mov	r2, r0
 800b6e4:	61f8      	str	r0, [r7, #28]
 800b6e6:	b928      	cbnz	r0, 800b6f4 <__pow5mult+0x40>
 800b6e8:	4b1d      	ldr	r3, [pc, #116]	@ (800b760 <__pow5mult+0xac>)
 800b6ea:	481e      	ldr	r0, [pc, #120]	@ (800b764 <__pow5mult+0xb0>)
 800b6ec:	f240 11b3 	movw	r1, #435	@ 0x1b3
 800b6f0:	f000 fc30 	bl	800bf54 <__assert_func>
 800b6f4:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800b6f8:	6004      	str	r4, [r0, #0]
 800b6fa:	60c4      	str	r4, [r0, #12]
 800b6fc:	f8d7 801c 	ldr.w	r8, [r7, #28]
 800b700:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800b704:	b94c      	cbnz	r4, 800b71a <__pow5mult+0x66>
 800b706:	f240 2171 	movw	r1, #625	@ 0x271
 800b70a:	4638      	mov	r0, r7
 800b70c:	f7ff ff1a 	bl	800b544 <__i2b>
 800b710:	2300      	movs	r3, #0
 800b712:	f8c8 0008 	str.w	r0, [r8, #8]
 800b716:	4604      	mov	r4, r0
 800b718:	6003      	str	r3, [r0, #0]
 800b71a:	f04f 0900 	mov.w	r9, #0
 800b71e:	07eb      	lsls	r3, r5, #31
 800b720:	d50a      	bpl.n	800b738 <__pow5mult+0x84>
 800b722:	4631      	mov	r1, r6
 800b724:	4622      	mov	r2, r4
 800b726:	4638      	mov	r0, r7
 800b728:	f7ff ff22 	bl	800b570 <__multiply>
 800b72c:	4631      	mov	r1, r6
 800b72e:	4680      	mov	r8, r0
 800b730:	4638      	mov	r0, r7
 800b732:	f7ff fe53 	bl	800b3dc <_Bfree>
 800b736:	4646      	mov	r6, r8
 800b738:	106d      	asrs	r5, r5, #1
 800b73a:	d00b      	beq.n	800b754 <__pow5mult+0xa0>
 800b73c:	6820      	ldr	r0, [r4, #0]
 800b73e:	b938      	cbnz	r0, 800b750 <__pow5mult+0x9c>
 800b740:	4622      	mov	r2, r4
 800b742:	4621      	mov	r1, r4
 800b744:	4638      	mov	r0, r7
 800b746:	f7ff ff13 	bl	800b570 <__multiply>
 800b74a:	6020      	str	r0, [r4, #0]
 800b74c:	f8c0 9000 	str.w	r9, [r0]
 800b750:	4604      	mov	r4, r0
 800b752:	e7e4      	b.n	800b71e <__pow5mult+0x6a>
 800b754:	4630      	mov	r0, r6
 800b756:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b75a:	bf00      	nop
 800b75c:	0800c394 	.word	0x0800c394
 800b760:	0800c261 	.word	0x0800c261
 800b764:	0800c2e1 	.word	0x0800c2e1

0800b768 <__lshift>:
 800b768:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b76c:	460c      	mov	r4, r1
 800b76e:	6849      	ldr	r1, [r1, #4]
 800b770:	6923      	ldr	r3, [r4, #16]
 800b772:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800b776:	68a3      	ldr	r3, [r4, #8]
 800b778:	4607      	mov	r7, r0
 800b77a:	4691      	mov	r9, r2
 800b77c:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800b780:	f108 0601 	add.w	r6, r8, #1
 800b784:	42b3      	cmp	r3, r6
 800b786:	db0b      	blt.n	800b7a0 <__lshift+0x38>
 800b788:	4638      	mov	r0, r7
 800b78a:	f7ff fde7 	bl	800b35c <_Balloc>
 800b78e:	4605      	mov	r5, r0
 800b790:	b948      	cbnz	r0, 800b7a6 <__lshift+0x3e>
 800b792:	4602      	mov	r2, r0
 800b794:	4b28      	ldr	r3, [pc, #160]	@ (800b838 <__lshift+0xd0>)
 800b796:	4829      	ldr	r0, [pc, #164]	@ (800b83c <__lshift+0xd4>)
 800b798:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 800b79c:	f000 fbda 	bl	800bf54 <__assert_func>
 800b7a0:	3101      	adds	r1, #1
 800b7a2:	005b      	lsls	r3, r3, #1
 800b7a4:	e7ee      	b.n	800b784 <__lshift+0x1c>
 800b7a6:	2300      	movs	r3, #0
 800b7a8:	f100 0114 	add.w	r1, r0, #20
 800b7ac:	f100 0210 	add.w	r2, r0, #16
 800b7b0:	4618      	mov	r0, r3
 800b7b2:	4553      	cmp	r3, sl
 800b7b4:	db33      	blt.n	800b81e <__lshift+0xb6>
 800b7b6:	6920      	ldr	r0, [r4, #16]
 800b7b8:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800b7bc:	f104 0314 	add.w	r3, r4, #20
 800b7c0:	f019 091f 	ands.w	r9, r9, #31
 800b7c4:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800b7c8:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800b7cc:	d02b      	beq.n	800b826 <__lshift+0xbe>
 800b7ce:	f1c9 0e20 	rsb	lr, r9, #32
 800b7d2:	468a      	mov	sl, r1
 800b7d4:	2200      	movs	r2, #0
 800b7d6:	6818      	ldr	r0, [r3, #0]
 800b7d8:	fa00 f009 	lsl.w	r0, r0, r9
 800b7dc:	4310      	orrs	r0, r2
 800b7de:	f84a 0b04 	str.w	r0, [sl], #4
 800b7e2:	f853 2b04 	ldr.w	r2, [r3], #4
 800b7e6:	459c      	cmp	ip, r3
 800b7e8:	fa22 f20e 	lsr.w	r2, r2, lr
 800b7ec:	d8f3      	bhi.n	800b7d6 <__lshift+0x6e>
 800b7ee:	ebac 0304 	sub.w	r3, ip, r4
 800b7f2:	3b15      	subs	r3, #21
 800b7f4:	f023 0303 	bic.w	r3, r3, #3
 800b7f8:	3304      	adds	r3, #4
 800b7fa:	f104 0015 	add.w	r0, r4, #21
 800b7fe:	4560      	cmp	r0, ip
 800b800:	bf88      	it	hi
 800b802:	2304      	movhi	r3, #4
 800b804:	50ca      	str	r2, [r1, r3]
 800b806:	b10a      	cbz	r2, 800b80c <__lshift+0xa4>
 800b808:	f108 0602 	add.w	r6, r8, #2
 800b80c:	3e01      	subs	r6, #1
 800b80e:	4638      	mov	r0, r7
 800b810:	612e      	str	r6, [r5, #16]
 800b812:	4621      	mov	r1, r4
 800b814:	f7ff fde2 	bl	800b3dc <_Bfree>
 800b818:	4628      	mov	r0, r5
 800b81a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b81e:	f842 0f04 	str.w	r0, [r2, #4]!
 800b822:	3301      	adds	r3, #1
 800b824:	e7c5      	b.n	800b7b2 <__lshift+0x4a>
 800b826:	3904      	subs	r1, #4
 800b828:	f853 2b04 	ldr.w	r2, [r3], #4
 800b82c:	f841 2f04 	str.w	r2, [r1, #4]!
 800b830:	459c      	cmp	ip, r3
 800b832:	d8f9      	bhi.n	800b828 <__lshift+0xc0>
 800b834:	e7ea      	b.n	800b80c <__lshift+0xa4>
 800b836:	bf00      	nop
 800b838:	0800c2d0 	.word	0x0800c2d0
 800b83c:	0800c2e1 	.word	0x0800c2e1

0800b840 <__mcmp>:
 800b840:	690a      	ldr	r2, [r1, #16]
 800b842:	4603      	mov	r3, r0
 800b844:	6900      	ldr	r0, [r0, #16]
 800b846:	1a80      	subs	r0, r0, r2
 800b848:	b530      	push	{r4, r5, lr}
 800b84a:	d10e      	bne.n	800b86a <__mcmp+0x2a>
 800b84c:	3314      	adds	r3, #20
 800b84e:	3114      	adds	r1, #20
 800b850:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 800b854:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 800b858:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800b85c:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800b860:	4295      	cmp	r5, r2
 800b862:	d003      	beq.n	800b86c <__mcmp+0x2c>
 800b864:	d205      	bcs.n	800b872 <__mcmp+0x32>
 800b866:	f04f 30ff 	mov.w	r0, #4294967295
 800b86a:	bd30      	pop	{r4, r5, pc}
 800b86c:	42a3      	cmp	r3, r4
 800b86e:	d3f3      	bcc.n	800b858 <__mcmp+0x18>
 800b870:	e7fb      	b.n	800b86a <__mcmp+0x2a>
 800b872:	2001      	movs	r0, #1
 800b874:	e7f9      	b.n	800b86a <__mcmp+0x2a>
	...

0800b878 <__mdiff>:
 800b878:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b87c:	4689      	mov	r9, r1
 800b87e:	4606      	mov	r6, r0
 800b880:	4611      	mov	r1, r2
 800b882:	4648      	mov	r0, r9
 800b884:	4614      	mov	r4, r2
 800b886:	f7ff ffdb 	bl	800b840 <__mcmp>
 800b88a:	1e05      	subs	r5, r0, #0
 800b88c:	d112      	bne.n	800b8b4 <__mdiff+0x3c>
 800b88e:	4629      	mov	r1, r5
 800b890:	4630      	mov	r0, r6
 800b892:	f7ff fd63 	bl	800b35c <_Balloc>
 800b896:	4602      	mov	r2, r0
 800b898:	b928      	cbnz	r0, 800b8a6 <__mdiff+0x2e>
 800b89a:	4b3f      	ldr	r3, [pc, #252]	@ (800b998 <__mdiff+0x120>)
 800b89c:	f240 2137 	movw	r1, #567	@ 0x237
 800b8a0:	483e      	ldr	r0, [pc, #248]	@ (800b99c <__mdiff+0x124>)
 800b8a2:	f000 fb57 	bl	800bf54 <__assert_func>
 800b8a6:	2301      	movs	r3, #1
 800b8a8:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800b8ac:	4610      	mov	r0, r2
 800b8ae:	b003      	add	sp, #12
 800b8b0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b8b4:	bfbc      	itt	lt
 800b8b6:	464b      	movlt	r3, r9
 800b8b8:	46a1      	movlt	r9, r4
 800b8ba:	4630      	mov	r0, r6
 800b8bc:	f8d9 1004 	ldr.w	r1, [r9, #4]
 800b8c0:	bfba      	itte	lt
 800b8c2:	461c      	movlt	r4, r3
 800b8c4:	2501      	movlt	r5, #1
 800b8c6:	2500      	movge	r5, #0
 800b8c8:	f7ff fd48 	bl	800b35c <_Balloc>
 800b8cc:	4602      	mov	r2, r0
 800b8ce:	b918      	cbnz	r0, 800b8d8 <__mdiff+0x60>
 800b8d0:	4b31      	ldr	r3, [pc, #196]	@ (800b998 <__mdiff+0x120>)
 800b8d2:	f240 2145 	movw	r1, #581	@ 0x245
 800b8d6:	e7e3      	b.n	800b8a0 <__mdiff+0x28>
 800b8d8:	f8d9 7010 	ldr.w	r7, [r9, #16]
 800b8dc:	6926      	ldr	r6, [r4, #16]
 800b8de:	60c5      	str	r5, [r0, #12]
 800b8e0:	f109 0310 	add.w	r3, r9, #16
 800b8e4:	f109 0514 	add.w	r5, r9, #20
 800b8e8:	f104 0e14 	add.w	lr, r4, #20
 800b8ec:	f100 0b14 	add.w	fp, r0, #20
 800b8f0:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 800b8f4:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 800b8f8:	9301      	str	r3, [sp, #4]
 800b8fa:	46d9      	mov	r9, fp
 800b8fc:	f04f 0c00 	mov.w	ip, #0
 800b900:	9b01      	ldr	r3, [sp, #4]
 800b902:	f85e 0b04 	ldr.w	r0, [lr], #4
 800b906:	f853 af04 	ldr.w	sl, [r3, #4]!
 800b90a:	9301      	str	r3, [sp, #4]
 800b90c:	fa1f f38a 	uxth.w	r3, sl
 800b910:	4619      	mov	r1, r3
 800b912:	b283      	uxth	r3, r0
 800b914:	1acb      	subs	r3, r1, r3
 800b916:	0c00      	lsrs	r0, r0, #16
 800b918:	4463      	add	r3, ip
 800b91a:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 800b91e:	eb00 4023 	add.w	r0, r0, r3, asr #16
 800b922:	b29b      	uxth	r3, r3
 800b924:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 800b928:	4576      	cmp	r6, lr
 800b92a:	f849 3b04 	str.w	r3, [r9], #4
 800b92e:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800b932:	d8e5      	bhi.n	800b900 <__mdiff+0x88>
 800b934:	1b33      	subs	r3, r6, r4
 800b936:	3b15      	subs	r3, #21
 800b938:	f023 0303 	bic.w	r3, r3, #3
 800b93c:	3415      	adds	r4, #21
 800b93e:	3304      	adds	r3, #4
 800b940:	42a6      	cmp	r6, r4
 800b942:	bf38      	it	cc
 800b944:	2304      	movcc	r3, #4
 800b946:	441d      	add	r5, r3
 800b948:	445b      	add	r3, fp
 800b94a:	461e      	mov	r6, r3
 800b94c:	462c      	mov	r4, r5
 800b94e:	4544      	cmp	r4, r8
 800b950:	d30e      	bcc.n	800b970 <__mdiff+0xf8>
 800b952:	f108 0103 	add.w	r1, r8, #3
 800b956:	1b49      	subs	r1, r1, r5
 800b958:	f021 0103 	bic.w	r1, r1, #3
 800b95c:	3d03      	subs	r5, #3
 800b95e:	45a8      	cmp	r8, r5
 800b960:	bf38      	it	cc
 800b962:	2100      	movcc	r1, #0
 800b964:	440b      	add	r3, r1
 800b966:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800b96a:	b191      	cbz	r1, 800b992 <__mdiff+0x11a>
 800b96c:	6117      	str	r7, [r2, #16]
 800b96e:	e79d      	b.n	800b8ac <__mdiff+0x34>
 800b970:	f854 1b04 	ldr.w	r1, [r4], #4
 800b974:	46e6      	mov	lr, ip
 800b976:	0c08      	lsrs	r0, r1, #16
 800b978:	fa1c fc81 	uxtah	ip, ip, r1
 800b97c:	4471      	add	r1, lr
 800b97e:	eb00 402c 	add.w	r0, r0, ip, asr #16
 800b982:	b289      	uxth	r1, r1
 800b984:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800b988:	f846 1b04 	str.w	r1, [r6], #4
 800b98c:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800b990:	e7dd      	b.n	800b94e <__mdiff+0xd6>
 800b992:	3f01      	subs	r7, #1
 800b994:	e7e7      	b.n	800b966 <__mdiff+0xee>
 800b996:	bf00      	nop
 800b998:	0800c2d0 	.word	0x0800c2d0
 800b99c:	0800c2e1 	.word	0x0800c2e1

0800b9a0 <__d2b>:
 800b9a0:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800b9a4:	460f      	mov	r7, r1
 800b9a6:	2101      	movs	r1, #1
 800b9a8:	ec59 8b10 	vmov	r8, r9, d0
 800b9ac:	4616      	mov	r6, r2
 800b9ae:	f7ff fcd5 	bl	800b35c <_Balloc>
 800b9b2:	4604      	mov	r4, r0
 800b9b4:	b930      	cbnz	r0, 800b9c4 <__d2b+0x24>
 800b9b6:	4602      	mov	r2, r0
 800b9b8:	4b23      	ldr	r3, [pc, #140]	@ (800ba48 <__d2b+0xa8>)
 800b9ba:	4824      	ldr	r0, [pc, #144]	@ (800ba4c <__d2b+0xac>)
 800b9bc:	f240 310f 	movw	r1, #783	@ 0x30f
 800b9c0:	f000 fac8 	bl	800bf54 <__assert_func>
 800b9c4:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800b9c8:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800b9cc:	b10d      	cbz	r5, 800b9d2 <__d2b+0x32>
 800b9ce:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800b9d2:	9301      	str	r3, [sp, #4]
 800b9d4:	f1b8 0300 	subs.w	r3, r8, #0
 800b9d8:	d023      	beq.n	800ba22 <__d2b+0x82>
 800b9da:	4668      	mov	r0, sp
 800b9dc:	9300      	str	r3, [sp, #0]
 800b9de:	f7ff fd84 	bl	800b4ea <__lo0bits>
 800b9e2:	e9dd 1200 	ldrd	r1, r2, [sp]
 800b9e6:	b1d0      	cbz	r0, 800ba1e <__d2b+0x7e>
 800b9e8:	f1c0 0320 	rsb	r3, r0, #32
 800b9ec:	fa02 f303 	lsl.w	r3, r2, r3
 800b9f0:	430b      	orrs	r3, r1
 800b9f2:	40c2      	lsrs	r2, r0
 800b9f4:	6163      	str	r3, [r4, #20]
 800b9f6:	9201      	str	r2, [sp, #4]
 800b9f8:	9b01      	ldr	r3, [sp, #4]
 800b9fa:	61a3      	str	r3, [r4, #24]
 800b9fc:	2b00      	cmp	r3, #0
 800b9fe:	bf0c      	ite	eq
 800ba00:	2201      	moveq	r2, #1
 800ba02:	2202      	movne	r2, #2
 800ba04:	6122      	str	r2, [r4, #16]
 800ba06:	b1a5      	cbz	r5, 800ba32 <__d2b+0x92>
 800ba08:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 800ba0c:	4405      	add	r5, r0
 800ba0e:	603d      	str	r5, [r7, #0]
 800ba10:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 800ba14:	6030      	str	r0, [r6, #0]
 800ba16:	4620      	mov	r0, r4
 800ba18:	b003      	add	sp, #12
 800ba1a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800ba1e:	6161      	str	r1, [r4, #20]
 800ba20:	e7ea      	b.n	800b9f8 <__d2b+0x58>
 800ba22:	a801      	add	r0, sp, #4
 800ba24:	f7ff fd61 	bl	800b4ea <__lo0bits>
 800ba28:	9b01      	ldr	r3, [sp, #4]
 800ba2a:	6163      	str	r3, [r4, #20]
 800ba2c:	3020      	adds	r0, #32
 800ba2e:	2201      	movs	r2, #1
 800ba30:	e7e8      	b.n	800ba04 <__d2b+0x64>
 800ba32:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800ba36:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 800ba3a:	6038      	str	r0, [r7, #0]
 800ba3c:	6918      	ldr	r0, [r3, #16]
 800ba3e:	f7ff fd35 	bl	800b4ac <__hi0bits>
 800ba42:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800ba46:	e7e5      	b.n	800ba14 <__d2b+0x74>
 800ba48:	0800c2d0 	.word	0x0800c2d0
 800ba4c:	0800c2e1 	.word	0x0800c2e1

0800ba50 <__sfputc_r>:
 800ba50:	6893      	ldr	r3, [r2, #8]
 800ba52:	3b01      	subs	r3, #1
 800ba54:	2b00      	cmp	r3, #0
 800ba56:	b410      	push	{r4}
 800ba58:	6093      	str	r3, [r2, #8]
 800ba5a:	da08      	bge.n	800ba6e <__sfputc_r+0x1e>
 800ba5c:	6994      	ldr	r4, [r2, #24]
 800ba5e:	42a3      	cmp	r3, r4
 800ba60:	db01      	blt.n	800ba66 <__sfputc_r+0x16>
 800ba62:	290a      	cmp	r1, #10
 800ba64:	d103      	bne.n	800ba6e <__sfputc_r+0x1e>
 800ba66:	f85d 4b04 	ldr.w	r4, [sp], #4
 800ba6a:	f7fe bc6e 	b.w	800a34a <__swbuf_r>
 800ba6e:	6813      	ldr	r3, [r2, #0]
 800ba70:	1c58      	adds	r0, r3, #1
 800ba72:	6010      	str	r0, [r2, #0]
 800ba74:	7019      	strb	r1, [r3, #0]
 800ba76:	4608      	mov	r0, r1
 800ba78:	f85d 4b04 	ldr.w	r4, [sp], #4
 800ba7c:	4770      	bx	lr

0800ba7e <__sfputs_r>:
 800ba7e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ba80:	4606      	mov	r6, r0
 800ba82:	460f      	mov	r7, r1
 800ba84:	4614      	mov	r4, r2
 800ba86:	18d5      	adds	r5, r2, r3
 800ba88:	42ac      	cmp	r4, r5
 800ba8a:	d101      	bne.n	800ba90 <__sfputs_r+0x12>
 800ba8c:	2000      	movs	r0, #0
 800ba8e:	e007      	b.n	800baa0 <__sfputs_r+0x22>
 800ba90:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ba94:	463a      	mov	r2, r7
 800ba96:	4630      	mov	r0, r6
 800ba98:	f7ff ffda 	bl	800ba50 <__sfputc_r>
 800ba9c:	1c43      	adds	r3, r0, #1
 800ba9e:	d1f3      	bne.n	800ba88 <__sfputs_r+0xa>
 800baa0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800baa4 <_vfiprintf_r>:
 800baa4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800baa8:	460d      	mov	r5, r1
 800baaa:	b09d      	sub	sp, #116	@ 0x74
 800baac:	4614      	mov	r4, r2
 800baae:	4698      	mov	r8, r3
 800bab0:	4606      	mov	r6, r0
 800bab2:	b118      	cbz	r0, 800babc <_vfiprintf_r+0x18>
 800bab4:	6a03      	ldr	r3, [r0, #32]
 800bab6:	b90b      	cbnz	r3, 800babc <_vfiprintf_r+0x18>
 800bab8:	f7fe fbbc 	bl	800a234 <__sinit>
 800babc:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800babe:	07d9      	lsls	r1, r3, #31
 800bac0:	d405      	bmi.n	800bace <_vfiprintf_r+0x2a>
 800bac2:	89ab      	ldrh	r3, [r5, #12]
 800bac4:	059a      	lsls	r2, r3, #22
 800bac6:	d402      	bmi.n	800bace <_vfiprintf_r+0x2a>
 800bac8:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800baca:	f7fe fd50 	bl	800a56e <__retarget_lock_acquire_recursive>
 800bace:	89ab      	ldrh	r3, [r5, #12]
 800bad0:	071b      	lsls	r3, r3, #28
 800bad2:	d501      	bpl.n	800bad8 <_vfiprintf_r+0x34>
 800bad4:	692b      	ldr	r3, [r5, #16]
 800bad6:	b99b      	cbnz	r3, 800bb00 <_vfiprintf_r+0x5c>
 800bad8:	4629      	mov	r1, r5
 800bada:	4630      	mov	r0, r6
 800badc:	f7fe fc74 	bl	800a3c8 <__swsetup_r>
 800bae0:	b170      	cbz	r0, 800bb00 <_vfiprintf_r+0x5c>
 800bae2:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800bae4:	07dc      	lsls	r4, r3, #31
 800bae6:	d504      	bpl.n	800baf2 <_vfiprintf_r+0x4e>
 800bae8:	f04f 30ff 	mov.w	r0, #4294967295
 800baec:	b01d      	add	sp, #116	@ 0x74
 800baee:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800baf2:	89ab      	ldrh	r3, [r5, #12]
 800baf4:	0598      	lsls	r0, r3, #22
 800baf6:	d4f7      	bmi.n	800bae8 <_vfiprintf_r+0x44>
 800baf8:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800bafa:	f7fe fd39 	bl	800a570 <__retarget_lock_release_recursive>
 800bafe:	e7f3      	b.n	800bae8 <_vfiprintf_r+0x44>
 800bb00:	2300      	movs	r3, #0
 800bb02:	9309      	str	r3, [sp, #36]	@ 0x24
 800bb04:	2320      	movs	r3, #32
 800bb06:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800bb0a:	f8cd 800c 	str.w	r8, [sp, #12]
 800bb0e:	2330      	movs	r3, #48	@ 0x30
 800bb10:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 800bcc0 <_vfiprintf_r+0x21c>
 800bb14:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800bb18:	f04f 0901 	mov.w	r9, #1
 800bb1c:	4623      	mov	r3, r4
 800bb1e:	469a      	mov	sl, r3
 800bb20:	f813 2b01 	ldrb.w	r2, [r3], #1
 800bb24:	b10a      	cbz	r2, 800bb2a <_vfiprintf_r+0x86>
 800bb26:	2a25      	cmp	r2, #37	@ 0x25
 800bb28:	d1f9      	bne.n	800bb1e <_vfiprintf_r+0x7a>
 800bb2a:	ebba 0b04 	subs.w	fp, sl, r4
 800bb2e:	d00b      	beq.n	800bb48 <_vfiprintf_r+0xa4>
 800bb30:	465b      	mov	r3, fp
 800bb32:	4622      	mov	r2, r4
 800bb34:	4629      	mov	r1, r5
 800bb36:	4630      	mov	r0, r6
 800bb38:	f7ff ffa1 	bl	800ba7e <__sfputs_r>
 800bb3c:	3001      	adds	r0, #1
 800bb3e:	f000 80a7 	beq.w	800bc90 <_vfiprintf_r+0x1ec>
 800bb42:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800bb44:	445a      	add	r2, fp
 800bb46:	9209      	str	r2, [sp, #36]	@ 0x24
 800bb48:	f89a 3000 	ldrb.w	r3, [sl]
 800bb4c:	2b00      	cmp	r3, #0
 800bb4e:	f000 809f 	beq.w	800bc90 <_vfiprintf_r+0x1ec>
 800bb52:	2300      	movs	r3, #0
 800bb54:	f04f 32ff 	mov.w	r2, #4294967295
 800bb58:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800bb5c:	f10a 0a01 	add.w	sl, sl, #1
 800bb60:	9304      	str	r3, [sp, #16]
 800bb62:	9307      	str	r3, [sp, #28]
 800bb64:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800bb68:	931a      	str	r3, [sp, #104]	@ 0x68
 800bb6a:	4654      	mov	r4, sl
 800bb6c:	2205      	movs	r2, #5
 800bb6e:	f814 1b01 	ldrb.w	r1, [r4], #1
 800bb72:	4853      	ldr	r0, [pc, #332]	@ (800bcc0 <_vfiprintf_r+0x21c>)
 800bb74:	f7f4 fbdc 	bl	8000330 <memchr>
 800bb78:	9a04      	ldr	r2, [sp, #16]
 800bb7a:	b9d8      	cbnz	r0, 800bbb4 <_vfiprintf_r+0x110>
 800bb7c:	06d1      	lsls	r1, r2, #27
 800bb7e:	bf44      	itt	mi
 800bb80:	2320      	movmi	r3, #32
 800bb82:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800bb86:	0713      	lsls	r3, r2, #28
 800bb88:	bf44      	itt	mi
 800bb8a:	232b      	movmi	r3, #43	@ 0x2b
 800bb8c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800bb90:	f89a 3000 	ldrb.w	r3, [sl]
 800bb94:	2b2a      	cmp	r3, #42	@ 0x2a
 800bb96:	d015      	beq.n	800bbc4 <_vfiprintf_r+0x120>
 800bb98:	9a07      	ldr	r2, [sp, #28]
 800bb9a:	4654      	mov	r4, sl
 800bb9c:	2000      	movs	r0, #0
 800bb9e:	f04f 0c0a 	mov.w	ip, #10
 800bba2:	4621      	mov	r1, r4
 800bba4:	f811 3b01 	ldrb.w	r3, [r1], #1
 800bba8:	3b30      	subs	r3, #48	@ 0x30
 800bbaa:	2b09      	cmp	r3, #9
 800bbac:	d94b      	bls.n	800bc46 <_vfiprintf_r+0x1a2>
 800bbae:	b1b0      	cbz	r0, 800bbde <_vfiprintf_r+0x13a>
 800bbb0:	9207      	str	r2, [sp, #28]
 800bbb2:	e014      	b.n	800bbde <_vfiprintf_r+0x13a>
 800bbb4:	eba0 0308 	sub.w	r3, r0, r8
 800bbb8:	fa09 f303 	lsl.w	r3, r9, r3
 800bbbc:	4313      	orrs	r3, r2
 800bbbe:	9304      	str	r3, [sp, #16]
 800bbc0:	46a2      	mov	sl, r4
 800bbc2:	e7d2      	b.n	800bb6a <_vfiprintf_r+0xc6>
 800bbc4:	9b03      	ldr	r3, [sp, #12]
 800bbc6:	1d19      	adds	r1, r3, #4
 800bbc8:	681b      	ldr	r3, [r3, #0]
 800bbca:	9103      	str	r1, [sp, #12]
 800bbcc:	2b00      	cmp	r3, #0
 800bbce:	bfbb      	ittet	lt
 800bbd0:	425b      	neglt	r3, r3
 800bbd2:	f042 0202 	orrlt.w	r2, r2, #2
 800bbd6:	9307      	strge	r3, [sp, #28]
 800bbd8:	9307      	strlt	r3, [sp, #28]
 800bbda:	bfb8      	it	lt
 800bbdc:	9204      	strlt	r2, [sp, #16]
 800bbde:	7823      	ldrb	r3, [r4, #0]
 800bbe0:	2b2e      	cmp	r3, #46	@ 0x2e
 800bbe2:	d10a      	bne.n	800bbfa <_vfiprintf_r+0x156>
 800bbe4:	7863      	ldrb	r3, [r4, #1]
 800bbe6:	2b2a      	cmp	r3, #42	@ 0x2a
 800bbe8:	d132      	bne.n	800bc50 <_vfiprintf_r+0x1ac>
 800bbea:	9b03      	ldr	r3, [sp, #12]
 800bbec:	1d1a      	adds	r2, r3, #4
 800bbee:	681b      	ldr	r3, [r3, #0]
 800bbf0:	9203      	str	r2, [sp, #12]
 800bbf2:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800bbf6:	3402      	adds	r4, #2
 800bbf8:	9305      	str	r3, [sp, #20]
 800bbfa:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800bcd0 <_vfiprintf_r+0x22c>
 800bbfe:	7821      	ldrb	r1, [r4, #0]
 800bc00:	2203      	movs	r2, #3
 800bc02:	4650      	mov	r0, sl
 800bc04:	f7f4 fb94 	bl	8000330 <memchr>
 800bc08:	b138      	cbz	r0, 800bc1a <_vfiprintf_r+0x176>
 800bc0a:	9b04      	ldr	r3, [sp, #16]
 800bc0c:	eba0 000a 	sub.w	r0, r0, sl
 800bc10:	2240      	movs	r2, #64	@ 0x40
 800bc12:	4082      	lsls	r2, r0
 800bc14:	4313      	orrs	r3, r2
 800bc16:	3401      	adds	r4, #1
 800bc18:	9304      	str	r3, [sp, #16]
 800bc1a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800bc1e:	4829      	ldr	r0, [pc, #164]	@ (800bcc4 <_vfiprintf_r+0x220>)
 800bc20:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800bc24:	2206      	movs	r2, #6
 800bc26:	f7f4 fb83 	bl	8000330 <memchr>
 800bc2a:	2800      	cmp	r0, #0
 800bc2c:	d03f      	beq.n	800bcae <_vfiprintf_r+0x20a>
 800bc2e:	4b26      	ldr	r3, [pc, #152]	@ (800bcc8 <_vfiprintf_r+0x224>)
 800bc30:	bb1b      	cbnz	r3, 800bc7a <_vfiprintf_r+0x1d6>
 800bc32:	9b03      	ldr	r3, [sp, #12]
 800bc34:	3307      	adds	r3, #7
 800bc36:	f023 0307 	bic.w	r3, r3, #7
 800bc3a:	3308      	adds	r3, #8
 800bc3c:	9303      	str	r3, [sp, #12]
 800bc3e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800bc40:	443b      	add	r3, r7
 800bc42:	9309      	str	r3, [sp, #36]	@ 0x24
 800bc44:	e76a      	b.n	800bb1c <_vfiprintf_r+0x78>
 800bc46:	fb0c 3202 	mla	r2, ip, r2, r3
 800bc4a:	460c      	mov	r4, r1
 800bc4c:	2001      	movs	r0, #1
 800bc4e:	e7a8      	b.n	800bba2 <_vfiprintf_r+0xfe>
 800bc50:	2300      	movs	r3, #0
 800bc52:	3401      	adds	r4, #1
 800bc54:	9305      	str	r3, [sp, #20]
 800bc56:	4619      	mov	r1, r3
 800bc58:	f04f 0c0a 	mov.w	ip, #10
 800bc5c:	4620      	mov	r0, r4
 800bc5e:	f810 2b01 	ldrb.w	r2, [r0], #1
 800bc62:	3a30      	subs	r2, #48	@ 0x30
 800bc64:	2a09      	cmp	r2, #9
 800bc66:	d903      	bls.n	800bc70 <_vfiprintf_r+0x1cc>
 800bc68:	2b00      	cmp	r3, #0
 800bc6a:	d0c6      	beq.n	800bbfa <_vfiprintf_r+0x156>
 800bc6c:	9105      	str	r1, [sp, #20]
 800bc6e:	e7c4      	b.n	800bbfa <_vfiprintf_r+0x156>
 800bc70:	fb0c 2101 	mla	r1, ip, r1, r2
 800bc74:	4604      	mov	r4, r0
 800bc76:	2301      	movs	r3, #1
 800bc78:	e7f0      	b.n	800bc5c <_vfiprintf_r+0x1b8>
 800bc7a:	ab03      	add	r3, sp, #12
 800bc7c:	9300      	str	r3, [sp, #0]
 800bc7e:	462a      	mov	r2, r5
 800bc80:	4b12      	ldr	r3, [pc, #72]	@ (800bccc <_vfiprintf_r+0x228>)
 800bc82:	a904      	add	r1, sp, #16
 800bc84:	4630      	mov	r0, r6
 800bc86:	f7fd fea3 	bl	80099d0 <_printf_float>
 800bc8a:	4607      	mov	r7, r0
 800bc8c:	1c78      	adds	r0, r7, #1
 800bc8e:	d1d6      	bne.n	800bc3e <_vfiprintf_r+0x19a>
 800bc90:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800bc92:	07d9      	lsls	r1, r3, #31
 800bc94:	d405      	bmi.n	800bca2 <_vfiprintf_r+0x1fe>
 800bc96:	89ab      	ldrh	r3, [r5, #12]
 800bc98:	059a      	lsls	r2, r3, #22
 800bc9a:	d402      	bmi.n	800bca2 <_vfiprintf_r+0x1fe>
 800bc9c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800bc9e:	f7fe fc67 	bl	800a570 <__retarget_lock_release_recursive>
 800bca2:	89ab      	ldrh	r3, [r5, #12]
 800bca4:	065b      	lsls	r3, r3, #25
 800bca6:	f53f af1f 	bmi.w	800bae8 <_vfiprintf_r+0x44>
 800bcaa:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800bcac:	e71e      	b.n	800baec <_vfiprintf_r+0x48>
 800bcae:	ab03      	add	r3, sp, #12
 800bcb0:	9300      	str	r3, [sp, #0]
 800bcb2:	462a      	mov	r2, r5
 800bcb4:	4b05      	ldr	r3, [pc, #20]	@ (800bccc <_vfiprintf_r+0x228>)
 800bcb6:	a904      	add	r1, sp, #16
 800bcb8:	4630      	mov	r0, r6
 800bcba:	f7fe f911 	bl	8009ee0 <_printf_i>
 800bcbe:	e7e4      	b.n	800bc8a <_vfiprintf_r+0x1e6>
 800bcc0:	0800c33a 	.word	0x0800c33a
 800bcc4:	0800c344 	.word	0x0800c344
 800bcc8:	080099d1 	.word	0x080099d1
 800bccc:	0800ba7f 	.word	0x0800ba7f
 800bcd0:	0800c340 	.word	0x0800c340

0800bcd4 <__sflush_r>:
 800bcd4:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800bcd8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800bcdc:	0716      	lsls	r6, r2, #28
 800bcde:	4605      	mov	r5, r0
 800bce0:	460c      	mov	r4, r1
 800bce2:	d454      	bmi.n	800bd8e <__sflush_r+0xba>
 800bce4:	684b      	ldr	r3, [r1, #4]
 800bce6:	2b00      	cmp	r3, #0
 800bce8:	dc02      	bgt.n	800bcf0 <__sflush_r+0x1c>
 800bcea:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800bcec:	2b00      	cmp	r3, #0
 800bcee:	dd48      	ble.n	800bd82 <__sflush_r+0xae>
 800bcf0:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800bcf2:	2e00      	cmp	r6, #0
 800bcf4:	d045      	beq.n	800bd82 <__sflush_r+0xae>
 800bcf6:	2300      	movs	r3, #0
 800bcf8:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800bcfc:	682f      	ldr	r7, [r5, #0]
 800bcfe:	6a21      	ldr	r1, [r4, #32]
 800bd00:	602b      	str	r3, [r5, #0]
 800bd02:	d030      	beq.n	800bd66 <__sflush_r+0x92>
 800bd04:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800bd06:	89a3      	ldrh	r3, [r4, #12]
 800bd08:	0759      	lsls	r1, r3, #29
 800bd0a:	d505      	bpl.n	800bd18 <__sflush_r+0x44>
 800bd0c:	6863      	ldr	r3, [r4, #4]
 800bd0e:	1ad2      	subs	r2, r2, r3
 800bd10:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800bd12:	b10b      	cbz	r3, 800bd18 <__sflush_r+0x44>
 800bd14:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800bd16:	1ad2      	subs	r2, r2, r3
 800bd18:	2300      	movs	r3, #0
 800bd1a:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800bd1c:	6a21      	ldr	r1, [r4, #32]
 800bd1e:	4628      	mov	r0, r5
 800bd20:	47b0      	blx	r6
 800bd22:	1c43      	adds	r3, r0, #1
 800bd24:	89a3      	ldrh	r3, [r4, #12]
 800bd26:	d106      	bne.n	800bd36 <__sflush_r+0x62>
 800bd28:	6829      	ldr	r1, [r5, #0]
 800bd2a:	291d      	cmp	r1, #29
 800bd2c:	d82b      	bhi.n	800bd86 <__sflush_r+0xb2>
 800bd2e:	4a2a      	ldr	r2, [pc, #168]	@ (800bdd8 <__sflush_r+0x104>)
 800bd30:	40ca      	lsrs	r2, r1
 800bd32:	07d6      	lsls	r6, r2, #31
 800bd34:	d527      	bpl.n	800bd86 <__sflush_r+0xb2>
 800bd36:	2200      	movs	r2, #0
 800bd38:	6062      	str	r2, [r4, #4]
 800bd3a:	04d9      	lsls	r1, r3, #19
 800bd3c:	6922      	ldr	r2, [r4, #16]
 800bd3e:	6022      	str	r2, [r4, #0]
 800bd40:	d504      	bpl.n	800bd4c <__sflush_r+0x78>
 800bd42:	1c42      	adds	r2, r0, #1
 800bd44:	d101      	bne.n	800bd4a <__sflush_r+0x76>
 800bd46:	682b      	ldr	r3, [r5, #0]
 800bd48:	b903      	cbnz	r3, 800bd4c <__sflush_r+0x78>
 800bd4a:	6560      	str	r0, [r4, #84]	@ 0x54
 800bd4c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800bd4e:	602f      	str	r7, [r5, #0]
 800bd50:	b1b9      	cbz	r1, 800bd82 <__sflush_r+0xae>
 800bd52:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800bd56:	4299      	cmp	r1, r3
 800bd58:	d002      	beq.n	800bd60 <__sflush_r+0x8c>
 800bd5a:	4628      	mov	r0, r5
 800bd5c:	f7ff f9fe 	bl	800b15c <_free_r>
 800bd60:	2300      	movs	r3, #0
 800bd62:	6363      	str	r3, [r4, #52]	@ 0x34
 800bd64:	e00d      	b.n	800bd82 <__sflush_r+0xae>
 800bd66:	2301      	movs	r3, #1
 800bd68:	4628      	mov	r0, r5
 800bd6a:	47b0      	blx	r6
 800bd6c:	4602      	mov	r2, r0
 800bd6e:	1c50      	adds	r0, r2, #1
 800bd70:	d1c9      	bne.n	800bd06 <__sflush_r+0x32>
 800bd72:	682b      	ldr	r3, [r5, #0]
 800bd74:	2b00      	cmp	r3, #0
 800bd76:	d0c6      	beq.n	800bd06 <__sflush_r+0x32>
 800bd78:	2b1d      	cmp	r3, #29
 800bd7a:	d001      	beq.n	800bd80 <__sflush_r+0xac>
 800bd7c:	2b16      	cmp	r3, #22
 800bd7e:	d11e      	bne.n	800bdbe <__sflush_r+0xea>
 800bd80:	602f      	str	r7, [r5, #0]
 800bd82:	2000      	movs	r0, #0
 800bd84:	e022      	b.n	800bdcc <__sflush_r+0xf8>
 800bd86:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800bd8a:	b21b      	sxth	r3, r3
 800bd8c:	e01b      	b.n	800bdc6 <__sflush_r+0xf2>
 800bd8e:	690f      	ldr	r7, [r1, #16]
 800bd90:	2f00      	cmp	r7, #0
 800bd92:	d0f6      	beq.n	800bd82 <__sflush_r+0xae>
 800bd94:	0793      	lsls	r3, r2, #30
 800bd96:	680e      	ldr	r6, [r1, #0]
 800bd98:	bf08      	it	eq
 800bd9a:	694b      	ldreq	r3, [r1, #20]
 800bd9c:	600f      	str	r7, [r1, #0]
 800bd9e:	bf18      	it	ne
 800bda0:	2300      	movne	r3, #0
 800bda2:	eba6 0807 	sub.w	r8, r6, r7
 800bda6:	608b      	str	r3, [r1, #8]
 800bda8:	f1b8 0f00 	cmp.w	r8, #0
 800bdac:	dde9      	ble.n	800bd82 <__sflush_r+0xae>
 800bdae:	6a21      	ldr	r1, [r4, #32]
 800bdb0:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800bdb2:	4643      	mov	r3, r8
 800bdb4:	463a      	mov	r2, r7
 800bdb6:	4628      	mov	r0, r5
 800bdb8:	47b0      	blx	r6
 800bdba:	2800      	cmp	r0, #0
 800bdbc:	dc08      	bgt.n	800bdd0 <__sflush_r+0xfc>
 800bdbe:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800bdc2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800bdc6:	81a3      	strh	r3, [r4, #12]
 800bdc8:	f04f 30ff 	mov.w	r0, #4294967295
 800bdcc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800bdd0:	4407      	add	r7, r0
 800bdd2:	eba8 0800 	sub.w	r8, r8, r0
 800bdd6:	e7e7      	b.n	800bda8 <__sflush_r+0xd4>
 800bdd8:	20400001 	.word	0x20400001

0800bddc <_fflush_r>:
 800bddc:	b538      	push	{r3, r4, r5, lr}
 800bdde:	690b      	ldr	r3, [r1, #16]
 800bde0:	4605      	mov	r5, r0
 800bde2:	460c      	mov	r4, r1
 800bde4:	b913      	cbnz	r3, 800bdec <_fflush_r+0x10>
 800bde6:	2500      	movs	r5, #0
 800bde8:	4628      	mov	r0, r5
 800bdea:	bd38      	pop	{r3, r4, r5, pc}
 800bdec:	b118      	cbz	r0, 800bdf6 <_fflush_r+0x1a>
 800bdee:	6a03      	ldr	r3, [r0, #32]
 800bdf0:	b90b      	cbnz	r3, 800bdf6 <_fflush_r+0x1a>
 800bdf2:	f7fe fa1f 	bl	800a234 <__sinit>
 800bdf6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800bdfa:	2b00      	cmp	r3, #0
 800bdfc:	d0f3      	beq.n	800bde6 <_fflush_r+0xa>
 800bdfe:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800be00:	07d0      	lsls	r0, r2, #31
 800be02:	d404      	bmi.n	800be0e <_fflush_r+0x32>
 800be04:	0599      	lsls	r1, r3, #22
 800be06:	d402      	bmi.n	800be0e <_fflush_r+0x32>
 800be08:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800be0a:	f7fe fbb0 	bl	800a56e <__retarget_lock_acquire_recursive>
 800be0e:	4628      	mov	r0, r5
 800be10:	4621      	mov	r1, r4
 800be12:	f7ff ff5f 	bl	800bcd4 <__sflush_r>
 800be16:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800be18:	07da      	lsls	r2, r3, #31
 800be1a:	4605      	mov	r5, r0
 800be1c:	d4e4      	bmi.n	800bde8 <_fflush_r+0xc>
 800be1e:	89a3      	ldrh	r3, [r4, #12]
 800be20:	059b      	lsls	r3, r3, #22
 800be22:	d4e1      	bmi.n	800bde8 <_fflush_r+0xc>
 800be24:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800be26:	f7fe fba3 	bl	800a570 <__retarget_lock_release_recursive>
 800be2a:	e7dd      	b.n	800bde8 <_fflush_r+0xc>

0800be2c <__swhatbuf_r>:
 800be2c:	b570      	push	{r4, r5, r6, lr}
 800be2e:	460c      	mov	r4, r1
 800be30:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800be34:	2900      	cmp	r1, #0
 800be36:	b096      	sub	sp, #88	@ 0x58
 800be38:	4615      	mov	r5, r2
 800be3a:	461e      	mov	r6, r3
 800be3c:	da0d      	bge.n	800be5a <__swhatbuf_r+0x2e>
 800be3e:	89a3      	ldrh	r3, [r4, #12]
 800be40:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800be44:	f04f 0100 	mov.w	r1, #0
 800be48:	bf14      	ite	ne
 800be4a:	2340      	movne	r3, #64	@ 0x40
 800be4c:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800be50:	2000      	movs	r0, #0
 800be52:	6031      	str	r1, [r6, #0]
 800be54:	602b      	str	r3, [r5, #0]
 800be56:	b016      	add	sp, #88	@ 0x58
 800be58:	bd70      	pop	{r4, r5, r6, pc}
 800be5a:	466a      	mov	r2, sp
 800be5c:	f000 f848 	bl	800bef0 <_fstat_r>
 800be60:	2800      	cmp	r0, #0
 800be62:	dbec      	blt.n	800be3e <__swhatbuf_r+0x12>
 800be64:	9901      	ldr	r1, [sp, #4]
 800be66:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800be6a:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800be6e:	4259      	negs	r1, r3
 800be70:	4159      	adcs	r1, r3
 800be72:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800be76:	e7eb      	b.n	800be50 <__swhatbuf_r+0x24>

0800be78 <__smakebuf_r>:
 800be78:	898b      	ldrh	r3, [r1, #12]
 800be7a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800be7c:	079d      	lsls	r5, r3, #30
 800be7e:	4606      	mov	r6, r0
 800be80:	460c      	mov	r4, r1
 800be82:	d507      	bpl.n	800be94 <__smakebuf_r+0x1c>
 800be84:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800be88:	6023      	str	r3, [r4, #0]
 800be8a:	6123      	str	r3, [r4, #16]
 800be8c:	2301      	movs	r3, #1
 800be8e:	6163      	str	r3, [r4, #20]
 800be90:	b003      	add	sp, #12
 800be92:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800be94:	ab01      	add	r3, sp, #4
 800be96:	466a      	mov	r2, sp
 800be98:	f7ff ffc8 	bl	800be2c <__swhatbuf_r>
 800be9c:	9f00      	ldr	r7, [sp, #0]
 800be9e:	4605      	mov	r5, r0
 800bea0:	4639      	mov	r1, r7
 800bea2:	4630      	mov	r0, r6
 800bea4:	f7ff f9ce 	bl	800b244 <_malloc_r>
 800bea8:	b948      	cbnz	r0, 800bebe <__smakebuf_r+0x46>
 800beaa:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800beae:	059a      	lsls	r2, r3, #22
 800beb0:	d4ee      	bmi.n	800be90 <__smakebuf_r+0x18>
 800beb2:	f023 0303 	bic.w	r3, r3, #3
 800beb6:	f043 0302 	orr.w	r3, r3, #2
 800beba:	81a3      	strh	r3, [r4, #12]
 800bebc:	e7e2      	b.n	800be84 <__smakebuf_r+0xc>
 800bebe:	89a3      	ldrh	r3, [r4, #12]
 800bec0:	6020      	str	r0, [r4, #0]
 800bec2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800bec6:	81a3      	strh	r3, [r4, #12]
 800bec8:	9b01      	ldr	r3, [sp, #4]
 800beca:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800bece:	b15b      	cbz	r3, 800bee8 <__smakebuf_r+0x70>
 800bed0:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800bed4:	4630      	mov	r0, r6
 800bed6:	f000 f81d 	bl	800bf14 <_isatty_r>
 800beda:	b128      	cbz	r0, 800bee8 <__smakebuf_r+0x70>
 800bedc:	89a3      	ldrh	r3, [r4, #12]
 800bede:	f023 0303 	bic.w	r3, r3, #3
 800bee2:	f043 0301 	orr.w	r3, r3, #1
 800bee6:	81a3      	strh	r3, [r4, #12]
 800bee8:	89a3      	ldrh	r3, [r4, #12]
 800beea:	431d      	orrs	r5, r3
 800beec:	81a5      	strh	r5, [r4, #12]
 800beee:	e7cf      	b.n	800be90 <__smakebuf_r+0x18>

0800bef0 <_fstat_r>:
 800bef0:	b538      	push	{r3, r4, r5, lr}
 800bef2:	4d07      	ldr	r5, [pc, #28]	@ (800bf10 <_fstat_r+0x20>)
 800bef4:	2300      	movs	r3, #0
 800bef6:	4604      	mov	r4, r0
 800bef8:	4608      	mov	r0, r1
 800befa:	4611      	mov	r1, r2
 800befc:	602b      	str	r3, [r5, #0]
 800befe:	f7f5 fba1 	bl	8001644 <_fstat>
 800bf02:	1c43      	adds	r3, r0, #1
 800bf04:	d102      	bne.n	800bf0c <_fstat_r+0x1c>
 800bf06:	682b      	ldr	r3, [r5, #0]
 800bf08:	b103      	cbz	r3, 800bf0c <_fstat_r+0x1c>
 800bf0a:	6023      	str	r3, [r4, #0]
 800bf0c:	bd38      	pop	{r3, r4, r5, pc}
 800bf0e:	bf00      	nop
 800bf10:	240006dc 	.word	0x240006dc

0800bf14 <_isatty_r>:
 800bf14:	b538      	push	{r3, r4, r5, lr}
 800bf16:	4d06      	ldr	r5, [pc, #24]	@ (800bf30 <_isatty_r+0x1c>)
 800bf18:	2300      	movs	r3, #0
 800bf1a:	4604      	mov	r4, r0
 800bf1c:	4608      	mov	r0, r1
 800bf1e:	602b      	str	r3, [r5, #0]
 800bf20:	f7f5 fba0 	bl	8001664 <_isatty>
 800bf24:	1c43      	adds	r3, r0, #1
 800bf26:	d102      	bne.n	800bf2e <_isatty_r+0x1a>
 800bf28:	682b      	ldr	r3, [r5, #0]
 800bf2a:	b103      	cbz	r3, 800bf2e <_isatty_r+0x1a>
 800bf2c:	6023      	str	r3, [r4, #0]
 800bf2e:	bd38      	pop	{r3, r4, r5, pc}
 800bf30:	240006dc 	.word	0x240006dc

0800bf34 <_sbrk_r>:
 800bf34:	b538      	push	{r3, r4, r5, lr}
 800bf36:	4d06      	ldr	r5, [pc, #24]	@ (800bf50 <_sbrk_r+0x1c>)
 800bf38:	2300      	movs	r3, #0
 800bf3a:	4604      	mov	r4, r0
 800bf3c:	4608      	mov	r0, r1
 800bf3e:	602b      	str	r3, [r5, #0]
 800bf40:	f7f5 fba8 	bl	8001694 <_sbrk>
 800bf44:	1c43      	adds	r3, r0, #1
 800bf46:	d102      	bne.n	800bf4e <_sbrk_r+0x1a>
 800bf48:	682b      	ldr	r3, [r5, #0]
 800bf4a:	b103      	cbz	r3, 800bf4e <_sbrk_r+0x1a>
 800bf4c:	6023      	str	r3, [r4, #0]
 800bf4e:	bd38      	pop	{r3, r4, r5, pc}
 800bf50:	240006dc 	.word	0x240006dc

0800bf54 <__assert_func>:
 800bf54:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800bf56:	4614      	mov	r4, r2
 800bf58:	461a      	mov	r2, r3
 800bf5a:	4b09      	ldr	r3, [pc, #36]	@ (800bf80 <__assert_func+0x2c>)
 800bf5c:	681b      	ldr	r3, [r3, #0]
 800bf5e:	4605      	mov	r5, r0
 800bf60:	68d8      	ldr	r0, [r3, #12]
 800bf62:	b14c      	cbz	r4, 800bf78 <__assert_func+0x24>
 800bf64:	4b07      	ldr	r3, [pc, #28]	@ (800bf84 <__assert_func+0x30>)
 800bf66:	9100      	str	r1, [sp, #0]
 800bf68:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800bf6c:	4906      	ldr	r1, [pc, #24]	@ (800bf88 <__assert_func+0x34>)
 800bf6e:	462b      	mov	r3, r5
 800bf70:	f000 f842 	bl	800bff8 <fiprintf>
 800bf74:	f000 f852 	bl	800c01c <abort>
 800bf78:	4b04      	ldr	r3, [pc, #16]	@ (800bf8c <__assert_func+0x38>)
 800bf7a:	461c      	mov	r4, r3
 800bf7c:	e7f3      	b.n	800bf66 <__assert_func+0x12>
 800bf7e:	bf00      	nop
 800bf80:	2400001c 	.word	0x2400001c
 800bf84:	0800c355 	.word	0x0800c355
 800bf88:	0800c362 	.word	0x0800c362
 800bf8c:	0800c390 	.word	0x0800c390

0800bf90 <_calloc_r>:
 800bf90:	b570      	push	{r4, r5, r6, lr}
 800bf92:	fba1 5402 	umull	r5, r4, r1, r2
 800bf96:	b934      	cbnz	r4, 800bfa6 <_calloc_r+0x16>
 800bf98:	4629      	mov	r1, r5
 800bf9a:	f7ff f953 	bl	800b244 <_malloc_r>
 800bf9e:	4606      	mov	r6, r0
 800bfa0:	b928      	cbnz	r0, 800bfae <_calloc_r+0x1e>
 800bfa2:	4630      	mov	r0, r6
 800bfa4:	bd70      	pop	{r4, r5, r6, pc}
 800bfa6:	220c      	movs	r2, #12
 800bfa8:	6002      	str	r2, [r0, #0]
 800bfaa:	2600      	movs	r6, #0
 800bfac:	e7f9      	b.n	800bfa2 <_calloc_r+0x12>
 800bfae:	462a      	mov	r2, r5
 800bfb0:	4621      	mov	r1, r4
 800bfb2:	f7fe fa5f 	bl	800a474 <memset>
 800bfb6:	e7f4      	b.n	800bfa2 <_calloc_r+0x12>

0800bfb8 <__ascii_mbtowc>:
 800bfb8:	b082      	sub	sp, #8
 800bfba:	b901      	cbnz	r1, 800bfbe <__ascii_mbtowc+0x6>
 800bfbc:	a901      	add	r1, sp, #4
 800bfbe:	b142      	cbz	r2, 800bfd2 <__ascii_mbtowc+0x1a>
 800bfc0:	b14b      	cbz	r3, 800bfd6 <__ascii_mbtowc+0x1e>
 800bfc2:	7813      	ldrb	r3, [r2, #0]
 800bfc4:	600b      	str	r3, [r1, #0]
 800bfc6:	7812      	ldrb	r2, [r2, #0]
 800bfc8:	1e10      	subs	r0, r2, #0
 800bfca:	bf18      	it	ne
 800bfcc:	2001      	movne	r0, #1
 800bfce:	b002      	add	sp, #8
 800bfd0:	4770      	bx	lr
 800bfd2:	4610      	mov	r0, r2
 800bfd4:	e7fb      	b.n	800bfce <__ascii_mbtowc+0x16>
 800bfd6:	f06f 0001 	mvn.w	r0, #1
 800bfda:	e7f8      	b.n	800bfce <__ascii_mbtowc+0x16>

0800bfdc <__ascii_wctomb>:
 800bfdc:	4603      	mov	r3, r0
 800bfde:	4608      	mov	r0, r1
 800bfe0:	b141      	cbz	r1, 800bff4 <__ascii_wctomb+0x18>
 800bfe2:	2aff      	cmp	r2, #255	@ 0xff
 800bfe4:	d904      	bls.n	800bff0 <__ascii_wctomb+0x14>
 800bfe6:	228a      	movs	r2, #138	@ 0x8a
 800bfe8:	601a      	str	r2, [r3, #0]
 800bfea:	f04f 30ff 	mov.w	r0, #4294967295
 800bfee:	4770      	bx	lr
 800bff0:	700a      	strb	r2, [r1, #0]
 800bff2:	2001      	movs	r0, #1
 800bff4:	4770      	bx	lr
	...

0800bff8 <fiprintf>:
 800bff8:	b40e      	push	{r1, r2, r3}
 800bffa:	b503      	push	{r0, r1, lr}
 800bffc:	4601      	mov	r1, r0
 800bffe:	ab03      	add	r3, sp, #12
 800c000:	4805      	ldr	r0, [pc, #20]	@ (800c018 <fiprintf+0x20>)
 800c002:	f853 2b04 	ldr.w	r2, [r3], #4
 800c006:	6800      	ldr	r0, [r0, #0]
 800c008:	9301      	str	r3, [sp, #4]
 800c00a:	f7ff fd4b 	bl	800baa4 <_vfiprintf_r>
 800c00e:	b002      	add	sp, #8
 800c010:	f85d eb04 	ldr.w	lr, [sp], #4
 800c014:	b003      	add	sp, #12
 800c016:	4770      	bx	lr
 800c018:	2400001c 	.word	0x2400001c

0800c01c <abort>:
 800c01c:	b508      	push	{r3, lr}
 800c01e:	2006      	movs	r0, #6
 800c020:	f000 f82c 	bl	800c07c <raise>
 800c024:	2001      	movs	r0, #1
 800c026:	f7f5 fabd 	bl	80015a4 <_exit>

0800c02a <_raise_r>:
 800c02a:	291f      	cmp	r1, #31
 800c02c:	b538      	push	{r3, r4, r5, lr}
 800c02e:	4605      	mov	r5, r0
 800c030:	460c      	mov	r4, r1
 800c032:	d904      	bls.n	800c03e <_raise_r+0x14>
 800c034:	2316      	movs	r3, #22
 800c036:	6003      	str	r3, [r0, #0]
 800c038:	f04f 30ff 	mov.w	r0, #4294967295
 800c03c:	bd38      	pop	{r3, r4, r5, pc}
 800c03e:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800c040:	b112      	cbz	r2, 800c048 <_raise_r+0x1e>
 800c042:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800c046:	b94b      	cbnz	r3, 800c05c <_raise_r+0x32>
 800c048:	4628      	mov	r0, r5
 800c04a:	f000 f831 	bl	800c0b0 <_getpid_r>
 800c04e:	4622      	mov	r2, r4
 800c050:	4601      	mov	r1, r0
 800c052:	4628      	mov	r0, r5
 800c054:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800c058:	f000 b818 	b.w	800c08c <_kill_r>
 800c05c:	2b01      	cmp	r3, #1
 800c05e:	d00a      	beq.n	800c076 <_raise_r+0x4c>
 800c060:	1c59      	adds	r1, r3, #1
 800c062:	d103      	bne.n	800c06c <_raise_r+0x42>
 800c064:	2316      	movs	r3, #22
 800c066:	6003      	str	r3, [r0, #0]
 800c068:	2001      	movs	r0, #1
 800c06a:	e7e7      	b.n	800c03c <_raise_r+0x12>
 800c06c:	2100      	movs	r1, #0
 800c06e:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800c072:	4620      	mov	r0, r4
 800c074:	4798      	blx	r3
 800c076:	2000      	movs	r0, #0
 800c078:	e7e0      	b.n	800c03c <_raise_r+0x12>
	...

0800c07c <raise>:
 800c07c:	4b02      	ldr	r3, [pc, #8]	@ (800c088 <raise+0xc>)
 800c07e:	4601      	mov	r1, r0
 800c080:	6818      	ldr	r0, [r3, #0]
 800c082:	f7ff bfd2 	b.w	800c02a <_raise_r>
 800c086:	bf00      	nop
 800c088:	2400001c 	.word	0x2400001c

0800c08c <_kill_r>:
 800c08c:	b538      	push	{r3, r4, r5, lr}
 800c08e:	4d07      	ldr	r5, [pc, #28]	@ (800c0ac <_kill_r+0x20>)
 800c090:	2300      	movs	r3, #0
 800c092:	4604      	mov	r4, r0
 800c094:	4608      	mov	r0, r1
 800c096:	4611      	mov	r1, r2
 800c098:	602b      	str	r3, [r5, #0]
 800c09a:	f7f5 fa73 	bl	8001584 <_kill>
 800c09e:	1c43      	adds	r3, r0, #1
 800c0a0:	d102      	bne.n	800c0a8 <_kill_r+0x1c>
 800c0a2:	682b      	ldr	r3, [r5, #0]
 800c0a4:	b103      	cbz	r3, 800c0a8 <_kill_r+0x1c>
 800c0a6:	6023      	str	r3, [r4, #0]
 800c0a8:	bd38      	pop	{r3, r4, r5, pc}
 800c0aa:	bf00      	nop
 800c0ac:	240006dc 	.word	0x240006dc

0800c0b0 <_getpid_r>:
 800c0b0:	f7f5 ba60 	b.w	8001574 <_getpid>

0800c0b4 <_init>:
 800c0b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c0b6:	bf00      	nop
 800c0b8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c0ba:	bc08      	pop	{r3}
 800c0bc:	469e      	mov	lr, r3
 800c0be:	4770      	bx	lr

0800c0c0 <_fini>:
 800c0c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c0c2:	bf00      	nop
 800c0c4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c0c6:	bc08      	pop	{r3}
 800c0c8:	469e      	mov	lr, r3
 800c0ca:	4770      	bx	lr
