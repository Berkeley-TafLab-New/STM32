
STM32Code.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000002cc  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000afac  080002d0  080002d0  000012d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000424  0800b280  0800b280  0000c280  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  0800b6a4  0800b6a4  0000c6a4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  0800b6ac  0800b6ac  0000c6ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .fini_array   00000004  0800b6b0  0800b6b0  0000c6b0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .data         000001d8  24000000  0800b6b4  0000d000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00000338  240001d8  0800b88c  0000d1d8  2**2
                  ALLOC
  8 ._user_heap_stack 00000600  24000510  0800b88c  0000d510  2**0
                  ALLOC
  9 .ARM.attributes 0000002e  00000000  00000000  0000d1d8  2**0
                  CONTENTS, READONLY
 10 .debug_info   0001a22f  00000000  00000000  0000d206  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 00002f9e  00000000  00000000  00027435  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 000014b0  00000000  00000000  0002a3d8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_rnglists 0000103f  00000000  00000000  0002b888  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  00034f73  00000000  00000000  0002c8c7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   0001c7c2  00000000  00000000  0006183a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    001517f9  00000000  00000000  0007dffc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000043  00000000  00000000  001cf7f5  2**0
                  CONTENTS, READONLY
 18 .debug_frame  000066d4  00000000  00000000  001cf838  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line_str 00000054  00000000  00000000  001d5f0c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002d0 <__do_global_dtors_aux>:
 80002d0:	b510      	push	{r4, lr}
 80002d2:	4c05      	ldr	r4, [pc, #20]	@ (80002e8 <__do_global_dtors_aux+0x18>)
 80002d4:	7823      	ldrb	r3, [r4, #0]
 80002d6:	b933      	cbnz	r3, 80002e6 <__do_global_dtors_aux+0x16>
 80002d8:	4b04      	ldr	r3, [pc, #16]	@ (80002ec <__do_global_dtors_aux+0x1c>)
 80002da:	b113      	cbz	r3, 80002e2 <__do_global_dtors_aux+0x12>
 80002dc:	4804      	ldr	r0, [pc, #16]	@ (80002f0 <__do_global_dtors_aux+0x20>)
 80002de:	f3af 8000 	nop.w
 80002e2:	2301      	movs	r3, #1
 80002e4:	7023      	strb	r3, [r4, #0]
 80002e6:	bd10      	pop	{r4, pc}
 80002e8:	240001d8 	.word	0x240001d8
 80002ec:	00000000 	.word	0x00000000
 80002f0:	0800b264 	.word	0x0800b264

080002f4 <frame_dummy>:
 80002f4:	b508      	push	{r3, lr}
 80002f6:	4b03      	ldr	r3, [pc, #12]	@ (8000304 <frame_dummy+0x10>)
 80002f8:	b11b      	cbz	r3, 8000302 <frame_dummy+0xe>
 80002fa:	4903      	ldr	r1, [pc, #12]	@ (8000308 <frame_dummy+0x14>)
 80002fc:	4803      	ldr	r0, [pc, #12]	@ (800030c <frame_dummy+0x18>)
 80002fe:	f3af 8000 	nop.w
 8000302:	bd08      	pop	{r3, pc}
 8000304:	00000000 	.word	0x00000000
 8000308:	240001dc 	.word	0x240001dc
 800030c:	0800b264 	.word	0x0800b264

08000310 <memchr>:
 8000310:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000314:	2a10      	cmp	r2, #16
 8000316:	db2b      	blt.n	8000370 <memchr+0x60>
 8000318:	f010 0f07 	tst.w	r0, #7
 800031c:	d008      	beq.n	8000330 <memchr+0x20>
 800031e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000322:	3a01      	subs	r2, #1
 8000324:	428b      	cmp	r3, r1
 8000326:	d02d      	beq.n	8000384 <memchr+0x74>
 8000328:	f010 0f07 	tst.w	r0, #7
 800032c:	b342      	cbz	r2, 8000380 <memchr+0x70>
 800032e:	d1f6      	bne.n	800031e <memchr+0xe>
 8000330:	b4f0      	push	{r4, r5, r6, r7}
 8000332:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000336:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800033a:	f022 0407 	bic.w	r4, r2, #7
 800033e:	f07f 0700 	mvns.w	r7, #0
 8000342:	2300      	movs	r3, #0
 8000344:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000348:	3c08      	subs	r4, #8
 800034a:	ea85 0501 	eor.w	r5, r5, r1
 800034e:	ea86 0601 	eor.w	r6, r6, r1
 8000352:	fa85 f547 	uadd8	r5, r5, r7
 8000356:	faa3 f587 	sel	r5, r3, r7
 800035a:	fa86 f647 	uadd8	r6, r6, r7
 800035e:	faa5 f687 	sel	r6, r5, r7
 8000362:	b98e      	cbnz	r6, 8000388 <memchr+0x78>
 8000364:	d1ee      	bne.n	8000344 <memchr+0x34>
 8000366:	bcf0      	pop	{r4, r5, r6, r7}
 8000368:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800036c:	f002 0207 	and.w	r2, r2, #7
 8000370:	b132      	cbz	r2, 8000380 <memchr+0x70>
 8000372:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000376:	3a01      	subs	r2, #1
 8000378:	ea83 0301 	eor.w	r3, r3, r1
 800037c:	b113      	cbz	r3, 8000384 <memchr+0x74>
 800037e:	d1f8      	bne.n	8000372 <memchr+0x62>
 8000380:	2000      	movs	r0, #0
 8000382:	4770      	bx	lr
 8000384:	3801      	subs	r0, #1
 8000386:	4770      	bx	lr
 8000388:	2d00      	cmp	r5, #0
 800038a:	bf06      	itte	eq
 800038c:	4635      	moveq	r5, r6
 800038e:	3803      	subeq	r0, #3
 8000390:	3807      	subne	r0, #7
 8000392:	f015 0f01 	tst.w	r5, #1
 8000396:	d107      	bne.n	80003a8 <memchr+0x98>
 8000398:	3001      	adds	r0, #1
 800039a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800039e:	bf02      	ittt	eq
 80003a0:	3001      	addeq	r0, #1
 80003a2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80003a6:	3001      	addeq	r0, #1
 80003a8:	bcf0      	pop	{r4, r5, r6, r7}
 80003aa:	3801      	subs	r0, #1
 80003ac:	4770      	bx	lr
 80003ae:	bf00      	nop

080003b0 <strlen>:
 80003b0:	4603      	mov	r3, r0
 80003b2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80003b6:	2a00      	cmp	r2, #0
 80003b8:	d1fb      	bne.n	80003b2 <strlen+0x2>
 80003ba:	1a18      	subs	r0, r3, r0
 80003bc:	3801      	subs	r0, #1
 80003be:	4770      	bx	lr

080003c0 <__aeabi_uldivmod>:
 80003c0:	b953      	cbnz	r3, 80003d8 <__aeabi_uldivmod+0x18>
 80003c2:	b94a      	cbnz	r2, 80003d8 <__aeabi_uldivmod+0x18>
 80003c4:	2900      	cmp	r1, #0
 80003c6:	bf08      	it	eq
 80003c8:	2800      	cmpeq	r0, #0
 80003ca:	bf1c      	itt	ne
 80003cc:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 80003d0:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 80003d4:	f000 b988 	b.w	80006e8 <__aeabi_idiv0>
 80003d8:	f1ad 0c08 	sub.w	ip, sp, #8
 80003dc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80003e0:	f000 f806 	bl	80003f0 <__udivmoddi4>
 80003e4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80003e8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80003ec:	b004      	add	sp, #16
 80003ee:	4770      	bx	lr

080003f0 <__udivmoddi4>:
 80003f0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80003f4:	9d08      	ldr	r5, [sp, #32]
 80003f6:	468e      	mov	lr, r1
 80003f8:	4604      	mov	r4, r0
 80003fa:	4688      	mov	r8, r1
 80003fc:	2b00      	cmp	r3, #0
 80003fe:	d14a      	bne.n	8000496 <__udivmoddi4+0xa6>
 8000400:	428a      	cmp	r2, r1
 8000402:	4617      	mov	r7, r2
 8000404:	d962      	bls.n	80004cc <__udivmoddi4+0xdc>
 8000406:	fab2 f682 	clz	r6, r2
 800040a:	b14e      	cbz	r6, 8000420 <__udivmoddi4+0x30>
 800040c:	f1c6 0320 	rsb	r3, r6, #32
 8000410:	fa01 f806 	lsl.w	r8, r1, r6
 8000414:	fa20 f303 	lsr.w	r3, r0, r3
 8000418:	40b7      	lsls	r7, r6
 800041a:	ea43 0808 	orr.w	r8, r3, r8
 800041e:	40b4      	lsls	r4, r6
 8000420:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000424:	fa1f fc87 	uxth.w	ip, r7
 8000428:	fbb8 f1fe 	udiv	r1, r8, lr
 800042c:	0c23      	lsrs	r3, r4, #16
 800042e:	fb0e 8811 	mls	r8, lr, r1, r8
 8000432:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000436:	fb01 f20c 	mul.w	r2, r1, ip
 800043a:	429a      	cmp	r2, r3
 800043c:	d909      	bls.n	8000452 <__udivmoddi4+0x62>
 800043e:	18fb      	adds	r3, r7, r3
 8000440:	f101 30ff 	add.w	r0, r1, #4294967295	@ 0xffffffff
 8000444:	f080 80ea 	bcs.w	800061c <__udivmoddi4+0x22c>
 8000448:	429a      	cmp	r2, r3
 800044a:	f240 80e7 	bls.w	800061c <__udivmoddi4+0x22c>
 800044e:	3902      	subs	r1, #2
 8000450:	443b      	add	r3, r7
 8000452:	1a9a      	subs	r2, r3, r2
 8000454:	b2a3      	uxth	r3, r4
 8000456:	fbb2 f0fe 	udiv	r0, r2, lr
 800045a:	fb0e 2210 	mls	r2, lr, r0, r2
 800045e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000462:	fb00 fc0c 	mul.w	ip, r0, ip
 8000466:	459c      	cmp	ip, r3
 8000468:	d909      	bls.n	800047e <__udivmoddi4+0x8e>
 800046a:	18fb      	adds	r3, r7, r3
 800046c:	f100 32ff 	add.w	r2, r0, #4294967295	@ 0xffffffff
 8000470:	f080 80d6 	bcs.w	8000620 <__udivmoddi4+0x230>
 8000474:	459c      	cmp	ip, r3
 8000476:	f240 80d3 	bls.w	8000620 <__udivmoddi4+0x230>
 800047a:	443b      	add	r3, r7
 800047c:	3802      	subs	r0, #2
 800047e:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000482:	eba3 030c 	sub.w	r3, r3, ip
 8000486:	2100      	movs	r1, #0
 8000488:	b11d      	cbz	r5, 8000492 <__udivmoddi4+0xa2>
 800048a:	40f3      	lsrs	r3, r6
 800048c:	2200      	movs	r2, #0
 800048e:	e9c5 3200 	strd	r3, r2, [r5]
 8000492:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000496:	428b      	cmp	r3, r1
 8000498:	d905      	bls.n	80004a6 <__udivmoddi4+0xb6>
 800049a:	b10d      	cbz	r5, 80004a0 <__udivmoddi4+0xb0>
 800049c:	e9c5 0100 	strd	r0, r1, [r5]
 80004a0:	2100      	movs	r1, #0
 80004a2:	4608      	mov	r0, r1
 80004a4:	e7f5      	b.n	8000492 <__udivmoddi4+0xa2>
 80004a6:	fab3 f183 	clz	r1, r3
 80004aa:	2900      	cmp	r1, #0
 80004ac:	d146      	bne.n	800053c <__udivmoddi4+0x14c>
 80004ae:	4573      	cmp	r3, lr
 80004b0:	d302      	bcc.n	80004b8 <__udivmoddi4+0xc8>
 80004b2:	4282      	cmp	r2, r0
 80004b4:	f200 8105 	bhi.w	80006c2 <__udivmoddi4+0x2d2>
 80004b8:	1a84      	subs	r4, r0, r2
 80004ba:	eb6e 0203 	sbc.w	r2, lr, r3
 80004be:	2001      	movs	r0, #1
 80004c0:	4690      	mov	r8, r2
 80004c2:	2d00      	cmp	r5, #0
 80004c4:	d0e5      	beq.n	8000492 <__udivmoddi4+0xa2>
 80004c6:	e9c5 4800 	strd	r4, r8, [r5]
 80004ca:	e7e2      	b.n	8000492 <__udivmoddi4+0xa2>
 80004cc:	2a00      	cmp	r2, #0
 80004ce:	f000 8090 	beq.w	80005f2 <__udivmoddi4+0x202>
 80004d2:	fab2 f682 	clz	r6, r2
 80004d6:	2e00      	cmp	r6, #0
 80004d8:	f040 80a4 	bne.w	8000624 <__udivmoddi4+0x234>
 80004dc:	1a8a      	subs	r2, r1, r2
 80004de:	0c03      	lsrs	r3, r0, #16
 80004e0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80004e4:	b280      	uxth	r0, r0
 80004e6:	b2bc      	uxth	r4, r7
 80004e8:	2101      	movs	r1, #1
 80004ea:	fbb2 fcfe 	udiv	ip, r2, lr
 80004ee:	fb0e 221c 	mls	r2, lr, ip, r2
 80004f2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80004f6:	fb04 f20c 	mul.w	r2, r4, ip
 80004fa:	429a      	cmp	r2, r3
 80004fc:	d907      	bls.n	800050e <__udivmoddi4+0x11e>
 80004fe:	18fb      	adds	r3, r7, r3
 8000500:	f10c 38ff 	add.w	r8, ip, #4294967295	@ 0xffffffff
 8000504:	d202      	bcs.n	800050c <__udivmoddi4+0x11c>
 8000506:	429a      	cmp	r2, r3
 8000508:	f200 80e0 	bhi.w	80006cc <__udivmoddi4+0x2dc>
 800050c:	46c4      	mov	ip, r8
 800050e:	1a9b      	subs	r3, r3, r2
 8000510:	fbb3 f2fe 	udiv	r2, r3, lr
 8000514:	fb0e 3312 	mls	r3, lr, r2, r3
 8000518:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 800051c:	fb02 f404 	mul.w	r4, r2, r4
 8000520:	429c      	cmp	r4, r3
 8000522:	d907      	bls.n	8000534 <__udivmoddi4+0x144>
 8000524:	18fb      	adds	r3, r7, r3
 8000526:	f102 30ff 	add.w	r0, r2, #4294967295	@ 0xffffffff
 800052a:	d202      	bcs.n	8000532 <__udivmoddi4+0x142>
 800052c:	429c      	cmp	r4, r3
 800052e:	f200 80ca 	bhi.w	80006c6 <__udivmoddi4+0x2d6>
 8000532:	4602      	mov	r2, r0
 8000534:	1b1b      	subs	r3, r3, r4
 8000536:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 800053a:	e7a5      	b.n	8000488 <__udivmoddi4+0x98>
 800053c:	f1c1 0620 	rsb	r6, r1, #32
 8000540:	408b      	lsls	r3, r1
 8000542:	fa22 f706 	lsr.w	r7, r2, r6
 8000546:	431f      	orrs	r7, r3
 8000548:	fa0e f401 	lsl.w	r4, lr, r1
 800054c:	fa20 f306 	lsr.w	r3, r0, r6
 8000550:	fa2e fe06 	lsr.w	lr, lr, r6
 8000554:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000558:	4323      	orrs	r3, r4
 800055a:	fa00 f801 	lsl.w	r8, r0, r1
 800055e:	fa1f fc87 	uxth.w	ip, r7
 8000562:	fbbe f0f9 	udiv	r0, lr, r9
 8000566:	0c1c      	lsrs	r4, r3, #16
 8000568:	fb09 ee10 	mls	lr, r9, r0, lr
 800056c:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000570:	fb00 fe0c 	mul.w	lr, r0, ip
 8000574:	45a6      	cmp	lr, r4
 8000576:	fa02 f201 	lsl.w	r2, r2, r1
 800057a:	d909      	bls.n	8000590 <__udivmoddi4+0x1a0>
 800057c:	193c      	adds	r4, r7, r4
 800057e:	f100 3aff 	add.w	sl, r0, #4294967295	@ 0xffffffff
 8000582:	f080 809c 	bcs.w	80006be <__udivmoddi4+0x2ce>
 8000586:	45a6      	cmp	lr, r4
 8000588:	f240 8099 	bls.w	80006be <__udivmoddi4+0x2ce>
 800058c:	3802      	subs	r0, #2
 800058e:	443c      	add	r4, r7
 8000590:	eba4 040e 	sub.w	r4, r4, lr
 8000594:	fa1f fe83 	uxth.w	lr, r3
 8000598:	fbb4 f3f9 	udiv	r3, r4, r9
 800059c:	fb09 4413 	mls	r4, r9, r3, r4
 80005a0:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 80005a4:	fb03 fc0c 	mul.w	ip, r3, ip
 80005a8:	45a4      	cmp	ip, r4
 80005aa:	d908      	bls.n	80005be <__udivmoddi4+0x1ce>
 80005ac:	193c      	adds	r4, r7, r4
 80005ae:	f103 3eff 	add.w	lr, r3, #4294967295	@ 0xffffffff
 80005b2:	f080 8082 	bcs.w	80006ba <__udivmoddi4+0x2ca>
 80005b6:	45a4      	cmp	ip, r4
 80005b8:	d97f      	bls.n	80006ba <__udivmoddi4+0x2ca>
 80005ba:	3b02      	subs	r3, #2
 80005bc:	443c      	add	r4, r7
 80005be:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 80005c2:	eba4 040c 	sub.w	r4, r4, ip
 80005c6:	fba0 ec02 	umull	lr, ip, r0, r2
 80005ca:	4564      	cmp	r4, ip
 80005cc:	4673      	mov	r3, lr
 80005ce:	46e1      	mov	r9, ip
 80005d0:	d362      	bcc.n	8000698 <__udivmoddi4+0x2a8>
 80005d2:	d05f      	beq.n	8000694 <__udivmoddi4+0x2a4>
 80005d4:	b15d      	cbz	r5, 80005ee <__udivmoddi4+0x1fe>
 80005d6:	ebb8 0203 	subs.w	r2, r8, r3
 80005da:	eb64 0409 	sbc.w	r4, r4, r9
 80005de:	fa04 f606 	lsl.w	r6, r4, r6
 80005e2:	fa22 f301 	lsr.w	r3, r2, r1
 80005e6:	431e      	orrs	r6, r3
 80005e8:	40cc      	lsrs	r4, r1
 80005ea:	e9c5 6400 	strd	r6, r4, [r5]
 80005ee:	2100      	movs	r1, #0
 80005f0:	e74f      	b.n	8000492 <__udivmoddi4+0xa2>
 80005f2:	fbb1 fcf2 	udiv	ip, r1, r2
 80005f6:	0c01      	lsrs	r1, r0, #16
 80005f8:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 80005fc:	b280      	uxth	r0, r0
 80005fe:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 8000602:	463b      	mov	r3, r7
 8000604:	4638      	mov	r0, r7
 8000606:	463c      	mov	r4, r7
 8000608:	46b8      	mov	r8, r7
 800060a:	46be      	mov	lr, r7
 800060c:	2620      	movs	r6, #32
 800060e:	fbb1 f1f7 	udiv	r1, r1, r7
 8000612:	eba2 0208 	sub.w	r2, r2, r8
 8000616:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 800061a:	e766      	b.n	80004ea <__udivmoddi4+0xfa>
 800061c:	4601      	mov	r1, r0
 800061e:	e718      	b.n	8000452 <__udivmoddi4+0x62>
 8000620:	4610      	mov	r0, r2
 8000622:	e72c      	b.n	800047e <__udivmoddi4+0x8e>
 8000624:	f1c6 0220 	rsb	r2, r6, #32
 8000628:	fa2e f302 	lsr.w	r3, lr, r2
 800062c:	40b7      	lsls	r7, r6
 800062e:	40b1      	lsls	r1, r6
 8000630:	fa20 f202 	lsr.w	r2, r0, r2
 8000634:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000638:	430a      	orrs	r2, r1
 800063a:	fbb3 f8fe 	udiv	r8, r3, lr
 800063e:	b2bc      	uxth	r4, r7
 8000640:	fb0e 3318 	mls	r3, lr, r8, r3
 8000644:	0c11      	lsrs	r1, r2, #16
 8000646:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800064a:	fb08 f904 	mul.w	r9, r8, r4
 800064e:	40b0      	lsls	r0, r6
 8000650:	4589      	cmp	r9, r1
 8000652:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000656:	b280      	uxth	r0, r0
 8000658:	d93e      	bls.n	80006d8 <__udivmoddi4+0x2e8>
 800065a:	1879      	adds	r1, r7, r1
 800065c:	f108 3cff 	add.w	ip, r8, #4294967295	@ 0xffffffff
 8000660:	d201      	bcs.n	8000666 <__udivmoddi4+0x276>
 8000662:	4589      	cmp	r9, r1
 8000664:	d81f      	bhi.n	80006a6 <__udivmoddi4+0x2b6>
 8000666:	eba1 0109 	sub.w	r1, r1, r9
 800066a:	fbb1 f9fe 	udiv	r9, r1, lr
 800066e:	fb09 f804 	mul.w	r8, r9, r4
 8000672:	fb0e 1119 	mls	r1, lr, r9, r1
 8000676:	b292      	uxth	r2, r2
 8000678:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800067c:	4542      	cmp	r2, r8
 800067e:	d229      	bcs.n	80006d4 <__udivmoddi4+0x2e4>
 8000680:	18ba      	adds	r2, r7, r2
 8000682:	f109 31ff 	add.w	r1, r9, #4294967295	@ 0xffffffff
 8000686:	d2c4      	bcs.n	8000612 <__udivmoddi4+0x222>
 8000688:	4542      	cmp	r2, r8
 800068a:	d2c2      	bcs.n	8000612 <__udivmoddi4+0x222>
 800068c:	f1a9 0102 	sub.w	r1, r9, #2
 8000690:	443a      	add	r2, r7
 8000692:	e7be      	b.n	8000612 <__udivmoddi4+0x222>
 8000694:	45f0      	cmp	r8, lr
 8000696:	d29d      	bcs.n	80005d4 <__udivmoddi4+0x1e4>
 8000698:	ebbe 0302 	subs.w	r3, lr, r2
 800069c:	eb6c 0c07 	sbc.w	ip, ip, r7
 80006a0:	3801      	subs	r0, #1
 80006a2:	46e1      	mov	r9, ip
 80006a4:	e796      	b.n	80005d4 <__udivmoddi4+0x1e4>
 80006a6:	eba7 0909 	sub.w	r9, r7, r9
 80006aa:	4449      	add	r1, r9
 80006ac:	f1a8 0c02 	sub.w	ip, r8, #2
 80006b0:	fbb1 f9fe 	udiv	r9, r1, lr
 80006b4:	fb09 f804 	mul.w	r8, r9, r4
 80006b8:	e7db      	b.n	8000672 <__udivmoddi4+0x282>
 80006ba:	4673      	mov	r3, lr
 80006bc:	e77f      	b.n	80005be <__udivmoddi4+0x1ce>
 80006be:	4650      	mov	r0, sl
 80006c0:	e766      	b.n	8000590 <__udivmoddi4+0x1a0>
 80006c2:	4608      	mov	r0, r1
 80006c4:	e6fd      	b.n	80004c2 <__udivmoddi4+0xd2>
 80006c6:	443b      	add	r3, r7
 80006c8:	3a02      	subs	r2, #2
 80006ca:	e733      	b.n	8000534 <__udivmoddi4+0x144>
 80006cc:	f1ac 0c02 	sub.w	ip, ip, #2
 80006d0:	443b      	add	r3, r7
 80006d2:	e71c      	b.n	800050e <__udivmoddi4+0x11e>
 80006d4:	4649      	mov	r1, r9
 80006d6:	e79c      	b.n	8000612 <__udivmoddi4+0x222>
 80006d8:	eba1 0109 	sub.w	r1, r1, r9
 80006dc:	46c4      	mov	ip, r8
 80006de:	fbb1 f9fe 	udiv	r9, r1, lr
 80006e2:	fb09 f804 	mul.w	r8, r9, r4
 80006e6:	e7c4      	b.n	8000672 <__udivmoddi4+0x282>

080006e8 <__aeabi_idiv0>:
 80006e8:	4770      	bx	lr
 80006ea:	bf00      	nop

080006ec <AS5600_read_angle>:
 */

#include "AS5600.h"
#include "stdint.h"

HAL_StatusTypeDef AS5600_read_angle(I2C_HandleTypeDef *hi2c, float *angle){
 80006ec:	b580      	push	{r7, lr}
 80006ee:	b088      	sub	sp, #32
 80006f0:	af04      	add	r7, sp, #16
 80006f2:	6078      	str	r0, [r7, #4]
 80006f4:	6039      	str	r1, [r7, #0]
    
    HAL_StatusTypeDef ret ;
    uint8_t angle_buff[2]; // hold the 2 bits from the Raw Angle 
    ret = HAL_I2C_Mem_Read(hi2c, (AS5600_ADRESS<<1), AS5600_RAW_ANGLE_REG, I2C_MEMADD_SIZE_8BIT,angle_buff,2,HAL_MAX_DELAY);//HAL_MAX_DELAY is blockling 
 80006f6:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80006fa:	9302      	str	r3, [sp, #8]
 80006fc:	2302      	movs	r3, #2
 80006fe:	9301      	str	r3, [sp, #4]
 8000700:	f107 0308 	add.w	r3, r7, #8
 8000704:	9300      	str	r3, [sp, #0]
 8000706:	2301      	movs	r3, #1
 8000708:	220c      	movs	r2, #12
 800070a:	216c      	movs	r1, #108	@ 0x6c
 800070c:	6878      	ldr	r0, [r7, #4]
 800070e:	f002 f9b5 	bl	8002a7c <HAL_I2C_Mem_Read>
 8000712:	4603      	mov	r3, r0
 8000714:	73fb      	strb	r3, [r7, #15]
    if (ret != HAL_OK){
 8000716:	7bfb      	ldrb	r3, [r7, #15]
 8000718:	2b00      	cmp	r3, #0
 800071a:	d003      	beq.n	8000724 <AS5600_read_angle+0x38>
    	handle_error(ret);
 800071c:	7bfb      	ldrb	r3, [r7, #15]
 800071e:	4618      	mov	r0, r3
 8000720:	f000 f826 	bl	8000770 <handle_error>
    }
    uint16_t raw_angle = (((angle_buff[0]<<8)|angle_buff[1])&0x0FFF);
 8000724:	7a3b      	ldrb	r3, [r7, #8]
 8000726:	b21b      	sxth	r3, r3
 8000728:	021b      	lsls	r3, r3, #8
 800072a:	b21a      	sxth	r2, r3
 800072c:	7a7b      	ldrb	r3, [r7, #9]
 800072e:	b21b      	sxth	r3, r3
 8000730:	4313      	orrs	r3, r2
 8000732:	b21b      	sxth	r3, r3
 8000734:	b29b      	uxth	r3, r3
 8000736:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800073a:	81bb      	strh	r3, [r7, #12]

    *angle = 360.0f*((float)raw_angle/4096.0f);
 800073c:	89bb      	ldrh	r3, [r7, #12]
 800073e:	ee07 3a90 	vmov	s15, r3
 8000742:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8000746:	eddf 6a08 	vldr	s13, [pc, #32]	@ 8000768 <AS5600_read_angle+0x7c>
 800074a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800074e:	ed9f 7a07 	vldr	s14, [pc, #28]	@ 800076c <AS5600_read_angle+0x80>
 8000752:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000756:	683b      	ldr	r3, [r7, #0]
 8000758:	edc3 7a00 	vstr	s15, [r3]
    return HAL_OK;
 800075c:	2300      	movs	r3, #0
}
 800075e:	4618      	mov	r0, r3
 8000760:	3710      	adds	r7, #16
 8000762:	46bd      	mov	sp, r7
 8000764:	bd80      	pop	{r7, pc}
 8000766:	bf00      	nop
 8000768:	45800000 	.word	0x45800000
 800076c:	43b40000 	.word	0x43b40000

08000770 <handle_error>:
        printf("No magnet detected or improper alignment\n");
        return 0; // Magnet is not detected
    }
}

void handle_error(HAL_StatusTypeDef status) {
 8000770:	b580      	push	{r7, lr}
 8000772:	b082      	sub	sp, #8
 8000774:	af00      	add	r7, sp, #0
 8000776:	4603      	mov	r3, r0
 8000778:	71fb      	strb	r3, [r7, #7]
    if (status != HAL_OK) {
 800077a:	79fb      	ldrb	r3, [r7, #7]
 800077c:	2b00      	cmp	r3, #0
 800077e:	d004      	beq.n	800078a <handle_error+0x1a>
        // Implement error handling logic (e.g., log error or reset I²C bus)
        printf("I2C Error: %d\n", status);
 8000780:	79fb      	ldrb	r3, [r7, #7]
 8000782:	4619      	mov	r1, r3
 8000784:	4803      	ldr	r0, [pc, #12]	@ (8000794 <handle_error+0x24>)
 8000786:	f008 fe07 	bl	8009398 <iprintf>
    }
}
 800078a:	bf00      	nop
 800078c:	3708      	adds	r7, #8
 800078e:	46bd      	mov	sp, r7
 8000790:	bd80      	pop	{r7, pc}
 8000792:	bf00      	nop
 8000794:	0800b2c4 	.word	0x0800b2c4

08000798 <__io_putchar>:

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
int __io_putchar(int ch) {
 8000798:	b580      	push	{r7, lr}
 800079a:	b082      	sub	sp, #8
 800079c:	af00      	add	r7, sp, #0
 800079e:	6078      	str	r0, [r7, #4]
    HAL_UART_Transmit(&huart3, (uint8_t *)&ch, 1, HAL_MAX_DELAY);
 80007a0:	1d39      	adds	r1, r7, #4
 80007a2:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80007a6:	2201      	movs	r2, #1
 80007a8:	4803      	ldr	r0, [pc, #12]	@ (80007b8 <__io_putchar+0x20>)
 80007aa:	f006 fa91 	bl	8006cd0 <HAL_UART_Transmit>
    return ch;
 80007ae:	687b      	ldr	r3, [r7, #4]
}
 80007b0:	4618      	mov	r0, r3
 80007b2:	3708      	adds	r7, #8
 80007b4:	46bd      	mov	sp, r7
 80007b6:	bd80      	pop	{r7, pc}
 80007b8:	24000328 	.word	0x24000328

080007bc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80007bc:	b580      	push	{r7, lr}
 80007be:	b082      	sub	sp, #8
 80007c0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */

  /* USER CODE END 1 */

  /* MPU Configuration--------------------------------------------------------*/
  MPU_Config();
 80007c2:	f000 fa97 	bl	8000cf4 <MPU_Config>

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80007c6:	f000 ff59 	bl	800167c <HAL_Init>

  /* USER CODE BEGIN Init */
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80007ca:	f000 f83d 	bl	8000848 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80007ce:	f000 fa11 	bl	8000bf4 <MX_GPIO_Init>
  MX_TIM1_Init();
 80007d2:	f000 f8d7 	bl	8000984 <MX_TIM1_Init>
  MX_USART3_UART_Init();
 80007d6:	f000 f9c1 	bl	8000b5c <MX_USART3_UART_Init>
  MX_USART2_UART_Init();
 80007da:	f000 f973 	bl	8000ac4 <MX_USART2_UART_Init>
  MX_I2C1_Init();
 80007de:	f000 f891 	bl	8000904 <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 80007e2:	2100      	movs	r1, #0
 80007e4:	4813      	ldr	r0, [pc, #76]	@ (8000834 <main+0x78>)
 80007e6:	f005 fb23 	bl	8005e30 <HAL_TIM_PWM_Start>

 volatile float angle;
 set_servo_angle(&htim1,TIM_CHANNEL_1, 90); // debug
 80007ea:	ed9f 0a13 	vldr	s0, [pc, #76]	@ 8000838 <main+0x7c>
 80007ee:	2100      	movs	r1, #0
 80007f0:	4810      	ldr	r0, [pc, #64]	@ (8000834 <main+0x78>)
 80007f2:	f000 fab1 	bl	8000d58 <set_servo_angle>
 set_servo_angle_gradual(&htim1, TIM_CHANNEL_1,0);
 80007f6:	ed9f 0a11 	vldr	s0, [pc, #68]	@ 800083c <main+0x80>
 80007fa:	2100      	movs	r1, #0
 80007fc:	480d      	ldr	r0, [pc, #52]	@ (8000834 <main+0x78>)
 80007fe:	f000 faf5 	bl	8000dec <set_servo_angle_gradual>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  HAL_StatusTypeDef i2c_status = AS5600_read_angle(&hi2c1, &angle);
 8000802:	463b      	mov	r3, r7
 8000804:	4619      	mov	r1, r3
 8000806:	480e      	ldr	r0, [pc, #56]	@ (8000840 <main+0x84>)
 8000808:	f7ff ff70 	bl	80006ec <AS5600_read_angle>
 800080c:	4603      	mov	r3, r0
 800080e:	71fb      	strb	r3, [r7, #7]
	  if (i2c_status== HAL_OK){
 8000810:	79fb      	ldrb	r3, [r7, #7]
 8000812:	2b00      	cmp	r3, #0
 8000814:	d00b      	beq.n	800082e <main+0x72>
		  continue;//printf("the angle is %f", angle);
	  }

	  
    
	  if (i2c_status != HAL_OK) {
 8000816:	79fb      	ldrb	r3, [r7, #7]
 8000818:	2b00      	cmp	r3, #0
 800081a:	d003      	beq.n	8000824 <main+0x68>
	      printf("Error reading angle from AS5600\n");
 800081c:	4809      	ldr	r0, [pc, #36]	@ (8000844 <main+0x88>)
 800081e:	f008 fe23 	bl	8009468 <puts>
	      continue; // Skip to the next iteration
 8000822:	e005      	b.n	8000830 <main+0x74>
	  }
	  HAL_Delay(500);
 8000824:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8000828:	f000 ffba 	bl	80017a0 <HAL_Delay>
 800082c:	e7e9      	b.n	8000802 <main+0x46>
		  continue;//printf("the angle is %f", angle);
 800082e:	bf00      	nop
  {
 8000830:	e7e7      	b.n	8000802 <main+0x46>
 8000832:	bf00      	nop
 8000834:	24000248 	.word	0x24000248
 8000838:	42b40000 	.word	0x42b40000
 800083c:	00000000 	.word	0x00000000
 8000840:	240001f4 	.word	0x240001f4
 8000844:	0800b2d4 	.word	0x0800b2d4

08000848 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000848:	b580      	push	{r7, lr}
 800084a:	b09c      	sub	sp, #112	@ 0x70
 800084c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800084e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000852:	224c      	movs	r2, #76	@ 0x4c
 8000854:	2100      	movs	r1, #0
 8000856:	4618      	mov	r0, r3
 8000858:	f008 fe0e 	bl	8009478 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800085c:	1d3b      	adds	r3, r7, #4
 800085e:	2220      	movs	r2, #32
 8000860:	2100      	movs	r1, #0
 8000862:	4618      	mov	r0, r3
 8000864:	f008 fe08 	bl	8009478 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 8000868:	2002      	movs	r0, #2
 800086a:	f002 fd27 	bl	80032bc <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 800086e:	2300      	movs	r3, #0
 8000870:	603b      	str	r3, [r7, #0]
 8000872:	4b23      	ldr	r3, [pc, #140]	@ (8000900 <SystemClock_Config+0xb8>)
 8000874:	699b      	ldr	r3, [r3, #24]
 8000876:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 800087a:	4a21      	ldr	r2, [pc, #132]	@ (8000900 <SystemClock_Config+0xb8>)
 800087c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000880:	6193      	str	r3, [r2, #24]
 8000882:	4b1f      	ldr	r3, [pc, #124]	@ (8000900 <SystemClock_Config+0xb8>)
 8000884:	699b      	ldr	r3, [r3, #24]
 8000886:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 800088a:	603b      	str	r3, [r7, #0]
 800088c:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 800088e:	bf00      	nop
 8000890:	4b1b      	ldr	r3, [pc, #108]	@ (8000900 <SystemClock_Config+0xb8>)
 8000892:	699b      	ldr	r3, [r3, #24]
 8000894:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8000898:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800089c:	d1f8      	bne.n	8000890 <SystemClock_Config+0x48>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800089e:	2302      	movs	r3, #2
 80008a0:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
 80008a2:	2301      	movs	r3, #1
 80008a4:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.HSICalibrationValue = 64;
 80008a6:	2340      	movs	r3, #64	@ 0x40
 80008a8:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80008aa:	2300      	movs	r3, #0
 80008ac:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80008ae:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80008b2:	4618      	mov	r0, r3
 80008b4:	f002 fd3c 	bl	8003330 <HAL_RCC_OscConfig>
 80008b8:	4603      	mov	r3, r0
 80008ba:	2b00      	cmp	r3, #0
 80008bc:	d001      	beq.n	80008c2 <SystemClock_Config+0x7a>
  {
    Error_Handler();
 80008be:	f000 fa45 	bl	8000d4c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80008c2:	233f      	movs	r3, #63	@ 0x3f
 80008c4:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80008c6:	2300      	movs	r3, #0
 80008c8:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 80008ca:	2300      	movs	r3, #0
 80008cc:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 80008ce:	2300      	movs	r3, #0
 80008d0:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV1;
 80008d2:	2300      	movs	r3, #0
 80008d4:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 80008d6:	2340      	movs	r3, #64	@ 0x40
 80008d8:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 80008da:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80008de:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV1;
 80008e0:	2300      	movs	r3, #0
 80008e2:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 80008e4:	1d3b      	adds	r3, r7, #4
 80008e6:	2101      	movs	r1, #1
 80008e8:	4618      	mov	r0, r3
 80008ea:	f003 f8fb 	bl	8003ae4 <HAL_RCC_ClockConfig>
 80008ee:	4603      	mov	r3, r0
 80008f0:	2b00      	cmp	r3, #0
 80008f2:	d001      	beq.n	80008f8 <SystemClock_Config+0xb0>
  {
    Error_Handler();
 80008f4:	f000 fa2a 	bl	8000d4c <Error_Handler>
  }
}
 80008f8:	bf00      	nop
 80008fa:	3770      	adds	r7, #112	@ 0x70
 80008fc:	46bd      	mov	sp, r7
 80008fe:	bd80      	pop	{r7, pc}
 8000900:	58024800 	.word	0x58024800

08000904 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000904:	b580      	push	{r7, lr}
 8000906:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000908:	4b1b      	ldr	r3, [pc, #108]	@ (8000978 <MX_I2C1_Init+0x74>)
 800090a:	4a1c      	ldr	r2, [pc, #112]	@ (800097c <MX_I2C1_Init+0x78>)
 800090c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00707CBB;
 800090e:	4b1a      	ldr	r3, [pc, #104]	@ (8000978 <MX_I2C1_Init+0x74>)
 8000910:	4a1b      	ldr	r2, [pc, #108]	@ (8000980 <MX_I2C1_Init+0x7c>)
 8000912:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8000914:	4b18      	ldr	r3, [pc, #96]	@ (8000978 <MX_I2C1_Init+0x74>)
 8000916:	2200      	movs	r2, #0
 8000918:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800091a:	4b17      	ldr	r3, [pc, #92]	@ (8000978 <MX_I2C1_Init+0x74>)
 800091c:	2201      	movs	r2, #1
 800091e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000920:	4b15      	ldr	r3, [pc, #84]	@ (8000978 <MX_I2C1_Init+0x74>)
 8000922:	2200      	movs	r2, #0
 8000924:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8000926:	4b14      	ldr	r3, [pc, #80]	@ (8000978 <MX_I2C1_Init+0x74>)
 8000928:	2200      	movs	r2, #0
 800092a:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 800092c:	4b12      	ldr	r3, [pc, #72]	@ (8000978 <MX_I2C1_Init+0x74>)
 800092e:	2200      	movs	r2, #0
 8000930:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000932:	4b11      	ldr	r3, [pc, #68]	@ (8000978 <MX_I2C1_Init+0x74>)
 8000934:	2200      	movs	r2, #0
 8000936:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000938:	4b0f      	ldr	r3, [pc, #60]	@ (8000978 <MX_I2C1_Init+0x74>)
 800093a:	2200      	movs	r2, #0
 800093c:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800093e:	480e      	ldr	r0, [pc, #56]	@ (8000978 <MX_I2C1_Init+0x74>)
 8000940:	f002 f800 	bl	8002944 <HAL_I2C_Init>
 8000944:	4603      	mov	r3, r0
 8000946:	2b00      	cmp	r3, #0
 8000948:	d001      	beq.n	800094e <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 800094a:	f000 f9ff 	bl	8000d4c <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800094e:	2100      	movs	r1, #0
 8000950:	4809      	ldr	r0, [pc, #36]	@ (8000978 <MX_I2C1_Init+0x74>)
 8000952:	f002 fc1b 	bl	800318c <HAL_I2CEx_ConfigAnalogFilter>
 8000956:	4603      	mov	r3, r0
 8000958:	2b00      	cmp	r3, #0
 800095a:	d001      	beq.n	8000960 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 800095c:	f000 f9f6 	bl	8000d4c <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8000960:	2100      	movs	r1, #0
 8000962:	4805      	ldr	r0, [pc, #20]	@ (8000978 <MX_I2C1_Init+0x74>)
 8000964:	f002 fc5d 	bl	8003222 <HAL_I2CEx_ConfigDigitalFilter>
 8000968:	4603      	mov	r3, r0
 800096a:	2b00      	cmp	r3, #0
 800096c:	d001      	beq.n	8000972 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 800096e:	f000 f9ed 	bl	8000d4c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000972:	bf00      	nop
 8000974:	bd80      	pop	{r7, pc}
 8000976:	bf00      	nop
 8000978:	240001f4 	.word	0x240001f4
 800097c:	40005400 	.word	0x40005400
 8000980:	00707cbb 	.word	0x00707cbb

08000984 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000984:	b580      	push	{r7, lr}
 8000986:	b098      	sub	sp, #96	@ 0x60
 8000988:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800098a:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 800098e:	2200      	movs	r2, #0
 8000990:	601a      	str	r2, [r3, #0]
 8000992:	605a      	str	r2, [r3, #4]
 8000994:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000996:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 800099a:	2200      	movs	r2, #0
 800099c:	601a      	str	r2, [r3, #0]
 800099e:	605a      	str	r2, [r3, #4]
 80009a0:	609a      	str	r2, [r3, #8]
 80009a2:	60da      	str	r2, [r3, #12]
 80009a4:	611a      	str	r2, [r3, #16]
 80009a6:	615a      	str	r2, [r3, #20]
 80009a8:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80009aa:	1d3b      	adds	r3, r7, #4
 80009ac:	2234      	movs	r2, #52	@ 0x34
 80009ae:	2100      	movs	r1, #0
 80009b0:	4618      	mov	r0, r3
 80009b2:	f008 fd61 	bl	8009478 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80009b6:	4b41      	ldr	r3, [pc, #260]	@ (8000abc <MX_TIM1_Init+0x138>)
 80009b8:	4a41      	ldr	r2, [pc, #260]	@ (8000ac0 <MX_TIM1_Init+0x13c>)
 80009ba:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 64-1;
 80009bc:	4b3f      	ldr	r3, [pc, #252]	@ (8000abc <MX_TIM1_Init+0x138>)
 80009be:	223f      	movs	r2, #63	@ 0x3f
 80009c0:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80009c2:	4b3e      	ldr	r3, [pc, #248]	@ (8000abc <MX_TIM1_Init+0x138>)
 80009c4:	2200      	movs	r2, #0
 80009c6:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 20000-1;
 80009c8:	4b3c      	ldr	r3, [pc, #240]	@ (8000abc <MX_TIM1_Init+0x138>)
 80009ca:	f644 621f 	movw	r2, #19999	@ 0x4e1f
 80009ce:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80009d0:	4b3a      	ldr	r3, [pc, #232]	@ (8000abc <MX_TIM1_Init+0x138>)
 80009d2:	2200      	movs	r2, #0
 80009d4:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80009d6:	4b39      	ldr	r3, [pc, #228]	@ (8000abc <MX_TIM1_Init+0x138>)
 80009d8:	2200      	movs	r2, #0
 80009da:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80009dc:	4b37      	ldr	r3, [pc, #220]	@ (8000abc <MX_TIM1_Init+0x138>)
 80009de:	2200      	movs	r2, #0
 80009e0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 80009e2:	4836      	ldr	r0, [pc, #216]	@ (8000abc <MX_TIM1_Init+0x138>)
 80009e4:	f005 f9cc 	bl	8005d80 <HAL_TIM_PWM_Init>
 80009e8:	4603      	mov	r3, r0
 80009ea:	2b00      	cmp	r3, #0
 80009ec:	d001      	beq.n	80009f2 <MX_TIM1_Init+0x6e>
  {
    Error_Handler();
 80009ee:	f000 f9ad 	bl	8000d4c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80009f2:	2300      	movs	r3, #0
 80009f4:	657b      	str	r3, [r7, #84]	@ 0x54
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 80009f6:	2300      	movs	r3, #0
 80009f8:	65bb      	str	r3, [r7, #88]	@ 0x58
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80009fa:	2300      	movs	r3, #0
 80009fc:	65fb      	str	r3, [r7, #92]	@ 0x5c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80009fe:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8000a02:	4619      	mov	r1, r3
 8000a04:	482d      	ldr	r0, [pc, #180]	@ (8000abc <MX_TIM1_Init+0x138>)
 8000a06:	f005 ffeb 	bl	80069e0 <HAL_TIMEx_MasterConfigSynchronization>
 8000a0a:	4603      	mov	r3, r0
 8000a0c:	2b00      	cmp	r3, #0
 8000a0e:	d001      	beq.n	8000a14 <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 8000a10:	f000 f99c 	bl	8000d4c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000a14:	2360      	movs	r3, #96	@ 0x60
 8000a16:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.Pulse = 5000;
 8000a18:	f241 3388 	movw	r3, #5000	@ 0x1388
 8000a1c:	63fb      	str	r3, [r7, #60]	@ 0x3c
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000a1e:	2300      	movs	r3, #0
 8000a20:	643b      	str	r3, [r7, #64]	@ 0x40
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8000a22:	2300      	movs	r3, #0
 8000a24:	647b      	str	r3, [r7, #68]	@ 0x44
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000a26:	2300      	movs	r3, #0
 8000a28:	64bb      	str	r3, [r7, #72]	@ 0x48
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000a2a:	2300      	movs	r3, #0
 8000a2c:	64fb      	str	r3, [r7, #76]	@ 0x4c
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000a2e:	2300      	movs	r3, #0
 8000a30:	653b      	str	r3, [r7, #80]	@ 0x50
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000a32:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8000a36:	2200      	movs	r2, #0
 8000a38:	4619      	mov	r1, r3
 8000a3a:	4820      	ldr	r0, [pc, #128]	@ (8000abc <MX_TIM1_Init+0x138>)
 8000a3c:	f005 fb14 	bl	8006068 <HAL_TIM_PWM_ConfigChannel>
 8000a40:	4603      	mov	r3, r0
 8000a42:	2b00      	cmp	r3, #0
 8000a44:	d001      	beq.n	8000a4a <MX_TIM1_Init+0xc6>
  {
    Error_Handler();
 8000a46:	f000 f981 	bl	8000d4c <Error_Handler>
  }
  sConfigOC.Pulse = 1500;
 8000a4a:	f240 53dc 	movw	r3, #1500	@ 0x5dc
 8000a4e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000a50:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8000a54:	2204      	movs	r2, #4
 8000a56:	4619      	mov	r1, r3
 8000a58:	4818      	ldr	r0, [pc, #96]	@ (8000abc <MX_TIM1_Init+0x138>)
 8000a5a:	f005 fb05 	bl	8006068 <HAL_TIM_PWM_ConfigChannel>
 8000a5e:	4603      	mov	r3, r0
 8000a60:	2b00      	cmp	r3, #0
 8000a62:	d001      	beq.n	8000a68 <MX_TIM1_Init+0xe4>
  {
    Error_Handler();
 8000a64:	f000 f972 	bl	8000d4c <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8000a68:	2300      	movs	r3, #0
 8000a6a:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8000a6c:	2300      	movs	r3, #0
 8000a6e:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8000a70:	2300      	movs	r3, #0
 8000a72:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8000a74:	2300      	movs	r3, #0
 8000a76:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8000a78:	2300      	movs	r3, #0
 8000a7a:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000a7c:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000a80:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8000a82:	2300      	movs	r3, #0
 8000a84:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8000a86:	2300      	movs	r3, #0
 8000a88:	627b      	str	r3, [r7, #36]	@ 0x24
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8000a8a:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8000a8e:	62bb      	str	r3, [r7, #40]	@ 0x28
  sBreakDeadTimeConfig.Break2Filter = 0;
 8000a90:	2300      	movs	r3, #0
 8000a92:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8000a94:	2300      	movs	r3, #0
 8000a96:	637b      	str	r3, [r7, #52]	@ 0x34
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8000a98:	1d3b      	adds	r3, r7, #4
 8000a9a:	4619      	mov	r1, r3
 8000a9c:	4807      	ldr	r0, [pc, #28]	@ (8000abc <MX_TIM1_Init+0x138>)
 8000a9e:	f006 f83b 	bl	8006b18 <HAL_TIMEx_ConfigBreakDeadTime>
 8000aa2:	4603      	mov	r3, r0
 8000aa4:	2b00      	cmp	r3, #0
 8000aa6:	d001      	beq.n	8000aac <MX_TIM1_Init+0x128>
  {
    Error_Handler();
 8000aa8:	f000 f950 	bl	8000d4c <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8000aac:	4803      	ldr	r0, [pc, #12]	@ (8000abc <MX_TIM1_Init+0x138>)
 8000aae:	f000 faef 	bl	8001090 <HAL_TIM_MspPostInit>

}
 8000ab2:	bf00      	nop
 8000ab4:	3760      	adds	r7, #96	@ 0x60
 8000ab6:	46bd      	mov	sp, r7
 8000ab8:	bd80      	pop	{r7, pc}
 8000aba:	bf00      	nop
 8000abc:	24000248 	.word	0x24000248
 8000ac0:	40010000 	.word	0x40010000

08000ac4 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000ac4:	b580      	push	{r7, lr}
 8000ac6:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000ac8:	4b22      	ldr	r3, [pc, #136]	@ (8000b54 <MX_USART2_UART_Init+0x90>)
 8000aca:	4a23      	ldr	r2, [pc, #140]	@ (8000b58 <MX_USART2_UART_Init+0x94>)
 8000acc:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 8000ace:	4b21      	ldr	r3, [pc, #132]	@ (8000b54 <MX_USART2_UART_Init+0x90>)
 8000ad0:	f44f 5216 	mov.w	r2, #9600	@ 0x2580
 8000ad4:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000ad6:	4b1f      	ldr	r3, [pc, #124]	@ (8000b54 <MX_USART2_UART_Init+0x90>)
 8000ad8:	2200      	movs	r2, #0
 8000ada:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000adc:	4b1d      	ldr	r3, [pc, #116]	@ (8000b54 <MX_USART2_UART_Init+0x90>)
 8000ade:	2200      	movs	r2, #0
 8000ae0:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000ae2:	4b1c      	ldr	r3, [pc, #112]	@ (8000b54 <MX_USART2_UART_Init+0x90>)
 8000ae4:	2200      	movs	r2, #0
 8000ae6:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000ae8:	4b1a      	ldr	r3, [pc, #104]	@ (8000b54 <MX_USART2_UART_Init+0x90>)
 8000aea:	220c      	movs	r2, #12
 8000aec:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000aee:	4b19      	ldr	r3, [pc, #100]	@ (8000b54 <MX_USART2_UART_Init+0x90>)
 8000af0:	2200      	movs	r2, #0
 8000af2:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000af4:	4b17      	ldr	r3, [pc, #92]	@ (8000b54 <MX_USART2_UART_Init+0x90>)
 8000af6:	2200      	movs	r2, #0
 8000af8:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000afa:	4b16      	ldr	r3, [pc, #88]	@ (8000b54 <MX_USART2_UART_Init+0x90>)
 8000afc:	2200      	movs	r2, #0
 8000afe:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000b00:	4b14      	ldr	r3, [pc, #80]	@ (8000b54 <MX_USART2_UART_Init+0x90>)
 8000b02:	2200      	movs	r2, #0
 8000b04:	625a      	str	r2, [r3, #36]	@ 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000b06:	4b13      	ldr	r3, [pc, #76]	@ (8000b54 <MX_USART2_UART_Init+0x90>)
 8000b08:	2200      	movs	r2, #0
 8000b0a:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000b0c:	4811      	ldr	r0, [pc, #68]	@ (8000b54 <MX_USART2_UART_Init+0x90>)
 8000b0e:	f006 f88f 	bl	8006c30 <HAL_UART_Init>
 8000b12:	4603      	mov	r3, r0
 8000b14:	2b00      	cmp	r3, #0
 8000b16:	d001      	beq.n	8000b1c <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 8000b18:	f000 f918 	bl	8000d4c <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000b1c:	2100      	movs	r1, #0
 8000b1e:	480d      	ldr	r0, [pc, #52]	@ (8000b54 <MX_USART2_UART_Init+0x90>)
 8000b20:	f007 fe7a 	bl	8008818 <HAL_UARTEx_SetTxFifoThreshold>
 8000b24:	4603      	mov	r3, r0
 8000b26:	2b00      	cmp	r3, #0
 8000b28:	d001      	beq.n	8000b2e <MX_USART2_UART_Init+0x6a>
  {
    Error_Handler();
 8000b2a:	f000 f90f 	bl	8000d4c <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000b2e:	2100      	movs	r1, #0
 8000b30:	4808      	ldr	r0, [pc, #32]	@ (8000b54 <MX_USART2_UART_Init+0x90>)
 8000b32:	f007 feaf 	bl	8008894 <HAL_UARTEx_SetRxFifoThreshold>
 8000b36:	4603      	mov	r3, r0
 8000b38:	2b00      	cmp	r3, #0
 8000b3a:	d001      	beq.n	8000b40 <MX_USART2_UART_Init+0x7c>
  {
    Error_Handler();
 8000b3c:	f000 f906 	bl	8000d4c <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 8000b40:	4804      	ldr	r0, [pc, #16]	@ (8000b54 <MX_USART2_UART_Init+0x90>)
 8000b42:	f007 fe30 	bl	80087a6 <HAL_UARTEx_DisableFifoMode>
 8000b46:	4603      	mov	r3, r0
 8000b48:	2b00      	cmp	r3, #0
 8000b4a:	d001      	beq.n	8000b50 <MX_USART2_UART_Init+0x8c>
  {
    Error_Handler();
 8000b4c:	f000 f8fe 	bl	8000d4c <Error_Handler>
  	  //UART_Start_Receive_IT(&huart2, &ucRxData, 1);
      //HAL_UART_Receive_IT(&huart2, &ucRxData, 1);

  /* USER CODE END USART2_Init 2 */

}
 8000b50:	bf00      	nop
 8000b52:	bd80      	pop	{r7, pc}
 8000b54:	24000294 	.word	0x24000294
 8000b58:	40004400 	.word	0x40004400

08000b5c <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8000b5c:	b580      	push	{r7, lr}
 8000b5e:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000b60:	4b22      	ldr	r3, [pc, #136]	@ (8000bec <MX_USART3_UART_Init+0x90>)
 8000b62:	4a23      	ldr	r2, [pc, #140]	@ (8000bf0 <MX_USART3_UART_Init+0x94>)
 8000b64:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8000b66:	4b21      	ldr	r3, [pc, #132]	@ (8000bec <MX_USART3_UART_Init+0x90>)
 8000b68:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000b6c:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000b6e:	4b1f      	ldr	r3, [pc, #124]	@ (8000bec <MX_USART3_UART_Init+0x90>)
 8000b70:	2200      	movs	r2, #0
 8000b72:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000b74:	4b1d      	ldr	r3, [pc, #116]	@ (8000bec <MX_USART3_UART_Init+0x90>)
 8000b76:	2200      	movs	r2, #0
 8000b78:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000b7a:	4b1c      	ldr	r3, [pc, #112]	@ (8000bec <MX_USART3_UART_Init+0x90>)
 8000b7c:	2200      	movs	r2, #0
 8000b7e:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000b80:	4b1a      	ldr	r3, [pc, #104]	@ (8000bec <MX_USART3_UART_Init+0x90>)
 8000b82:	220c      	movs	r2, #12
 8000b84:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000b86:	4b19      	ldr	r3, [pc, #100]	@ (8000bec <MX_USART3_UART_Init+0x90>)
 8000b88:	2200      	movs	r2, #0
 8000b8a:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000b8c:	4b17      	ldr	r3, [pc, #92]	@ (8000bec <MX_USART3_UART_Init+0x90>)
 8000b8e:	2200      	movs	r2, #0
 8000b90:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000b92:	4b16      	ldr	r3, [pc, #88]	@ (8000bec <MX_USART3_UART_Init+0x90>)
 8000b94:	2200      	movs	r2, #0
 8000b96:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000b98:	4b14      	ldr	r3, [pc, #80]	@ (8000bec <MX_USART3_UART_Init+0x90>)
 8000b9a:	2200      	movs	r2, #0
 8000b9c:	625a      	str	r2, [r3, #36]	@ 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000b9e:	4b13      	ldr	r3, [pc, #76]	@ (8000bec <MX_USART3_UART_Init+0x90>)
 8000ba0:	2200      	movs	r2, #0
 8000ba2:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000ba4:	4811      	ldr	r0, [pc, #68]	@ (8000bec <MX_USART3_UART_Init+0x90>)
 8000ba6:	f006 f843 	bl	8006c30 <HAL_UART_Init>
 8000baa:	4603      	mov	r3, r0
 8000bac:	2b00      	cmp	r3, #0
 8000bae:	d001      	beq.n	8000bb4 <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 8000bb0:	f000 f8cc 	bl	8000d4c <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000bb4:	2100      	movs	r1, #0
 8000bb6:	480d      	ldr	r0, [pc, #52]	@ (8000bec <MX_USART3_UART_Init+0x90>)
 8000bb8:	f007 fe2e 	bl	8008818 <HAL_UARTEx_SetTxFifoThreshold>
 8000bbc:	4603      	mov	r3, r0
 8000bbe:	2b00      	cmp	r3, #0
 8000bc0:	d001      	beq.n	8000bc6 <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 8000bc2:	f000 f8c3 	bl	8000d4c <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000bc6:	2100      	movs	r1, #0
 8000bc8:	4808      	ldr	r0, [pc, #32]	@ (8000bec <MX_USART3_UART_Init+0x90>)
 8000bca:	f007 fe63 	bl	8008894 <HAL_UARTEx_SetRxFifoThreshold>
 8000bce:	4603      	mov	r3, r0
 8000bd0:	2b00      	cmp	r3, #0
 8000bd2:	d001      	beq.n	8000bd8 <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 8000bd4:	f000 f8ba 	bl	8000d4c <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 8000bd8:	4804      	ldr	r0, [pc, #16]	@ (8000bec <MX_USART3_UART_Init+0x90>)
 8000bda:	f007 fde4 	bl	80087a6 <HAL_UARTEx_DisableFifoMode>
 8000bde:	4603      	mov	r3, r0
 8000be0:	2b00      	cmp	r3, #0
 8000be2:	d001      	beq.n	8000be8 <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 8000be4:	f000 f8b2 	bl	8000d4c <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000be8:	bf00      	nop
 8000bea:	bd80      	pop	{r7, pc}
 8000bec:	24000328 	.word	0x24000328
 8000bf0:	40004800 	.word	0x40004800

08000bf4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000bf4:	b580      	push	{r7, lr}
 8000bf6:	b08c      	sub	sp, #48	@ 0x30
 8000bf8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000bfa:	f107 031c 	add.w	r3, r7, #28
 8000bfe:	2200      	movs	r2, #0
 8000c00:	601a      	str	r2, [r3, #0]
 8000c02:	605a      	str	r2, [r3, #4]
 8000c04:	609a      	str	r2, [r3, #8]
 8000c06:	60da      	str	r2, [r3, #12]
 8000c08:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000c0a:	4b38      	ldr	r3, [pc, #224]	@ (8000cec <MX_GPIO_Init+0xf8>)
 8000c0c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000c10:	4a36      	ldr	r2, [pc, #216]	@ (8000cec <MX_GPIO_Init+0xf8>)
 8000c12:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000c16:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000c1a:	4b34      	ldr	r3, [pc, #208]	@ (8000cec <MX_GPIO_Init+0xf8>)
 8000c1c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000c20:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000c24:	61bb      	str	r3, [r7, #24]
 8000c26:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c28:	4b30      	ldr	r3, [pc, #192]	@ (8000cec <MX_GPIO_Init+0xf8>)
 8000c2a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000c2e:	4a2f      	ldr	r2, [pc, #188]	@ (8000cec <MX_GPIO_Init+0xf8>)
 8000c30:	f043 0301 	orr.w	r3, r3, #1
 8000c34:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000c38:	4b2c      	ldr	r3, [pc, #176]	@ (8000cec <MX_GPIO_Init+0xf8>)
 8000c3a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000c3e:	f003 0301 	and.w	r3, r3, #1
 8000c42:	617b      	str	r3, [r7, #20]
 8000c44:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000c46:	4b29      	ldr	r3, [pc, #164]	@ (8000cec <MX_GPIO_Init+0xf8>)
 8000c48:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000c4c:	4a27      	ldr	r2, [pc, #156]	@ (8000cec <MX_GPIO_Init+0xf8>)
 8000c4e:	f043 0310 	orr.w	r3, r3, #16
 8000c52:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000c56:	4b25      	ldr	r3, [pc, #148]	@ (8000cec <MX_GPIO_Init+0xf8>)
 8000c58:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000c5c:	f003 0310 	and.w	r3, r3, #16
 8000c60:	613b      	str	r3, [r7, #16]
 8000c62:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000c64:	4b21      	ldr	r3, [pc, #132]	@ (8000cec <MX_GPIO_Init+0xf8>)
 8000c66:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000c6a:	4a20      	ldr	r2, [pc, #128]	@ (8000cec <MX_GPIO_Init+0xf8>)
 8000c6c:	f043 0308 	orr.w	r3, r3, #8
 8000c70:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000c74:	4b1d      	ldr	r3, [pc, #116]	@ (8000cec <MX_GPIO_Init+0xf8>)
 8000c76:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000c7a:	f003 0308 	and.w	r3, r3, #8
 8000c7e:	60fb      	str	r3, [r7, #12]
 8000c80:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000c82:	4b1a      	ldr	r3, [pc, #104]	@ (8000cec <MX_GPIO_Init+0xf8>)
 8000c84:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000c88:	4a18      	ldr	r2, [pc, #96]	@ (8000cec <MX_GPIO_Init+0xf8>)
 8000c8a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000c8e:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000c92:	4b16      	ldr	r3, [pc, #88]	@ (8000cec <MX_GPIO_Init+0xf8>)
 8000c94:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000c98:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8000c9c:	60bb      	str	r3, [r7, #8]
 8000c9e:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000ca0:	4b12      	ldr	r3, [pc, #72]	@ (8000cec <MX_GPIO_Init+0xf8>)
 8000ca2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000ca6:	4a11      	ldr	r2, [pc, #68]	@ (8000cec <MX_GPIO_Init+0xf8>)
 8000ca8:	f043 0302 	orr.w	r3, r3, #2
 8000cac:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000cb0:	4b0e      	ldr	r3, [pc, #56]	@ (8000cec <MX_GPIO_Init+0xf8>)
 8000cb2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000cb6:	f003 0302 	and.w	r3, r3, #2
 8000cba:	607b      	str	r3, [r7, #4]
 8000cbc:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, GPIO_PIN_7, GPIO_PIN_RESET);
 8000cbe:	2200      	movs	r2, #0
 8000cc0:	2180      	movs	r1, #128	@ 0x80
 8000cc2:	480b      	ldr	r0, [pc, #44]	@ (8000cf0 <MX_GPIO_Init+0xfc>)
 8000cc4:	f001 fe24 	bl	8002910 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PG7 */
  GPIO_InitStruct.Pin = GPIO_PIN_7;
 8000cc8:	2380      	movs	r3, #128	@ 0x80
 8000cca:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ccc:	2301      	movs	r3, #1
 8000cce:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cd0:	2300      	movs	r3, #0
 8000cd2:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000cd4:	2300      	movs	r3, #0
 8000cd6:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000cd8:	f107 031c 	add.w	r3, r7, #28
 8000cdc:	4619      	mov	r1, r3
 8000cde:	4804      	ldr	r0, [pc, #16]	@ (8000cf0 <MX_GPIO_Init+0xfc>)
 8000ce0:	f001 fc6e 	bl	80025c0 <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 8000ce4:	bf00      	nop
 8000ce6:	3730      	adds	r7, #48	@ 0x30
 8000ce8:	46bd      	mov	sp, r7
 8000cea:	bd80      	pop	{r7, pc}
 8000cec:	58024400 	.word	0x58024400
 8000cf0:	58021800 	.word	0x58021800

08000cf4 <MPU_Config>:
/* USER CODE END 4 */

 /* MPU Configuration */

void MPU_Config(void)
{
 8000cf4:	b580      	push	{r7, lr}
 8000cf6:	b084      	sub	sp, #16
 8000cf8:	af00      	add	r7, sp, #0
  MPU_Region_InitTypeDef MPU_InitStruct = {0};
 8000cfa:	463b      	mov	r3, r7
 8000cfc:	2200      	movs	r2, #0
 8000cfe:	601a      	str	r2, [r3, #0]
 8000d00:	605a      	str	r2, [r3, #4]
 8000d02:	609a      	str	r2, [r3, #8]
 8000d04:	60da      	str	r2, [r3, #12]

  /* Disables the MPU */
  HAL_MPU_Disable();
 8000d06:	f000 fe7f 	bl	8001a08 <HAL_MPU_Disable>

  /** Initializes and configures the Region and the memory to be protected
  */
  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 8000d0a:	2301      	movs	r3, #1
 8000d0c:	703b      	strb	r3, [r7, #0]
  MPU_InitStruct.Number = MPU_REGION_NUMBER0;
 8000d0e:	2300      	movs	r3, #0
 8000d10:	707b      	strb	r3, [r7, #1]
  MPU_InitStruct.BaseAddress = 0x0;
 8000d12:	2300      	movs	r3, #0
 8000d14:	607b      	str	r3, [r7, #4]
  MPU_InitStruct.Size = MPU_REGION_SIZE_4GB;
 8000d16:	231f      	movs	r3, #31
 8000d18:	723b      	strb	r3, [r7, #8]
  MPU_InitStruct.SubRegionDisable = 0x87;
 8000d1a:	2387      	movs	r3, #135	@ 0x87
 8000d1c:	727b      	strb	r3, [r7, #9]
  MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL0;
 8000d1e:	2300      	movs	r3, #0
 8000d20:	72bb      	strb	r3, [r7, #10]
  MPU_InitStruct.AccessPermission = MPU_REGION_NO_ACCESS;
 8000d22:	2300      	movs	r3, #0
 8000d24:	72fb      	strb	r3, [r7, #11]
  MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_DISABLE;
 8000d26:	2301      	movs	r3, #1
 8000d28:	733b      	strb	r3, [r7, #12]
  MPU_InitStruct.IsShareable = MPU_ACCESS_SHAREABLE;
 8000d2a:	2301      	movs	r3, #1
 8000d2c:	737b      	strb	r3, [r7, #13]
  MPU_InitStruct.IsCacheable = MPU_ACCESS_NOT_CACHEABLE;
 8000d2e:	2300      	movs	r3, #0
 8000d30:	73bb      	strb	r3, [r7, #14]
  MPU_InitStruct.IsBufferable = MPU_ACCESS_NOT_BUFFERABLE;
 8000d32:	2300      	movs	r3, #0
 8000d34:	73fb      	strb	r3, [r7, #15]

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8000d36:	463b      	mov	r3, r7
 8000d38:	4618      	mov	r0, r3
 8000d3a:	f000 fe9d 	bl	8001a78 <HAL_MPU_ConfigRegion>
  /* Enables the MPU */
  HAL_MPU_Enable(MPU_PRIVILEGED_DEFAULT);
 8000d3e:	2004      	movs	r0, #4
 8000d40:	f000 fe7a 	bl	8001a38 <HAL_MPU_Enable>

}
 8000d44:	bf00      	nop
 8000d46:	3710      	adds	r7, #16
 8000d48:	46bd      	mov	sp, r7
 8000d4a:	bd80      	pop	{r7, pc}

08000d4c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000d4c:	b480      	push	{r7}
 8000d4e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000d50:	b672      	cpsid	i
}
 8000d52:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000d54:	bf00      	nop
 8000d56:	e7fd      	b.n	8000d54 <Error_Handler+0x8>

08000d58 <set_servo_angle>:
 */

#include "servo_controls.h"
#include "stdint.h"

 void set_servo_angle(TIM_HandleTypeDef *htim, uint32_t channel, float angle){
 8000d58:	b480      	push	{r7}
 8000d5a:	b087      	sub	sp, #28
 8000d5c:	af00      	add	r7, sp, #0
 8000d5e:	60f8      	str	r0, [r7, #12]
 8000d60:	60b9      	str	r1, [r7, #8]
 8000d62:	ed87 0a01 	vstr	s0, [r7, #4]
    /*set a servo angle by taking the channel angle and tim 
     the maths maybe works like 1.5 ms pulse width is neutral with .5 and 2.5 being either end
     so we have a 1us count so 500us/1ms -> 500 counts and 2500us -> 2500 counts*/
     uint32_t pulse_width = 500 +(angle*((2500-500)/180));
 8000d66:	edd7 7a01 	vldr	s15, [r7, #4]
 8000d6a:	eeb2 7a06 	vmov.f32	s14, #38	@ 0x41300000  11.0
 8000d6e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000d72:	ed9f 7a1d 	vldr	s14, [pc, #116]	@ 8000de8 <set_servo_angle+0x90>
 8000d76:	ee77 7a87 	vadd.f32	s15, s15, s14
 8000d7a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000d7e:	ee17 3a90 	vmov	r3, s15
 8000d82:	617b      	str	r3, [r7, #20]
    __HAL_TIM_SET_COMPARE(htim, channel, pulse_width);
 8000d84:	68bb      	ldr	r3, [r7, #8]
 8000d86:	2b00      	cmp	r3, #0
 8000d88:	d104      	bne.n	8000d94 <set_servo_angle+0x3c>
 8000d8a:	68fb      	ldr	r3, [r7, #12]
 8000d8c:	681b      	ldr	r3, [r3, #0]
 8000d8e:	697a      	ldr	r2, [r7, #20]
 8000d90:	635a      	str	r2, [r3, #52]	@ 0x34
  
  }
 8000d92:	e023      	b.n	8000ddc <set_servo_angle+0x84>
    __HAL_TIM_SET_COMPARE(htim, channel, pulse_width);
 8000d94:	68bb      	ldr	r3, [r7, #8]
 8000d96:	2b04      	cmp	r3, #4
 8000d98:	d104      	bne.n	8000da4 <set_servo_angle+0x4c>
 8000d9a:	68fb      	ldr	r3, [r7, #12]
 8000d9c:	681a      	ldr	r2, [r3, #0]
 8000d9e:	697b      	ldr	r3, [r7, #20]
 8000da0:	6393      	str	r3, [r2, #56]	@ 0x38
  }
 8000da2:	e01b      	b.n	8000ddc <set_servo_angle+0x84>
    __HAL_TIM_SET_COMPARE(htim, channel, pulse_width);
 8000da4:	68bb      	ldr	r3, [r7, #8]
 8000da6:	2b08      	cmp	r3, #8
 8000da8:	d104      	bne.n	8000db4 <set_servo_angle+0x5c>
 8000daa:	68fb      	ldr	r3, [r7, #12]
 8000dac:	681a      	ldr	r2, [r3, #0]
 8000dae:	697b      	ldr	r3, [r7, #20]
 8000db0:	63d3      	str	r3, [r2, #60]	@ 0x3c
  }
 8000db2:	e013      	b.n	8000ddc <set_servo_angle+0x84>
    __HAL_TIM_SET_COMPARE(htim, channel, pulse_width);
 8000db4:	68bb      	ldr	r3, [r7, #8]
 8000db6:	2b0c      	cmp	r3, #12
 8000db8:	d104      	bne.n	8000dc4 <set_servo_angle+0x6c>
 8000dba:	68fb      	ldr	r3, [r7, #12]
 8000dbc:	681a      	ldr	r2, [r3, #0]
 8000dbe:	697b      	ldr	r3, [r7, #20]
 8000dc0:	6413      	str	r3, [r2, #64]	@ 0x40
  }
 8000dc2:	e00b      	b.n	8000ddc <set_servo_angle+0x84>
    __HAL_TIM_SET_COMPARE(htim, channel, pulse_width);
 8000dc4:	68bb      	ldr	r3, [r7, #8]
 8000dc6:	2b10      	cmp	r3, #16
 8000dc8:	d104      	bne.n	8000dd4 <set_servo_angle+0x7c>
 8000dca:	68fb      	ldr	r3, [r7, #12]
 8000dcc:	681a      	ldr	r2, [r3, #0]
 8000dce:	697b      	ldr	r3, [r7, #20]
 8000dd0:	6593      	str	r3, [r2, #88]	@ 0x58
  }
 8000dd2:	e003      	b.n	8000ddc <set_servo_angle+0x84>
    __HAL_TIM_SET_COMPARE(htim, channel, pulse_width);
 8000dd4:	68fb      	ldr	r3, [r7, #12]
 8000dd6:	681a      	ldr	r2, [r3, #0]
 8000dd8:	697b      	ldr	r3, [r7, #20]
 8000dda:	65d3      	str	r3, [r2, #92]	@ 0x5c
  }
 8000ddc:	bf00      	nop
 8000dde:	371c      	adds	r7, #28
 8000de0:	46bd      	mov	sp, r7
 8000de2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000de6:	4770      	bx	lr
 8000de8:	43fa0000 	.word	0x43fa0000

08000dec <set_servo_angle_gradual>:
  void set_servo_angle_gradual(TIM_HandleTypeDef *htim, uint32_t channel, float angle){
 8000dec:	b580      	push	{r7, lr}
 8000dee:	b086      	sub	sp, #24
 8000df0:	af00      	add	r7, sp, #0
 8000df2:	60f8      	str	r0, [r7, #12]
 8000df4:	60b9      	str	r1, [r7, #8]
 8000df6:	ed87 0a01 	vstr	s0, [r7, #4]
    /*set a servo angle by taking the channel angle and tim and the channel*/
     uint32_t current_pulse_width = __HAL_TIM_GET_COMPARE(htim, channel); // returns current pulse width(between 500 and 2500)
 8000dfa:	68bb      	ldr	r3, [r7, #8]
 8000dfc:	2b00      	cmp	r3, #0
 8000dfe:	d103      	bne.n	8000e08 <set_servo_angle_gradual+0x1c>
 8000e00:	68fb      	ldr	r3, [r7, #12]
 8000e02:	681b      	ldr	r3, [r3, #0]
 8000e04:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000e06:	e01e      	b.n	8000e46 <set_servo_angle_gradual+0x5a>
 8000e08:	68bb      	ldr	r3, [r7, #8]
 8000e0a:	2b04      	cmp	r3, #4
 8000e0c:	d103      	bne.n	8000e16 <set_servo_angle_gradual+0x2a>
 8000e0e:	68fb      	ldr	r3, [r7, #12]
 8000e10:	681b      	ldr	r3, [r3, #0]
 8000e12:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8000e14:	e017      	b.n	8000e46 <set_servo_angle_gradual+0x5a>
 8000e16:	68bb      	ldr	r3, [r7, #8]
 8000e18:	2b08      	cmp	r3, #8
 8000e1a:	d103      	bne.n	8000e24 <set_servo_angle_gradual+0x38>
 8000e1c:	68fb      	ldr	r3, [r7, #12]
 8000e1e:	681b      	ldr	r3, [r3, #0]
 8000e20:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8000e22:	e010      	b.n	8000e46 <set_servo_angle_gradual+0x5a>
 8000e24:	68bb      	ldr	r3, [r7, #8]
 8000e26:	2b0c      	cmp	r3, #12
 8000e28:	d103      	bne.n	8000e32 <set_servo_angle_gradual+0x46>
 8000e2a:	68fb      	ldr	r3, [r7, #12]
 8000e2c:	681b      	ldr	r3, [r3, #0]
 8000e2e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000e30:	e009      	b.n	8000e46 <set_servo_angle_gradual+0x5a>
 8000e32:	68bb      	ldr	r3, [r7, #8]
 8000e34:	2b10      	cmp	r3, #16
 8000e36:	d103      	bne.n	8000e40 <set_servo_angle_gradual+0x54>
 8000e38:	68fb      	ldr	r3, [r7, #12]
 8000e3a:	681b      	ldr	r3, [r3, #0]
 8000e3c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000e3e:	e002      	b.n	8000e46 <set_servo_angle_gradual+0x5a>
 8000e40:	68fb      	ldr	r3, [r7, #12]
 8000e42:	681b      	ldr	r3, [r3, #0]
 8000e44:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8000e46:	617b      	str	r3, [r7, #20]
     uint32_t desired_pulse_width = 500 +(angle*((2500-500)/180));
 8000e48:	edd7 7a01 	vldr	s15, [r7, #4]
 8000e4c:	eeb2 7a06 	vmov.f32	s14, #38	@ 0x41300000  11.0
 8000e50:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000e54:	ed9f 7a3a 	vldr	s14, [pc, #232]	@ 8000f40 <set_servo_angle_gradual+0x154>
 8000e58:	ee77 7a87 	vadd.f32	s15, s15, s14
 8000e5c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000e60:	ee17 3a90 	vmov	r3, s15
 8000e64:	613b      	str	r3, [r7, #16]
     while (desired_pulse_width != current_pulse_width){
 8000e66:	e062      	b.n	8000f2e <set_servo_angle_gradual+0x142>
        if (desired_pulse_width > current_pulse_width){
 8000e68:	693a      	ldr	r2, [r7, #16]
 8000e6a:	697b      	ldr	r3, [r7, #20]
 8000e6c:	429a      	cmp	r2, r3
 8000e6e:	d92d      	bls.n	8000ecc <set_servo_angle_gradual+0xe0>
            current_pulse_width++; 
 8000e70:	697b      	ldr	r3, [r7, #20]
 8000e72:	3301      	adds	r3, #1
 8000e74:	617b      	str	r3, [r7, #20]
            HAL_Delay(10);
 8000e76:	200a      	movs	r0, #10
 8000e78:	f000 fc92 	bl	80017a0 <HAL_Delay>
            current_pulse_width = __HAL_TIM_GET_COMPARE(htim, channel); 
 8000e7c:	68bb      	ldr	r3, [r7, #8]
 8000e7e:	2b00      	cmp	r3, #0
 8000e80:	d103      	bne.n	8000e8a <set_servo_angle_gradual+0x9e>
 8000e82:	68fb      	ldr	r3, [r7, #12]
 8000e84:	681b      	ldr	r3, [r3, #0]
 8000e86:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000e88:	e01e      	b.n	8000ec8 <set_servo_angle_gradual+0xdc>
 8000e8a:	68bb      	ldr	r3, [r7, #8]
 8000e8c:	2b04      	cmp	r3, #4
 8000e8e:	d103      	bne.n	8000e98 <set_servo_angle_gradual+0xac>
 8000e90:	68fb      	ldr	r3, [r7, #12]
 8000e92:	681b      	ldr	r3, [r3, #0]
 8000e94:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8000e96:	e017      	b.n	8000ec8 <set_servo_angle_gradual+0xdc>
 8000e98:	68bb      	ldr	r3, [r7, #8]
 8000e9a:	2b08      	cmp	r3, #8
 8000e9c:	d103      	bne.n	8000ea6 <set_servo_angle_gradual+0xba>
 8000e9e:	68fb      	ldr	r3, [r7, #12]
 8000ea0:	681b      	ldr	r3, [r3, #0]
 8000ea2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8000ea4:	e010      	b.n	8000ec8 <set_servo_angle_gradual+0xdc>
 8000ea6:	68bb      	ldr	r3, [r7, #8]
 8000ea8:	2b0c      	cmp	r3, #12
 8000eaa:	d103      	bne.n	8000eb4 <set_servo_angle_gradual+0xc8>
 8000eac:	68fb      	ldr	r3, [r7, #12]
 8000eae:	681b      	ldr	r3, [r3, #0]
 8000eb0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000eb2:	e009      	b.n	8000ec8 <set_servo_angle_gradual+0xdc>
 8000eb4:	68bb      	ldr	r3, [r7, #8]
 8000eb6:	2b10      	cmp	r3, #16
 8000eb8:	d103      	bne.n	8000ec2 <set_servo_angle_gradual+0xd6>
 8000eba:	68fb      	ldr	r3, [r7, #12]
 8000ebc:	681b      	ldr	r3, [r3, #0]
 8000ebe:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000ec0:	e002      	b.n	8000ec8 <set_servo_angle_gradual+0xdc>
 8000ec2:	68fb      	ldr	r3, [r7, #12]
 8000ec4:	681b      	ldr	r3, [r3, #0]
 8000ec6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8000ec8:	617b      	str	r3, [r7, #20]
 8000eca:	e030      	b.n	8000f2e <set_servo_angle_gradual+0x142>
        }
        else if (desired_pulse_width < current_pulse_width)
 8000ecc:	693a      	ldr	r2, [r7, #16]
 8000ece:	697b      	ldr	r3, [r7, #20]
 8000ed0:	429a      	cmp	r2, r3
 8000ed2:	d22c      	bcs.n	8000f2e <set_servo_angle_gradual+0x142>
        {
            current_pulse_width--; 
 8000ed4:	697b      	ldr	r3, [r7, #20]
 8000ed6:	3b01      	subs	r3, #1
 8000ed8:	617b      	str	r3, [r7, #20]
            HAL_Delay(10);
 8000eda:	200a      	movs	r0, #10
 8000edc:	f000 fc60 	bl	80017a0 <HAL_Delay>
            current_pulse_width = __HAL_TIM_GET_COMPARE(htim, channel); 
 8000ee0:	68bb      	ldr	r3, [r7, #8]
 8000ee2:	2b00      	cmp	r3, #0
 8000ee4:	d103      	bne.n	8000eee <set_servo_angle_gradual+0x102>
 8000ee6:	68fb      	ldr	r3, [r7, #12]
 8000ee8:	681b      	ldr	r3, [r3, #0]
 8000eea:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000eec:	e01e      	b.n	8000f2c <set_servo_angle_gradual+0x140>
 8000eee:	68bb      	ldr	r3, [r7, #8]
 8000ef0:	2b04      	cmp	r3, #4
 8000ef2:	d103      	bne.n	8000efc <set_servo_angle_gradual+0x110>
 8000ef4:	68fb      	ldr	r3, [r7, #12]
 8000ef6:	681b      	ldr	r3, [r3, #0]
 8000ef8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8000efa:	e017      	b.n	8000f2c <set_servo_angle_gradual+0x140>
 8000efc:	68bb      	ldr	r3, [r7, #8]
 8000efe:	2b08      	cmp	r3, #8
 8000f00:	d103      	bne.n	8000f0a <set_servo_angle_gradual+0x11e>
 8000f02:	68fb      	ldr	r3, [r7, #12]
 8000f04:	681b      	ldr	r3, [r3, #0]
 8000f06:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8000f08:	e010      	b.n	8000f2c <set_servo_angle_gradual+0x140>
 8000f0a:	68bb      	ldr	r3, [r7, #8]
 8000f0c:	2b0c      	cmp	r3, #12
 8000f0e:	d103      	bne.n	8000f18 <set_servo_angle_gradual+0x12c>
 8000f10:	68fb      	ldr	r3, [r7, #12]
 8000f12:	681b      	ldr	r3, [r3, #0]
 8000f14:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000f16:	e009      	b.n	8000f2c <set_servo_angle_gradual+0x140>
 8000f18:	68bb      	ldr	r3, [r7, #8]
 8000f1a:	2b10      	cmp	r3, #16
 8000f1c:	d103      	bne.n	8000f26 <set_servo_angle_gradual+0x13a>
 8000f1e:	68fb      	ldr	r3, [r7, #12]
 8000f20:	681b      	ldr	r3, [r3, #0]
 8000f22:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000f24:	e002      	b.n	8000f2c <set_servo_angle_gradual+0x140>
 8000f26:	68fb      	ldr	r3, [r7, #12]
 8000f28:	681b      	ldr	r3, [r3, #0]
 8000f2a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8000f2c:	617b      	str	r3, [r7, #20]
     while (desired_pulse_width != current_pulse_width){
 8000f2e:	693a      	ldr	r2, [r7, #16]
 8000f30:	697b      	ldr	r3, [r7, #20]
 8000f32:	429a      	cmp	r2, r3
 8000f34:	d198      	bne.n	8000e68 <set_servo_angle_gradual+0x7c>
        }
      
    }
  }
 8000f36:	bf00      	nop
 8000f38:	bf00      	nop
 8000f3a:	3718      	adds	r7, #24
 8000f3c:	46bd      	mov	sp, r7
 8000f3e:	bd80      	pop	{r7, pc}
 8000f40:	43fa0000 	.word	0x43fa0000

08000f44 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000f44:	b480      	push	{r7}
 8000f46:	b083      	sub	sp, #12
 8000f48:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000f4a:	4b0a      	ldr	r3, [pc, #40]	@ (8000f74 <HAL_MspInit+0x30>)
 8000f4c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8000f50:	4a08      	ldr	r2, [pc, #32]	@ (8000f74 <HAL_MspInit+0x30>)
 8000f52:	f043 0302 	orr.w	r3, r3, #2
 8000f56:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8000f5a:	4b06      	ldr	r3, [pc, #24]	@ (8000f74 <HAL_MspInit+0x30>)
 8000f5c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8000f60:	f003 0302 	and.w	r3, r3, #2
 8000f64:	607b      	str	r3, [r7, #4]
 8000f66:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000f68:	bf00      	nop
 8000f6a:	370c      	adds	r7, #12
 8000f6c:	46bd      	mov	sp, r7
 8000f6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f72:	4770      	bx	lr
 8000f74:	58024400 	.word	0x58024400

08000f78 <HAL_I2C_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hi2c: I2C handle pointer
  * @retval None
  */
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000f78:	b580      	push	{r7, lr}
 8000f7a:	b0b8      	sub	sp, #224	@ 0xe0
 8000f7c:	af00      	add	r7, sp, #0
 8000f7e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f80:	f107 03cc 	add.w	r3, r7, #204	@ 0xcc
 8000f84:	2200      	movs	r2, #0
 8000f86:	601a      	str	r2, [r3, #0]
 8000f88:	605a      	str	r2, [r3, #4]
 8000f8a:	609a      	str	r2, [r3, #8]
 8000f8c:	60da      	str	r2, [r3, #12]
 8000f8e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000f90:	f107 0310 	add.w	r3, r7, #16
 8000f94:	22b8      	movs	r2, #184	@ 0xb8
 8000f96:	2100      	movs	r1, #0
 8000f98:	4618      	mov	r0, r3
 8000f9a:	f008 fa6d 	bl	8009478 <memset>
  if(hi2c->Instance==I2C1)
 8000f9e:	687b      	ldr	r3, [r7, #4]
 8000fa0:	681b      	ldr	r3, [r3, #0]
 8000fa2:	4a27      	ldr	r2, [pc, #156]	@ (8001040 <HAL_I2C_MspInit+0xc8>)
 8000fa4:	4293      	cmp	r3, r2
 8000fa6:	d146      	bne.n	8001036 <HAL_I2C_MspInit+0xbe>

    /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8000fa8:	f04f 0208 	mov.w	r2, #8
 8000fac:	f04f 0300 	mov.w	r3, #0
 8000fb0:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.I2c123ClockSelection = RCC_I2C1235CLKSOURCE_D2PCLK1;
 8000fb4:	2300      	movs	r3, #0
 8000fb6:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000fba:	f107 0310 	add.w	r3, r7, #16
 8000fbe:	4618      	mov	r0, r3
 8000fc0:	f003 f91c 	bl	80041fc <HAL_RCCEx_PeriphCLKConfig>
 8000fc4:	4603      	mov	r3, r0
 8000fc6:	2b00      	cmp	r3, #0
 8000fc8:	d001      	beq.n	8000fce <HAL_I2C_MspInit+0x56>
    {
      Error_Handler();
 8000fca:	f7ff febf 	bl	8000d4c <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000fce:	4b1d      	ldr	r3, [pc, #116]	@ (8001044 <HAL_I2C_MspInit+0xcc>)
 8000fd0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000fd4:	4a1b      	ldr	r2, [pc, #108]	@ (8001044 <HAL_I2C_MspInit+0xcc>)
 8000fd6:	f043 0302 	orr.w	r3, r3, #2
 8000fda:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000fde:	4b19      	ldr	r3, [pc, #100]	@ (8001044 <HAL_I2C_MspInit+0xcc>)
 8000fe0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000fe4:	f003 0302 	and.w	r3, r3, #2
 8000fe8:	60fb      	str	r3, [r7, #12]
 8000fea:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8000fec:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8000ff0:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000ff4:	2312      	movs	r3, #18
 8000ff6:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ffa:	2300      	movs	r3, #0
 8000ffc:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001000:	2300      	movs	r3, #0
 8001002:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001006:	2304      	movs	r3, #4
 8001008:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800100c:	f107 03cc 	add.w	r3, r7, #204	@ 0xcc
 8001010:	4619      	mov	r1, r3
 8001012:	480d      	ldr	r0, [pc, #52]	@ (8001048 <HAL_I2C_MspInit+0xd0>)
 8001014:	f001 fad4 	bl	80025c0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001018:	4b0a      	ldr	r3, [pc, #40]	@ (8001044 <HAL_I2C_MspInit+0xcc>)
 800101a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800101e:	4a09      	ldr	r2, [pc, #36]	@ (8001044 <HAL_I2C_MspInit+0xcc>)
 8001020:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8001024:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8001028:	4b06      	ldr	r3, [pc, #24]	@ (8001044 <HAL_I2C_MspInit+0xcc>)
 800102a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800102e:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001032:	60bb      	str	r3, [r7, #8]
 8001034:	68bb      	ldr	r3, [r7, #8]

    /* USER CODE END I2C1_MspInit 1 */

  }

}
 8001036:	bf00      	nop
 8001038:	37e0      	adds	r7, #224	@ 0xe0
 800103a:	46bd      	mov	sp, r7
 800103c:	bd80      	pop	{r7, pc}
 800103e:	bf00      	nop
 8001040:	40005400 	.word	0x40005400
 8001044:	58024400 	.word	0x58024400
 8001048:	58020400 	.word	0x58020400

0800104c <HAL_TIM_PWM_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_pwm: TIM_PWM handle pointer
  * @retval None
  */
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 800104c:	b480      	push	{r7}
 800104e:	b085      	sub	sp, #20
 8001050:	af00      	add	r7, sp, #0
 8001052:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM1)
 8001054:	687b      	ldr	r3, [r7, #4]
 8001056:	681b      	ldr	r3, [r3, #0]
 8001058:	4a0b      	ldr	r2, [pc, #44]	@ (8001088 <HAL_TIM_PWM_MspInit+0x3c>)
 800105a:	4293      	cmp	r3, r2
 800105c:	d10e      	bne.n	800107c <HAL_TIM_PWM_MspInit+0x30>
  {
    /* USER CODE BEGIN TIM1_MspInit 0 */

    /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800105e:	4b0b      	ldr	r3, [pc, #44]	@ (800108c <HAL_TIM_PWM_MspInit+0x40>)
 8001060:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8001064:	4a09      	ldr	r2, [pc, #36]	@ (800108c <HAL_TIM_PWM_MspInit+0x40>)
 8001066:	f043 0301 	orr.w	r3, r3, #1
 800106a:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 800106e:	4b07      	ldr	r3, [pc, #28]	@ (800108c <HAL_TIM_PWM_MspInit+0x40>)
 8001070:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8001074:	f003 0301 	and.w	r3, r3, #1
 8001078:	60fb      	str	r3, [r7, #12]
 800107a:	68fb      	ldr	r3, [r7, #12]

    /* USER CODE END TIM1_MspInit 1 */

  }

}
 800107c:	bf00      	nop
 800107e:	3714      	adds	r7, #20
 8001080:	46bd      	mov	sp, r7
 8001082:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001086:	4770      	bx	lr
 8001088:	40010000 	.word	0x40010000
 800108c:	58024400 	.word	0x58024400

08001090 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001090:	b580      	push	{r7, lr}
 8001092:	b088      	sub	sp, #32
 8001094:	af00      	add	r7, sp, #0
 8001096:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001098:	f107 030c 	add.w	r3, r7, #12
 800109c:	2200      	movs	r2, #0
 800109e:	601a      	str	r2, [r3, #0]
 80010a0:	605a      	str	r2, [r3, #4]
 80010a2:	609a      	str	r2, [r3, #8]
 80010a4:	60da      	str	r2, [r3, #12]
 80010a6:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 80010a8:	687b      	ldr	r3, [r7, #4]
 80010aa:	681b      	ldr	r3, [r3, #0]
 80010ac:	4a13      	ldr	r2, [pc, #76]	@ (80010fc <HAL_TIM_MspPostInit+0x6c>)
 80010ae:	4293      	cmp	r3, r2
 80010b0:	d11f      	bne.n	80010f2 <HAL_TIM_MspPostInit+0x62>
  {
    /* USER CODE BEGIN TIM1_MspPostInit 0 */

    /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOE_CLK_ENABLE();
 80010b2:	4b13      	ldr	r3, [pc, #76]	@ (8001100 <HAL_TIM_MspPostInit+0x70>)
 80010b4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80010b8:	4a11      	ldr	r2, [pc, #68]	@ (8001100 <HAL_TIM_MspPostInit+0x70>)
 80010ba:	f043 0310 	orr.w	r3, r3, #16
 80010be:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80010c2:	4b0f      	ldr	r3, [pc, #60]	@ (8001100 <HAL_TIM_MspPostInit+0x70>)
 80010c4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80010c8:	f003 0310 	and.w	r3, r3, #16
 80010cc:	60bb      	str	r3, [r7, #8]
 80010ce:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration
    PE9     ------> TIM1_CH1
    PE11     ------> TIM1_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_11;
 80010d0:	f44f 6320 	mov.w	r3, #2560	@ 0xa00
 80010d4:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010d6:	2302      	movs	r3, #2
 80010d8:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010da:	2300      	movs	r3, #0
 80010dc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010de:	2300      	movs	r3, #0
 80010e0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 80010e2:	2301      	movs	r3, #1
 80010e4:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80010e6:	f107 030c 	add.w	r3, r7, #12
 80010ea:	4619      	mov	r1, r3
 80010ec:	4805      	ldr	r0, [pc, #20]	@ (8001104 <HAL_TIM_MspPostInit+0x74>)
 80010ee:	f001 fa67 	bl	80025c0 <HAL_GPIO_Init>
    /* USER CODE BEGIN TIM1_MspPostInit 1 */

    /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 80010f2:	bf00      	nop
 80010f4:	3720      	adds	r7, #32
 80010f6:	46bd      	mov	sp, r7
 80010f8:	bd80      	pop	{r7, pc}
 80010fa:	bf00      	nop
 80010fc:	40010000 	.word	0x40010000
 8001100:	58024400 	.word	0x58024400
 8001104:	58021000 	.word	0x58021000

08001108 <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001108:	b580      	push	{r7, lr}
 800110a:	b0bc      	sub	sp, #240	@ 0xf0
 800110c:	af00      	add	r7, sp, #0
 800110e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001110:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 8001114:	2200      	movs	r2, #0
 8001116:	601a      	str	r2, [r3, #0]
 8001118:	605a      	str	r2, [r3, #4]
 800111a:	609a      	str	r2, [r3, #8]
 800111c:	60da      	str	r2, [r3, #12]
 800111e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001120:	f107 0320 	add.w	r3, r7, #32
 8001124:	22b8      	movs	r2, #184	@ 0xb8
 8001126:	2100      	movs	r1, #0
 8001128:	4618      	mov	r0, r3
 800112a:	f008 f9a5 	bl	8009478 <memset>
  if(huart->Instance==USART2)
 800112e:	687b      	ldr	r3, [r7, #4]
 8001130:	681b      	ldr	r3, [r3, #0]
 8001132:	4a63      	ldr	r2, [pc, #396]	@ (80012c0 <HAL_UART_MspInit+0x1b8>)
 8001134:	4293      	cmp	r3, r2
 8001136:	d172      	bne.n	800121e <HAL_UART_MspInit+0x116>

    /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8001138:	f04f 0202 	mov.w	r2, #2
 800113c:	f04f 0300 	mov.w	r3, #0
 8001140:	e9c7 2308 	strd	r2, r3, [r7, #32]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8001144:	2300      	movs	r3, #0
 8001146:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800114a:	f107 0320 	add.w	r3, r7, #32
 800114e:	4618      	mov	r0, r3
 8001150:	f003 f854 	bl	80041fc <HAL_RCCEx_PeriphCLKConfig>
 8001154:	4603      	mov	r3, r0
 8001156:	2b00      	cmp	r3, #0
 8001158:	d001      	beq.n	800115e <HAL_UART_MspInit+0x56>
    {
      Error_Handler();
 800115a:	f7ff fdf7 	bl	8000d4c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800115e:	4b59      	ldr	r3, [pc, #356]	@ (80012c4 <HAL_UART_MspInit+0x1bc>)
 8001160:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8001164:	4a57      	ldr	r2, [pc, #348]	@ (80012c4 <HAL_UART_MspInit+0x1bc>)
 8001166:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800116a:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 800116e:	4b55      	ldr	r3, [pc, #340]	@ (80012c4 <HAL_UART_MspInit+0x1bc>)
 8001170:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8001174:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001178:	61fb      	str	r3, [r7, #28]
 800117a:	69fb      	ldr	r3, [r7, #28]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800117c:	4b51      	ldr	r3, [pc, #324]	@ (80012c4 <HAL_UART_MspInit+0x1bc>)
 800117e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001182:	4a50      	ldr	r2, [pc, #320]	@ (80012c4 <HAL_UART_MspInit+0x1bc>)
 8001184:	f043 0301 	orr.w	r3, r3, #1
 8001188:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800118c:	4b4d      	ldr	r3, [pc, #308]	@ (80012c4 <HAL_UART_MspInit+0x1bc>)
 800118e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001192:	f003 0301 	and.w	r3, r3, #1
 8001196:	61bb      	str	r3, [r7, #24]
 8001198:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 800119a:	4b4a      	ldr	r3, [pc, #296]	@ (80012c4 <HAL_UART_MspInit+0x1bc>)
 800119c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80011a0:	4a48      	ldr	r2, [pc, #288]	@ (80012c4 <HAL_UART_MspInit+0x1bc>)
 80011a2:	f043 0308 	orr.w	r3, r3, #8
 80011a6:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80011aa:	4b46      	ldr	r3, [pc, #280]	@ (80012c4 <HAL_UART_MspInit+0x1bc>)
 80011ac:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80011b0:	f003 0308 	and.w	r3, r3, #8
 80011b4:	617b      	str	r3, [r7, #20]
 80011b6:	697b      	ldr	r3, [r7, #20]
    /**USART2 GPIO Configuration
    PA3     ------> USART2_RX
    PD5     ------> USART2_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 80011b8:	2308      	movs	r3, #8
 80011ba:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80011be:	2302      	movs	r3, #2
 80011c0:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011c4:	2300      	movs	r3, #0
 80011c6:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011ca:	2300      	movs	r3, #0
 80011cc:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80011d0:	2307      	movs	r3, #7
 80011d2:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80011d6:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 80011da:	4619      	mov	r1, r3
 80011dc:	483a      	ldr	r0, [pc, #232]	@ (80012c8 <HAL_UART_MspInit+0x1c0>)
 80011de:	f001 f9ef 	bl	80025c0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_5;
 80011e2:	2320      	movs	r3, #32
 80011e4:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80011e8:	2302      	movs	r3, #2
 80011ea:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011ee:	2300      	movs	r3, #0
 80011f0:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011f4:	2300      	movs	r3, #0
 80011f6:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80011fa:	2307      	movs	r3, #7
 80011fc:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001200:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 8001204:	4619      	mov	r1, r3
 8001206:	4831      	ldr	r0, [pc, #196]	@ (80012cc <HAL_UART_MspInit+0x1c4>)
 8001208:	f001 f9da 	bl	80025c0 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 800120c:	2200      	movs	r2, #0
 800120e:	2100      	movs	r1, #0
 8001210:	2026      	movs	r0, #38	@ 0x26
 8001212:	f000 fbc4 	bl	800199e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8001216:	2026      	movs	r0, #38	@ 0x26
 8001218:	f000 fbdb 	bl	80019d2 <HAL_NVIC_EnableIRQ>
    /* USER CODE BEGIN USART3_MspInit 1 */

    /* USER CODE END USART3_MspInit 1 */
  }

}
 800121c:	e04b      	b.n	80012b6 <HAL_UART_MspInit+0x1ae>
  else if(huart->Instance==USART3)
 800121e:	687b      	ldr	r3, [r7, #4]
 8001220:	681b      	ldr	r3, [r3, #0]
 8001222:	4a2b      	ldr	r2, [pc, #172]	@ (80012d0 <HAL_UART_MspInit+0x1c8>)
 8001224:	4293      	cmp	r3, r2
 8001226:	d146      	bne.n	80012b6 <HAL_UART_MspInit+0x1ae>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8001228:	f04f 0202 	mov.w	r2, #2
 800122c:	f04f 0300 	mov.w	r3, #0
 8001230:	e9c7 2308 	strd	r2, r3, [r7, #32]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8001234:	2300      	movs	r3, #0
 8001236:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800123a:	f107 0320 	add.w	r3, r7, #32
 800123e:	4618      	mov	r0, r3
 8001240:	f002 ffdc 	bl	80041fc <HAL_RCCEx_PeriphCLKConfig>
 8001244:	4603      	mov	r3, r0
 8001246:	2b00      	cmp	r3, #0
 8001248:	d001      	beq.n	800124e <HAL_UART_MspInit+0x146>
      Error_Handler();
 800124a:	f7ff fd7f 	bl	8000d4c <Error_Handler>
    __HAL_RCC_USART3_CLK_ENABLE();
 800124e:	4b1d      	ldr	r3, [pc, #116]	@ (80012c4 <HAL_UART_MspInit+0x1bc>)
 8001250:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8001254:	4a1b      	ldr	r2, [pc, #108]	@ (80012c4 <HAL_UART_MspInit+0x1bc>)
 8001256:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800125a:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 800125e:	4b19      	ldr	r3, [pc, #100]	@ (80012c4 <HAL_UART_MspInit+0x1bc>)
 8001260:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8001264:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8001268:	613b      	str	r3, [r7, #16]
 800126a:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 800126c:	4b15      	ldr	r3, [pc, #84]	@ (80012c4 <HAL_UART_MspInit+0x1bc>)
 800126e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001272:	4a14      	ldr	r2, [pc, #80]	@ (80012c4 <HAL_UART_MspInit+0x1bc>)
 8001274:	f043 0308 	orr.w	r3, r3, #8
 8001278:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800127c:	4b11      	ldr	r3, [pc, #68]	@ (80012c4 <HAL_UART_MspInit+0x1bc>)
 800127e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001282:	f003 0308 	and.w	r3, r3, #8
 8001286:	60fb      	str	r3, [r7, #12]
 8001288:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 800128a:	f44f 7340 	mov.w	r3, #768	@ 0x300
 800128e:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001292:	2302      	movs	r3, #2
 8001294:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001298:	2300      	movs	r3, #0
 800129a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800129e:	2300      	movs	r3, #0
 80012a0:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80012a4:	2307      	movs	r3, #7
 80012a6:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80012aa:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 80012ae:	4619      	mov	r1, r3
 80012b0:	4806      	ldr	r0, [pc, #24]	@ (80012cc <HAL_UART_MspInit+0x1c4>)
 80012b2:	f001 f985 	bl	80025c0 <HAL_GPIO_Init>
}
 80012b6:	bf00      	nop
 80012b8:	37f0      	adds	r7, #240	@ 0xf0
 80012ba:	46bd      	mov	sp, r7
 80012bc:	bd80      	pop	{r7, pc}
 80012be:	bf00      	nop
 80012c0:	40004400 	.word	0x40004400
 80012c4:	58024400 	.word	0x58024400
 80012c8:	58020000 	.word	0x58020000
 80012cc:	58020c00 	.word	0x58020c00
 80012d0:	40004800 	.word	0x40004800

080012d4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80012d4:	b480      	push	{r7}
 80012d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80012d8:	bf00      	nop
 80012da:	e7fd      	b.n	80012d8 <NMI_Handler+0x4>

080012dc <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80012dc:	b480      	push	{r7}
 80012de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80012e0:	bf00      	nop
 80012e2:	e7fd      	b.n	80012e0 <HardFault_Handler+0x4>

080012e4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80012e4:	b480      	push	{r7}
 80012e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80012e8:	bf00      	nop
 80012ea:	e7fd      	b.n	80012e8 <MemManage_Handler+0x4>

080012ec <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80012ec:	b480      	push	{r7}
 80012ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80012f0:	bf00      	nop
 80012f2:	e7fd      	b.n	80012f0 <BusFault_Handler+0x4>

080012f4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80012f4:	b480      	push	{r7}
 80012f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80012f8:	bf00      	nop
 80012fa:	e7fd      	b.n	80012f8 <UsageFault_Handler+0x4>

080012fc <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80012fc:	b480      	push	{r7}
 80012fe:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001300:	bf00      	nop
 8001302:	46bd      	mov	sp, r7
 8001304:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001308:	4770      	bx	lr

0800130a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800130a:	b480      	push	{r7}
 800130c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800130e:	bf00      	nop
 8001310:	46bd      	mov	sp, r7
 8001312:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001316:	4770      	bx	lr

08001318 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001318:	b480      	push	{r7}
 800131a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800131c:	bf00      	nop
 800131e:	46bd      	mov	sp, r7
 8001320:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001324:	4770      	bx	lr

08001326 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001326:	b580      	push	{r7, lr}
 8001328:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800132a:	f000 fa19 	bl	8001760 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800132e:	bf00      	nop
 8001330:	bd80      	pop	{r7, pc}
	...

08001334 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8001334:	b580      	push	{r7, lr}
 8001336:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8001338:	4802      	ldr	r0, [pc, #8]	@ (8001344 <USART2_IRQHandler+0x10>)
 800133a:	f005 fd57 	bl	8006dec <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 800133e:	bf00      	nop
 8001340:	bd80      	pop	{r7, pc}
 8001342:	bf00      	nop
 8001344:	24000294 	.word	0x24000294

08001348 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001348:	b480      	push	{r7}
 800134a:	af00      	add	r7, sp, #0
  return 1;
 800134c:	2301      	movs	r3, #1
}
 800134e:	4618      	mov	r0, r3
 8001350:	46bd      	mov	sp, r7
 8001352:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001356:	4770      	bx	lr

08001358 <_kill>:

int _kill(int pid, int sig)
{
 8001358:	b580      	push	{r7, lr}
 800135a:	b082      	sub	sp, #8
 800135c:	af00      	add	r7, sp, #0
 800135e:	6078      	str	r0, [r7, #4]
 8001360:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001362:	f008 f891 	bl	8009488 <__errno>
 8001366:	4603      	mov	r3, r0
 8001368:	2216      	movs	r2, #22
 800136a:	601a      	str	r2, [r3, #0]
  return -1;
 800136c:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 8001370:	4618      	mov	r0, r3
 8001372:	3708      	adds	r7, #8
 8001374:	46bd      	mov	sp, r7
 8001376:	bd80      	pop	{r7, pc}

08001378 <_exit>:

void _exit (int status)
{
 8001378:	b580      	push	{r7, lr}
 800137a:	b082      	sub	sp, #8
 800137c:	af00      	add	r7, sp, #0
 800137e:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001380:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8001384:	6878      	ldr	r0, [r7, #4]
 8001386:	f7ff ffe7 	bl	8001358 <_kill>
  while (1) {}    /* Make sure we hang here */
 800138a:	bf00      	nop
 800138c:	e7fd      	b.n	800138a <_exit+0x12>

0800138e <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800138e:	b580      	push	{r7, lr}
 8001390:	b086      	sub	sp, #24
 8001392:	af00      	add	r7, sp, #0
 8001394:	60f8      	str	r0, [r7, #12]
 8001396:	60b9      	str	r1, [r7, #8]
 8001398:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800139a:	2300      	movs	r3, #0
 800139c:	617b      	str	r3, [r7, #20]
 800139e:	e00a      	b.n	80013b6 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80013a0:	f3af 8000 	nop.w
 80013a4:	4601      	mov	r1, r0
 80013a6:	68bb      	ldr	r3, [r7, #8]
 80013a8:	1c5a      	adds	r2, r3, #1
 80013aa:	60ba      	str	r2, [r7, #8]
 80013ac:	b2ca      	uxtb	r2, r1
 80013ae:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80013b0:	697b      	ldr	r3, [r7, #20]
 80013b2:	3301      	adds	r3, #1
 80013b4:	617b      	str	r3, [r7, #20]
 80013b6:	697a      	ldr	r2, [r7, #20]
 80013b8:	687b      	ldr	r3, [r7, #4]
 80013ba:	429a      	cmp	r2, r3
 80013bc:	dbf0      	blt.n	80013a0 <_read+0x12>
  }

  return len;
 80013be:	687b      	ldr	r3, [r7, #4]
}
 80013c0:	4618      	mov	r0, r3
 80013c2:	3718      	adds	r7, #24
 80013c4:	46bd      	mov	sp, r7
 80013c6:	bd80      	pop	{r7, pc}

080013c8 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80013c8:	b580      	push	{r7, lr}
 80013ca:	b086      	sub	sp, #24
 80013cc:	af00      	add	r7, sp, #0
 80013ce:	60f8      	str	r0, [r7, #12]
 80013d0:	60b9      	str	r1, [r7, #8]
 80013d2:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80013d4:	2300      	movs	r3, #0
 80013d6:	617b      	str	r3, [r7, #20]
 80013d8:	e009      	b.n	80013ee <_write+0x26>
  {
    __io_putchar(*ptr++);
 80013da:	68bb      	ldr	r3, [r7, #8]
 80013dc:	1c5a      	adds	r2, r3, #1
 80013de:	60ba      	str	r2, [r7, #8]
 80013e0:	781b      	ldrb	r3, [r3, #0]
 80013e2:	4618      	mov	r0, r3
 80013e4:	f7ff f9d8 	bl	8000798 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80013e8:	697b      	ldr	r3, [r7, #20]
 80013ea:	3301      	adds	r3, #1
 80013ec:	617b      	str	r3, [r7, #20]
 80013ee:	697a      	ldr	r2, [r7, #20]
 80013f0:	687b      	ldr	r3, [r7, #4]
 80013f2:	429a      	cmp	r2, r3
 80013f4:	dbf1      	blt.n	80013da <_write+0x12>
  }
  return len;
 80013f6:	687b      	ldr	r3, [r7, #4]
}
 80013f8:	4618      	mov	r0, r3
 80013fa:	3718      	adds	r7, #24
 80013fc:	46bd      	mov	sp, r7
 80013fe:	bd80      	pop	{r7, pc}

08001400 <_close>:

int _close(int file)
{
 8001400:	b480      	push	{r7}
 8001402:	b083      	sub	sp, #12
 8001404:	af00      	add	r7, sp, #0
 8001406:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001408:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 800140c:	4618      	mov	r0, r3
 800140e:	370c      	adds	r7, #12
 8001410:	46bd      	mov	sp, r7
 8001412:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001416:	4770      	bx	lr

08001418 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001418:	b480      	push	{r7}
 800141a:	b083      	sub	sp, #12
 800141c:	af00      	add	r7, sp, #0
 800141e:	6078      	str	r0, [r7, #4]
 8001420:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001422:	683b      	ldr	r3, [r7, #0]
 8001424:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001428:	605a      	str	r2, [r3, #4]
  return 0;
 800142a:	2300      	movs	r3, #0
}
 800142c:	4618      	mov	r0, r3
 800142e:	370c      	adds	r7, #12
 8001430:	46bd      	mov	sp, r7
 8001432:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001436:	4770      	bx	lr

08001438 <_isatty>:

int _isatty(int file)
{
 8001438:	b480      	push	{r7}
 800143a:	b083      	sub	sp, #12
 800143c:	af00      	add	r7, sp, #0
 800143e:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001440:	2301      	movs	r3, #1
}
 8001442:	4618      	mov	r0, r3
 8001444:	370c      	adds	r7, #12
 8001446:	46bd      	mov	sp, r7
 8001448:	f85d 7b04 	ldr.w	r7, [sp], #4
 800144c:	4770      	bx	lr

0800144e <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800144e:	b480      	push	{r7}
 8001450:	b085      	sub	sp, #20
 8001452:	af00      	add	r7, sp, #0
 8001454:	60f8      	str	r0, [r7, #12]
 8001456:	60b9      	str	r1, [r7, #8]
 8001458:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 800145a:	2300      	movs	r3, #0
}
 800145c:	4618      	mov	r0, r3
 800145e:	3714      	adds	r7, #20
 8001460:	46bd      	mov	sp, r7
 8001462:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001466:	4770      	bx	lr

08001468 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001468:	b580      	push	{r7, lr}
 800146a:	b086      	sub	sp, #24
 800146c:	af00      	add	r7, sp, #0
 800146e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001470:	4a14      	ldr	r2, [pc, #80]	@ (80014c4 <_sbrk+0x5c>)
 8001472:	4b15      	ldr	r3, [pc, #84]	@ (80014c8 <_sbrk+0x60>)
 8001474:	1ad3      	subs	r3, r2, r3
 8001476:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001478:	697b      	ldr	r3, [r7, #20]
 800147a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800147c:	4b13      	ldr	r3, [pc, #76]	@ (80014cc <_sbrk+0x64>)
 800147e:	681b      	ldr	r3, [r3, #0]
 8001480:	2b00      	cmp	r3, #0
 8001482:	d102      	bne.n	800148a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001484:	4b11      	ldr	r3, [pc, #68]	@ (80014cc <_sbrk+0x64>)
 8001486:	4a12      	ldr	r2, [pc, #72]	@ (80014d0 <_sbrk+0x68>)
 8001488:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800148a:	4b10      	ldr	r3, [pc, #64]	@ (80014cc <_sbrk+0x64>)
 800148c:	681a      	ldr	r2, [r3, #0]
 800148e:	687b      	ldr	r3, [r7, #4]
 8001490:	4413      	add	r3, r2
 8001492:	693a      	ldr	r2, [r7, #16]
 8001494:	429a      	cmp	r2, r3
 8001496:	d207      	bcs.n	80014a8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001498:	f007 fff6 	bl	8009488 <__errno>
 800149c:	4603      	mov	r3, r0
 800149e:	220c      	movs	r2, #12
 80014a0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80014a2:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80014a6:	e009      	b.n	80014bc <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80014a8:	4b08      	ldr	r3, [pc, #32]	@ (80014cc <_sbrk+0x64>)
 80014aa:	681b      	ldr	r3, [r3, #0]
 80014ac:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80014ae:	4b07      	ldr	r3, [pc, #28]	@ (80014cc <_sbrk+0x64>)
 80014b0:	681a      	ldr	r2, [r3, #0]
 80014b2:	687b      	ldr	r3, [r7, #4]
 80014b4:	4413      	add	r3, r2
 80014b6:	4a05      	ldr	r2, [pc, #20]	@ (80014cc <_sbrk+0x64>)
 80014b8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80014ba:	68fb      	ldr	r3, [r7, #12]
}
 80014bc:	4618      	mov	r0, r3
 80014be:	3718      	adds	r7, #24
 80014c0:	46bd      	mov	sp, r7
 80014c2:	bd80      	pop	{r7, pc}
 80014c4:	24050000 	.word	0x24050000
 80014c8:	00000400 	.word	0x00000400
 80014cc:	240003bc 	.word	0x240003bc
 80014d0:	24000510 	.word	0x24000510

080014d4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80014d4:	b480      	push	{r7}
 80014d6:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 80014d8:	4b3e      	ldr	r3, [pc, #248]	@ (80015d4 <SystemInit+0x100>)
 80014da:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80014de:	4a3d      	ldr	r2, [pc, #244]	@ (80015d4 <SystemInit+0x100>)
 80014e0:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80014e4:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80014e8:	4b3b      	ldr	r3, [pc, #236]	@ (80015d8 <SystemInit+0x104>)
 80014ea:	681b      	ldr	r3, [r3, #0]
 80014ec:	f003 030f 	and.w	r3, r3, #15
 80014f0:	2b06      	cmp	r3, #6
 80014f2:	d807      	bhi.n	8001504 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80014f4:	4b38      	ldr	r3, [pc, #224]	@ (80015d8 <SystemInit+0x104>)
 80014f6:	681b      	ldr	r3, [r3, #0]
 80014f8:	f023 030f 	bic.w	r3, r3, #15
 80014fc:	4a36      	ldr	r2, [pc, #216]	@ (80015d8 <SystemInit+0x104>)
 80014fe:	f043 0307 	orr.w	r3, r3, #7
 8001502:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8001504:	4b35      	ldr	r3, [pc, #212]	@ (80015dc <SystemInit+0x108>)
 8001506:	681b      	ldr	r3, [r3, #0]
 8001508:	4a34      	ldr	r2, [pc, #208]	@ (80015dc <SystemInit+0x108>)
 800150a:	f043 0301 	orr.w	r3, r3, #1
 800150e:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8001510:	4b32      	ldr	r3, [pc, #200]	@ (80015dc <SystemInit+0x108>)
 8001512:	2200      	movs	r2, #0
 8001514:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8001516:	4b31      	ldr	r3, [pc, #196]	@ (80015dc <SystemInit+0x108>)
 8001518:	681a      	ldr	r2, [r3, #0]
 800151a:	4930      	ldr	r1, [pc, #192]	@ (80015dc <SystemInit+0x108>)
 800151c:	4b30      	ldr	r3, [pc, #192]	@ (80015e0 <SystemInit+0x10c>)
 800151e:	4013      	ands	r3, r2
 8001520:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8001522:	4b2d      	ldr	r3, [pc, #180]	@ (80015d8 <SystemInit+0x104>)
 8001524:	681b      	ldr	r3, [r3, #0]
 8001526:	f003 0308 	and.w	r3, r3, #8
 800152a:	2b00      	cmp	r3, #0
 800152c:	d007      	beq.n	800153e <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 800152e:	4b2a      	ldr	r3, [pc, #168]	@ (80015d8 <SystemInit+0x104>)
 8001530:	681b      	ldr	r3, [r3, #0]
 8001532:	f023 030f 	bic.w	r3, r3, #15
 8001536:	4a28      	ldr	r2, [pc, #160]	@ (80015d8 <SystemInit+0x104>)
 8001538:	f043 0307 	orr.w	r3, r3, #7
 800153c:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 800153e:	4b27      	ldr	r3, [pc, #156]	@ (80015dc <SystemInit+0x108>)
 8001540:	2200      	movs	r2, #0
 8001542:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8001544:	4b25      	ldr	r3, [pc, #148]	@ (80015dc <SystemInit+0x108>)
 8001546:	2200      	movs	r2, #0
 8001548:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 800154a:	4b24      	ldr	r3, [pc, #144]	@ (80015dc <SystemInit+0x108>)
 800154c:	2200      	movs	r2, #0
 800154e:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8001550:	4b22      	ldr	r3, [pc, #136]	@ (80015dc <SystemInit+0x108>)
 8001552:	4a24      	ldr	r2, [pc, #144]	@ (80015e4 <SystemInit+0x110>)
 8001554:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8001556:	4b21      	ldr	r3, [pc, #132]	@ (80015dc <SystemInit+0x108>)
 8001558:	4a23      	ldr	r2, [pc, #140]	@ (80015e8 <SystemInit+0x114>)
 800155a:	62da      	str	r2, [r3, #44]	@ 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 800155c:	4b1f      	ldr	r3, [pc, #124]	@ (80015dc <SystemInit+0x108>)
 800155e:	4a23      	ldr	r2, [pc, #140]	@ (80015ec <SystemInit+0x118>)
 8001560:	631a      	str	r2, [r3, #48]	@ 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8001562:	4b1e      	ldr	r3, [pc, #120]	@ (80015dc <SystemInit+0x108>)
 8001564:	2200      	movs	r2, #0
 8001566:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8001568:	4b1c      	ldr	r3, [pc, #112]	@ (80015dc <SystemInit+0x108>)
 800156a:	4a20      	ldr	r2, [pc, #128]	@ (80015ec <SystemInit+0x118>)
 800156c:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 800156e:	4b1b      	ldr	r3, [pc, #108]	@ (80015dc <SystemInit+0x108>)
 8001570:	2200      	movs	r2, #0
 8001572:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8001574:	4b19      	ldr	r3, [pc, #100]	@ (80015dc <SystemInit+0x108>)
 8001576:	4a1d      	ldr	r2, [pc, #116]	@ (80015ec <SystemInit+0x118>)
 8001578:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 800157a:	4b18      	ldr	r3, [pc, #96]	@ (80015dc <SystemInit+0x108>)
 800157c:	2200      	movs	r2, #0
 800157e:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8001580:	4b16      	ldr	r3, [pc, #88]	@ (80015dc <SystemInit+0x108>)
 8001582:	681b      	ldr	r3, [r3, #0]
 8001584:	4a15      	ldr	r2, [pc, #84]	@ (80015dc <SystemInit+0x108>)
 8001586:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800158a:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 800158c:	4b13      	ldr	r3, [pc, #76]	@ (80015dc <SystemInit+0x108>)
 800158e:	2200      	movs	r2, #0
 8001590:	661a      	str	r2, [r3, #96]	@ 0x60
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D2 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#else
  if(READ_BIT(RCC->AHB3ENR, RCC_AHB3ENR_FMCEN) == 0U)
 8001592:	4b12      	ldr	r3, [pc, #72]	@ (80015dc <SystemInit+0x108>)
 8001594:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 8001598:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800159c:	2b00      	cmp	r3, #0
 800159e:	d113      	bne.n	80015c8 <SystemInit+0xf4>
  {
    /* Enable the FMC interface clock */
    SET_BIT(RCC->AHB3ENR, RCC_AHB3ENR_FMCEN);
 80015a0:	4b0e      	ldr	r3, [pc, #56]	@ (80015dc <SystemInit+0x108>)
 80015a2:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 80015a6:	4a0d      	ldr	r2, [pc, #52]	@ (80015dc <SystemInit+0x108>)
 80015a8:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 80015ac:	f8c2 30d4 	str.w	r3, [r2, #212]	@ 0xd4
    /*
     * Disable the FMC bank1 (enabled after reset).
     * This, prevents CPU speculation access on this bank which blocks the use of FMC during
     * 24us. During this time the others FMC master (such as LTDC) cannot use it!
     */
    FMC_Bank1_R->BTCR[0] = 0x000030D2;
 80015b0:	4b0f      	ldr	r3, [pc, #60]	@ (80015f0 <SystemInit+0x11c>)
 80015b2:	f243 02d2 	movw	r2, #12498	@ 0x30d2
 80015b6:	601a      	str	r2, [r3, #0]

    /* Disable the FMC interface clock */
    CLEAR_BIT(RCC->AHB3ENR, RCC_AHB3ENR_FMCEN);
 80015b8:	4b08      	ldr	r3, [pc, #32]	@ (80015dc <SystemInit+0x108>)
 80015ba:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 80015be:	4a07      	ldr	r2, [pc, #28]	@ (80015dc <SystemInit+0x108>)
 80015c0:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80015c4:	f8c2 30d4 	str.w	r3, [r2, #212]	@ 0xd4
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 80015c8:	bf00      	nop
 80015ca:	46bd      	mov	sp, r7
 80015cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015d0:	4770      	bx	lr
 80015d2:	bf00      	nop
 80015d4:	e000ed00 	.word	0xe000ed00
 80015d8:	52002000 	.word	0x52002000
 80015dc:	58024400 	.word	0x58024400
 80015e0:	eaf6ed7f 	.word	0xeaf6ed7f
 80015e4:	02020200 	.word	0x02020200
 80015e8:	01ff0000 	.word	0x01ff0000
 80015ec:	01010280 	.word	0x01010280
 80015f0:	52004000 	.word	0x52004000

080015f4 <ExitRun0Mode>:
  *
  * @param  None
  * @retval None
  */
void ExitRun0Mode(void)
{
 80015f4:	b480      	push	{r7}
 80015f6:	af00      	add	r7, sp, #0
  #if defined(SMPS)
    /* Exit Run* mode by disabling SMPS and enabling LDO */
    PWR->CR3 = (PWR->CR3 & ~PWR_CR3_SMPSEN) | PWR_CR3_LDOEN;
  #else
    /* Enable LDO mode */
    PWR->CR3 |= PWR_CR3_LDOEN;
 80015f8:	4b09      	ldr	r3, [pc, #36]	@ (8001620 <ExitRun0Mode+0x2c>)
 80015fa:	68db      	ldr	r3, [r3, #12]
 80015fc:	4a08      	ldr	r2, [pc, #32]	@ (8001620 <ExitRun0Mode+0x2c>)
 80015fe:	f043 0302 	orr.w	r3, r3, #2
 8001602:	60d3      	str	r3, [r2, #12]
  #endif /* SMPS */
  /* Wait till voltage level flag is set */
  while ((PWR->CSR1 & PWR_CSR1_ACTVOSRDY) == 0U)
 8001604:	bf00      	nop
 8001606:	4b06      	ldr	r3, [pc, #24]	@ (8001620 <ExitRun0Mode+0x2c>)
 8001608:	685b      	ldr	r3, [r3, #4]
 800160a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800160e:	2b00      	cmp	r3, #0
 8001610:	d0f9      	beq.n	8001606 <ExitRun0Mode+0x12>
  while ((PWR->CSR1 & PWR_CSR1_ACTVOSRDY) == 0U)
  {}
#else
  /* No system power supply configuration is selected at exit Run* mode */
#endif /* USE_PWR_LDO_SUPPLY */
}
 8001612:	bf00      	nop
 8001614:	bf00      	nop
 8001616:	46bd      	mov	sp, r7
 8001618:	f85d 7b04 	ldr.w	r7, [sp], #4
 800161c:	4770      	bx	lr
 800161e:	bf00      	nop
 8001620:	58024800 	.word	0x58024800

08001624 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8001624:	f8df d038 	ldr.w	sp, [pc, #56]	@ 8001660 <LoopFillZerobss+0xe>

/* Call the ExitRun0Mode function to configure the power supply */
  bl  ExitRun0Mode
 8001628:	f7ff ffe4 	bl	80015f4 <ExitRun0Mode>
/* Call the clock system initialization function.*/
  bl  SystemInit
 800162c:	f7ff ff52 	bl	80014d4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001630:	480c      	ldr	r0, [pc, #48]	@ (8001664 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001632:	490d      	ldr	r1, [pc, #52]	@ (8001668 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001634:	4a0d      	ldr	r2, [pc, #52]	@ (800166c <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001636:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001638:	e002      	b.n	8001640 <LoopCopyDataInit>

0800163a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800163a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800163c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800163e:	3304      	adds	r3, #4

08001640 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001640:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001642:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001644:	d3f9      	bcc.n	800163a <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001646:	4a0a      	ldr	r2, [pc, #40]	@ (8001670 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001648:	4c0a      	ldr	r4, [pc, #40]	@ (8001674 <LoopFillZerobss+0x22>)
  movs r3, #0
 800164a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800164c:	e001      	b.n	8001652 <LoopFillZerobss>

0800164e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800164e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001650:	3204      	adds	r2, #4

08001652 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001652:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001654:	d3fb      	bcc.n	800164e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001656:	f007 ff1d 	bl	8009494 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800165a:	f7ff f8af 	bl	80007bc <main>
  bx  lr
 800165e:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001660:	24050000 	.word	0x24050000
  ldr r0, =_sdata
 8001664:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8001668:	240001d8 	.word	0x240001d8
  ldr r2, =_sidata
 800166c:	0800b6b4 	.word	0x0800b6b4
  ldr r2, =_sbss
 8001670:	240001d8 	.word	0x240001d8
  ldr r4, =_ebss
 8001674:	24000510 	.word	0x24000510

08001678 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001678:	e7fe      	b.n	8001678 <ADC3_IRQHandler>
	...

0800167c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800167c:	b580      	push	{r7, lr}
 800167e:	b082      	sub	sp, #8
 8001680:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001682:	2003      	movs	r0, #3
 8001684:	f000 f980 	bl	8001988 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8001688:	f002 fbe2 	bl	8003e50 <HAL_RCC_GetSysClockFreq>
 800168c:	4602      	mov	r2, r0
 800168e:	4b15      	ldr	r3, [pc, #84]	@ (80016e4 <HAL_Init+0x68>)
 8001690:	699b      	ldr	r3, [r3, #24]
 8001692:	0a1b      	lsrs	r3, r3, #8
 8001694:	f003 030f 	and.w	r3, r3, #15
 8001698:	4913      	ldr	r1, [pc, #76]	@ (80016e8 <HAL_Init+0x6c>)
 800169a:	5ccb      	ldrb	r3, [r1, r3]
 800169c:	f003 031f 	and.w	r3, r3, #31
 80016a0:	fa22 f303 	lsr.w	r3, r2, r3
 80016a4:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80016a6:	4b0f      	ldr	r3, [pc, #60]	@ (80016e4 <HAL_Init+0x68>)
 80016a8:	699b      	ldr	r3, [r3, #24]
 80016aa:	f003 030f 	and.w	r3, r3, #15
 80016ae:	4a0e      	ldr	r2, [pc, #56]	@ (80016e8 <HAL_Init+0x6c>)
 80016b0:	5cd3      	ldrb	r3, [r2, r3]
 80016b2:	f003 031f 	and.w	r3, r3, #31
 80016b6:	687a      	ldr	r2, [r7, #4]
 80016b8:	fa22 f303 	lsr.w	r3, r2, r3
 80016bc:	4a0b      	ldr	r2, [pc, #44]	@ (80016ec <HAL_Init+0x70>)
 80016be:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80016c0:	4a0b      	ldr	r2, [pc, #44]	@ (80016f0 <HAL_Init+0x74>)
 80016c2:	687b      	ldr	r3, [r7, #4]
 80016c4:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80016c6:	200f      	movs	r0, #15
 80016c8:	f000 f814 	bl	80016f4 <HAL_InitTick>
 80016cc:	4603      	mov	r3, r0
 80016ce:	2b00      	cmp	r3, #0
 80016d0:	d001      	beq.n	80016d6 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 80016d2:	2301      	movs	r3, #1
 80016d4:	e002      	b.n	80016dc <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 80016d6:	f7ff fc35 	bl	8000f44 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80016da:	2300      	movs	r3, #0
}
 80016dc:	4618      	mov	r0, r3
 80016de:	3708      	adds	r7, #8
 80016e0:	46bd      	mov	sp, r7
 80016e2:	bd80      	pop	{r7, pc}
 80016e4:	58024400 	.word	0x58024400
 80016e8:	0800b2f4 	.word	0x0800b2f4
 80016ec:	24000004 	.word	0x24000004
 80016f0:	24000000 	.word	0x24000000

080016f4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80016f4:	b580      	push	{r7, lr}
 80016f6:	b082      	sub	sp, #8
 80016f8:	af00      	add	r7, sp, #0
 80016fa:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 80016fc:	4b15      	ldr	r3, [pc, #84]	@ (8001754 <HAL_InitTick+0x60>)
 80016fe:	781b      	ldrb	r3, [r3, #0]
 8001700:	2b00      	cmp	r3, #0
 8001702:	d101      	bne.n	8001708 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8001704:	2301      	movs	r3, #1
 8001706:	e021      	b.n	800174c <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8001708:	4b13      	ldr	r3, [pc, #76]	@ (8001758 <HAL_InitTick+0x64>)
 800170a:	681a      	ldr	r2, [r3, #0]
 800170c:	4b11      	ldr	r3, [pc, #68]	@ (8001754 <HAL_InitTick+0x60>)
 800170e:	781b      	ldrb	r3, [r3, #0]
 8001710:	4619      	mov	r1, r3
 8001712:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001716:	fbb3 f3f1 	udiv	r3, r3, r1
 800171a:	fbb2 f3f3 	udiv	r3, r2, r3
 800171e:	4618      	mov	r0, r3
 8001720:	f000 f965 	bl	80019ee <HAL_SYSTICK_Config>
 8001724:	4603      	mov	r3, r0
 8001726:	2b00      	cmp	r3, #0
 8001728:	d001      	beq.n	800172e <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 800172a:	2301      	movs	r3, #1
 800172c:	e00e      	b.n	800174c <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800172e:	687b      	ldr	r3, [r7, #4]
 8001730:	2b0f      	cmp	r3, #15
 8001732:	d80a      	bhi.n	800174a <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001734:	2200      	movs	r2, #0
 8001736:	6879      	ldr	r1, [r7, #4]
 8001738:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800173c:	f000 f92f 	bl	800199e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001740:	4a06      	ldr	r2, [pc, #24]	@ (800175c <HAL_InitTick+0x68>)
 8001742:	687b      	ldr	r3, [r7, #4]
 8001744:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001746:	2300      	movs	r3, #0
 8001748:	e000      	b.n	800174c <HAL_InitTick+0x58>
    return HAL_ERROR;
 800174a:	2301      	movs	r3, #1
}
 800174c:	4618      	mov	r0, r3
 800174e:	3708      	adds	r7, #8
 8001750:	46bd      	mov	sp, r7
 8001752:	bd80      	pop	{r7, pc}
 8001754:	2400000c 	.word	0x2400000c
 8001758:	24000000 	.word	0x24000000
 800175c:	24000008 	.word	0x24000008

08001760 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001760:	b480      	push	{r7}
 8001762:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001764:	4b06      	ldr	r3, [pc, #24]	@ (8001780 <HAL_IncTick+0x20>)
 8001766:	781b      	ldrb	r3, [r3, #0]
 8001768:	461a      	mov	r2, r3
 800176a:	4b06      	ldr	r3, [pc, #24]	@ (8001784 <HAL_IncTick+0x24>)
 800176c:	681b      	ldr	r3, [r3, #0]
 800176e:	4413      	add	r3, r2
 8001770:	4a04      	ldr	r2, [pc, #16]	@ (8001784 <HAL_IncTick+0x24>)
 8001772:	6013      	str	r3, [r2, #0]
}
 8001774:	bf00      	nop
 8001776:	46bd      	mov	sp, r7
 8001778:	f85d 7b04 	ldr.w	r7, [sp], #4
 800177c:	4770      	bx	lr
 800177e:	bf00      	nop
 8001780:	2400000c 	.word	0x2400000c
 8001784:	240003c0 	.word	0x240003c0

08001788 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001788:	b480      	push	{r7}
 800178a:	af00      	add	r7, sp, #0
  return uwTick;
 800178c:	4b03      	ldr	r3, [pc, #12]	@ (800179c <HAL_GetTick+0x14>)
 800178e:	681b      	ldr	r3, [r3, #0]
}
 8001790:	4618      	mov	r0, r3
 8001792:	46bd      	mov	sp, r7
 8001794:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001798:	4770      	bx	lr
 800179a:	bf00      	nop
 800179c:	240003c0 	.word	0x240003c0

080017a0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80017a0:	b580      	push	{r7, lr}
 80017a2:	b084      	sub	sp, #16
 80017a4:	af00      	add	r7, sp, #0
 80017a6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80017a8:	f7ff ffee 	bl	8001788 <HAL_GetTick>
 80017ac:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80017ae:	687b      	ldr	r3, [r7, #4]
 80017b0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80017b2:	68fb      	ldr	r3, [r7, #12]
 80017b4:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80017b8:	d005      	beq.n	80017c6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80017ba:	4b0a      	ldr	r3, [pc, #40]	@ (80017e4 <HAL_Delay+0x44>)
 80017bc:	781b      	ldrb	r3, [r3, #0]
 80017be:	461a      	mov	r2, r3
 80017c0:	68fb      	ldr	r3, [r7, #12]
 80017c2:	4413      	add	r3, r2
 80017c4:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80017c6:	bf00      	nop
 80017c8:	f7ff ffde 	bl	8001788 <HAL_GetTick>
 80017cc:	4602      	mov	r2, r0
 80017ce:	68bb      	ldr	r3, [r7, #8]
 80017d0:	1ad3      	subs	r3, r2, r3
 80017d2:	68fa      	ldr	r2, [r7, #12]
 80017d4:	429a      	cmp	r2, r3
 80017d6:	d8f7      	bhi.n	80017c8 <HAL_Delay+0x28>
  {
  }
}
 80017d8:	bf00      	nop
 80017da:	bf00      	nop
 80017dc:	3710      	adds	r7, #16
 80017de:	46bd      	mov	sp, r7
 80017e0:	bd80      	pop	{r7, pc}
 80017e2:	bf00      	nop
 80017e4:	2400000c 	.word	0x2400000c

080017e8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80017e8:	b480      	push	{r7}
 80017ea:	b085      	sub	sp, #20
 80017ec:	af00      	add	r7, sp, #0
 80017ee:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80017f0:	687b      	ldr	r3, [r7, #4]
 80017f2:	f003 0307 	and.w	r3, r3, #7
 80017f6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80017f8:	4b0b      	ldr	r3, [pc, #44]	@ (8001828 <__NVIC_SetPriorityGrouping+0x40>)
 80017fa:	68db      	ldr	r3, [r3, #12]
 80017fc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80017fe:	68ba      	ldr	r2, [r7, #8]
 8001800:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001804:	4013      	ands	r3, r2
 8001806:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001808:	68fb      	ldr	r3, [r7, #12]
 800180a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800180c:	68bb      	ldr	r3, [r7, #8]
 800180e:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8001810:	4b06      	ldr	r3, [pc, #24]	@ (800182c <__NVIC_SetPriorityGrouping+0x44>)
 8001812:	4313      	orrs	r3, r2
 8001814:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001816:	4a04      	ldr	r2, [pc, #16]	@ (8001828 <__NVIC_SetPriorityGrouping+0x40>)
 8001818:	68bb      	ldr	r3, [r7, #8]
 800181a:	60d3      	str	r3, [r2, #12]
}
 800181c:	bf00      	nop
 800181e:	3714      	adds	r7, #20
 8001820:	46bd      	mov	sp, r7
 8001822:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001826:	4770      	bx	lr
 8001828:	e000ed00 	.word	0xe000ed00
 800182c:	05fa0000 	.word	0x05fa0000

08001830 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001830:	b480      	push	{r7}
 8001832:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001834:	4b04      	ldr	r3, [pc, #16]	@ (8001848 <__NVIC_GetPriorityGrouping+0x18>)
 8001836:	68db      	ldr	r3, [r3, #12]
 8001838:	0a1b      	lsrs	r3, r3, #8
 800183a:	f003 0307 	and.w	r3, r3, #7
}
 800183e:	4618      	mov	r0, r3
 8001840:	46bd      	mov	sp, r7
 8001842:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001846:	4770      	bx	lr
 8001848:	e000ed00 	.word	0xe000ed00

0800184c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800184c:	b480      	push	{r7}
 800184e:	b083      	sub	sp, #12
 8001850:	af00      	add	r7, sp, #0
 8001852:	4603      	mov	r3, r0
 8001854:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8001856:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800185a:	2b00      	cmp	r3, #0
 800185c:	db0b      	blt.n	8001876 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800185e:	88fb      	ldrh	r3, [r7, #6]
 8001860:	f003 021f 	and.w	r2, r3, #31
 8001864:	4907      	ldr	r1, [pc, #28]	@ (8001884 <__NVIC_EnableIRQ+0x38>)
 8001866:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800186a:	095b      	lsrs	r3, r3, #5
 800186c:	2001      	movs	r0, #1
 800186e:	fa00 f202 	lsl.w	r2, r0, r2
 8001872:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001876:	bf00      	nop
 8001878:	370c      	adds	r7, #12
 800187a:	46bd      	mov	sp, r7
 800187c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001880:	4770      	bx	lr
 8001882:	bf00      	nop
 8001884:	e000e100 	.word	0xe000e100

08001888 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001888:	b480      	push	{r7}
 800188a:	b083      	sub	sp, #12
 800188c:	af00      	add	r7, sp, #0
 800188e:	4603      	mov	r3, r0
 8001890:	6039      	str	r1, [r7, #0]
 8001892:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8001894:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001898:	2b00      	cmp	r3, #0
 800189a:	db0a      	blt.n	80018b2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800189c:	683b      	ldr	r3, [r7, #0]
 800189e:	b2da      	uxtb	r2, r3
 80018a0:	490c      	ldr	r1, [pc, #48]	@ (80018d4 <__NVIC_SetPriority+0x4c>)
 80018a2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80018a6:	0112      	lsls	r2, r2, #4
 80018a8:	b2d2      	uxtb	r2, r2
 80018aa:	440b      	add	r3, r1
 80018ac:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80018b0:	e00a      	b.n	80018c8 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80018b2:	683b      	ldr	r3, [r7, #0]
 80018b4:	b2da      	uxtb	r2, r3
 80018b6:	4908      	ldr	r1, [pc, #32]	@ (80018d8 <__NVIC_SetPriority+0x50>)
 80018b8:	88fb      	ldrh	r3, [r7, #6]
 80018ba:	f003 030f 	and.w	r3, r3, #15
 80018be:	3b04      	subs	r3, #4
 80018c0:	0112      	lsls	r2, r2, #4
 80018c2:	b2d2      	uxtb	r2, r2
 80018c4:	440b      	add	r3, r1
 80018c6:	761a      	strb	r2, [r3, #24]
}
 80018c8:	bf00      	nop
 80018ca:	370c      	adds	r7, #12
 80018cc:	46bd      	mov	sp, r7
 80018ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018d2:	4770      	bx	lr
 80018d4:	e000e100 	.word	0xe000e100
 80018d8:	e000ed00 	.word	0xe000ed00

080018dc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80018dc:	b480      	push	{r7}
 80018de:	b089      	sub	sp, #36	@ 0x24
 80018e0:	af00      	add	r7, sp, #0
 80018e2:	60f8      	str	r0, [r7, #12]
 80018e4:	60b9      	str	r1, [r7, #8]
 80018e6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80018e8:	68fb      	ldr	r3, [r7, #12]
 80018ea:	f003 0307 	and.w	r3, r3, #7
 80018ee:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80018f0:	69fb      	ldr	r3, [r7, #28]
 80018f2:	f1c3 0307 	rsb	r3, r3, #7
 80018f6:	2b04      	cmp	r3, #4
 80018f8:	bf28      	it	cs
 80018fa:	2304      	movcs	r3, #4
 80018fc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80018fe:	69fb      	ldr	r3, [r7, #28]
 8001900:	3304      	adds	r3, #4
 8001902:	2b06      	cmp	r3, #6
 8001904:	d902      	bls.n	800190c <NVIC_EncodePriority+0x30>
 8001906:	69fb      	ldr	r3, [r7, #28]
 8001908:	3b03      	subs	r3, #3
 800190a:	e000      	b.n	800190e <NVIC_EncodePriority+0x32>
 800190c:	2300      	movs	r3, #0
 800190e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001910:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8001914:	69bb      	ldr	r3, [r7, #24]
 8001916:	fa02 f303 	lsl.w	r3, r2, r3
 800191a:	43da      	mvns	r2, r3
 800191c:	68bb      	ldr	r3, [r7, #8]
 800191e:	401a      	ands	r2, r3
 8001920:	697b      	ldr	r3, [r7, #20]
 8001922:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001924:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8001928:	697b      	ldr	r3, [r7, #20]
 800192a:	fa01 f303 	lsl.w	r3, r1, r3
 800192e:	43d9      	mvns	r1, r3
 8001930:	687b      	ldr	r3, [r7, #4]
 8001932:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001934:	4313      	orrs	r3, r2
         );
}
 8001936:	4618      	mov	r0, r3
 8001938:	3724      	adds	r7, #36	@ 0x24
 800193a:	46bd      	mov	sp, r7
 800193c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001940:	4770      	bx	lr
	...

08001944 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001944:	b580      	push	{r7, lr}
 8001946:	b082      	sub	sp, #8
 8001948:	af00      	add	r7, sp, #0
 800194a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800194c:	687b      	ldr	r3, [r7, #4]
 800194e:	3b01      	subs	r3, #1
 8001950:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001954:	d301      	bcc.n	800195a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001956:	2301      	movs	r3, #1
 8001958:	e00f      	b.n	800197a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800195a:	4a0a      	ldr	r2, [pc, #40]	@ (8001984 <SysTick_Config+0x40>)
 800195c:	687b      	ldr	r3, [r7, #4]
 800195e:	3b01      	subs	r3, #1
 8001960:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001962:	210f      	movs	r1, #15
 8001964:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8001968:	f7ff ff8e 	bl	8001888 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800196c:	4b05      	ldr	r3, [pc, #20]	@ (8001984 <SysTick_Config+0x40>)
 800196e:	2200      	movs	r2, #0
 8001970:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001972:	4b04      	ldr	r3, [pc, #16]	@ (8001984 <SysTick_Config+0x40>)
 8001974:	2207      	movs	r2, #7
 8001976:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001978:	2300      	movs	r3, #0
}
 800197a:	4618      	mov	r0, r3
 800197c:	3708      	adds	r7, #8
 800197e:	46bd      	mov	sp, r7
 8001980:	bd80      	pop	{r7, pc}
 8001982:	bf00      	nop
 8001984:	e000e010 	.word	0xe000e010

08001988 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001988:	b580      	push	{r7, lr}
 800198a:	b082      	sub	sp, #8
 800198c:	af00      	add	r7, sp, #0
 800198e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001990:	6878      	ldr	r0, [r7, #4]
 8001992:	f7ff ff29 	bl	80017e8 <__NVIC_SetPriorityGrouping>
}
 8001996:	bf00      	nop
 8001998:	3708      	adds	r7, #8
 800199a:	46bd      	mov	sp, r7
 800199c:	bd80      	pop	{r7, pc}

0800199e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800199e:	b580      	push	{r7, lr}
 80019a0:	b086      	sub	sp, #24
 80019a2:	af00      	add	r7, sp, #0
 80019a4:	4603      	mov	r3, r0
 80019a6:	60b9      	str	r1, [r7, #8]
 80019a8:	607a      	str	r2, [r7, #4]
 80019aa:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80019ac:	f7ff ff40 	bl	8001830 <__NVIC_GetPriorityGrouping>
 80019b0:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80019b2:	687a      	ldr	r2, [r7, #4]
 80019b4:	68b9      	ldr	r1, [r7, #8]
 80019b6:	6978      	ldr	r0, [r7, #20]
 80019b8:	f7ff ff90 	bl	80018dc <NVIC_EncodePriority>
 80019bc:	4602      	mov	r2, r0
 80019be:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80019c2:	4611      	mov	r1, r2
 80019c4:	4618      	mov	r0, r3
 80019c6:	f7ff ff5f 	bl	8001888 <__NVIC_SetPriority>
}
 80019ca:	bf00      	nop
 80019cc:	3718      	adds	r7, #24
 80019ce:	46bd      	mov	sp, r7
 80019d0:	bd80      	pop	{r7, pc}

080019d2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80019d2:	b580      	push	{r7, lr}
 80019d4:	b082      	sub	sp, #8
 80019d6:	af00      	add	r7, sp, #0
 80019d8:	4603      	mov	r3, r0
 80019da:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80019dc:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80019e0:	4618      	mov	r0, r3
 80019e2:	f7ff ff33 	bl	800184c <__NVIC_EnableIRQ>
}
 80019e6:	bf00      	nop
 80019e8:	3708      	adds	r7, #8
 80019ea:	46bd      	mov	sp, r7
 80019ec:	bd80      	pop	{r7, pc}

080019ee <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80019ee:	b580      	push	{r7, lr}
 80019f0:	b082      	sub	sp, #8
 80019f2:	af00      	add	r7, sp, #0
 80019f4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80019f6:	6878      	ldr	r0, [r7, #4]
 80019f8:	f7ff ffa4 	bl	8001944 <SysTick_Config>
 80019fc:	4603      	mov	r3, r0
}
 80019fe:	4618      	mov	r0, r3
 8001a00:	3708      	adds	r7, #8
 8001a02:	46bd      	mov	sp, r7
 8001a04:	bd80      	pop	{r7, pc}
	...

08001a08 <HAL_MPU_Disable>:
/**
  * @brief  Disables the MPU
  * @retval None
  */
void HAL_MPU_Disable(void)
{
 8001a08:	b480      	push	{r7}
 8001a0a:	af00      	add	r7, sp, #0
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
 8001a0c:	f3bf 8f5f 	dmb	sy
}
 8001a10:	bf00      	nop
  /* Make sure outstanding transfers are done */
  __DMB();

  /* Disable fault exceptions */
  SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTENA_Msk;
 8001a12:	4b07      	ldr	r3, [pc, #28]	@ (8001a30 <HAL_MPU_Disable+0x28>)
 8001a14:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001a16:	4a06      	ldr	r2, [pc, #24]	@ (8001a30 <HAL_MPU_Disable+0x28>)
 8001a18:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001a1c:	6253      	str	r3, [r2, #36]	@ 0x24

  /* Disable the MPU and clear the control register*/
  MPU->CTRL = 0;
 8001a1e:	4b05      	ldr	r3, [pc, #20]	@ (8001a34 <HAL_MPU_Disable+0x2c>)
 8001a20:	2200      	movs	r2, #0
 8001a22:	605a      	str	r2, [r3, #4]
}
 8001a24:	bf00      	nop
 8001a26:	46bd      	mov	sp, r7
 8001a28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a2c:	4770      	bx	lr
 8001a2e:	bf00      	nop
 8001a30:	e000ed00 	.word	0xe000ed00
 8001a34:	e000ed90 	.word	0xe000ed90

08001a38 <HAL_MPU_Enable>:
  *            @arg MPU_PRIVILEGED_DEFAULT
  *            @arg MPU_HFNMI_PRIVDEF
  * @retval None
  */
void HAL_MPU_Enable(uint32_t MPU_Control)
{
 8001a38:	b480      	push	{r7}
 8001a3a:	b083      	sub	sp, #12
 8001a3c:	af00      	add	r7, sp, #0
 8001a3e:	6078      	str	r0, [r7, #4]
  /* Enable the MPU */
  MPU->CTRL = MPU_Control | MPU_CTRL_ENABLE_Msk;
 8001a40:	4a0b      	ldr	r2, [pc, #44]	@ (8001a70 <HAL_MPU_Enable+0x38>)
 8001a42:	687b      	ldr	r3, [r7, #4]
 8001a44:	f043 0301 	orr.w	r3, r3, #1
 8001a48:	6053      	str	r3, [r2, #4]

  /* Enable fault exceptions */
  SCB->SHCSR |= SCB_SHCSR_MEMFAULTENA_Msk;
 8001a4a:	4b0a      	ldr	r3, [pc, #40]	@ (8001a74 <HAL_MPU_Enable+0x3c>)
 8001a4c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001a4e:	4a09      	ldr	r2, [pc, #36]	@ (8001a74 <HAL_MPU_Enable+0x3c>)
 8001a50:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001a54:	6253      	str	r3, [r2, #36]	@ 0x24
  __ASM volatile ("dsb 0xF":::"memory");
 8001a56:	f3bf 8f4f 	dsb	sy
}
 8001a5a:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001a5c:	f3bf 8f6f 	isb	sy
}
 8001a60:	bf00      	nop

  /* Ensure MPU setting take effects */
  __DSB();
  __ISB();
}
 8001a62:	bf00      	nop
 8001a64:	370c      	adds	r7, #12
 8001a66:	46bd      	mov	sp, r7
 8001a68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a6c:	4770      	bx	lr
 8001a6e:	bf00      	nop
 8001a70:	e000ed90 	.word	0xe000ed90
 8001a74:	e000ed00 	.word	0xe000ed00

08001a78 <HAL_MPU_ConfigRegion>:
  * @param MPU_Init Pointer to a MPU_Region_InitTypeDef structure that contains
  *                the initialization and configuration information.
  * @retval None
  */
void HAL_MPU_ConfigRegion(const MPU_Region_InitTypeDef *MPU_Init)
{
 8001a78:	b480      	push	{r7}
 8001a7a:	b083      	sub	sp, #12
 8001a7c:	af00      	add	r7, sp, #0
 8001a7e:	6078      	str	r0, [r7, #4]
  assert_param(IS_MPU_ACCESS_BUFFERABLE(MPU_Init->IsBufferable));
  assert_param(IS_MPU_SUB_REGION_DISABLE(MPU_Init->SubRegionDisable));
  assert_param(IS_MPU_REGION_SIZE(MPU_Init->Size));

  /* Set the Region number */
  MPU->RNR = MPU_Init->Number;
 8001a80:	687b      	ldr	r3, [r7, #4]
 8001a82:	785a      	ldrb	r2, [r3, #1]
 8001a84:	4b1b      	ldr	r3, [pc, #108]	@ (8001af4 <HAL_MPU_ConfigRegion+0x7c>)
 8001a86:	609a      	str	r2, [r3, #8]

  /* Disable the Region */
  CLEAR_BIT(MPU->RASR, MPU_RASR_ENABLE_Msk);
 8001a88:	4b1a      	ldr	r3, [pc, #104]	@ (8001af4 <HAL_MPU_ConfigRegion+0x7c>)
 8001a8a:	691b      	ldr	r3, [r3, #16]
 8001a8c:	4a19      	ldr	r2, [pc, #100]	@ (8001af4 <HAL_MPU_ConfigRegion+0x7c>)
 8001a8e:	f023 0301 	bic.w	r3, r3, #1
 8001a92:	6113      	str	r3, [r2, #16]

  /* Apply configuration */
  MPU->RBAR = MPU_Init->BaseAddress;
 8001a94:	4a17      	ldr	r2, [pc, #92]	@ (8001af4 <HAL_MPU_ConfigRegion+0x7c>)
 8001a96:	687b      	ldr	r3, [r7, #4]
 8001a98:	685b      	ldr	r3, [r3, #4]
 8001a9a:	60d3      	str	r3, [r2, #12]
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	7b1b      	ldrb	r3, [r3, #12]
 8001aa0:	071a      	lsls	r2, r3, #28
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 8001aa2:	687b      	ldr	r3, [r7, #4]
 8001aa4:	7adb      	ldrb	r3, [r3, #11]
 8001aa6:	061b      	lsls	r3, r3, #24
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8001aa8:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 8001aaa:	687b      	ldr	r3, [r7, #4]
 8001aac:	7a9b      	ldrb	r3, [r3, #10]
 8001aae:	04db      	lsls	r3, r3, #19
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 8001ab0:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	7b5b      	ldrb	r3, [r3, #13]
 8001ab6:	049b      	lsls	r3, r3, #18
              ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 8001ab8:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 8001aba:	687b      	ldr	r3, [r7, #4]
 8001abc:	7b9b      	ldrb	r3, [r3, #14]
 8001abe:	045b      	lsls	r3, r3, #17
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 8001ac0:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 8001ac2:	687b      	ldr	r3, [r7, #4]
 8001ac4:	7bdb      	ldrb	r3, [r3, #15]
 8001ac6:	041b      	lsls	r3, r3, #16
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 8001ac8:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 8001aca:	687b      	ldr	r3, [r7, #4]
 8001acc:	7a5b      	ldrb	r3, [r3, #9]
 8001ace:	021b      	lsls	r3, r3, #8
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 8001ad0:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8001ad2:	687b      	ldr	r3, [r7, #4]
 8001ad4:	7a1b      	ldrb	r3, [r3, #8]
 8001ad6:	005b      	lsls	r3, r3, #1
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 8001ad8:	4313      	orrs	r3, r2
              ((uint32_t)MPU_Init->Enable                  << MPU_RASR_ENABLE_Pos);
 8001ada:	687a      	ldr	r2, [r7, #4]
 8001adc:	7812      	ldrb	r2, [r2, #0]
 8001ade:	4611      	mov	r1, r2
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8001ae0:	4a04      	ldr	r2, [pc, #16]	@ (8001af4 <HAL_MPU_ConfigRegion+0x7c>)
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8001ae2:	430b      	orrs	r3, r1
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8001ae4:	6113      	str	r3, [r2, #16]
}
 8001ae6:	bf00      	nop
 8001ae8:	370c      	adds	r7, #12
 8001aea:	46bd      	mov	sp, r7
 8001aec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001af0:	4770      	bx	lr
 8001af2:	bf00      	nop
 8001af4:	e000ed90 	.word	0xe000ed90

08001af8 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001af8:	b580      	push	{r7, lr}
 8001afa:	b086      	sub	sp, #24
 8001afc:	af00      	add	r7, sp, #0
 8001afe:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;
  const __IO uint32_t *enableRegister;

  uint32_t tickstart = HAL_GetTick();
 8001b00:	f7ff fe42 	bl	8001788 <HAL_GetTick>
 8001b04:	6138      	str	r0, [r7, #16]

 /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8001b06:	687b      	ldr	r3, [r7, #4]
 8001b08:	2b00      	cmp	r3, #0
 8001b0a:	d101      	bne.n	8001b10 <HAL_DMA_Abort+0x18>
  {
    return HAL_ERROR;
 8001b0c:	2301      	movs	r3, #1
 8001b0e:	e2dc      	b.n	80020ca <HAL_DMA_Abort+0x5d2>
  }

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8001b16:	b2db      	uxtb	r3, r3
 8001b18:	2b02      	cmp	r3, #2
 8001b1a:	d008      	beq.n	8001b2e <HAL_DMA_Abort+0x36>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	2280      	movs	r2, #128	@ 0x80
 8001b20:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	2200      	movs	r2, #0
 8001b26:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    return HAL_ERROR;
 8001b2a:	2301      	movs	r3, #1
 8001b2c:	e2cd      	b.n	80020ca <HAL_DMA_Abort+0x5d2>
  }
  else
  {
    /* Disable all the transfer interrupts */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8001b2e:	687b      	ldr	r3, [r7, #4]
 8001b30:	681b      	ldr	r3, [r3, #0]
 8001b32:	4a76      	ldr	r2, [pc, #472]	@ (8001d0c <HAL_DMA_Abort+0x214>)
 8001b34:	4293      	cmp	r3, r2
 8001b36:	d04a      	beq.n	8001bce <HAL_DMA_Abort+0xd6>
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	681b      	ldr	r3, [r3, #0]
 8001b3c:	4a74      	ldr	r2, [pc, #464]	@ (8001d10 <HAL_DMA_Abort+0x218>)
 8001b3e:	4293      	cmp	r3, r2
 8001b40:	d045      	beq.n	8001bce <HAL_DMA_Abort+0xd6>
 8001b42:	687b      	ldr	r3, [r7, #4]
 8001b44:	681b      	ldr	r3, [r3, #0]
 8001b46:	4a73      	ldr	r2, [pc, #460]	@ (8001d14 <HAL_DMA_Abort+0x21c>)
 8001b48:	4293      	cmp	r3, r2
 8001b4a:	d040      	beq.n	8001bce <HAL_DMA_Abort+0xd6>
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	681b      	ldr	r3, [r3, #0]
 8001b50:	4a71      	ldr	r2, [pc, #452]	@ (8001d18 <HAL_DMA_Abort+0x220>)
 8001b52:	4293      	cmp	r3, r2
 8001b54:	d03b      	beq.n	8001bce <HAL_DMA_Abort+0xd6>
 8001b56:	687b      	ldr	r3, [r7, #4]
 8001b58:	681b      	ldr	r3, [r3, #0]
 8001b5a:	4a70      	ldr	r2, [pc, #448]	@ (8001d1c <HAL_DMA_Abort+0x224>)
 8001b5c:	4293      	cmp	r3, r2
 8001b5e:	d036      	beq.n	8001bce <HAL_DMA_Abort+0xd6>
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	681b      	ldr	r3, [r3, #0]
 8001b64:	4a6e      	ldr	r2, [pc, #440]	@ (8001d20 <HAL_DMA_Abort+0x228>)
 8001b66:	4293      	cmp	r3, r2
 8001b68:	d031      	beq.n	8001bce <HAL_DMA_Abort+0xd6>
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	681b      	ldr	r3, [r3, #0]
 8001b6e:	4a6d      	ldr	r2, [pc, #436]	@ (8001d24 <HAL_DMA_Abort+0x22c>)
 8001b70:	4293      	cmp	r3, r2
 8001b72:	d02c      	beq.n	8001bce <HAL_DMA_Abort+0xd6>
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	681b      	ldr	r3, [r3, #0]
 8001b78:	4a6b      	ldr	r2, [pc, #428]	@ (8001d28 <HAL_DMA_Abort+0x230>)
 8001b7a:	4293      	cmp	r3, r2
 8001b7c:	d027      	beq.n	8001bce <HAL_DMA_Abort+0xd6>
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	681b      	ldr	r3, [r3, #0]
 8001b82:	4a6a      	ldr	r2, [pc, #424]	@ (8001d2c <HAL_DMA_Abort+0x234>)
 8001b84:	4293      	cmp	r3, r2
 8001b86:	d022      	beq.n	8001bce <HAL_DMA_Abort+0xd6>
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	681b      	ldr	r3, [r3, #0]
 8001b8c:	4a68      	ldr	r2, [pc, #416]	@ (8001d30 <HAL_DMA_Abort+0x238>)
 8001b8e:	4293      	cmp	r3, r2
 8001b90:	d01d      	beq.n	8001bce <HAL_DMA_Abort+0xd6>
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	681b      	ldr	r3, [r3, #0]
 8001b96:	4a67      	ldr	r2, [pc, #412]	@ (8001d34 <HAL_DMA_Abort+0x23c>)
 8001b98:	4293      	cmp	r3, r2
 8001b9a:	d018      	beq.n	8001bce <HAL_DMA_Abort+0xd6>
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	681b      	ldr	r3, [r3, #0]
 8001ba0:	4a65      	ldr	r2, [pc, #404]	@ (8001d38 <HAL_DMA_Abort+0x240>)
 8001ba2:	4293      	cmp	r3, r2
 8001ba4:	d013      	beq.n	8001bce <HAL_DMA_Abort+0xd6>
 8001ba6:	687b      	ldr	r3, [r7, #4]
 8001ba8:	681b      	ldr	r3, [r3, #0]
 8001baa:	4a64      	ldr	r2, [pc, #400]	@ (8001d3c <HAL_DMA_Abort+0x244>)
 8001bac:	4293      	cmp	r3, r2
 8001bae:	d00e      	beq.n	8001bce <HAL_DMA_Abort+0xd6>
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	681b      	ldr	r3, [r3, #0]
 8001bb4:	4a62      	ldr	r2, [pc, #392]	@ (8001d40 <HAL_DMA_Abort+0x248>)
 8001bb6:	4293      	cmp	r3, r2
 8001bb8:	d009      	beq.n	8001bce <HAL_DMA_Abort+0xd6>
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	681b      	ldr	r3, [r3, #0]
 8001bbe:	4a61      	ldr	r2, [pc, #388]	@ (8001d44 <HAL_DMA_Abort+0x24c>)
 8001bc0:	4293      	cmp	r3, r2
 8001bc2:	d004      	beq.n	8001bce <HAL_DMA_Abort+0xd6>
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	681b      	ldr	r3, [r3, #0]
 8001bc8:	4a5f      	ldr	r2, [pc, #380]	@ (8001d48 <HAL_DMA_Abort+0x250>)
 8001bca:	4293      	cmp	r3, r2
 8001bcc:	d101      	bne.n	8001bd2 <HAL_DMA_Abort+0xda>
 8001bce:	2301      	movs	r3, #1
 8001bd0:	e000      	b.n	8001bd4 <HAL_DMA_Abort+0xdc>
 8001bd2:	2300      	movs	r3, #0
 8001bd4:	2b00      	cmp	r3, #0
 8001bd6:	d013      	beq.n	8001c00 <HAL_DMA_Abort+0x108>
    {
       /* Disable DMA All Interrupts  */
      ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT);
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	681b      	ldr	r3, [r3, #0]
 8001bdc:	681a      	ldr	r2, [r3, #0]
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	681b      	ldr	r3, [r3, #0]
 8001be2:	f022 021e 	bic.w	r2, r2, #30
 8001be6:	601a      	str	r2, [r3, #0]
      ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	681b      	ldr	r3, [r3, #0]
 8001bec:	695a      	ldr	r2, [r3, #20]
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	681b      	ldr	r3, [r3, #0]
 8001bf2:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8001bf6:	615a      	str	r2, [r3, #20]

      enableRegister = (__IO uint32_t *)(&(((DMA_Stream_TypeDef   *)hdma->Instance)->CR));
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	681b      	ldr	r3, [r3, #0]
 8001bfc:	617b      	str	r3, [r7, #20]
 8001bfe:	e00a      	b.n	8001c16 <HAL_DMA_Abort+0x11e>
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	681b      	ldr	r3, [r3, #0]
 8001c04:	681a      	ldr	r2, [r3, #0]
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	681b      	ldr	r3, [r3, #0]
 8001c0a:	f022 020e 	bic.w	r2, r2, #14
 8001c0e:	601a      	str	r2, [r3, #0]

      enableRegister = (__IO uint32_t *)(&(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR));
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	681b      	ldr	r3, [r3, #0]
 8001c14:	617b      	str	r3, [r7, #20]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	681b      	ldr	r3, [r3, #0]
 8001c1a:	4a3c      	ldr	r2, [pc, #240]	@ (8001d0c <HAL_DMA_Abort+0x214>)
 8001c1c:	4293      	cmp	r3, r2
 8001c1e:	d072      	beq.n	8001d06 <HAL_DMA_Abort+0x20e>
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	681b      	ldr	r3, [r3, #0]
 8001c24:	4a3a      	ldr	r2, [pc, #232]	@ (8001d10 <HAL_DMA_Abort+0x218>)
 8001c26:	4293      	cmp	r3, r2
 8001c28:	d06d      	beq.n	8001d06 <HAL_DMA_Abort+0x20e>
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	681b      	ldr	r3, [r3, #0]
 8001c2e:	4a39      	ldr	r2, [pc, #228]	@ (8001d14 <HAL_DMA_Abort+0x21c>)
 8001c30:	4293      	cmp	r3, r2
 8001c32:	d068      	beq.n	8001d06 <HAL_DMA_Abort+0x20e>
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	681b      	ldr	r3, [r3, #0]
 8001c38:	4a37      	ldr	r2, [pc, #220]	@ (8001d18 <HAL_DMA_Abort+0x220>)
 8001c3a:	4293      	cmp	r3, r2
 8001c3c:	d063      	beq.n	8001d06 <HAL_DMA_Abort+0x20e>
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	681b      	ldr	r3, [r3, #0]
 8001c42:	4a36      	ldr	r2, [pc, #216]	@ (8001d1c <HAL_DMA_Abort+0x224>)
 8001c44:	4293      	cmp	r3, r2
 8001c46:	d05e      	beq.n	8001d06 <HAL_DMA_Abort+0x20e>
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	681b      	ldr	r3, [r3, #0]
 8001c4c:	4a34      	ldr	r2, [pc, #208]	@ (8001d20 <HAL_DMA_Abort+0x228>)
 8001c4e:	4293      	cmp	r3, r2
 8001c50:	d059      	beq.n	8001d06 <HAL_DMA_Abort+0x20e>
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	681b      	ldr	r3, [r3, #0]
 8001c56:	4a33      	ldr	r2, [pc, #204]	@ (8001d24 <HAL_DMA_Abort+0x22c>)
 8001c58:	4293      	cmp	r3, r2
 8001c5a:	d054      	beq.n	8001d06 <HAL_DMA_Abort+0x20e>
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	681b      	ldr	r3, [r3, #0]
 8001c60:	4a31      	ldr	r2, [pc, #196]	@ (8001d28 <HAL_DMA_Abort+0x230>)
 8001c62:	4293      	cmp	r3, r2
 8001c64:	d04f      	beq.n	8001d06 <HAL_DMA_Abort+0x20e>
 8001c66:	687b      	ldr	r3, [r7, #4]
 8001c68:	681b      	ldr	r3, [r3, #0]
 8001c6a:	4a30      	ldr	r2, [pc, #192]	@ (8001d2c <HAL_DMA_Abort+0x234>)
 8001c6c:	4293      	cmp	r3, r2
 8001c6e:	d04a      	beq.n	8001d06 <HAL_DMA_Abort+0x20e>
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	681b      	ldr	r3, [r3, #0]
 8001c74:	4a2e      	ldr	r2, [pc, #184]	@ (8001d30 <HAL_DMA_Abort+0x238>)
 8001c76:	4293      	cmp	r3, r2
 8001c78:	d045      	beq.n	8001d06 <HAL_DMA_Abort+0x20e>
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	681b      	ldr	r3, [r3, #0]
 8001c7e:	4a2d      	ldr	r2, [pc, #180]	@ (8001d34 <HAL_DMA_Abort+0x23c>)
 8001c80:	4293      	cmp	r3, r2
 8001c82:	d040      	beq.n	8001d06 <HAL_DMA_Abort+0x20e>
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	681b      	ldr	r3, [r3, #0]
 8001c88:	4a2b      	ldr	r2, [pc, #172]	@ (8001d38 <HAL_DMA_Abort+0x240>)
 8001c8a:	4293      	cmp	r3, r2
 8001c8c:	d03b      	beq.n	8001d06 <HAL_DMA_Abort+0x20e>
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	681b      	ldr	r3, [r3, #0]
 8001c92:	4a2a      	ldr	r2, [pc, #168]	@ (8001d3c <HAL_DMA_Abort+0x244>)
 8001c94:	4293      	cmp	r3, r2
 8001c96:	d036      	beq.n	8001d06 <HAL_DMA_Abort+0x20e>
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	681b      	ldr	r3, [r3, #0]
 8001c9c:	4a28      	ldr	r2, [pc, #160]	@ (8001d40 <HAL_DMA_Abort+0x248>)
 8001c9e:	4293      	cmp	r3, r2
 8001ca0:	d031      	beq.n	8001d06 <HAL_DMA_Abort+0x20e>
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	681b      	ldr	r3, [r3, #0]
 8001ca6:	4a27      	ldr	r2, [pc, #156]	@ (8001d44 <HAL_DMA_Abort+0x24c>)
 8001ca8:	4293      	cmp	r3, r2
 8001caa:	d02c      	beq.n	8001d06 <HAL_DMA_Abort+0x20e>
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	681b      	ldr	r3, [r3, #0]
 8001cb0:	4a25      	ldr	r2, [pc, #148]	@ (8001d48 <HAL_DMA_Abort+0x250>)
 8001cb2:	4293      	cmp	r3, r2
 8001cb4:	d027      	beq.n	8001d06 <HAL_DMA_Abort+0x20e>
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	681b      	ldr	r3, [r3, #0]
 8001cba:	4a24      	ldr	r2, [pc, #144]	@ (8001d4c <HAL_DMA_Abort+0x254>)
 8001cbc:	4293      	cmp	r3, r2
 8001cbe:	d022      	beq.n	8001d06 <HAL_DMA_Abort+0x20e>
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	681b      	ldr	r3, [r3, #0]
 8001cc4:	4a22      	ldr	r2, [pc, #136]	@ (8001d50 <HAL_DMA_Abort+0x258>)
 8001cc6:	4293      	cmp	r3, r2
 8001cc8:	d01d      	beq.n	8001d06 <HAL_DMA_Abort+0x20e>
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	681b      	ldr	r3, [r3, #0]
 8001cce:	4a21      	ldr	r2, [pc, #132]	@ (8001d54 <HAL_DMA_Abort+0x25c>)
 8001cd0:	4293      	cmp	r3, r2
 8001cd2:	d018      	beq.n	8001d06 <HAL_DMA_Abort+0x20e>
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	681b      	ldr	r3, [r3, #0]
 8001cd8:	4a1f      	ldr	r2, [pc, #124]	@ (8001d58 <HAL_DMA_Abort+0x260>)
 8001cda:	4293      	cmp	r3, r2
 8001cdc:	d013      	beq.n	8001d06 <HAL_DMA_Abort+0x20e>
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	681b      	ldr	r3, [r3, #0]
 8001ce2:	4a1e      	ldr	r2, [pc, #120]	@ (8001d5c <HAL_DMA_Abort+0x264>)
 8001ce4:	4293      	cmp	r3, r2
 8001ce6:	d00e      	beq.n	8001d06 <HAL_DMA_Abort+0x20e>
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	681b      	ldr	r3, [r3, #0]
 8001cec:	4a1c      	ldr	r2, [pc, #112]	@ (8001d60 <HAL_DMA_Abort+0x268>)
 8001cee:	4293      	cmp	r3, r2
 8001cf0:	d009      	beq.n	8001d06 <HAL_DMA_Abort+0x20e>
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	681b      	ldr	r3, [r3, #0]
 8001cf6:	4a1b      	ldr	r2, [pc, #108]	@ (8001d64 <HAL_DMA_Abort+0x26c>)
 8001cf8:	4293      	cmp	r3, r2
 8001cfa:	d004      	beq.n	8001d06 <HAL_DMA_Abort+0x20e>
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	681b      	ldr	r3, [r3, #0]
 8001d00:	4a19      	ldr	r2, [pc, #100]	@ (8001d68 <HAL_DMA_Abort+0x270>)
 8001d02:	4293      	cmp	r3, r2
 8001d04:	d132      	bne.n	8001d6c <HAL_DMA_Abort+0x274>
 8001d06:	2301      	movs	r3, #1
 8001d08:	e031      	b.n	8001d6e <HAL_DMA_Abort+0x276>
 8001d0a:	bf00      	nop
 8001d0c:	40020010 	.word	0x40020010
 8001d10:	40020028 	.word	0x40020028
 8001d14:	40020040 	.word	0x40020040
 8001d18:	40020058 	.word	0x40020058
 8001d1c:	40020070 	.word	0x40020070
 8001d20:	40020088 	.word	0x40020088
 8001d24:	400200a0 	.word	0x400200a0
 8001d28:	400200b8 	.word	0x400200b8
 8001d2c:	40020410 	.word	0x40020410
 8001d30:	40020428 	.word	0x40020428
 8001d34:	40020440 	.word	0x40020440
 8001d38:	40020458 	.word	0x40020458
 8001d3c:	40020470 	.word	0x40020470
 8001d40:	40020488 	.word	0x40020488
 8001d44:	400204a0 	.word	0x400204a0
 8001d48:	400204b8 	.word	0x400204b8
 8001d4c:	58025408 	.word	0x58025408
 8001d50:	5802541c 	.word	0x5802541c
 8001d54:	58025430 	.word	0x58025430
 8001d58:	58025444 	.word	0x58025444
 8001d5c:	58025458 	.word	0x58025458
 8001d60:	5802546c 	.word	0x5802546c
 8001d64:	58025480 	.word	0x58025480
 8001d68:	58025494 	.word	0x58025494
 8001d6c:	2300      	movs	r3, #0
 8001d6e:	2b00      	cmp	r3, #0
 8001d70:	d007      	beq.n	8001d82 <HAL_DMA_Abort+0x28a>
    {
      /* disable the DMAMUX sync overrun IT */
      hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001d76:	681a      	ldr	r2, [r3, #0]
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001d7c:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8001d80:	601a      	str	r2, [r3, #0]
    }

    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	681b      	ldr	r3, [r3, #0]
 8001d86:	4a6d      	ldr	r2, [pc, #436]	@ (8001f3c <HAL_DMA_Abort+0x444>)
 8001d88:	4293      	cmp	r3, r2
 8001d8a:	d04a      	beq.n	8001e22 <HAL_DMA_Abort+0x32a>
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	681b      	ldr	r3, [r3, #0]
 8001d90:	4a6b      	ldr	r2, [pc, #428]	@ (8001f40 <HAL_DMA_Abort+0x448>)
 8001d92:	4293      	cmp	r3, r2
 8001d94:	d045      	beq.n	8001e22 <HAL_DMA_Abort+0x32a>
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	681b      	ldr	r3, [r3, #0]
 8001d9a:	4a6a      	ldr	r2, [pc, #424]	@ (8001f44 <HAL_DMA_Abort+0x44c>)
 8001d9c:	4293      	cmp	r3, r2
 8001d9e:	d040      	beq.n	8001e22 <HAL_DMA_Abort+0x32a>
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	681b      	ldr	r3, [r3, #0]
 8001da4:	4a68      	ldr	r2, [pc, #416]	@ (8001f48 <HAL_DMA_Abort+0x450>)
 8001da6:	4293      	cmp	r3, r2
 8001da8:	d03b      	beq.n	8001e22 <HAL_DMA_Abort+0x32a>
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	681b      	ldr	r3, [r3, #0]
 8001dae:	4a67      	ldr	r2, [pc, #412]	@ (8001f4c <HAL_DMA_Abort+0x454>)
 8001db0:	4293      	cmp	r3, r2
 8001db2:	d036      	beq.n	8001e22 <HAL_DMA_Abort+0x32a>
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	681b      	ldr	r3, [r3, #0]
 8001db8:	4a65      	ldr	r2, [pc, #404]	@ (8001f50 <HAL_DMA_Abort+0x458>)
 8001dba:	4293      	cmp	r3, r2
 8001dbc:	d031      	beq.n	8001e22 <HAL_DMA_Abort+0x32a>
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	681b      	ldr	r3, [r3, #0]
 8001dc2:	4a64      	ldr	r2, [pc, #400]	@ (8001f54 <HAL_DMA_Abort+0x45c>)
 8001dc4:	4293      	cmp	r3, r2
 8001dc6:	d02c      	beq.n	8001e22 <HAL_DMA_Abort+0x32a>
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	681b      	ldr	r3, [r3, #0]
 8001dcc:	4a62      	ldr	r2, [pc, #392]	@ (8001f58 <HAL_DMA_Abort+0x460>)
 8001dce:	4293      	cmp	r3, r2
 8001dd0:	d027      	beq.n	8001e22 <HAL_DMA_Abort+0x32a>
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	681b      	ldr	r3, [r3, #0]
 8001dd6:	4a61      	ldr	r2, [pc, #388]	@ (8001f5c <HAL_DMA_Abort+0x464>)
 8001dd8:	4293      	cmp	r3, r2
 8001dda:	d022      	beq.n	8001e22 <HAL_DMA_Abort+0x32a>
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	681b      	ldr	r3, [r3, #0]
 8001de0:	4a5f      	ldr	r2, [pc, #380]	@ (8001f60 <HAL_DMA_Abort+0x468>)
 8001de2:	4293      	cmp	r3, r2
 8001de4:	d01d      	beq.n	8001e22 <HAL_DMA_Abort+0x32a>
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	681b      	ldr	r3, [r3, #0]
 8001dea:	4a5e      	ldr	r2, [pc, #376]	@ (8001f64 <HAL_DMA_Abort+0x46c>)
 8001dec:	4293      	cmp	r3, r2
 8001dee:	d018      	beq.n	8001e22 <HAL_DMA_Abort+0x32a>
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	681b      	ldr	r3, [r3, #0]
 8001df4:	4a5c      	ldr	r2, [pc, #368]	@ (8001f68 <HAL_DMA_Abort+0x470>)
 8001df6:	4293      	cmp	r3, r2
 8001df8:	d013      	beq.n	8001e22 <HAL_DMA_Abort+0x32a>
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	681b      	ldr	r3, [r3, #0]
 8001dfe:	4a5b      	ldr	r2, [pc, #364]	@ (8001f6c <HAL_DMA_Abort+0x474>)
 8001e00:	4293      	cmp	r3, r2
 8001e02:	d00e      	beq.n	8001e22 <HAL_DMA_Abort+0x32a>
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	681b      	ldr	r3, [r3, #0]
 8001e08:	4a59      	ldr	r2, [pc, #356]	@ (8001f70 <HAL_DMA_Abort+0x478>)
 8001e0a:	4293      	cmp	r3, r2
 8001e0c:	d009      	beq.n	8001e22 <HAL_DMA_Abort+0x32a>
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	681b      	ldr	r3, [r3, #0]
 8001e12:	4a58      	ldr	r2, [pc, #352]	@ (8001f74 <HAL_DMA_Abort+0x47c>)
 8001e14:	4293      	cmp	r3, r2
 8001e16:	d004      	beq.n	8001e22 <HAL_DMA_Abort+0x32a>
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	681b      	ldr	r3, [r3, #0]
 8001e1c:	4a56      	ldr	r2, [pc, #344]	@ (8001f78 <HAL_DMA_Abort+0x480>)
 8001e1e:	4293      	cmp	r3, r2
 8001e20:	d108      	bne.n	8001e34 <HAL_DMA_Abort+0x33c>
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	681b      	ldr	r3, [r3, #0]
 8001e26:	681a      	ldr	r2, [r3, #0]
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	681b      	ldr	r3, [r3, #0]
 8001e2c:	f022 0201 	bic.w	r2, r2, #1
 8001e30:	601a      	str	r2, [r3, #0]
 8001e32:	e007      	b.n	8001e44 <HAL_DMA_Abort+0x34c>
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	681b      	ldr	r3, [r3, #0]
 8001e38:	681a      	ldr	r2, [r3, #0]
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	681b      	ldr	r3, [r3, #0]
 8001e3e:	f022 0201 	bic.w	r2, r2, #1
 8001e42:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 8001e44:	e013      	b.n	8001e6e <HAL_DMA_Abort+0x376>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001e46:	f7ff fc9f 	bl	8001788 <HAL_GetTick>
 8001e4a:	4602      	mov	r2, r0
 8001e4c:	693b      	ldr	r3, [r7, #16]
 8001e4e:	1ad3      	subs	r3, r2, r3
 8001e50:	2b05      	cmp	r3, #5
 8001e52:	d90c      	bls.n	8001e6e <HAL_DMA_Abort+0x376>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	2220      	movs	r2, #32
 8001e58:	655a      	str	r2, [r3, #84]	@ 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	2203      	movs	r2, #3
 8001e5e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	2200      	movs	r2, #0
 8001e66:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        return HAL_ERROR;
 8001e6a:	2301      	movs	r3, #1
 8001e6c:	e12d      	b.n	80020ca <HAL_DMA_Abort+0x5d2>
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 8001e6e:	697b      	ldr	r3, [r7, #20]
 8001e70:	681b      	ldr	r3, [r3, #0]
 8001e72:	f003 0301 	and.w	r3, r3, #1
 8001e76:	2b00      	cmp	r3, #0
 8001e78:	d1e5      	bne.n	8001e46 <HAL_DMA_Abort+0x34e>
      }
    }

    /* Clear all interrupt flags at correct offset within the register */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	681b      	ldr	r3, [r3, #0]
 8001e7e:	4a2f      	ldr	r2, [pc, #188]	@ (8001f3c <HAL_DMA_Abort+0x444>)
 8001e80:	4293      	cmp	r3, r2
 8001e82:	d04a      	beq.n	8001f1a <HAL_DMA_Abort+0x422>
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	681b      	ldr	r3, [r3, #0]
 8001e88:	4a2d      	ldr	r2, [pc, #180]	@ (8001f40 <HAL_DMA_Abort+0x448>)
 8001e8a:	4293      	cmp	r3, r2
 8001e8c:	d045      	beq.n	8001f1a <HAL_DMA_Abort+0x422>
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	681b      	ldr	r3, [r3, #0]
 8001e92:	4a2c      	ldr	r2, [pc, #176]	@ (8001f44 <HAL_DMA_Abort+0x44c>)
 8001e94:	4293      	cmp	r3, r2
 8001e96:	d040      	beq.n	8001f1a <HAL_DMA_Abort+0x422>
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	681b      	ldr	r3, [r3, #0]
 8001e9c:	4a2a      	ldr	r2, [pc, #168]	@ (8001f48 <HAL_DMA_Abort+0x450>)
 8001e9e:	4293      	cmp	r3, r2
 8001ea0:	d03b      	beq.n	8001f1a <HAL_DMA_Abort+0x422>
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	681b      	ldr	r3, [r3, #0]
 8001ea6:	4a29      	ldr	r2, [pc, #164]	@ (8001f4c <HAL_DMA_Abort+0x454>)
 8001ea8:	4293      	cmp	r3, r2
 8001eaa:	d036      	beq.n	8001f1a <HAL_DMA_Abort+0x422>
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	681b      	ldr	r3, [r3, #0]
 8001eb0:	4a27      	ldr	r2, [pc, #156]	@ (8001f50 <HAL_DMA_Abort+0x458>)
 8001eb2:	4293      	cmp	r3, r2
 8001eb4:	d031      	beq.n	8001f1a <HAL_DMA_Abort+0x422>
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	681b      	ldr	r3, [r3, #0]
 8001eba:	4a26      	ldr	r2, [pc, #152]	@ (8001f54 <HAL_DMA_Abort+0x45c>)
 8001ebc:	4293      	cmp	r3, r2
 8001ebe:	d02c      	beq.n	8001f1a <HAL_DMA_Abort+0x422>
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	681b      	ldr	r3, [r3, #0]
 8001ec4:	4a24      	ldr	r2, [pc, #144]	@ (8001f58 <HAL_DMA_Abort+0x460>)
 8001ec6:	4293      	cmp	r3, r2
 8001ec8:	d027      	beq.n	8001f1a <HAL_DMA_Abort+0x422>
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	681b      	ldr	r3, [r3, #0]
 8001ece:	4a23      	ldr	r2, [pc, #140]	@ (8001f5c <HAL_DMA_Abort+0x464>)
 8001ed0:	4293      	cmp	r3, r2
 8001ed2:	d022      	beq.n	8001f1a <HAL_DMA_Abort+0x422>
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	681b      	ldr	r3, [r3, #0]
 8001ed8:	4a21      	ldr	r2, [pc, #132]	@ (8001f60 <HAL_DMA_Abort+0x468>)
 8001eda:	4293      	cmp	r3, r2
 8001edc:	d01d      	beq.n	8001f1a <HAL_DMA_Abort+0x422>
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	681b      	ldr	r3, [r3, #0]
 8001ee2:	4a20      	ldr	r2, [pc, #128]	@ (8001f64 <HAL_DMA_Abort+0x46c>)
 8001ee4:	4293      	cmp	r3, r2
 8001ee6:	d018      	beq.n	8001f1a <HAL_DMA_Abort+0x422>
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	681b      	ldr	r3, [r3, #0]
 8001eec:	4a1e      	ldr	r2, [pc, #120]	@ (8001f68 <HAL_DMA_Abort+0x470>)
 8001eee:	4293      	cmp	r3, r2
 8001ef0:	d013      	beq.n	8001f1a <HAL_DMA_Abort+0x422>
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	681b      	ldr	r3, [r3, #0]
 8001ef6:	4a1d      	ldr	r2, [pc, #116]	@ (8001f6c <HAL_DMA_Abort+0x474>)
 8001ef8:	4293      	cmp	r3, r2
 8001efa:	d00e      	beq.n	8001f1a <HAL_DMA_Abort+0x422>
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	681b      	ldr	r3, [r3, #0]
 8001f00:	4a1b      	ldr	r2, [pc, #108]	@ (8001f70 <HAL_DMA_Abort+0x478>)
 8001f02:	4293      	cmp	r3, r2
 8001f04:	d009      	beq.n	8001f1a <HAL_DMA_Abort+0x422>
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	681b      	ldr	r3, [r3, #0]
 8001f0a:	4a1a      	ldr	r2, [pc, #104]	@ (8001f74 <HAL_DMA_Abort+0x47c>)
 8001f0c:	4293      	cmp	r3, r2
 8001f0e:	d004      	beq.n	8001f1a <HAL_DMA_Abort+0x422>
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	681b      	ldr	r3, [r3, #0]
 8001f14:	4a18      	ldr	r2, [pc, #96]	@ (8001f78 <HAL_DMA_Abort+0x480>)
 8001f16:	4293      	cmp	r3, r2
 8001f18:	d101      	bne.n	8001f1e <HAL_DMA_Abort+0x426>
 8001f1a:	2301      	movs	r3, #1
 8001f1c:	e000      	b.n	8001f20 <HAL_DMA_Abort+0x428>
 8001f1e:	2300      	movs	r3, #0
 8001f20:	2b00      	cmp	r3, #0
 8001f22:	d02b      	beq.n	8001f7c <HAL_DMA_Abort+0x484>
    {
      regs_dma = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001f28:	60bb      	str	r3, [r7, #8]
      regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001f2e:	f003 031f 	and.w	r3, r3, #31
 8001f32:	223f      	movs	r2, #63	@ 0x3f
 8001f34:	409a      	lsls	r2, r3
 8001f36:	68bb      	ldr	r3, [r7, #8]
 8001f38:	609a      	str	r2, [r3, #8]
 8001f3a:	e02a      	b.n	8001f92 <HAL_DMA_Abort+0x49a>
 8001f3c:	40020010 	.word	0x40020010
 8001f40:	40020028 	.word	0x40020028
 8001f44:	40020040 	.word	0x40020040
 8001f48:	40020058 	.word	0x40020058
 8001f4c:	40020070 	.word	0x40020070
 8001f50:	40020088 	.word	0x40020088
 8001f54:	400200a0 	.word	0x400200a0
 8001f58:	400200b8 	.word	0x400200b8
 8001f5c:	40020410 	.word	0x40020410
 8001f60:	40020428 	.word	0x40020428
 8001f64:	40020440 	.word	0x40020440
 8001f68:	40020458 	.word	0x40020458
 8001f6c:	40020470 	.word	0x40020470
 8001f70:	40020488 	.word	0x40020488
 8001f74:	400204a0 	.word	0x400204a0
 8001f78:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001f80:	60fb      	str	r3, [r7, #12]
      regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001f86:	f003 031f 	and.w	r3, r3, #31
 8001f8a:	2201      	movs	r2, #1
 8001f8c:	409a      	lsls	r2, r3
 8001f8e:	68fb      	ldr	r3, [r7, #12]
 8001f90:	605a      	str	r2, [r3, #4]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	681b      	ldr	r3, [r3, #0]
 8001f96:	4a4f      	ldr	r2, [pc, #316]	@ (80020d4 <HAL_DMA_Abort+0x5dc>)
 8001f98:	4293      	cmp	r3, r2
 8001f9a:	d072      	beq.n	8002082 <HAL_DMA_Abort+0x58a>
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	681b      	ldr	r3, [r3, #0]
 8001fa0:	4a4d      	ldr	r2, [pc, #308]	@ (80020d8 <HAL_DMA_Abort+0x5e0>)
 8001fa2:	4293      	cmp	r3, r2
 8001fa4:	d06d      	beq.n	8002082 <HAL_DMA_Abort+0x58a>
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	681b      	ldr	r3, [r3, #0]
 8001faa:	4a4c      	ldr	r2, [pc, #304]	@ (80020dc <HAL_DMA_Abort+0x5e4>)
 8001fac:	4293      	cmp	r3, r2
 8001fae:	d068      	beq.n	8002082 <HAL_DMA_Abort+0x58a>
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	681b      	ldr	r3, [r3, #0]
 8001fb4:	4a4a      	ldr	r2, [pc, #296]	@ (80020e0 <HAL_DMA_Abort+0x5e8>)
 8001fb6:	4293      	cmp	r3, r2
 8001fb8:	d063      	beq.n	8002082 <HAL_DMA_Abort+0x58a>
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	681b      	ldr	r3, [r3, #0]
 8001fbe:	4a49      	ldr	r2, [pc, #292]	@ (80020e4 <HAL_DMA_Abort+0x5ec>)
 8001fc0:	4293      	cmp	r3, r2
 8001fc2:	d05e      	beq.n	8002082 <HAL_DMA_Abort+0x58a>
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	681b      	ldr	r3, [r3, #0]
 8001fc8:	4a47      	ldr	r2, [pc, #284]	@ (80020e8 <HAL_DMA_Abort+0x5f0>)
 8001fca:	4293      	cmp	r3, r2
 8001fcc:	d059      	beq.n	8002082 <HAL_DMA_Abort+0x58a>
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	681b      	ldr	r3, [r3, #0]
 8001fd2:	4a46      	ldr	r2, [pc, #280]	@ (80020ec <HAL_DMA_Abort+0x5f4>)
 8001fd4:	4293      	cmp	r3, r2
 8001fd6:	d054      	beq.n	8002082 <HAL_DMA_Abort+0x58a>
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	681b      	ldr	r3, [r3, #0]
 8001fdc:	4a44      	ldr	r2, [pc, #272]	@ (80020f0 <HAL_DMA_Abort+0x5f8>)
 8001fde:	4293      	cmp	r3, r2
 8001fe0:	d04f      	beq.n	8002082 <HAL_DMA_Abort+0x58a>
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	681b      	ldr	r3, [r3, #0]
 8001fe6:	4a43      	ldr	r2, [pc, #268]	@ (80020f4 <HAL_DMA_Abort+0x5fc>)
 8001fe8:	4293      	cmp	r3, r2
 8001fea:	d04a      	beq.n	8002082 <HAL_DMA_Abort+0x58a>
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	681b      	ldr	r3, [r3, #0]
 8001ff0:	4a41      	ldr	r2, [pc, #260]	@ (80020f8 <HAL_DMA_Abort+0x600>)
 8001ff2:	4293      	cmp	r3, r2
 8001ff4:	d045      	beq.n	8002082 <HAL_DMA_Abort+0x58a>
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	681b      	ldr	r3, [r3, #0]
 8001ffa:	4a40      	ldr	r2, [pc, #256]	@ (80020fc <HAL_DMA_Abort+0x604>)
 8001ffc:	4293      	cmp	r3, r2
 8001ffe:	d040      	beq.n	8002082 <HAL_DMA_Abort+0x58a>
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	681b      	ldr	r3, [r3, #0]
 8002004:	4a3e      	ldr	r2, [pc, #248]	@ (8002100 <HAL_DMA_Abort+0x608>)
 8002006:	4293      	cmp	r3, r2
 8002008:	d03b      	beq.n	8002082 <HAL_DMA_Abort+0x58a>
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	681b      	ldr	r3, [r3, #0]
 800200e:	4a3d      	ldr	r2, [pc, #244]	@ (8002104 <HAL_DMA_Abort+0x60c>)
 8002010:	4293      	cmp	r3, r2
 8002012:	d036      	beq.n	8002082 <HAL_DMA_Abort+0x58a>
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	681b      	ldr	r3, [r3, #0]
 8002018:	4a3b      	ldr	r2, [pc, #236]	@ (8002108 <HAL_DMA_Abort+0x610>)
 800201a:	4293      	cmp	r3, r2
 800201c:	d031      	beq.n	8002082 <HAL_DMA_Abort+0x58a>
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	681b      	ldr	r3, [r3, #0]
 8002022:	4a3a      	ldr	r2, [pc, #232]	@ (800210c <HAL_DMA_Abort+0x614>)
 8002024:	4293      	cmp	r3, r2
 8002026:	d02c      	beq.n	8002082 <HAL_DMA_Abort+0x58a>
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	681b      	ldr	r3, [r3, #0]
 800202c:	4a38      	ldr	r2, [pc, #224]	@ (8002110 <HAL_DMA_Abort+0x618>)
 800202e:	4293      	cmp	r3, r2
 8002030:	d027      	beq.n	8002082 <HAL_DMA_Abort+0x58a>
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	681b      	ldr	r3, [r3, #0]
 8002036:	4a37      	ldr	r2, [pc, #220]	@ (8002114 <HAL_DMA_Abort+0x61c>)
 8002038:	4293      	cmp	r3, r2
 800203a:	d022      	beq.n	8002082 <HAL_DMA_Abort+0x58a>
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	681b      	ldr	r3, [r3, #0]
 8002040:	4a35      	ldr	r2, [pc, #212]	@ (8002118 <HAL_DMA_Abort+0x620>)
 8002042:	4293      	cmp	r3, r2
 8002044:	d01d      	beq.n	8002082 <HAL_DMA_Abort+0x58a>
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	681b      	ldr	r3, [r3, #0]
 800204a:	4a34      	ldr	r2, [pc, #208]	@ (800211c <HAL_DMA_Abort+0x624>)
 800204c:	4293      	cmp	r3, r2
 800204e:	d018      	beq.n	8002082 <HAL_DMA_Abort+0x58a>
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	681b      	ldr	r3, [r3, #0]
 8002054:	4a32      	ldr	r2, [pc, #200]	@ (8002120 <HAL_DMA_Abort+0x628>)
 8002056:	4293      	cmp	r3, r2
 8002058:	d013      	beq.n	8002082 <HAL_DMA_Abort+0x58a>
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	681b      	ldr	r3, [r3, #0]
 800205e:	4a31      	ldr	r2, [pc, #196]	@ (8002124 <HAL_DMA_Abort+0x62c>)
 8002060:	4293      	cmp	r3, r2
 8002062:	d00e      	beq.n	8002082 <HAL_DMA_Abort+0x58a>
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	681b      	ldr	r3, [r3, #0]
 8002068:	4a2f      	ldr	r2, [pc, #188]	@ (8002128 <HAL_DMA_Abort+0x630>)
 800206a:	4293      	cmp	r3, r2
 800206c:	d009      	beq.n	8002082 <HAL_DMA_Abort+0x58a>
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	681b      	ldr	r3, [r3, #0]
 8002072:	4a2e      	ldr	r2, [pc, #184]	@ (800212c <HAL_DMA_Abort+0x634>)
 8002074:	4293      	cmp	r3, r2
 8002076:	d004      	beq.n	8002082 <HAL_DMA_Abort+0x58a>
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	681b      	ldr	r3, [r3, #0]
 800207c:	4a2c      	ldr	r2, [pc, #176]	@ (8002130 <HAL_DMA_Abort+0x638>)
 800207e:	4293      	cmp	r3, r2
 8002080:	d101      	bne.n	8002086 <HAL_DMA_Abort+0x58e>
 8002082:	2301      	movs	r3, #1
 8002084:	e000      	b.n	8002088 <HAL_DMA_Abort+0x590>
 8002086:	2300      	movs	r3, #0
 8002088:	2b00      	cmp	r3, #0
 800208a:	d015      	beq.n	80020b8 <HAL_DMA_Abort+0x5c0>
    {
      /* Clear the DMAMUX synchro overrun flag */
      hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8002090:	687a      	ldr	r2, [r7, #4]
 8002092:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 8002094:	605a      	str	r2, [r3, #4]

      if(hdma->DMAmuxRequestGen != 0U)
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800209a:	2b00      	cmp	r3, #0
 800209c:	d00c      	beq.n	80020b8 <HAL_DMA_Abort+0x5c0>
      {
        /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT */
        /* disable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80020a2:	681a      	ldr	r2, [r3, #0]
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80020a8:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80020ac:	601a      	str	r2, [r3, #0]

        /* Clear the DMAMUX request generator overrun flag */
        hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80020b2:	687a      	ldr	r2, [r7, #4]
 80020b4:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 80020b6:	605a      	str	r2, [r3, #4]
      }
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	2201      	movs	r2, #1
 80020bc:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	2200      	movs	r2, #0
 80020c4:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }

  return HAL_OK;
 80020c8:	2300      	movs	r3, #0
}
 80020ca:	4618      	mov	r0, r3
 80020cc:	3718      	adds	r7, #24
 80020ce:	46bd      	mov	sp, r7
 80020d0:	bd80      	pop	{r7, pc}
 80020d2:	bf00      	nop
 80020d4:	40020010 	.word	0x40020010
 80020d8:	40020028 	.word	0x40020028
 80020dc:	40020040 	.word	0x40020040
 80020e0:	40020058 	.word	0x40020058
 80020e4:	40020070 	.word	0x40020070
 80020e8:	40020088 	.word	0x40020088
 80020ec:	400200a0 	.word	0x400200a0
 80020f0:	400200b8 	.word	0x400200b8
 80020f4:	40020410 	.word	0x40020410
 80020f8:	40020428 	.word	0x40020428
 80020fc:	40020440 	.word	0x40020440
 8002100:	40020458 	.word	0x40020458
 8002104:	40020470 	.word	0x40020470
 8002108:	40020488 	.word	0x40020488
 800210c:	400204a0 	.word	0x400204a0
 8002110:	400204b8 	.word	0x400204b8
 8002114:	58025408 	.word	0x58025408
 8002118:	5802541c 	.word	0x5802541c
 800211c:	58025430 	.word	0x58025430
 8002120:	58025444 	.word	0x58025444
 8002124:	58025458 	.word	0x58025458
 8002128:	5802546c 	.word	0x5802546c
 800212c:	58025480 	.word	0x58025480
 8002130:	58025494 	.word	0x58025494

08002134 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002134:	b580      	push	{r7, lr}
 8002136:	b084      	sub	sp, #16
 8002138:	af00      	add	r7, sp, #0
 800213a:	6078      	str	r0, [r7, #4]
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	2b00      	cmp	r3, #0
 8002140:	d101      	bne.n	8002146 <HAL_DMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
 8002142:	2301      	movs	r3, #1
 8002144:	e237      	b.n	80025b6 <HAL_DMA_Abort_IT+0x482>
  }

  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800214c:	b2db      	uxtb	r3, r3
 800214e:	2b02      	cmp	r3, #2
 8002150:	d004      	beq.n	800215c <HAL_DMA_Abort_IT+0x28>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	2280      	movs	r2, #128	@ 0x80
 8002156:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 8002158:	2301      	movs	r3, #1
 800215a:	e22c      	b.n	80025b6 <HAL_DMA_Abort_IT+0x482>
  }
  else
  {
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	681b      	ldr	r3, [r3, #0]
 8002160:	4a5c      	ldr	r2, [pc, #368]	@ (80022d4 <HAL_DMA_Abort_IT+0x1a0>)
 8002162:	4293      	cmp	r3, r2
 8002164:	d04a      	beq.n	80021fc <HAL_DMA_Abort_IT+0xc8>
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	681b      	ldr	r3, [r3, #0]
 800216a:	4a5b      	ldr	r2, [pc, #364]	@ (80022d8 <HAL_DMA_Abort_IT+0x1a4>)
 800216c:	4293      	cmp	r3, r2
 800216e:	d045      	beq.n	80021fc <HAL_DMA_Abort_IT+0xc8>
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	681b      	ldr	r3, [r3, #0]
 8002174:	4a59      	ldr	r2, [pc, #356]	@ (80022dc <HAL_DMA_Abort_IT+0x1a8>)
 8002176:	4293      	cmp	r3, r2
 8002178:	d040      	beq.n	80021fc <HAL_DMA_Abort_IT+0xc8>
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	681b      	ldr	r3, [r3, #0]
 800217e:	4a58      	ldr	r2, [pc, #352]	@ (80022e0 <HAL_DMA_Abort_IT+0x1ac>)
 8002180:	4293      	cmp	r3, r2
 8002182:	d03b      	beq.n	80021fc <HAL_DMA_Abort_IT+0xc8>
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	681b      	ldr	r3, [r3, #0]
 8002188:	4a56      	ldr	r2, [pc, #344]	@ (80022e4 <HAL_DMA_Abort_IT+0x1b0>)
 800218a:	4293      	cmp	r3, r2
 800218c:	d036      	beq.n	80021fc <HAL_DMA_Abort_IT+0xc8>
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	681b      	ldr	r3, [r3, #0]
 8002192:	4a55      	ldr	r2, [pc, #340]	@ (80022e8 <HAL_DMA_Abort_IT+0x1b4>)
 8002194:	4293      	cmp	r3, r2
 8002196:	d031      	beq.n	80021fc <HAL_DMA_Abort_IT+0xc8>
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	681b      	ldr	r3, [r3, #0]
 800219c:	4a53      	ldr	r2, [pc, #332]	@ (80022ec <HAL_DMA_Abort_IT+0x1b8>)
 800219e:	4293      	cmp	r3, r2
 80021a0:	d02c      	beq.n	80021fc <HAL_DMA_Abort_IT+0xc8>
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	681b      	ldr	r3, [r3, #0]
 80021a6:	4a52      	ldr	r2, [pc, #328]	@ (80022f0 <HAL_DMA_Abort_IT+0x1bc>)
 80021a8:	4293      	cmp	r3, r2
 80021aa:	d027      	beq.n	80021fc <HAL_DMA_Abort_IT+0xc8>
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	681b      	ldr	r3, [r3, #0]
 80021b0:	4a50      	ldr	r2, [pc, #320]	@ (80022f4 <HAL_DMA_Abort_IT+0x1c0>)
 80021b2:	4293      	cmp	r3, r2
 80021b4:	d022      	beq.n	80021fc <HAL_DMA_Abort_IT+0xc8>
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	681b      	ldr	r3, [r3, #0]
 80021ba:	4a4f      	ldr	r2, [pc, #316]	@ (80022f8 <HAL_DMA_Abort_IT+0x1c4>)
 80021bc:	4293      	cmp	r3, r2
 80021be:	d01d      	beq.n	80021fc <HAL_DMA_Abort_IT+0xc8>
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	681b      	ldr	r3, [r3, #0]
 80021c4:	4a4d      	ldr	r2, [pc, #308]	@ (80022fc <HAL_DMA_Abort_IT+0x1c8>)
 80021c6:	4293      	cmp	r3, r2
 80021c8:	d018      	beq.n	80021fc <HAL_DMA_Abort_IT+0xc8>
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	681b      	ldr	r3, [r3, #0]
 80021ce:	4a4c      	ldr	r2, [pc, #304]	@ (8002300 <HAL_DMA_Abort_IT+0x1cc>)
 80021d0:	4293      	cmp	r3, r2
 80021d2:	d013      	beq.n	80021fc <HAL_DMA_Abort_IT+0xc8>
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	681b      	ldr	r3, [r3, #0]
 80021d8:	4a4a      	ldr	r2, [pc, #296]	@ (8002304 <HAL_DMA_Abort_IT+0x1d0>)
 80021da:	4293      	cmp	r3, r2
 80021dc:	d00e      	beq.n	80021fc <HAL_DMA_Abort_IT+0xc8>
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	681b      	ldr	r3, [r3, #0]
 80021e2:	4a49      	ldr	r2, [pc, #292]	@ (8002308 <HAL_DMA_Abort_IT+0x1d4>)
 80021e4:	4293      	cmp	r3, r2
 80021e6:	d009      	beq.n	80021fc <HAL_DMA_Abort_IT+0xc8>
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	681b      	ldr	r3, [r3, #0]
 80021ec:	4a47      	ldr	r2, [pc, #284]	@ (800230c <HAL_DMA_Abort_IT+0x1d8>)
 80021ee:	4293      	cmp	r3, r2
 80021f0:	d004      	beq.n	80021fc <HAL_DMA_Abort_IT+0xc8>
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	681b      	ldr	r3, [r3, #0]
 80021f6:	4a46      	ldr	r2, [pc, #280]	@ (8002310 <HAL_DMA_Abort_IT+0x1dc>)
 80021f8:	4293      	cmp	r3, r2
 80021fa:	d101      	bne.n	8002200 <HAL_DMA_Abort_IT+0xcc>
 80021fc:	2301      	movs	r3, #1
 80021fe:	e000      	b.n	8002202 <HAL_DMA_Abort_IT+0xce>
 8002200:	2300      	movs	r3, #0
 8002202:	2b00      	cmp	r3, #0
 8002204:	f000 8086 	beq.w	8002314 <HAL_DMA_Abort_IT+0x1e0>
    {
      /* Set Abort State  */
      hdma->State = HAL_DMA_STATE_ABORT;
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	2204      	movs	r2, #4
 800220c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	681b      	ldr	r3, [r3, #0]
 8002214:	4a2f      	ldr	r2, [pc, #188]	@ (80022d4 <HAL_DMA_Abort_IT+0x1a0>)
 8002216:	4293      	cmp	r3, r2
 8002218:	d04a      	beq.n	80022b0 <HAL_DMA_Abort_IT+0x17c>
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	681b      	ldr	r3, [r3, #0]
 800221e:	4a2e      	ldr	r2, [pc, #184]	@ (80022d8 <HAL_DMA_Abort_IT+0x1a4>)
 8002220:	4293      	cmp	r3, r2
 8002222:	d045      	beq.n	80022b0 <HAL_DMA_Abort_IT+0x17c>
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	681b      	ldr	r3, [r3, #0]
 8002228:	4a2c      	ldr	r2, [pc, #176]	@ (80022dc <HAL_DMA_Abort_IT+0x1a8>)
 800222a:	4293      	cmp	r3, r2
 800222c:	d040      	beq.n	80022b0 <HAL_DMA_Abort_IT+0x17c>
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	681b      	ldr	r3, [r3, #0]
 8002232:	4a2b      	ldr	r2, [pc, #172]	@ (80022e0 <HAL_DMA_Abort_IT+0x1ac>)
 8002234:	4293      	cmp	r3, r2
 8002236:	d03b      	beq.n	80022b0 <HAL_DMA_Abort_IT+0x17c>
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	681b      	ldr	r3, [r3, #0]
 800223c:	4a29      	ldr	r2, [pc, #164]	@ (80022e4 <HAL_DMA_Abort_IT+0x1b0>)
 800223e:	4293      	cmp	r3, r2
 8002240:	d036      	beq.n	80022b0 <HAL_DMA_Abort_IT+0x17c>
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	681b      	ldr	r3, [r3, #0]
 8002246:	4a28      	ldr	r2, [pc, #160]	@ (80022e8 <HAL_DMA_Abort_IT+0x1b4>)
 8002248:	4293      	cmp	r3, r2
 800224a:	d031      	beq.n	80022b0 <HAL_DMA_Abort_IT+0x17c>
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	681b      	ldr	r3, [r3, #0]
 8002250:	4a26      	ldr	r2, [pc, #152]	@ (80022ec <HAL_DMA_Abort_IT+0x1b8>)
 8002252:	4293      	cmp	r3, r2
 8002254:	d02c      	beq.n	80022b0 <HAL_DMA_Abort_IT+0x17c>
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	681b      	ldr	r3, [r3, #0]
 800225a:	4a25      	ldr	r2, [pc, #148]	@ (80022f0 <HAL_DMA_Abort_IT+0x1bc>)
 800225c:	4293      	cmp	r3, r2
 800225e:	d027      	beq.n	80022b0 <HAL_DMA_Abort_IT+0x17c>
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	681b      	ldr	r3, [r3, #0]
 8002264:	4a23      	ldr	r2, [pc, #140]	@ (80022f4 <HAL_DMA_Abort_IT+0x1c0>)
 8002266:	4293      	cmp	r3, r2
 8002268:	d022      	beq.n	80022b0 <HAL_DMA_Abort_IT+0x17c>
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	681b      	ldr	r3, [r3, #0]
 800226e:	4a22      	ldr	r2, [pc, #136]	@ (80022f8 <HAL_DMA_Abort_IT+0x1c4>)
 8002270:	4293      	cmp	r3, r2
 8002272:	d01d      	beq.n	80022b0 <HAL_DMA_Abort_IT+0x17c>
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	681b      	ldr	r3, [r3, #0]
 8002278:	4a20      	ldr	r2, [pc, #128]	@ (80022fc <HAL_DMA_Abort_IT+0x1c8>)
 800227a:	4293      	cmp	r3, r2
 800227c:	d018      	beq.n	80022b0 <HAL_DMA_Abort_IT+0x17c>
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	681b      	ldr	r3, [r3, #0]
 8002282:	4a1f      	ldr	r2, [pc, #124]	@ (8002300 <HAL_DMA_Abort_IT+0x1cc>)
 8002284:	4293      	cmp	r3, r2
 8002286:	d013      	beq.n	80022b0 <HAL_DMA_Abort_IT+0x17c>
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	681b      	ldr	r3, [r3, #0]
 800228c:	4a1d      	ldr	r2, [pc, #116]	@ (8002304 <HAL_DMA_Abort_IT+0x1d0>)
 800228e:	4293      	cmp	r3, r2
 8002290:	d00e      	beq.n	80022b0 <HAL_DMA_Abort_IT+0x17c>
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	681b      	ldr	r3, [r3, #0]
 8002296:	4a1c      	ldr	r2, [pc, #112]	@ (8002308 <HAL_DMA_Abort_IT+0x1d4>)
 8002298:	4293      	cmp	r3, r2
 800229a:	d009      	beq.n	80022b0 <HAL_DMA_Abort_IT+0x17c>
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	681b      	ldr	r3, [r3, #0]
 80022a0:	4a1a      	ldr	r2, [pc, #104]	@ (800230c <HAL_DMA_Abort_IT+0x1d8>)
 80022a2:	4293      	cmp	r3, r2
 80022a4:	d004      	beq.n	80022b0 <HAL_DMA_Abort_IT+0x17c>
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	681b      	ldr	r3, [r3, #0]
 80022aa:	4a19      	ldr	r2, [pc, #100]	@ (8002310 <HAL_DMA_Abort_IT+0x1dc>)
 80022ac:	4293      	cmp	r3, r2
 80022ae:	d108      	bne.n	80022c2 <HAL_DMA_Abort_IT+0x18e>
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	681b      	ldr	r3, [r3, #0]
 80022b4:	681a      	ldr	r2, [r3, #0]
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	681b      	ldr	r3, [r3, #0]
 80022ba:	f022 0201 	bic.w	r2, r2, #1
 80022be:	601a      	str	r2, [r3, #0]
 80022c0:	e178      	b.n	80025b4 <HAL_DMA_Abort_IT+0x480>
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	681b      	ldr	r3, [r3, #0]
 80022c6:	681a      	ldr	r2, [r3, #0]
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	681b      	ldr	r3, [r3, #0]
 80022cc:	f022 0201 	bic.w	r2, r2, #1
 80022d0:	601a      	str	r2, [r3, #0]
 80022d2:	e16f      	b.n	80025b4 <HAL_DMA_Abort_IT+0x480>
 80022d4:	40020010 	.word	0x40020010
 80022d8:	40020028 	.word	0x40020028
 80022dc:	40020040 	.word	0x40020040
 80022e0:	40020058 	.word	0x40020058
 80022e4:	40020070 	.word	0x40020070
 80022e8:	40020088 	.word	0x40020088
 80022ec:	400200a0 	.word	0x400200a0
 80022f0:	400200b8 	.word	0x400200b8
 80022f4:	40020410 	.word	0x40020410
 80022f8:	40020428 	.word	0x40020428
 80022fc:	40020440 	.word	0x40020440
 8002300:	40020458 	.word	0x40020458
 8002304:	40020470 	.word	0x40020470
 8002308:	40020488 	.word	0x40020488
 800230c:	400204a0 	.word	0x400204a0
 8002310:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts  */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	681b      	ldr	r3, [r3, #0]
 8002318:	681a      	ldr	r2, [r3, #0]
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	681b      	ldr	r3, [r3, #0]
 800231e:	f022 020e 	bic.w	r2, r2, #14
 8002322:	601a      	str	r2, [r3, #0]

      /* Disable the channel */
      __HAL_DMA_DISABLE(hdma);
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	681b      	ldr	r3, [r3, #0]
 8002328:	4a6c      	ldr	r2, [pc, #432]	@ (80024dc <HAL_DMA_Abort_IT+0x3a8>)
 800232a:	4293      	cmp	r3, r2
 800232c:	d04a      	beq.n	80023c4 <HAL_DMA_Abort_IT+0x290>
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	681b      	ldr	r3, [r3, #0]
 8002332:	4a6b      	ldr	r2, [pc, #428]	@ (80024e0 <HAL_DMA_Abort_IT+0x3ac>)
 8002334:	4293      	cmp	r3, r2
 8002336:	d045      	beq.n	80023c4 <HAL_DMA_Abort_IT+0x290>
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	681b      	ldr	r3, [r3, #0]
 800233c:	4a69      	ldr	r2, [pc, #420]	@ (80024e4 <HAL_DMA_Abort_IT+0x3b0>)
 800233e:	4293      	cmp	r3, r2
 8002340:	d040      	beq.n	80023c4 <HAL_DMA_Abort_IT+0x290>
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	681b      	ldr	r3, [r3, #0]
 8002346:	4a68      	ldr	r2, [pc, #416]	@ (80024e8 <HAL_DMA_Abort_IT+0x3b4>)
 8002348:	4293      	cmp	r3, r2
 800234a:	d03b      	beq.n	80023c4 <HAL_DMA_Abort_IT+0x290>
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	681b      	ldr	r3, [r3, #0]
 8002350:	4a66      	ldr	r2, [pc, #408]	@ (80024ec <HAL_DMA_Abort_IT+0x3b8>)
 8002352:	4293      	cmp	r3, r2
 8002354:	d036      	beq.n	80023c4 <HAL_DMA_Abort_IT+0x290>
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	681b      	ldr	r3, [r3, #0]
 800235a:	4a65      	ldr	r2, [pc, #404]	@ (80024f0 <HAL_DMA_Abort_IT+0x3bc>)
 800235c:	4293      	cmp	r3, r2
 800235e:	d031      	beq.n	80023c4 <HAL_DMA_Abort_IT+0x290>
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	681b      	ldr	r3, [r3, #0]
 8002364:	4a63      	ldr	r2, [pc, #396]	@ (80024f4 <HAL_DMA_Abort_IT+0x3c0>)
 8002366:	4293      	cmp	r3, r2
 8002368:	d02c      	beq.n	80023c4 <HAL_DMA_Abort_IT+0x290>
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	681b      	ldr	r3, [r3, #0]
 800236e:	4a62      	ldr	r2, [pc, #392]	@ (80024f8 <HAL_DMA_Abort_IT+0x3c4>)
 8002370:	4293      	cmp	r3, r2
 8002372:	d027      	beq.n	80023c4 <HAL_DMA_Abort_IT+0x290>
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	681b      	ldr	r3, [r3, #0]
 8002378:	4a60      	ldr	r2, [pc, #384]	@ (80024fc <HAL_DMA_Abort_IT+0x3c8>)
 800237a:	4293      	cmp	r3, r2
 800237c:	d022      	beq.n	80023c4 <HAL_DMA_Abort_IT+0x290>
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	681b      	ldr	r3, [r3, #0]
 8002382:	4a5f      	ldr	r2, [pc, #380]	@ (8002500 <HAL_DMA_Abort_IT+0x3cc>)
 8002384:	4293      	cmp	r3, r2
 8002386:	d01d      	beq.n	80023c4 <HAL_DMA_Abort_IT+0x290>
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	681b      	ldr	r3, [r3, #0]
 800238c:	4a5d      	ldr	r2, [pc, #372]	@ (8002504 <HAL_DMA_Abort_IT+0x3d0>)
 800238e:	4293      	cmp	r3, r2
 8002390:	d018      	beq.n	80023c4 <HAL_DMA_Abort_IT+0x290>
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	681b      	ldr	r3, [r3, #0]
 8002396:	4a5c      	ldr	r2, [pc, #368]	@ (8002508 <HAL_DMA_Abort_IT+0x3d4>)
 8002398:	4293      	cmp	r3, r2
 800239a:	d013      	beq.n	80023c4 <HAL_DMA_Abort_IT+0x290>
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	681b      	ldr	r3, [r3, #0]
 80023a0:	4a5a      	ldr	r2, [pc, #360]	@ (800250c <HAL_DMA_Abort_IT+0x3d8>)
 80023a2:	4293      	cmp	r3, r2
 80023a4:	d00e      	beq.n	80023c4 <HAL_DMA_Abort_IT+0x290>
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	681b      	ldr	r3, [r3, #0]
 80023aa:	4a59      	ldr	r2, [pc, #356]	@ (8002510 <HAL_DMA_Abort_IT+0x3dc>)
 80023ac:	4293      	cmp	r3, r2
 80023ae:	d009      	beq.n	80023c4 <HAL_DMA_Abort_IT+0x290>
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	681b      	ldr	r3, [r3, #0]
 80023b4:	4a57      	ldr	r2, [pc, #348]	@ (8002514 <HAL_DMA_Abort_IT+0x3e0>)
 80023b6:	4293      	cmp	r3, r2
 80023b8:	d004      	beq.n	80023c4 <HAL_DMA_Abort_IT+0x290>
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	681b      	ldr	r3, [r3, #0]
 80023be:	4a56      	ldr	r2, [pc, #344]	@ (8002518 <HAL_DMA_Abort_IT+0x3e4>)
 80023c0:	4293      	cmp	r3, r2
 80023c2:	d108      	bne.n	80023d6 <HAL_DMA_Abort_IT+0x2a2>
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	681b      	ldr	r3, [r3, #0]
 80023c8:	681a      	ldr	r2, [r3, #0]
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	681b      	ldr	r3, [r3, #0]
 80023ce:	f022 0201 	bic.w	r2, r2, #1
 80023d2:	601a      	str	r2, [r3, #0]
 80023d4:	e007      	b.n	80023e6 <HAL_DMA_Abort_IT+0x2b2>
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	681b      	ldr	r3, [r3, #0]
 80023da:	681a      	ldr	r2, [r3, #0]
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	681b      	ldr	r3, [r3, #0]
 80023e0:	f022 0201 	bic.w	r2, r2, #1
 80023e4:	601a      	str	r2, [r3, #0]

      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	681b      	ldr	r3, [r3, #0]
 80023ea:	4a3c      	ldr	r2, [pc, #240]	@ (80024dc <HAL_DMA_Abort_IT+0x3a8>)
 80023ec:	4293      	cmp	r3, r2
 80023ee:	d072      	beq.n	80024d6 <HAL_DMA_Abort_IT+0x3a2>
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	681b      	ldr	r3, [r3, #0]
 80023f4:	4a3a      	ldr	r2, [pc, #232]	@ (80024e0 <HAL_DMA_Abort_IT+0x3ac>)
 80023f6:	4293      	cmp	r3, r2
 80023f8:	d06d      	beq.n	80024d6 <HAL_DMA_Abort_IT+0x3a2>
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	681b      	ldr	r3, [r3, #0]
 80023fe:	4a39      	ldr	r2, [pc, #228]	@ (80024e4 <HAL_DMA_Abort_IT+0x3b0>)
 8002400:	4293      	cmp	r3, r2
 8002402:	d068      	beq.n	80024d6 <HAL_DMA_Abort_IT+0x3a2>
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	681b      	ldr	r3, [r3, #0]
 8002408:	4a37      	ldr	r2, [pc, #220]	@ (80024e8 <HAL_DMA_Abort_IT+0x3b4>)
 800240a:	4293      	cmp	r3, r2
 800240c:	d063      	beq.n	80024d6 <HAL_DMA_Abort_IT+0x3a2>
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	681b      	ldr	r3, [r3, #0]
 8002412:	4a36      	ldr	r2, [pc, #216]	@ (80024ec <HAL_DMA_Abort_IT+0x3b8>)
 8002414:	4293      	cmp	r3, r2
 8002416:	d05e      	beq.n	80024d6 <HAL_DMA_Abort_IT+0x3a2>
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	681b      	ldr	r3, [r3, #0]
 800241c:	4a34      	ldr	r2, [pc, #208]	@ (80024f0 <HAL_DMA_Abort_IT+0x3bc>)
 800241e:	4293      	cmp	r3, r2
 8002420:	d059      	beq.n	80024d6 <HAL_DMA_Abort_IT+0x3a2>
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	681b      	ldr	r3, [r3, #0]
 8002426:	4a33      	ldr	r2, [pc, #204]	@ (80024f4 <HAL_DMA_Abort_IT+0x3c0>)
 8002428:	4293      	cmp	r3, r2
 800242a:	d054      	beq.n	80024d6 <HAL_DMA_Abort_IT+0x3a2>
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	681b      	ldr	r3, [r3, #0]
 8002430:	4a31      	ldr	r2, [pc, #196]	@ (80024f8 <HAL_DMA_Abort_IT+0x3c4>)
 8002432:	4293      	cmp	r3, r2
 8002434:	d04f      	beq.n	80024d6 <HAL_DMA_Abort_IT+0x3a2>
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	681b      	ldr	r3, [r3, #0]
 800243a:	4a30      	ldr	r2, [pc, #192]	@ (80024fc <HAL_DMA_Abort_IT+0x3c8>)
 800243c:	4293      	cmp	r3, r2
 800243e:	d04a      	beq.n	80024d6 <HAL_DMA_Abort_IT+0x3a2>
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	681b      	ldr	r3, [r3, #0]
 8002444:	4a2e      	ldr	r2, [pc, #184]	@ (8002500 <HAL_DMA_Abort_IT+0x3cc>)
 8002446:	4293      	cmp	r3, r2
 8002448:	d045      	beq.n	80024d6 <HAL_DMA_Abort_IT+0x3a2>
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	681b      	ldr	r3, [r3, #0]
 800244e:	4a2d      	ldr	r2, [pc, #180]	@ (8002504 <HAL_DMA_Abort_IT+0x3d0>)
 8002450:	4293      	cmp	r3, r2
 8002452:	d040      	beq.n	80024d6 <HAL_DMA_Abort_IT+0x3a2>
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	681b      	ldr	r3, [r3, #0]
 8002458:	4a2b      	ldr	r2, [pc, #172]	@ (8002508 <HAL_DMA_Abort_IT+0x3d4>)
 800245a:	4293      	cmp	r3, r2
 800245c:	d03b      	beq.n	80024d6 <HAL_DMA_Abort_IT+0x3a2>
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	681b      	ldr	r3, [r3, #0]
 8002462:	4a2a      	ldr	r2, [pc, #168]	@ (800250c <HAL_DMA_Abort_IT+0x3d8>)
 8002464:	4293      	cmp	r3, r2
 8002466:	d036      	beq.n	80024d6 <HAL_DMA_Abort_IT+0x3a2>
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	681b      	ldr	r3, [r3, #0]
 800246c:	4a28      	ldr	r2, [pc, #160]	@ (8002510 <HAL_DMA_Abort_IT+0x3dc>)
 800246e:	4293      	cmp	r3, r2
 8002470:	d031      	beq.n	80024d6 <HAL_DMA_Abort_IT+0x3a2>
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	681b      	ldr	r3, [r3, #0]
 8002476:	4a27      	ldr	r2, [pc, #156]	@ (8002514 <HAL_DMA_Abort_IT+0x3e0>)
 8002478:	4293      	cmp	r3, r2
 800247a:	d02c      	beq.n	80024d6 <HAL_DMA_Abort_IT+0x3a2>
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	681b      	ldr	r3, [r3, #0]
 8002480:	4a25      	ldr	r2, [pc, #148]	@ (8002518 <HAL_DMA_Abort_IT+0x3e4>)
 8002482:	4293      	cmp	r3, r2
 8002484:	d027      	beq.n	80024d6 <HAL_DMA_Abort_IT+0x3a2>
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	681b      	ldr	r3, [r3, #0]
 800248a:	4a24      	ldr	r2, [pc, #144]	@ (800251c <HAL_DMA_Abort_IT+0x3e8>)
 800248c:	4293      	cmp	r3, r2
 800248e:	d022      	beq.n	80024d6 <HAL_DMA_Abort_IT+0x3a2>
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	681b      	ldr	r3, [r3, #0]
 8002494:	4a22      	ldr	r2, [pc, #136]	@ (8002520 <HAL_DMA_Abort_IT+0x3ec>)
 8002496:	4293      	cmp	r3, r2
 8002498:	d01d      	beq.n	80024d6 <HAL_DMA_Abort_IT+0x3a2>
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	681b      	ldr	r3, [r3, #0]
 800249e:	4a21      	ldr	r2, [pc, #132]	@ (8002524 <HAL_DMA_Abort_IT+0x3f0>)
 80024a0:	4293      	cmp	r3, r2
 80024a2:	d018      	beq.n	80024d6 <HAL_DMA_Abort_IT+0x3a2>
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	681b      	ldr	r3, [r3, #0]
 80024a8:	4a1f      	ldr	r2, [pc, #124]	@ (8002528 <HAL_DMA_Abort_IT+0x3f4>)
 80024aa:	4293      	cmp	r3, r2
 80024ac:	d013      	beq.n	80024d6 <HAL_DMA_Abort_IT+0x3a2>
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	681b      	ldr	r3, [r3, #0]
 80024b2:	4a1e      	ldr	r2, [pc, #120]	@ (800252c <HAL_DMA_Abort_IT+0x3f8>)
 80024b4:	4293      	cmp	r3, r2
 80024b6:	d00e      	beq.n	80024d6 <HAL_DMA_Abort_IT+0x3a2>
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	681b      	ldr	r3, [r3, #0]
 80024bc:	4a1c      	ldr	r2, [pc, #112]	@ (8002530 <HAL_DMA_Abort_IT+0x3fc>)
 80024be:	4293      	cmp	r3, r2
 80024c0:	d009      	beq.n	80024d6 <HAL_DMA_Abort_IT+0x3a2>
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	681b      	ldr	r3, [r3, #0]
 80024c6:	4a1b      	ldr	r2, [pc, #108]	@ (8002534 <HAL_DMA_Abort_IT+0x400>)
 80024c8:	4293      	cmp	r3, r2
 80024ca:	d004      	beq.n	80024d6 <HAL_DMA_Abort_IT+0x3a2>
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	681b      	ldr	r3, [r3, #0]
 80024d0:	4a19      	ldr	r2, [pc, #100]	@ (8002538 <HAL_DMA_Abort_IT+0x404>)
 80024d2:	4293      	cmp	r3, r2
 80024d4:	d132      	bne.n	800253c <HAL_DMA_Abort_IT+0x408>
 80024d6:	2301      	movs	r3, #1
 80024d8:	e031      	b.n	800253e <HAL_DMA_Abort_IT+0x40a>
 80024da:	bf00      	nop
 80024dc:	40020010 	.word	0x40020010
 80024e0:	40020028 	.word	0x40020028
 80024e4:	40020040 	.word	0x40020040
 80024e8:	40020058 	.word	0x40020058
 80024ec:	40020070 	.word	0x40020070
 80024f0:	40020088 	.word	0x40020088
 80024f4:	400200a0 	.word	0x400200a0
 80024f8:	400200b8 	.word	0x400200b8
 80024fc:	40020410 	.word	0x40020410
 8002500:	40020428 	.word	0x40020428
 8002504:	40020440 	.word	0x40020440
 8002508:	40020458 	.word	0x40020458
 800250c:	40020470 	.word	0x40020470
 8002510:	40020488 	.word	0x40020488
 8002514:	400204a0 	.word	0x400204a0
 8002518:	400204b8 	.word	0x400204b8
 800251c:	58025408 	.word	0x58025408
 8002520:	5802541c 	.word	0x5802541c
 8002524:	58025430 	.word	0x58025430
 8002528:	58025444 	.word	0x58025444
 800252c:	58025458 	.word	0x58025458
 8002530:	5802546c 	.word	0x5802546c
 8002534:	58025480 	.word	0x58025480
 8002538:	58025494 	.word	0x58025494
 800253c:	2300      	movs	r3, #0
 800253e:	2b00      	cmp	r3, #0
 8002540:	d028      	beq.n	8002594 <HAL_DMA_Abort_IT+0x460>
      {
        /* disable the DMAMUX sync overrun IT */
        hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002546:	681a      	ldr	r2, [r3, #0]
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800254c:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8002550:	601a      	str	r2, [r3, #0]

        /* Clear all flags */
        regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002556:	60fb      	str	r3, [r7, #12]
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800255c:	f003 031f 	and.w	r3, r3, #31
 8002560:	2201      	movs	r2, #1
 8002562:	409a      	lsls	r2, r3
 8002564:	68fb      	ldr	r3, [r7, #12]
 8002566:	605a      	str	r2, [r3, #4]

        /* Clear the DMAMUX synchro overrun flag */
        hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800256c:	687a      	ldr	r2, [r7, #4]
 800256e:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 8002570:	605a      	str	r2, [r3, #4]

        if(hdma->DMAmuxRequestGen != 0U)
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002576:	2b00      	cmp	r3, #0
 8002578:	d00c      	beq.n	8002594 <HAL_DMA_Abort_IT+0x460>
        {
          /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
          /* disable the request gen overrun IT */
          hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800257e:	681a      	ldr	r2, [r3, #0]
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002584:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8002588:	601a      	str	r2, [r3, #0]

          /* Clear the DMAMUX request generator overrun flag */
          hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800258e:	687a      	ldr	r2, [r7, #4]
 8002590:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 8002592:	605a      	str	r2, [r3, #4]
        }
      }

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	2201      	movs	r2, #1
 8002598:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	2200      	movs	r2, #0
 80025a0:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

      /* Call User Abort callback */
      if(hdma->XferAbortCallback != NULL)
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80025a8:	2b00      	cmp	r3, #0
 80025aa:	d003      	beq.n	80025b4 <HAL_DMA_Abort_IT+0x480>
      {
        hdma->XferAbortCallback(hdma);
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80025b0:	6878      	ldr	r0, [r7, #4]
 80025b2:	4798      	blx	r3
      }
    }
  }

  return HAL_OK;
 80025b4:	2300      	movs	r3, #0
}
 80025b6:	4618      	mov	r0, r3
 80025b8:	3710      	adds	r7, #16
 80025ba:	46bd      	mov	sp, r7
 80025bc:	bd80      	pop	{r7, pc}
 80025be:	bf00      	nop

080025c0 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, const GPIO_InitTypeDef *GPIO_Init)
{
 80025c0:	b480      	push	{r7}
 80025c2:	b089      	sub	sp, #36	@ 0x24
 80025c4:	af00      	add	r7, sp, #0
 80025c6:	6078      	str	r0, [r7, #4]
 80025c8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 80025ca:	2300      	movs	r3, #0
 80025cc:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 80025ce:	4b86      	ldr	r3, [pc, #536]	@ (80027e8 <HAL_GPIO_Init+0x228>)
 80025d0:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 80025d2:	e18c      	b.n	80028ee <HAL_GPIO_Init+0x32e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 80025d4:	683b      	ldr	r3, [r7, #0]
 80025d6:	681a      	ldr	r2, [r3, #0]
 80025d8:	2101      	movs	r1, #1
 80025da:	69fb      	ldr	r3, [r7, #28]
 80025dc:	fa01 f303 	lsl.w	r3, r1, r3
 80025e0:	4013      	ands	r3, r2
 80025e2:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 80025e4:	693b      	ldr	r3, [r7, #16]
 80025e6:	2b00      	cmp	r3, #0
 80025e8:	f000 817e 	beq.w	80028e8 <HAL_GPIO_Init+0x328>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80025ec:	683b      	ldr	r3, [r7, #0]
 80025ee:	685b      	ldr	r3, [r3, #4]
 80025f0:	f003 0303 	and.w	r3, r3, #3
 80025f4:	2b01      	cmp	r3, #1
 80025f6:	d005      	beq.n	8002604 <HAL_GPIO_Init+0x44>
 80025f8:	683b      	ldr	r3, [r7, #0]
 80025fa:	685b      	ldr	r3, [r3, #4]
 80025fc:	f003 0303 	and.w	r3, r3, #3
 8002600:	2b02      	cmp	r3, #2
 8002602:	d130      	bne.n	8002666 <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	689b      	ldr	r3, [r3, #8]
 8002608:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800260a:	69fb      	ldr	r3, [r7, #28]
 800260c:	005b      	lsls	r3, r3, #1
 800260e:	2203      	movs	r2, #3
 8002610:	fa02 f303 	lsl.w	r3, r2, r3
 8002614:	43db      	mvns	r3, r3
 8002616:	69ba      	ldr	r2, [r7, #24]
 8002618:	4013      	ands	r3, r2
 800261a:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800261c:	683b      	ldr	r3, [r7, #0]
 800261e:	68da      	ldr	r2, [r3, #12]
 8002620:	69fb      	ldr	r3, [r7, #28]
 8002622:	005b      	lsls	r3, r3, #1
 8002624:	fa02 f303 	lsl.w	r3, r2, r3
 8002628:	69ba      	ldr	r2, [r7, #24]
 800262a:	4313      	orrs	r3, r2
 800262c:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	69ba      	ldr	r2, [r7, #24]
 8002632:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	685b      	ldr	r3, [r3, #4]
 8002638:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800263a:	2201      	movs	r2, #1
 800263c:	69fb      	ldr	r3, [r7, #28]
 800263e:	fa02 f303 	lsl.w	r3, r2, r3
 8002642:	43db      	mvns	r3, r3
 8002644:	69ba      	ldr	r2, [r7, #24]
 8002646:	4013      	ands	r3, r2
 8002648:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800264a:	683b      	ldr	r3, [r7, #0]
 800264c:	685b      	ldr	r3, [r3, #4]
 800264e:	091b      	lsrs	r3, r3, #4
 8002650:	f003 0201 	and.w	r2, r3, #1
 8002654:	69fb      	ldr	r3, [r7, #28]
 8002656:	fa02 f303 	lsl.w	r3, r2, r3
 800265a:	69ba      	ldr	r2, [r7, #24]
 800265c:	4313      	orrs	r3, r2
 800265e:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	69ba      	ldr	r2, [r7, #24]
 8002664:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002666:	683b      	ldr	r3, [r7, #0]
 8002668:	685b      	ldr	r3, [r3, #4]
 800266a:	f003 0303 	and.w	r3, r3, #3
 800266e:	2b03      	cmp	r3, #3
 8002670:	d017      	beq.n	80026a2 <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	68db      	ldr	r3, [r3, #12]
 8002676:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8002678:	69fb      	ldr	r3, [r7, #28]
 800267a:	005b      	lsls	r3, r3, #1
 800267c:	2203      	movs	r2, #3
 800267e:	fa02 f303 	lsl.w	r3, r2, r3
 8002682:	43db      	mvns	r3, r3
 8002684:	69ba      	ldr	r2, [r7, #24]
 8002686:	4013      	ands	r3, r2
 8002688:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 800268a:	683b      	ldr	r3, [r7, #0]
 800268c:	689a      	ldr	r2, [r3, #8]
 800268e:	69fb      	ldr	r3, [r7, #28]
 8002690:	005b      	lsls	r3, r3, #1
 8002692:	fa02 f303 	lsl.w	r3, r2, r3
 8002696:	69ba      	ldr	r2, [r7, #24]
 8002698:	4313      	orrs	r3, r2
 800269a:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	69ba      	ldr	r2, [r7, #24]
 80026a0:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80026a2:	683b      	ldr	r3, [r7, #0]
 80026a4:	685b      	ldr	r3, [r3, #4]
 80026a6:	f003 0303 	and.w	r3, r3, #3
 80026aa:	2b02      	cmp	r3, #2
 80026ac:	d123      	bne.n	80026f6 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80026ae:	69fb      	ldr	r3, [r7, #28]
 80026b0:	08da      	lsrs	r2, r3, #3
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	3208      	adds	r2, #8
 80026b6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80026ba:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 80026bc:	69fb      	ldr	r3, [r7, #28]
 80026be:	f003 0307 	and.w	r3, r3, #7
 80026c2:	009b      	lsls	r3, r3, #2
 80026c4:	220f      	movs	r2, #15
 80026c6:	fa02 f303 	lsl.w	r3, r2, r3
 80026ca:	43db      	mvns	r3, r3
 80026cc:	69ba      	ldr	r2, [r7, #24]
 80026ce:	4013      	ands	r3, r2
 80026d0:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 80026d2:	683b      	ldr	r3, [r7, #0]
 80026d4:	691a      	ldr	r2, [r3, #16]
 80026d6:	69fb      	ldr	r3, [r7, #28]
 80026d8:	f003 0307 	and.w	r3, r3, #7
 80026dc:	009b      	lsls	r3, r3, #2
 80026de:	fa02 f303 	lsl.w	r3, r2, r3
 80026e2:	69ba      	ldr	r2, [r7, #24]
 80026e4:	4313      	orrs	r3, r2
 80026e6:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80026e8:	69fb      	ldr	r3, [r7, #28]
 80026ea:	08da      	lsrs	r2, r3, #3
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	3208      	adds	r2, #8
 80026f0:	69b9      	ldr	r1, [r7, #24]
 80026f2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	681b      	ldr	r3, [r3, #0]
 80026fa:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80026fc:	69fb      	ldr	r3, [r7, #28]
 80026fe:	005b      	lsls	r3, r3, #1
 8002700:	2203      	movs	r2, #3
 8002702:	fa02 f303 	lsl.w	r3, r2, r3
 8002706:	43db      	mvns	r3, r3
 8002708:	69ba      	ldr	r2, [r7, #24]
 800270a:	4013      	ands	r3, r2
 800270c:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800270e:	683b      	ldr	r3, [r7, #0]
 8002710:	685b      	ldr	r3, [r3, #4]
 8002712:	f003 0203 	and.w	r2, r3, #3
 8002716:	69fb      	ldr	r3, [r7, #28]
 8002718:	005b      	lsls	r3, r3, #1
 800271a:	fa02 f303 	lsl.w	r3, r2, r3
 800271e:	69ba      	ldr	r2, [r7, #24]
 8002720:	4313      	orrs	r3, r2
 8002722:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	69ba      	ldr	r2, [r7, #24]
 8002728:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800272a:	683b      	ldr	r3, [r7, #0]
 800272c:	685b      	ldr	r3, [r3, #4]
 800272e:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8002732:	2b00      	cmp	r3, #0
 8002734:	f000 80d8 	beq.w	80028e8 <HAL_GPIO_Init+0x328>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002738:	4b2c      	ldr	r3, [pc, #176]	@ (80027ec <HAL_GPIO_Init+0x22c>)
 800273a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800273e:	4a2b      	ldr	r2, [pc, #172]	@ (80027ec <HAL_GPIO_Init+0x22c>)
 8002740:	f043 0302 	orr.w	r3, r3, #2
 8002744:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8002748:	4b28      	ldr	r3, [pc, #160]	@ (80027ec <HAL_GPIO_Init+0x22c>)
 800274a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800274e:	f003 0302 	and.w	r3, r3, #2
 8002752:	60fb      	str	r3, [r7, #12]
 8002754:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002756:	4a26      	ldr	r2, [pc, #152]	@ (80027f0 <HAL_GPIO_Init+0x230>)
 8002758:	69fb      	ldr	r3, [r7, #28]
 800275a:	089b      	lsrs	r3, r3, #2
 800275c:	3302      	adds	r3, #2
 800275e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002762:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8002764:	69fb      	ldr	r3, [r7, #28]
 8002766:	f003 0303 	and.w	r3, r3, #3
 800276a:	009b      	lsls	r3, r3, #2
 800276c:	220f      	movs	r2, #15
 800276e:	fa02 f303 	lsl.w	r3, r2, r3
 8002772:	43db      	mvns	r3, r3
 8002774:	69ba      	ldr	r2, [r7, #24]
 8002776:	4013      	ands	r3, r2
 8002778:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	4a1d      	ldr	r2, [pc, #116]	@ (80027f4 <HAL_GPIO_Init+0x234>)
 800277e:	4293      	cmp	r3, r2
 8002780:	d04a      	beq.n	8002818 <HAL_GPIO_Init+0x258>
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	4a1c      	ldr	r2, [pc, #112]	@ (80027f8 <HAL_GPIO_Init+0x238>)
 8002786:	4293      	cmp	r3, r2
 8002788:	d02b      	beq.n	80027e2 <HAL_GPIO_Init+0x222>
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	4a1b      	ldr	r2, [pc, #108]	@ (80027fc <HAL_GPIO_Init+0x23c>)
 800278e:	4293      	cmp	r3, r2
 8002790:	d025      	beq.n	80027de <HAL_GPIO_Init+0x21e>
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	4a1a      	ldr	r2, [pc, #104]	@ (8002800 <HAL_GPIO_Init+0x240>)
 8002796:	4293      	cmp	r3, r2
 8002798:	d01f      	beq.n	80027da <HAL_GPIO_Init+0x21a>
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	4a19      	ldr	r2, [pc, #100]	@ (8002804 <HAL_GPIO_Init+0x244>)
 800279e:	4293      	cmp	r3, r2
 80027a0:	d019      	beq.n	80027d6 <HAL_GPIO_Init+0x216>
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	4a18      	ldr	r2, [pc, #96]	@ (8002808 <HAL_GPIO_Init+0x248>)
 80027a6:	4293      	cmp	r3, r2
 80027a8:	d013      	beq.n	80027d2 <HAL_GPIO_Init+0x212>
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	4a17      	ldr	r2, [pc, #92]	@ (800280c <HAL_GPIO_Init+0x24c>)
 80027ae:	4293      	cmp	r3, r2
 80027b0:	d00d      	beq.n	80027ce <HAL_GPIO_Init+0x20e>
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	4a16      	ldr	r2, [pc, #88]	@ (8002810 <HAL_GPIO_Init+0x250>)
 80027b6:	4293      	cmp	r3, r2
 80027b8:	d007      	beq.n	80027ca <HAL_GPIO_Init+0x20a>
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	4a15      	ldr	r2, [pc, #84]	@ (8002814 <HAL_GPIO_Init+0x254>)
 80027be:	4293      	cmp	r3, r2
 80027c0:	d101      	bne.n	80027c6 <HAL_GPIO_Init+0x206>
 80027c2:	2309      	movs	r3, #9
 80027c4:	e029      	b.n	800281a <HAL_GPIO_Init+0x25a>
 80027c6:	230a      	movs	r3, #10
 80027c8:	e027      	b.n	800281a <HAL_GPIO_Init+0x25a>
 80027ca:	2307      	movs	r3, #7
 80027cc:	e025      	b.n	800281a <HAL_GPIO_Init+0x25a>
 80027ce:	2306      	movs	r3, #6
 80027d0:	e023      	b.n	800281a <HAL_GPIO_Init+0x25a>
 80027d2:	2305      	movs	r3, #5
 80027d4:	e021      	b.n	800281a <HAL_GPIO_Init+0x25a>
 80027d6:	2304      	movs	r3, #4
 80027d8:	e01f      	b.n	800281a <HAL_GPIO_Init+0x25a>
 80027da:	2303      	movs	r3, #3
 80027dc:	e01d      	b.n	800281a <HAL_GPIO_Init+0x25a>
 80027de:	2302      	movs	r3, #2
 80027e0:	e01b      	b.n	800281a <HAL_GPIO_Init+0x25a>
 80027e2:	2301      	movs	r3, #1
 80027e4:	e019      	b.n	800281a <HAL_GPIO_Init+0x25a>
 80027e6:	bf00      	nop
 80027e8:	58000080 	.word	0x58000080
 80027ec:	58024400 	.word	0x58024400
 80027f0:	58000400 	.word	0x58000400
 80027f4:	58020000 	.word	0x58020000
 80027f8:	58020400 	.word	0x58020400
 80027fc:	58020800 	.word	0x58020800
 8002800:	58020c00 	.word	0x58020c00
 8002804:	58021000 	.word	0x58021000
 8002808:	58021400 	.word	0x58021400
 800280c:	58021800 	.word	0x58021800
 8002810:	58021c00 	.word	0x58021c00
 8002814:	58022400 	.word	0x58022400
 8002818:	2300      	movs	r3, #0
 800281a:	69fa      	ldr	r2, [r7, #28]
 800281c:	f002 0203 	and.w	r2, r2, #3
 8002820:	0092      	lsls	r2, r2, #2
 8002822:	4093      	lsls	r3, r2
 8002824:	69ba      	ldr	r2, [r7, #24]
 8002826:	4313      	orrs	r3, r2
 8002828:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800282a:	4938      	ldr	r1, [pc, #224]	@ (800290c <HAL_GPIO_Init+0x34c>)
 800282c:	69fb      	ldr	r3, [r7, #28]
 800282e:	089b      	lsrs	r3, r3, #2
 8002830:	3302      	adds	r3, #2
 8002832:	69ba      	ldr	r2, [r7, #24]
 8002834:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8002838:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800283c:	681b      	ldr	r3, [r3, #0]
 800283e:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8002840:	693b      	ldr	r3, [r7, #16]
 8002842:	43db      	mvns	r3, r3
 8002844:	69ba      	ldr	r2, [r7, #24]
 8002846:	4013      	ands	r3, r2
 8002848:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800284a:	683b      	ldr	r3, [r7, #0]
 800284c:	685b      	ldr	r3, [r3, #4]
 800284e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002852:	2b00      	cmp	r3, #0
 8002854:	d003      	beq.n	800285e <HAL_GPIO_Init+0x29e>
        {
          temp |= iocurrent;
 8002856:	69ba      	ldr	r2, [r7, #24]
 8002858:	693b      	ldr	r3, [r7, #16]
 800285a:	4313      	orrs	r3, r2
 800285c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 800285e:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8002862:	69bb      	ldr	r3, [r7, #24]
 8002864:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8002866:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800286a:	685b      	ldr	r3, [r3, #4]
 800286c:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800286e:	693b      	ldr	r3, [r7, #16]
 8002870:	43db      	mvns	r3, r3
 8002872:	69ba      	ldr	r2, [r7, #24]
 8002874:	4013      	ands	r3, r2
 8002876:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002878:	683b      	ldr	r3, [r7, #0]
 800287a:	685b      	ldr	r3, [r3, #4]
 800287c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002880:	2b00      	cmp	r3, #0
 8002882:	d003      	beq.n	800288c <HAL_GPIO_Init+0x2cc>
        {
          temp |= iocurrent;
 8002884:	69ba      	ldr	r2, [r7, #24]
 8002886:	693b      	ldr	r3, [r7, #16]
 8002888:	4313      	orrs	r3, r2
 800288a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 800288c:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8002890:	69bb      	ldr	r3, [r7, #24]
 8002892:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8002894:	697b      	ldr	r3, [r7, #20]
 8002896:	685b      	ldr	r3, [r3, #4]
 8002898:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800289a:	693b      	ldr	r3, [r7, #16]
 800289c:	43db      	mvns	r3, r3
 800289e:	69ba      	ldr	r2, [r7, #24]
 80028a0:	4013      	ands	r3, r2
 80028a2:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80028a4:	683b      	ldr	r3, [r7, #0]
 80028a6:	685b      	ldr	r3, [r3, #4]
 80028a8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80028ac:	2b00      	cmp	r3, #0
 80028ae:	d003      	beq.n	80028b8 <HAL_GPIO_Init+0x2f8>
        {
          temp |= iocurrent;
 80028b0:	69ba      	ldr	r2, [r7, #24]
 80028b2:	693b      	ldr	r3, [r7, #16]
 80028b4:	4313      	orrs	r3, r2
 80028b6:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 80028b8:	697b      	ldr	r3, [r7, #20]
 80028ba:	69ba      	ldr	r2, [r7, #24]
 80028bc:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 80028be:	697b      	ldr	r3, [r7, #20]
 80028c0:	681b      	ldr	r3, [r3, #0]
 80028c2:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80028c4:	693b      	ldr	r3, [r7, #16]
 80028c6:	43db      	mvns	r3, r3
 80028c8:	69ba      	ldr	r2, [r7, #24]
 80028ca:	4013      	ands	r3, r2
 80028cc:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80028ce:	683b      	ldr	r3, [r7, #0]
 80028d0:	685b      	ldr	r3, [r3, #4]
 80028d2:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80028d6:	2b00      	cmp	r3, #0
 80028d8:	d003      	beq.n	80028e2 <HAL_GPIO_Init+0x322>
        {
          temp |= iocurrent;
 80028da:	69ba      	ldr	r2, [r7, #24]
 80028dc:	693b      	ldr	r3, [r7, #16]
 80028de:	4313      	orrs	r3, r2
 80028e0:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 80028e2:	697b      	ldr	r3, [r7, #20]
 80028e4:	69ba      	ldr	r2, [r7, #24]
 80028e6:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 80028e8:	69fb      	ldr	r3, [r7, #28]
 80028ea:	3301      	adds	r3, #1
 80028ec:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 80028ee:	683b      	ldr	r3, [r7, #0]
 80028f0:	681a      	ldr	r2, [r3, #0]
 80028f2:	69fb      	ldr	r3, [r7, #28]
 80028f4:	fa22 f303 	lsr.w	r3, r2, r3
 80028f8:	2b00      	cmp	r3, #0
 80028fa:	f47f ae6b 	bne.w	80025d4 <HAL_GPIO_Init+0x14>
  }
}
 80028fe:	bf00      	nop
 8002900:	bf00      	nop
 8002902:	3724      	adds	r7, #36	@ 0x24
 8002904:	46bd      	mov	sp, r7
 8002906:	f85d 7b04 	ldr.w	r7, [sp], #4
 800290a:	4770      	bx	lr
 800290c:	58000400 	.word	0x58000400

08002910 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002910:	b480      	push	{r7}
 8002912:	b083      	sub	sp, #12
 8002914:	af00      	add	r7, sp, #0
 8002916:	6078      	str	r0, [r7, #4]
 8002918:	460b      	mov	r3, r1
 800291a:	807b      	strh	r3, [r7, #2]
 800291c:	4613      	mov	r3, r2
 800291e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002920:	787b      	ldrb	r3, [r7, #1]
 8002922:	2b00      	cmp	r3, #0
 8002924:	d003      	beq.n	800292e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002926:	887a      	ldrh	r2, [r7, #2]
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 800292c:	e003      	b.n	8002936 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 800292e:	887b      	ldrh	r3, [r7, #2]
 8002930:	041a      	lsls	r2, r3, #16
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	619a      	str	r2, [r3, #24]
}
 8002936:	bf00      	nop
 8002938:	370c      	adds	r7, #12
 800293a:	46bd      	mov	sp, r7
 800293c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002940:	4770      	bx	lr
	...

08002944 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002944:	b580      	push	{r7, lr}
 8002946:	b082      	sub	sp, #8
 8002948:	af00      	add	r7, sp, #0
 800294a:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	2b00      	cmp	r3, #0
 8002950:	d101      	bne.n	8002956 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002952:	2301      	movs	r3, #1
 8002954:	e08b      	b.n	8002a6e <HAL_I2C_Init+0x12a>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800295c:	b2db      	uxtb	r3, r3
 800295e:	2b00      	cmp	r3, #0
 8002960:	d106      	bne.n	8002970 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	2200      	movs	r2, #0
 8002966:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 800296a:	6878      	ldr	r0, [r7, #4]
 800296c:	f7fe fb04 	bl	8000f78 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	2224      	movs	r2, #36	@ 0x24
 8002974:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	681b      	ldr	r3, [r3, #0]
 800297c:	681a      	ldr	r2, [r3, #0]
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	681b      	ldr	r3, [r3, #0]
 8002982:	f022 0201 	bic.w	r2, r2, #1
 8002986:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	685a      	ldr	r2, [r3, #4]
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	681b      	ldr	r3, [r3, #0]
 8002990:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8002994:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	681b      	ldr	r3, [r3, #0]
 800299a:	689a      	ldr	r2, [r3, #8]
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	681b      	ldr	r3, [r3, #0]
 80029a0:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80029a4:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	68db      	ldr	r3, [r3, #12]
 80029aa:	2b01      	cmp	r3, #1
 80029ac:	d107      	bne.n	80029be <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	689a      	ldr	r2, [r3, #8]
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	681b      	ldr	r3, [r3, #0]
 80029b6:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80029ba:	609a      	str	r2, [r3, #8]
 80029bc:	e006      	b.n	80029cc <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	689a      	ldr	r2, [r3, #8]
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	681b      	ldr	r3, [r3, #0]
 80029c6:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 80029ca:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	68db      	ldr	r3, [r3, #12]
 80029d0:	2b02      	cmp	r3, #2
 80029d2:	d108      	bne.n	80029e6 <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	681b      	ldr	r3, [r3, #0]
 80029d8:	685a      	ldr	r2, [r3, #4]
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	681b      	ldr	r3, [r3, #0]
 80029de:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80029e2:	605a      	str	r2, [r3, #4]
 80029e4:	e007      	b.n	80029f6 <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	681b      	ldr	r3, [r3, #0]
 80029ea:	685a      	ldr	r2, [r3, #4]
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	681b      	ldr	r3, [r3, #0]
 80029f0:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80029f4:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	681b      	ldr	r3, [r3, #0]
 80029fa:	6859      	ldr	r1, [r3, #4]
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	681a      	ldr	r2, [r3, #0]
 8002a00:	4b1d      	ldr	r3, [pc, #116]	@ (8002a78 <HAL_I2C_Init+0x134>)
 8002a02:	430b      	orrs	r3, r1
 8002a04:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	681b      	ldr	r3, [r3, #0]
 8002a0a:	68da      	ldr	r2, [r3, #12]
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	681b      	ldr	r3, [r3, #0]
 8002a10:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8002a14:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	691a      	ldr	r2, [r3, #16]
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	695b      	ldr	r3, [r3, #20]
 8002a1e:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	699b      	ldr	r3, [r3, #24]
 8002a26:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	681b      	ldr	r3, [r3, #0]
 8002a2c:	430a      	orrs	r2, r1
 8002a2e:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	69d9      	ldr	r1, [r3, #28]
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	6a1a      	ldr	r2, [r3, #32]
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	681b      	ldr	r3, [r3, #0]
 8002a3c:	430a      	orrs	r2, r1
 8002a3e:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	681b      	ldr	r3, [r3, #0]
 8002a44:	681a      	ldr	r2, [r3, #0]
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	681b      	ldr	r3, [r3, #0]
 8002a4a:	f042 0201 	orr.w	r2, r2, #1
 8002a4e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	2200      	movs	r2, #0
 8002a54:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	2220      	movs	r2, #32
 8002a5a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	2200      	movs	r2, #0
 8002a62:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	2200      	movs	r2, #0
 8002a68:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 8002a6c:	2300      	movs	r3, #0
}
 8002a6e:	4618      	mov	r0, r3
 8002a70:	3708      	adds	r7, #8
 8002a72:	46bd      	mov	sp, r7
 8002a74:	bd80      	pop	{r7, pc}
 8002a76:	bf00      	nop
 8002a78:	02008000 	.word	0x02008000

08002a7c <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002a7c:	b580      	push	{r7, lr}
 8002a7e:	b088      	sub	sp, #32
 8002a80:	af02      	add	r7, sp, #8
 8002a82:	60f8      	str	r0, [r7, #12]
 8002a84:	4608      	mov	r0, r1
 8002a86:	4611      	mov	r1, r2
 8002a88:	461a      	mov	r2, r3
 8002a8a:	4603      	mov	r3, r0
 8002a8c:	817b      	strh	r3, [r7, #10]
 8002a8e:	460b      	mov	r3, r1
 8002a90:	813b      	strh	r3, [r7, #8]
 8002a92:	4613      	mov	r3, r2
 8002a94:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002a96:	68fb      	ldr	r3, [r7, #12]
 8002a98:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002a9c:	b2db      	uxtb	r3, r3
 8002a9e:	2b20      	cmp	r3, #32
 8002aa0:	f040 80fd 	bne.w	8002c9e <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 8002aa4:	6a3b      	ldr	r3, [r7, #32]
 8002aa6:	2b00      	cmp	r3, #0
 8002aa8:	d002      	beq.n	8002ab0 <HAL_I2C_Mem_Read+0x34>
 8002aaa:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8002aac:	2b00      	cmp	r3, #0
 8002aae:	d105      	bne.n	8002abc <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8002ab0:	68fb      	ldr	r3, [r7, #12]
 8002ab2:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002ab6:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 8002ab8:	2301      	movs	r3, #1
 8002aba:	e0f1      	b.n	8002ca0 <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002abc:	68fb      	ldr	r3, [r7, #12]
 8002abe:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8002ac2:	2b01      	cmp	r3, #1
 8002ac4:	d101      	bne.n	8002aca <HAL_I2C_Mem_Read+0x4e>
 8002ac6:	2302      	movs	r3, #2
 8002ac8:	e0ea      	b.n	8002ca0 <HAL_I2C_Mem_Read+0x224>
 8002aca:	68fb      	ldr	r3, [r7, #12]
 8002acc:	2201      	movs	r2, #1
 8002ace:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8002ad2:	f7fe fe59 	bl	8001788 <HAL_GetTick>
 8002ad6:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8002ad8:	697b      	ldr	r3, [r7, #20]
 8002ada:	9300      	str	r3, [sp, #0]
 8002adc:	2319      	movs	r3, #25
 8002ade:	2201      	movs	r2, #1
 8002ae0:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8002ae4:	68f8      	ldr	r0, [r7, #12]
 8002ae6:	f000 f95b 	bl	8002da0 <I2C_WaitOnFlagUntilTimeout>
 8002aea:	4603      	mov	r3, r0
 8002aec:	2b00      	cmp	r3, #0
 8002aee:	d001      	beq.n	8002af4 <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 8002af0:	2301      	movs	r3, #1
 8002af2:	e0d5      	b.n	8002ca0 <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8002af4:	68fb      	ldr	r3, [r7, #12]
 8002af6:	2222      	movs	r2, #34	@ 0x22
 8002af8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8002afc:	68fb      	ldr	r3, [r7, #12]
 8002afe:	2240      	movs	r2, #64	@ 0x40
 8002b00:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002b04:	68fb      	ldr	r3, [r7, #12]
 8002b06:	2200      	movs	r2, #0
 8002b08:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8002b0a:	68fb      	ldr	r3, [r7, #12]
 8002b0c:	6a3a      	ldr	r2, [r7, #32]
 8002b0e:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8002b10:	68fb      	ldr	r3, [r7, #12]
 8002b12:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8002b14:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 8002b16:	68fb      	ldr	r3, [r7, #12]
 8002b18:	2200      	movs	r2, #0
 8002b1a:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8002b1c:	88f8      	ldrh	r0, [r7, #6]
 8002b1e:	893a      	ldrh	r2, [r7, #8]
 8002b20:	8979      	ldrh	r1, [r7, #10]
 8002b22:	697b      	ldr	r3, [r7, #20]
 8002b24:	9301      	str	r3, [sp, #4]
 8002b26:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002b28:	9300      	str	r3, [sp, #0]
 8002b2a:	4603      	mov	r3, r0
 8002b2c:	68f8      	ldr	r0, [r7, #12]
 8002b2e:	f000 f8bf 	bl	8002cb0 <I2C_RequestMemoryRead>
 8002b32:	4603      	mov	r3, r0
 8002b34:	2b00      	cmp	r3, #0
 8002b36:	d005      	beq.n	8002b44 <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002b38:	68fb      	ldr	r3, [r7, #12]
 8002b3a:	2200      	movs	r2, #0
 8002b3c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      return HAL_ERROR;
 8002b40:	2301      	movs	r3, #1
 8002b42:	e0ad      	b.n	8002ca0 <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002b44:	68fb      	ldr	r3, [r7, #12]
 8002b46:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002b48:	b29b      	uxth	r3, r3
 8002b4a:	2bff      	cmp	r3, #255	@ 0xff
 8002b4c:	d90e      	bls.n	8002b6c <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8002b4e:	68fb      	ldr	r3, [r7, #12]
 8002b50:	22ff      	movs	r2, #255	@ 0xff
 8002b52:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8002b54:	68fb      	ldr	r3, [r7, #12]
 8002b56:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002b58:	b2da      	uxtb	r2, r3
 8002b5a:	8979      	ldrh	r1, [r7, #10]
 8002b5c:	4b52      	ldr	r3, [pc, #328]	@ (8002ca8 <HAL_I2C_Mem_Read+0x22c>)
 8002b5e:	9300      	str	r3, [sp, #0]
 8002b60:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8002b64:	68f8      	ldr	r0, [r7, #12]
 8002b66:	f000 fadf 	bl	8003128 <I2C_TransferConfig>
 8002b6a:	e00f      	b.n	8002b8c <HAL_I2C_Mem_Read+0x110>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8002b6c:	68fb      	ldr	r3, [r7, #12]
 8002b6e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002b70:	b29a      	uxth	r2, r3
 8002b72:	68fb      	ldr	r3, [r7, #12]
 8002b74:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8002b76:	68fb      	ldr	r3, [r7, #12]
 8002b78:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002b7a:	b2da      	uxtb	r2, r3
 8002b7c:	8979      	ldrh	r1, [r7, #10]
 8002b7e:	4b4a      	ldr	r3, [pc, #296]	@ (8002ca8 <HAL_I2C_Mem_Read+0x22c>)
 8002b80:	9300      	str	r3, [sp, #0]
 8002b82:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8002b86:	68f8      	ldr	r0, [r7, #12]
 8002b88:	f000 face 	bl	8003128 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 8002b8c:	697b      	ldr	r3, [r7, #20]
 8002b8e:	9300      	str	r3, [sp, #0]
 8002b90:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002b92:	2200      	movs	r2, #0
 8002b94:	2104      	movs	r1, #4
 8002b96:	68f8      	ldr	r0, [r7, #12]
 8002b98:	f000 f902 	bl	8002da0 <I2C_WaitOnFlagUntilTimeout>
 8002b9c:	4603      	mov	r3, r0
 8002b9e:	2b00      	cmp	r3, #0
 8002ba0:	d001      	beq.n	8002ba6 <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 8002ba2:	2301      	movs	r3, #1
 8002ba4:	e07c      	b.n	8002ca0 <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8002ba6:	68fb      	ldr	r3, [r7, #12]
 8002ba8:	681b      	ldr	r3, [r3, #0]
 8002baa:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8002bac:	68fb      	ldr	r3, [r7, #12]
 8002bae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002bb0:	b2d2      	uxtb	r2, r2
 8002bb2:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002bb4:	68fb      	ldr	r3, [r7, #12]
 8002bb6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002bb8:	1c5a      	adds	r2, r3, #1
 8002bba:	68fb      	ldr	r3, [r7, #12]
 8002bbc:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 8002bbe:	68fb      	ldr	r3, [r7, #12]
 8002bc0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002bc2:	3b01      	subs	r3, #1
 8002bc4:	b29a      	uxth	r2, r3
 8002bc6:	68fb      	ldr	r3, [r7, #12]
 8002bc8:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8002bca:	68fb      	ldr	r3, [r7, #12]
 8002bcc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002bce:	b29b      	uxth	r3, r3
 8002bd0:	3b01      	subs	r3, #1
 8002bd2:	b29a      	uxth	r2, r3
 8002bd4:	68fb      	ldr	r3, [r7, #12]
 8002bd6:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8002bd8:	68fb      	ldr	r3, [r7, #12]
 8002bda:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002bdc:	b29b      	uxth	r3, r3
 8002bde:	2b00      	cmp	r3, #0
 8002be0:	d034      	beq.n	8002c4c <HAL_I2C_Mem_Read+0x1d0>
 8002be2:	68fb      	ldr	r3, [r7, #12]
 8002be4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002be6:	2b00      	cmp	r3, #0
 8002be8:	d130      	bne.n	8002c4c <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8002bea:	697b      	ldr	r3, [r7, #20]
 8002bec:	9300      	str	r3, [sp, #0]
 8002bee:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002bf0:	2200      	movs	r2, #0
 8002bf2:	2180      	movs	r1, #128	@ 0x80
 8002bf4:	68f8      	ldr	r0, [r7, #12]
 8002bf6:	f000 f8d3 	bl	8002da0 <I2C_WaitOnFlagUntilTimeout>
 8002bfa:	4603      	mov	r3, r0
 8002bfc:	2b00      	cmp	r3, #0
 8002bfe:	d001      	beq.n	8002c04 <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 8002c00:	2301      	movs	r3, #1
 8002c02:	e04d      	b.n	8002ca0 <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002c04:	68fb      	ldr	r3, [r7, #12]
 8002c06:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002c08:	b29b      	uxth	r3, r3
 8002c0a:	2bff      	cmp	r3, #255	@ 0xff
 8002c0c:	d90e      	bls.n	8002c2c <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8002c0e:	68fb      	ldr	r3, [r7, #12]
 8002c10:	22ff      	movs	r2, #255	@ 0xff
 8002c12:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 8002c14:	68fb      	ldr	r3, [r7, #12]
 8002c16:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002c18:	b2da      	uxtb	r2, r3
 8002c1a:	8979      	ldrh	r1, [r7, #10]
 8002c1c:	2300      	movs	r3, #0
 8002c1e:	9300      	str	r3, [sp, #0]
 8002c20:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8002c24:	68f8      	ldr	r0, [r7, #12]
 8002c26:	f000 fa7f 	bl	8003128 <I2C_TransferConfig>
 8002c2a:	e00f      	b.n	8002c4c <HAL_I2C_Mem_Read+0x1d0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8002c2c:	68fb      	ldr	r3, [r7, #12]
 8002c2e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002c30:	b29a      	uxth	r2, r3
 8002c32:	68fb      	ldr	r3, [r7, #12]
 8002c34:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8002c36:	68fb      	ldr	r3, [r7, #12]
 8002c38:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002c3a:	b2da      	uxtb	r2, r3
 8002c3c:	8979      	ldrh	r1, [r7, #10]
 8002c3e:	2300      	movs	r3, #0
 8002c40:	9300      	str	r3, [sp, #0]
 8002c42:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8002c46:	68f8      	ldr	r0, [r7, #12]
 8002c48:	f000 fa6e 	bl	8003128 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 8002c4c:	68fb      	ldr	r3, [r7, #12]
 8002c4e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002c50:	b29b      	uxth	r3, r3
 8002c52:	2b00      	cmp	r3, #0
 8002c54:	d19a      	bne.n	8002b8c <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002c56:	697a      	ldr	r2, [r7, #20]
 8002c58:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8002c5a:	68f8      	ldr	r0, [r7, #12]
 8002c5c:	f000 f940 	bl	8002ee0 <I2C_WaitOnSTOPFlagUntilTimeout>
 8002c60:	4603      	mov	r3, r0
 8002c62:	2b00      	cmp	r3, #0
 8002c64:	d001      	beq.n	8002c6a <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 8002c66:	2301      	movs	r3, #1
 8002c68:	e01a      	b.n	8002ca0 <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002c6a:	68fb      	ldr	r3, [r7, #12]
 8002c6c:	681b      	ldr	r3, [r3, #0]
 8002c6e:	2220      	movs	r2, #32
 8002c70:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8002c72:	68fb      	ldr	r3, [r7, #12]
 8002c74:	681b      	ldr	r3, [r3, #0]
 8002c76:	6859      	ldr	r1, [r3, #4]
 8002c78:	68fb      	ldr	r3, [r7, #12]
 8002c7a:	681a      	ldr	r2, [r3, #0]
 8002c7c:	4b0b      	ldr	r3, [pc, #44]	@ (8002cac <HAL_I2C_Mem_Read+0x230>)
 8002c7e:	400b      	ands	r3, r1
 8002c80:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8002c82:	68fb      	ldr	r3, [r7, #12]
 8002c84:	2220      	movs	r2, #32
 8002c86:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8002c8a:	68fb      	ldr	r3, [r7, #12]
 8002c8c:	2200      	movs	r2, #0
 8002c8e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002c92:	68fb      	ldr	r3, [r7, #12]
 8002c94:	2200      	movs	r2, #0
 8002c96:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8002c9a:	2300      	movs	r3, #0
 8002c9c:	e000      	b.n	8002ca0 <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 8002c9e:	2302      	movs	r3, #2
  }
}
 8002ca0:	4618      	mov	r0, r3
 8002ca2:	3718      	adds	r7, #24
 8002ca4:	46bd      	mov	sp, r7
 8002ca6:	bd80      	pop	{r7, pc}
 8002ca8:	80002400 	.word	0x80002400
 8002cac:	fe00e800 	.word	0xfe00e800

08002cb0 <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 8002cb0:	b580      	push	{r7, lr}
 8002cb2:	b086      	sub	sp, #24
 8002cb4:	af02      	add	r7, sp, #8
 8002cb6:	60f8      	str	r0, [r7, #12]
 8002cb8:	4608      	mov	r0, r1
 8002cba:	4611      	mov	r1, r2
 8002cbc:	461a      	mov	r2, r3
 8002cbe:	4603      	mov	r3, r0
 8002cc0:	817b      	strh	r3, [r7, #10]
 8002cc2:	460b      	mov	r3, r1
 8002cc4:	813b      	strh	r3, [r7, #8]
 8002cc6:	4613      	mov	r3, r2
 8002cc8:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8002cca:	88fb      	ldrh	r3, [r7, #6]
 8002ccc:	b2da      	uxtb	r2, r3
 8002cce:	8979      	ldrh	r1, [r7, #10]
 8002cd0:	4b20      	ldr	r3, [pc, #128]	@ (8002d54 <I2C_RequestMemoryRead+0xa4>)
 8002cd2:	9300      	str	r3, [sp, #0]
 8002cd4:	2300      	movs	r3, #0
 8002cd6:	68f8      	ldr	r0, [r7, #12]
 8002cd8:	f000 fa26 	bl	8003128 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002cdc:	69fa      	ldr	r2, [r7, #28]
 8002cde:	69b9      	ldr	r1, [r7, #24]
 8002ce0:	68f8      	ldr	r0, [r7, #12]
 8002ce2:	f000 f8b6 	bl	8002e52 <I2C_WaitOnTXISFlagUntilTimeout>
 8002ce6:	4603      	mov	r3, r0
 8002ce8:	2b00      	cmp	r3, #0
 8002cea:	d001      	beq.n	8002cf0 <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 8002cec:	2301      	movs	r3, #1
 8002cee:	e02c      	b.n	8002d4a <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8002cf0:	88fb      	ldrh	r3, [r7, #6]
 8002cf2:	2b01      	cmp	r3, #1
 8002cf4:	d105      	bne.n	8002d02 <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8002cf6:	893b      	ldrh	r3, [r7, #8]
 8002cf8:	b2da      	uxtb	r2, r3
 8002cfa:	68fb      	ldr	r3, [r7, #12]
 8002cfc:	681b      	ldr	r3, [r3, #0]
 8002cfe:	629a      	str	r2, [r3, #40]	@ 0x28
 8002d00:	e015      	b.n	8002d2e <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8002d02:	893b      	ldrh	r3, [r7, #8]
 8002d04:	0a1b      	lsrs	r3, r3, #8
 8002d06:	b29b      	uxth	r3, r3
 8002d08:	b2da      	uxtb	r2, r3
 8002d0a:	68fb      	ldr	r3, [r7, #12]
 8002d0c:	681b      	ldr	r3, [r3, #0]
 8002d0e:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002d10:	69fa      	ldr	r2, [r7, #28]
 8002d12:	69b9      	ldr	r1, [r7, #24]
 8002d14:	68f8      	ldr	r0, [r7, #12]
 8002d16:	f000 f89c 	bl	8002e52 <I2C_WaitOnTXISFlagUntilTimeout>
 8002d1a:	4603      	mov	r3, r0
 8002d1c:	2b00      	cmp	r3, #0
 8002d1e:	d001      	beq.n	8002d24 <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 8002d20:	2301      	movs	r3, #1
 8002d22:	e012      	b.n	8002d4a <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8002d24:	893b      	ldrh	r3, [r7, #8]
 8002d26:	b2da      	uxtb	r2, r3
 8002d28:	68fb      	ldr	r3, [r7, #12]
 8002d2a:	681b      	ldr	r3, [r3, #0]
 8002d2c:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 8002d2e:	69fb      	ldr	r3, [r7, #28]
 8002d30:	9300      	str	r3, [sp, #0]
 8002d32:	69bb      	ldr	r3, [r7, #24]
 8002d34:	2200      	movs	r2, #0
 8002d36:	2140      	movs	r1, #64	@ 0x40
 8002d38:	68f8      	ldr	r0, [r7, #12]
 8002d3a:	f000 f831 	bl	8002da0 <I2C_WaitOnFlagUntilTimeout>
 8002d3e:	4603      	mov	r3, r0
 8002d40:	2b00      	cmp	r3, #0
 8002d42:	d001      	beq.n	8002d48 <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 8002d44:	2301      	movs	r3, #1
 8002d46:	e000      	b.n	8002d4a <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 8002d48:	2300      	movs	r3, #0
}
 8002d4a:	4618      	mov	r0, r3
 8002d4c:	3710      	adds	r7, #16
 8002d4e:	46bd      	mov	sp, r7
 8002d50:	bd80      	pop	{r7, pc}
 8002d52:	bf00      	nop
 8002d54:	80002000 	.word	0x80002000

08002d58 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8002d58:	b480      	push	{r7}
 8002d5a:	b083      	sub	sp, #12
 8002d5c:	af00      	add	r7, sp, #0
 8002d5e:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	681b      	ldr	r3, [r3, #0]
 8002d64:	699b      	ldr	r3, [r3, #24]
 8002d66:	f003 0302 	and.w	r3, r3, #2
 8002d6a:	2b02      	cmp	r3, #2
 8002d6c:	d103      	bne.n	8002d76 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	681b      	ldr	r3, [r3, #0]
 8002d72:	2200      	movs	r2, #0
 8002d74:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	681b      	ldr	r3, [r3, #0]
 8002d7a:	699b      	ldr	r3, [r3, #24]
 8002d7c:	f003 0301 	and.w	r3, r3, #1
 8002d80:	2b01      	cmp	r3, #1
 8002d82:	d007      	beq.n	8002d94 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	681b      	ldr	r3, [r3, #0]
 8002d88:	699a      	ldr	r2, [r3, #24]
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	681b      	ldr	r3, [r3, #0]
 8002d8e:	f042 0201 	orr.w	r2, r2, #1
 8002d92:	619a      	str	r2, [r3, #24]
  }
}
 8002d94:	bf00      	nop
 8002d96:	370c      	adds	r7, #12
 8002d98:	46bd      	mov	sp, r7
 8002d9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d9e:	4770      	bx	lr

08002da0 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8002da0:	b580      	push	{r7, lr}
 8002da2:	b084      	sub	sp, #16
 8002da4:	af00      	add	r7, sp, #0
 8002da6:	60f8      	str	r0, [r7, #12]
 8002da8:	60b9      	str	r1, [r7, #8]
 8002daa:	603b      	str	r3, [r7, #0]
 8002dac:	4613      	mov	r3, r2
 8002dae:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002db0:	e03b      	b.n	8002e2a <I2C_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8002db2:	69ba      	ldr	r2, [r7, #24]
 8002db4:	6839      	ldr	r1, [r7, #0]
 8002db6:	68f8      	ldr	r0, [r7, #12]
 8002db8:	f000 f8d6 	bl	8002f68 <I2C_IsErrorOccurred>
 8002dbc:	4603      	mov	r3, r0
 8002dbe:	2b00      	cmp	r3, #0
 8002dc0:	d001      	beq.n	8002dc6 <I2C_WaitOnFlagUntilTimeout+0x26>
    {
      return HAL_ERROR;
 8002dc2:	2301      	movs	r3, #1
 8002dc4:	e041      	b.n	8002e4a <I2C_WaitOnFlagUntilTimeout+0xaa>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002dc6:	683b      	ldr	r3, [r7, #0]
 8002dc8:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8002dcc:	d02d      	beq.n	8002e2a <I2C_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002dce:	f7fe fcdb 	bl	8001788 <HAL_GetTick>
 8002dd2:	4602      	mov	r2, r0
 8002dd4:	69bb      	ldr	r3, [r7, #24]
 8002dd6:	1ad3      	subs	r3, r2, r3
 8002dd8:	683a      	ldr	r2, [r7, #0]
 8002dda:	429a      	cmp	r2, r3
 8002ddc:	d302      	bcc.n	8002de4 <I2C_WaitOnFlagUntilTimeout+0x44>
 8002dde:	683b      	ldr	r3, [r7, #0]
 8002de0:	2b00      	cmp	r3, #0
 8002de2:	d122      	bne.n	8002e2a <I2C_WaitOnFlagUntilTimeout+0x8a>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8002de4:	68fb      	ldr	r3, [r7, #12]
 8002de6:	681b      	ldr	r3, [r3, #0]
 8002de8:	699a      	ldr	r2, [r3, #24]
 8002dea:	68bb      	ldr	r3, [r7, #8]
 8002dec:	4013      	ands	r3, r2
 8002dee:	68ba      	ldr	r2, [r7, #8]
 8002df0:	429a      	cmp	r2, r3
 8002df2:	bf0c      	ite	eq
 8002df4:	2301      	moveq	r3, #1
 8002df6:	2300      	movne	r3, #0
 8002df8:	b2db      	uxtb	r3, r3
 8002dfa:	461a      	mov	r2, r3
 8002dfc:	79fb      	ldrb	r3, [r7, #7]
 8002dfe:	429a      	cmp	r2, r3
 8002e00:	d113      	bne.n	8002e2a <I2C_WaitOnFlagUntilTimeout+0x8a>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002e02:	68fb      	ldr	r3, [r7, #12]
 8002e04:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002e06:	f043 0220 	orr.w	r2, r3, #32
 8002e0a:	68fb      	ldr	r3, [r7, #12]
 8002e0c:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8002e0e:	68fb      	ldr	r3, [r7, #12]
 8002e10:	2220      	movs	r2, #32
 8002e12:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8002e16:	68fb      	ldr	r3, [r7, #12]
 8002e18:	2200      	movs	r2, #0
 8002e1a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002e1e:	68fb      	ldr	r3, [r7, #12]
 8002e20:	2200      	movs	r2, #0
 8002e22:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
          return HAL_ERROR;
 8002e26:	2301      	movs	r3, #1
 8002e28:	e00f      	b.n	8002e4a <I2C_WaitOnFlagUntilTimeout+0xaa>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002e2a:	68fb      	ldr	r3, [r7, #12]
 8002e2c:	681b      	ldr	r3, [r3, #0]
 8002e2e:	699a      	ldr	r2, [r3, #24]
 8002e30:	68bb      	ldr	r3, [r7, #8]
 8002e32:	4013      	ands	r3, r2
 8002e34:	68ba      	ldr	r2, [r7, #8]
 8002e36:	429a      	cmp	r2, r3
 8002e38:	bf0c      	ite	eq
 8002e3a:	2301      	moveq	r3, #1
 8002e3c:	2300      	movne	r3, #0
 8002e3e:	b2db      	uxtb	r3, r3
 8002e40:	461a      	mov	r2, r3
 8002e42:	79fb      	ldrb	r3, [r7, #7]
 8002e44:	429a      	cmp	r2, r3
 8002e46:	d0b4      	beq.n	8002db2 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8002e48:	2300      	movs	r3, #0
}
 8002e4a:	4618      	mov	r0, r3
 8002e4c:	3710      	adds	r7, #16
 8002e4e:	46bd      	mov	sp, r7
 8002e50:	bd80      	pop	{r7, pc}

08002e52 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8002e52:	b580      	push	{r7, lr}
 8002e54:	b084      	sub	sp, #16
 8002e56:	af00      	add	r7, sp, #0
 8002e58:	60f8      	str	r0, [r7, #12]
 8002e5a:	60b9      	str	r1, [r7, #8]
 8002e5c:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8002e5e:	e033      	b.n	8002ec8 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8002e60:	687a      	ldr	r2, [r7, #4]
 8002e62:	68b9      	ldr	r1, [r7, #8]
 8002e64:	68f8      	ldr	r0, [r7, #12]
 8002e66:	f000 f87f 	bl	8002f68 <I2C_IsErrorOccurred>
 8002e6a:	4603      	mov	r3, r0
 8002e6c:	2b00      	cmp	r3, #0
 8002e6e:	d001      	beq.n	8002e74 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8002e70:	2301      	movs	r3, #1
 8002e72:	e031      	b.n	8002ed8 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002e74:	68bb      	ldr	r3, [r7, #8]
 8002e76:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8002e7a:	d025      	beq.n	8002ec8 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002e7c:	f7fe fc84 	bl	8001788 <HAL_GetTick>
 8002e80:	4602      	mov	r2, r0
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	1ad3      	subs	r3, r2, r3
 8002e86:	68ba      	ldr	r2, [r7, #8]
 8002e88:	429a      	cmp	r2, r3
 8002e8a:	d302      	bcc.n	8002e92 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8002e8c:	68bb      	ldr	r3, [r7, #8]
 8002e8e:	2b00      	cmp	r3, #0
 8002e90:	d11a      	bne.n	8002ec8 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 8002e92:	68fb      	ldr	r3, [r7, #12]
 8002e94:	681b      	ldr	r3, [r3, #0]
 8002e96:	699b      	ldr	r3, [r3, #24]
 8002e98:	f003 0302 	and.w	r3, r3, #2
 8002e9c:	2b02      	cmp	r3, #2
 8002e9e:	d013      	beq.n	8002ec8 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002ea0:	68fb      	ldr	r3, [r7, #12]
 8002ea2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002ea4:	f043 0220 	orr.w	r2, r3, #32
 8002ea8:	68fb      	ldr	r3, [r7, #12]
 8002eaa:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8002eac:	68fb      	ldr	r3, [r7, #12]
 8002eae:	2220      	movs	r2, #32
 8002eb0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8002eb4:	68fb      	ldr	r3, [r7, #12]
 8002eb6:	2200      	movs	r2, #0
 8002eb8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002ebc:	68fb      	ldr	r3, [r7, #12]
 8002ebe:	2200      	movs	r2, #0
 8002ec0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8002ec4:	2301      	movs	r3, #1
 8002ec6:	e007      	b.n	8002ed8 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8002ec8:	68fb      	ldr	r3, [r7, #12]
 8002eca:	681b      	ldr	r3, [r3, #0]
 8002ecc:	699b      	ldr	r3, [r3, #24]
 8002ece:	f003 0302 	and.w	r3, r3, #2
 8002ed2:	2b02      	cmp	r3, #2
 8002ed4:	d1c4      	bne.n	8002e60 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8002ed6:	2300      	movs	r3, #0
}
 8002ed8:	4618      	mov	r0, r3
 8002eda:	3710      	adds	r7, #16
 8002edc:	46bd      	mov	sp, r7
 8002ede:	bd80      	pop	{r7, pc}

08002ee0 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8002ee0:	b580      	push	{r7, lr}
 8002ee2:	b084      	sub	sp, #16
 8002ee4:	af00      	add	r7, sp, #0
 8002ee6:	60f8      	str	r0, [r7, #12]
 8002ee8:	60b9      	str	r1, [r7, #8]
 8002eea:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002eec:	e02f      	b.n	8002f4e <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8002eee:	687a      	ldr	r2, [r7, #4]
 8002ef0:	68b9      	ldr	r1, [r7, #8]
 8002ef2:	68f8      	ldr	r0, [r7, #12]
 8002ef4:	f000 f838 	bl	8002f68 <I2C_IsErrorOccurred>
 8002ef8:	4603      	mov	r3, r0
 8002efa:	2b00      	cmp	r3, #0
 8002efc:	d001      	beq.n	8002f02 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8002efe:	2301      	movs	r3, #1
 8002f00:	e02d      	b.n	8002f5e <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002f02:	f7fe fc41 	bl	8001788 <HAL_GetTick>
 8002f06:	4602      	mov	r2, r0
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	1ad3      	subs	r3, r2, r3
 8002f0c:	68ba      	ldr	r2, [r7, #8]
 8002f0e:	429a      	cmp	r2, r3
 8002f10:	d302      	bcc.n	8002f18 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8002f12:	68bb      	ldr	r3, [r7, #8]
 8002f14:	2b00      	cmp	r3, #0
 8002f16:	d11a      	bne.n	8002f4e <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 8002f18:	68fb      	ldr	r3, [r7, #12]
 8002f1a:	681b      	ldr	r3, [r3, #0]
 8002f1c:	699b      	ldr	r3, [r3, #24]
 8002f1e:	f003 0320 	and.w	r3, r3, #32
 8002f22:	2b20      	cmp	r3, #32
 8002f24:	d013      	beq.n	8002f4e <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002f26:	68fb      	ldr	r3, [r7, #12]
 8002f28:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002f2a:	f043 0220 	orr.w	r2, r3, #32
 8002f2e:	68fb      	ldr	r3, [r7, #12]
 8002f30:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8002f32:	68fb      	ldr	r3, [r7, #12]
 8002f34:	2220      	movs	r2, #32
 8002f36:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002f3a:	68fb      	ldr	r3, [r7, #12]
 8002f3c:	2200      	movs	r2, #0
 8002f3e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002f42:	68fb      	ldr	r3, [r7, #12]
 8002f44:	2200      	movs	r2, #0
 8002f46:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_ERROR;
 8002f4a:	2301      	movs	r3, #1
 8002f4c:	e007      	b.n	8002f5e <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002f4e:	68fb      	ldr	r3, [r7, #12]
 8002f50:	681b      	ldr	r3, [r3, #0]
 8002f52:	699b      	ldr	r3, [r3, #24]
 8002f54:	f003 0320 	and.w	r3, r3, #32
 8002f58:	2b20      	cmp	r3, #32
 8002f5a:	d1c8      	bne.n	8002eee <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8002f5c:	2300      	movs	r3, #0
}
 8002f5e:	4618      	mov	r0, r3
 8002f60:	3710      	adds	r7, #16
 8002f62:	46bd      	mov	sp, r7
 8002f64:	bd80      	pop	{r7, pc}
	...

08002f68 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002f68:	b580      	push	{r7, lr}
 8002f6a:	b08a      	sub	sp, #40	@ 0x28
 8002f6c:	af00      	add	r7, sp, #0
 8002f6e:	60f8      	str	r0, [r7, #12]
 8002f70:	60b9      	str	r1, [r7, #8]
 8002f72:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002f74:	2300      	movs	r3, #0
 8002f76:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 8002f7a:	68fb      	ldr	r3, [r7, #12]
 8002f7c:	681b      	ldr	r3, [r3, #0]
 8002f7e:	699b      	ldr	r3, [r3, #24]
 8002f80:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8002f82:	2300      	movs	r3, #0
 8002f84:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8002f8a:	69bb      	ldr	r3, [r7, #24]
 8002f8c:	f003 0310 	and.w	r3, r3, #16
 8002f90:	2b00      	cmp	r3, #0
 8002f92:	d068      	beq.n	8003066 <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002f94:	68fb      	ldr	r3, [r7, #12]
 8002f96:	681b      	ldr	r3, [r3, #0]
 8002f98:	2210      	movs	r2, #16
 8002f9a:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8002f9c:	e049      	b.n	8003032 <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8002f9e:	68bb      	ldr	r3, [r7, #8]
 8002fa0:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8002fa4:	d045      	beq.n	8003032 <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8002fa6:	f7fe fbef 	bl	8001788 <HAL_GetTick>
 8002faa:	4602      	mov	r2, r0
 8002fac:	69fb      	ldr	r3, [r7, #28]
 8002fae:	1ad3      	subs	r3, r2, r3
 8002fb0:	68ba      	ldr	r2, [r7, #8]
 8002fb2:	429a      	cmp	r2, r3
 8002fb4:	d302      	bcc.n	8002fbc <I2C_IsErrorOccurred+0x54>
 8002fb6:	68bb      	ldr	r3, [r7, #8]
 8002fb8:	2b00      	cmp	r3, #0
 8002fba:	d13a      	bne.n	8003032 <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8002fbc:	68fb      	ldr	r3, [r7, #12]
 8002fbe:	681b      	ldr	r3, [r3, #0]
 8002fc0:	685b      	ldr	r3, [r3, #4]
 8002fc2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002fc6:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8002fc8:	68fb      	ldr	r3, [r7, #12]
 8002fca:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8002fce:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8002fd0:	68fb      	ldr	r3, [r7, #12]
 8002fd2:	681b      	ldr	r3, [r3, #0]
 8002fd4:	699b      	ldr	r3, [r3, #24]
 8002fd6:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8002fda:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8002fde:	d121      	bne.n	8003024 <I2C_IsErrorOccurred+0xbc>
 8002fe0:	697b      	ldr	r3, [r7, #20]
 8002fe2:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8002fe6:	d01d      	beq.n	8003024 <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 8002fe8:	7cfb      	ldrb	r3, [r7, #19]
 8002fea:	2b20      	cmp	r3, #32
 8002fec:	d01a      	beq.n	8003024 <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8002fee:	68fb      	ldr	r3, [r7, #12]
 8002ff0:	681b      	ldr	r3, [r3, #0]
 8002ff2:	685a      	ldr	r2, [r3, #4]
 8002ff4:	68fb      	ldr	r3, [r7, #12]
 8002ff6:	681b      	ldr	r3, [r3, #0]
 8002ff8:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8002ffc:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8002ffe:	f7fe fbc3 	bl	8001788 <HAL_GetTick>
 8003002:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003004:	e00e      	b.n	8003024 <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8003006:	f7fe fbbf 	bl	8001788 <HAL_GetTick>
 800300a:	4602      	mov	r2, r0
 800300c:	69fb      	ldr	r3, [r7, #28]
 800300e:	1ad3      	subs	r3, r2, r3
 8003010:	2b19      	cmp	r3, #25
 8003012:	d907      	bls.n	8003024 <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 8003014:	6a3b      	ldr	r3, [r7, #32]
 8003016:	f043 0320 	orr.w	r3, r3, #32
 800301a:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 800301c:	2301      	movs	r3, #1
 800301e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

              break;
 8003022:	e006      	b.n	8003032 <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003024:	68fb      	ldr	r3, [r7, #12]
 8003026:	681b      	ldr	r3, [r3, #0]
 8003028:	699b      	ldr	r3, [r3, #24]
 800302a:	f003 0320 	and.w	r3, r3, #32
 800302e:	2b20      	cmp	r3, #32
 8003030:	d1e9      	bne.n	8003006 <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8003032:	68fb      	ldr	r3, [r7, #12]
 8003034:	681b      	ldr	r3, [r3, #0]
 8003036:	699b      	ldr	r3, [r3, #24]
 8003038:	f003 0320 	and.w	r3, r3, #32
 800303c:	2b20      	cmp	r3, #32
 800303e:	d003      	beq.n	8003048 <I2C_IsErrorOccurred+0xe0>
 8003040:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8003044:	2b00      	cmp	r3, #0
 8003046:	d0aa      	beq.n	8002f9e <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8003048:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800304c:	2b00      	cmp	r3, #0
 800304e:	d103      	bne.n	8003058 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003050:	68fb      	ldr	r3, [r7, #12]
 8003052:	681b      	ldr	r3, [r3, #0]
 8003054:	2220      	movs	r2, #32
 8003056:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8003058:	6a3b      	ldr	r3, [r7, #32]
 800305a:	f043 0304 	orr.w	r3, r3, #4
 800305e:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8003060:	2301      	movs	r3, #1
 8003062:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8003066:	68fb      	ldr	r3, [r7, #12]
 8003068:	681b      	ldr	r3, [r3, #0]
 800306a:	699b      	ldr	r3, [r3, #24]
 800306c:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 800306e:	69bb      	ldr	r3, [r7, #24]
 8003070:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003074:	2b00      	cmp	r3, #0
 8003076:	d00b      	beq.n	8003090 <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8003078:	6a3b      	ldr	r3, [r7, #32]
 800307a:	f043 0301 	orr.w	r3, r3, #1
 800307e:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8003080:	68fb      	ldr	r3, [r7, #12]
 8003082:	681b      	ldr	r3, [r3, #0]
 8003084:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8003088:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800308a:	2301      	movs	r3, #1
 800308c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8003090:	69bb      	ldr	r3, [r7, #24]
 8003092:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003096:	2b00      	cmp	r3, #0
 8003098:	d00b      	beq.n	80030b2 <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 800309a:	6a3b      	ldr	r3, [r7, #32]
 800309c:	f043 0308 	orr.w	r3, r3, #8
 80030a0:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 80030a2:	68fb      	ldr	r3, [r7, #12]
 80030a4:	681b      	ldr	r3, [r3, #0]
 80030a6:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80030aa:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80030ac:	2301      	movs	r3, #1
 80030ae:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 80030b2:	69bb      	ldr	r3, [r7, #24]
 80030b4:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80030b8:	2b00      	cmp	r3, #0
 80030ba:	d00b      	beq.n	80030d4 <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 80030bc:	6a3b      	ldr	r3, [r7, #32]
 80030be:	f043 0302 	orr.w	r3, r3, #2
 80030c2:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 80030c4:	68fb      	ldr	r3, [r7, #12]
 80030c6:	681b      	ldr	r3, [r3, #0]
 80030c8:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80030cc:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80030ce:	2301      	movs	r3, #1
 80030d0:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  if (status != HAL_OK)
 80030d4:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80030d8:	2b00      	cmp	r3, #0
 80030da:	d01c      	beq.n	8003116 <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 80030dc:	68f8      	ldr	r0, [r7, #12]
 80030de:	f7ff fe3b 	bl	8002d58 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80030e2:	68fb      	ldr	r3, [r7, #12]
 80030e4:	681b      	ldr	r3, [r3, #0]
 80030e6:	6859      	ldr	r1, [r3, #4]
 80030e8:	68fb      	ldr	r3, [r7, #12]
 80030ea:	681a      	ldr	r2, [r3, #0]
 80030ec:	4b0d      	ldr	r3, [pc, #52]	@ (8003124 <I2C_IsErrorOccurred+0x1bc>)
 80030ee:	400b      	ands	r3, r1
 80030f0:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 80030f2:	68fb      	ldr	r3, [r7, #12]
 80030f4:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80030f6:	6a3b      	ldr	r3, [r7, #32]
 80030f8:	431a      	orrs	r2, r3
 80030fa:	68fb      	ldr	r3, [r7, #12]
 80030fc:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 80030fe:	68fb      	ldr	r3, [r7, #12]
 8003100:	2220      	movs	r2, #32
 8003102:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003106:	68fb      	ldr	r3, [r7, #12]
 8003108:	2200      	movs	r2, #0
 800310a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800310e:	68fb      	ldr	r3, [r7, #12]
 8003110:	2200      	movs	r2, #0
 8003112:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  }

  return status;
 8003116:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 800311a:	4618      	mov	r0, r3
 800311c:	3728      	adds	r7, #40	@ 0x28
 800311e:	46bd      	mov	sp, r7
 8003120:	bd80      	pop	{r7, pc}
 8003122:	bf00      	nop
 8003124:	fe00e800 	.word	0xfe00e800

08003128 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8003128:	b480      	push	{r7}
 800312a:	b087      	sub	sp, #28
 800312c:	af00      	add	r7, sp, #0
 800312e:	60f8      	str	r0, [r7, #12]
 8003130:	607b      	str	r3, [r7, #4]
 8003132:	460b      	mov	r3, r1
 8003134:	817b      	strh	r3, [r7, #10]
 8003136:	4613      	mov	r3, r2
 8003138:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800313a:	897b      	ldrh	r3, [r7, #10]
 800313c:	f3c3 0209 	ubfx	r2, r3, #0, #10
                    (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8003140:	7a7b      	ldrb	r3, [r7, #9]
 8003142:	041b      	lsls	r3, r3, #16
 8003144:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
  tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8003148:	431a      	orrs	r2, r3
                    (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	431a      	orrs	r2, r3
  tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800314e:	6a3b      	ldr	r3, [r7, #32]
 8003150:	4313      	orrs	r3, r2
 8003152:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8003156:	617b      	str	r3, [r7, #20]
                    (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8003158:	68fb      	ldr	r3, [r7, #12]
 800315a:	681b      	ldr	r3, [r3, #0]
 800315c:	685a      	ldr	r2, [r3, #4]
 800315e:	6a3b      	ldr	r3, [r7, #32]
 8003160:	0d5b      	lsrs	r3, r3, #21
 8003162:	f403 6180 	and.w	r1, r3, #1024	@ 0x400
 8003166:	4b08      	ldr	r3, [pc, #32]	@ (8003188 <I2C_TransferConfig+0x60>)
 8003168:	430b      	orrs	r3, r1
 800316a:	43db      	mvns	r3, r3
 800316c:	ea02 0103 	and.w	r1, r2, r3
 8003170:	68fb      	ldr	r3, [r7, #12]
 8003172:	681b      	ldr	r3, [r3, #0]
 8003174:	697a      	ldr	r2, [r7, #20]
 8003176:	430a      	orrs	r2, r1
 8003178:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 800317a:	bf00      	nop
 800317c:	371c      	adds	r7, #28
 800317e:	46bd      	mov	sp, r7
 8003180:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003184:	4770      	bx	lr
 8003186:	bf00      	nop
 8003188:	03ff63ff 	.word	0x03ff63ff

0800318c <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 800318c:	b480      	push	{r7}
 800318e:	b083      	sub	sp, #12
 8003190:	af00      	add	r7, sp, #0
 8003192:	6078      	str	r0, [r7, #4]
 8003194:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800319c:	b2db      	uxtb	r3, r3
 800319e:	2b20      	cmp	r3, #32
 80031a0:	d138      	bne.n	8003214 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80031a8:	2b01      	cmp	r3, #1
 80031aa:	d101      	bne.n	80031b0 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 80031ac:	2302      	movs	r3, #2
 80031ae:	e032      	b.n	8003216 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	2201      	movs	r2, #1
 80031b4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	2224      	movs	r2, #36	@ 0x24
 80031bc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	681b      	ldr	r3, [r3, #0]
 80031c4:	681a      	ldr	r2, [r3, #0]
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	681b      	ldr	r3, [r3, #0]
 80031ca:	f022 0201 	bic.w	r2, r2, #1
 80031ce:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	681b      	ldr	r3, [r3, #0]
 80031d4:	681a      	ldr	r2, [r3, #0]
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	681b      	ldr	r3, [r3, #0]
 80031da:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 80031de:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	681b      	ldr	r3, [r3, #0]
 80031e4:	6819      	ldr	r1, [r3, #0]
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	681b      	ldr	r3, [r3, #0]
 80031ea:	683a      	ldr	r2, [r7, #0]
 80031ec:	430a      	orrs	r2, r1
 80031ee:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	681b      	ldr	r3, [r3, #0]
 80031f4:	681a      	ldr	r2, [r3, #0]
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	681b      	ldr	r3, [r3, #0]
 80031fa:	f042 0201 	orr.w	r2, r2, #1
 80031fe:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	2220      	movs	r2, #32
 8003204:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	2200      	movs	r2, #0
 800320c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8003210:	2300      	movs	r3, #0
 8003212:	e000      	b.n	8003216 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8003214:	2302      	movs	r3, #2
  }
}
 8003216:	4618      	mov	r0, r3
 8003218:	370c      	adds	r7, #12
 800321a:	46bd      	mov	sp, r7
 800321c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003220:	4770      	bx	lr

08003222 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8003222:	b480      	push	{r7}
 8003224:	b085      	sub	sp, #20
 8003226:	af00      	add	r7, sp, #0
 8003228:	6078      	str	r0, [r7, #4]
 800322a:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003232:	b2db      	uxtb	r3, r3
 8003234:	2b20      	cmp	r3, #32
 8003236:	d139      	bne.n	80032ac <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800323e:	2b01      	cmp	r3, #1
 8003240:	d101      	bne.n	8003246 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8003242:	2302      	movs	r3, #2
 8003244:	e033      	b.n	80032ae <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	2201      	movs	r2, #1
 800324a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	2224      	movs	r2, #36	@ 0x24
 8003252:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	681b      	ldr	r3, [r3, #0]
 800325a:	681a      	ldr	r2, [r3, #0]
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	681b      	ldr	r3, [r3, #0]
 8003260:	f022 0201 	bic.w	r2, r2, #1
 8003264:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	681b      	ldr	r3, [r3, #0]
 800326a:	681b      	ldr	r3, [r3, #0]
 800326c:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 800326e:	68fb      	ldr	r3, [r7, #12]
 8003270:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8003274:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8003276:	683b      	ldr	r3, [r7, #0]
 8003278:	021b      	lsls	r3, r3, #8
 800327a:	68fa      	ldr	r2, [r7, #12]
 800327c:	4313      	orrs	r3, r2
 800327e:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	681b      	ldr	r3, [r3, #0]
 8003284:	68fa      	ldr	r2, [r7, #12]
 8003286:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	681b      	ldr	r3, [r3, #0]
 800328c:	681a      	ldr	r2, [r3, #0]
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	681b      	ldr	r3, [r3, #0]
 8003292:	f042 0201 	orr.w	r2, r2, #1
 8003296:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	2220      	movs	r2, #32
 800329c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	2200      	movs	r2, #0
 80032a4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 80032a8:	2300      	movs	r3, #0
 80032aa:	e000      	b.n	80032ae <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 80032ac:	2302      	movs	r3, #2
  }
}
 80032ae:	4618      	mov	r0, r3
 80032b0:	3714      	adds	r7, #20
 80032b2:	46bd      	mov	sp, r7
 80032b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032b8:	4770      	bx	lr
	...

080032bc <HAL_PWREx_ConfigSupply>:
  *         process during startup.
  *         For more details, please refer to the power control chapter in the reference manual
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 80032bc:	b580      	push	{r7, lr}
 80032be:	b084      	sub	sp, #16
 80032c0:	af00      	add	r7, sp, #0
 80032c2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 80032c4:	4b19      	ldr	r3, [pc, #100]	@ (800332c <HAL_PWREx_ConfigSupply+0x70>)
 80032c6:	68db      	ldr	r3, [r3, #12]
 80032c8:	f003 0304 	and.w	r3, r3, #4
 80032cc:	2b04      	cmp	r3, #4
 80032ce:	d00a      	beq.n	80032e6 <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 80032d0:	4b16      	ldr	r3, [pc, #88]	@ (800332c <HAL_PWREx_ConfigSupply+0x70>)
 80032d2:	68db      	ldr	r3, [r3, #12]
 80032d4:	f003 0307 	and.w	r3, r3, #7
 80032d8:	687a      	ldr	r2, [r7, #4]
 80032da:	429a      	cmp	r2, r3
 80032dc:	d001      	beq.n	80032e2 <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 80032de:	2301      	movs	r3, #1
 80032e0:	e01f      	b.n	8003322 <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 80032e2:	2300      	movs	r3, #0
 80032e4:	e01d      	b.n	8003322 <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 80032e6:	4b11      	ldr	r3, [pc, #68]	@ (800332c <HAL_PWREx_ConfigSupply+0x70>)
 80032e8:	68db      	ldr	r3, [r3, #12]
 80032ea:	f023 0207 	bic.w	r2, r3, #7
 80032ee:	490f      	ldr	r1, [pc, #60]	@ (800332c <HAL_PWREx_ConfigSupply+0x70>)
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	4313      	orrs	r3, r2
 80032f4:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 80032f6:	f7fe fa47 	bl	8001788 <HAL_GetTick>
 80032fa:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 80032fc:	e009      	b.n	8003312 <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 80032fe:	f7fe fa43 	bl	8001788 <HAL_GetTick>
 8003302:	4602      	mov	r2, r0
 8003304:	68fb      	ldr	r3, [r7, #12]
 8003306:	1ad3      	subs	r3, r2, r3
 8003308:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800330c:	d901      	bls.n	8003312 <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 800330e:	2301      	movs	r3, #1
 8003310:	e007      	b.n	8003322 <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8003312:	4b06      	ldr	r3, [pc, #24]	@ (800332c <HAL_PWREx_ConfigSupply+0x70>)
 8003314:	685b      	ldr	r3, [r3, #4]
 8003316:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800331a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800331e:	d1ee      	bne.n	80032fe <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8003320:	2300      	movs	r3, #0
}
 8003322:	4618      	mov	r0, r3
 8003324:	3710      	adds	r7, #16
 8003326:	46bd      	mov	sp, r7
 8003328:	bd80      	pop	{r7, pc}
 800332a:	bf00      	nop
 800332c:	58024800 	.word	0x58024800

08003330 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003330:	b580      	push	{r7, lr}
 8003332:	b08c      	sub	sp, #48	@ 0x30
 8003334:	af00      	add	r7, sp, #0
 8003336:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	2b00      	cmp	r3, #0
 800333c:	d101      	bne.n	8003342 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800333e:	2301      	movs	r3, #1
 8003340:	e3c8      	b.n	8003ad4 <HAL_RCC_OscConfig+0x7a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	681b      	ldr	r3, [r3, #0]
 8003346:	f003 0301 	and.w	r3, r3, #1
 800334a:	2b00      	cmp	r3, #0
 800334c:	f000 8087 	beq.w	800345e <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003350:	4b88      	ldr	r3, [pc, #544]	@ (8003574 <HAL_RCC_OscConfig+0x244>)
 8003352:	691b      	ldr	r3, [r3, #16]
 8003354:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8003358:	62fb      	str	r3, [r7, #44]	@ 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800335a:	4b86      	ldr	r3, [pc, #536]	@ (8003574 <HAL_RCC_OscConfig+0x244>)
 800335c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800335e:	62bb      	str	r3, [r7, #40]	@ 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8003360:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003362:	2b10      	cmp	r3, #16
 8003364:	d007      	beq.n	8003376 <HAL_RCC_OscConfig+0x46>
 8003366:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003368:	2b18      	cmp	r3, #24
 800336a:	d110      	bne.n	800338e <HAL_RCC_OscConfig+0x5e>
 800336c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800336e:	f003 0303 	and.w	r3, r3, #3
 8003372:	2b02      	cmp	r3, #2
 8003374:	d10b      	bne.n	800338e <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003376:	4b7f      	ldr	r3, [pc, #508]	@ (8003574 <HAL_RCC_OscConfig+0x244>)
 8003378:	681b      	ldr	r3, [r3, #0]
 800337a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800337e:	2b00      	cmp	r3, #0
 8003380:	d06c      	beq.n	800345c <HAL_RCC_OscConfig+0x12c>
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	685b      	ldr	r3, [r3, #4]
 8003386:	2b00      	cmp	r3, #0
 8003388:	d168      	bne.n	800345c <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800338a:	2301      	movs	r3, #1
 800338c:	e3a2      	b.n	8003ad4 <HAL_RCC_OscConfig+0x7a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	685b      	ldr	r3, [r3, #4]
 8003392:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003396:	d106      	bne.n	80033a6 <HAL_RCC_OscConfig+0x76>
 8003398:	4b76      	ldr	r3, [pc, #472]	@ (8003574 <HAL_RCC_OscConfig+0x244>)
 800339a:	681b      	ldr	r3, [r3, #0]
 800339c:	4a75      	ldr	r2, [pc, #468]	@ (8003574 <HAL_RCC_OscConfig+0x244>)
 800339e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80033a2:	6013      	str	r3, [r2, #0]
 80033a4:	e02e      	b.n	8003404 <HAL_RCC_OscConfig+0xd4>
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	685b      	ldr	r3, [r3, #4]
 80033aa:	2b00      	cmp	r3, #0
 80033ac:	d10c      	bne.n	80033c8 <HAL_RCC_OscConfig+0x98>
 80033ae:	4b71      	ldr	r3, [pc, #452]	@ (8003574 <HAL_RCC_OscConfig+0x244>)
 80033b0:	681b      	ldr	r3, [r3, #0]
 80033b2:	4a70      	ldr	r2, [pc, #448]	@ (8003574 <HAL_RCC_OscConfig+0x244>)
 80033b4:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80033b8:	6013      	str	r3, [r2, #0]
 80033ba:	4b6e      	ldr	r3, [pc, #440]	@ (8003574 <HAL_RCC_OscConfig+0x244>)
 80033bc:	681b      	ldr	r3, [r3, #0]
 80033be:	4a6d      	ldr	r2, [pc, #436]	@ (8003574 <HAL_RCC_OscConfig+0x244>)
 80033c0:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80033c4:	6013      	str	r3, [r2, #0]
 80033c6:	e01d      	b.n	8003404 <HAL_RCC_OscConfig+0xd4>
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	685b      	ldr	r3, [r3, #4]
 80033cc:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80033d0:	d10c      	bne.n	80033ec <HAL_RCC_OscConfig+0xbc>
 80033d2:	4b68      	ldr	r3, [pc, #416]	@ (8003574 <HAL_RCC_OscConfig+0x244>)
 80033d4:	681b      	ldr	r3, [r3, #0]
 80033d6:	4a67      	ldr	r2, [pc, #412]	@ (8003574 <HAL_RCC_OscConfig+0x244>)
 80033d8:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80033dc:	6013      	str	r3, [r2, #0]
 80033de:	4b65      	ldr	r3, [pc, #404]	@ (8003574 <HAL_RCC_OscConfig+0x244>)
 80033e0:	681b      	ldr	r3, [r3, #0]
 80033e2:	4a64      	ldr	r2, [pc, #400]	@ (8003574 <HAL_RCC_OscConfig+0x244>)
 80033e4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80033e8:	6013      	str	r3, [r2, #0]
 80033ea:	e00b      	b.n	8003404 <HAL_RCC_OscConfig+0xd4>
 80033ec:	4b61      	ldr	r3, [pc, #388]	@ (8003574 <HAL_RCC_OscConfig+0x244>)
 80033ee:	681b      	ldr	r3, [r3, #0]
 80033f0:	4a60      	ldr	r2, [pc, #384]	@ (8003574 <HAL_RCC_OscConfig+0x244>)
 80033f2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80033f6:	6013      	str	r3, [r2, #0]
 80033f8:	4b5e      	ldr	r3, [pc, #376]	@ (8003574 <HAL_RCC_OscConfig+0x244>)
 80033fa:	681b      	ldr	r3, [r3, #0]
 80033fc:	4a5d      	ldr	r2, [pc, #372]	@ (8003574 <HAL_RCC_OscConfig+0x244>)
 80033fe:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003402:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	685b      	ldr	r3, [r3, #4]
 8003408:	2b00      	cmp	r3, #0
 800340a:	d013      	beq.n	8003434 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800340c:	f7fe f9bc 	bl	8001788 <HAL_GetTick>
 8003410:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8003412:	e008      	b.n	8003426 <HAL_RCC_OscConfig+0xf6>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003414:	f7fe f9b8 	bl	8001788 <HAL_GetTick>
 8003418:	4602      	mov	r2, r0
 800341a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800341c:	1ad3      	subs	r3, r2, r3
 800341e:	2b64      	cmp	r3, #100	@ 0x64
 8003420:	d901      	bls.n	8003426 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8003422:	2303      	movs	r3, #3
 8003424:	e356      	b.n	8003ad4 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8003426:	4b53      	ldr	r3, [pc, #332]	@ (8003574 <HAL_RCC_OscConfig+0x244>)
 8003428:	681b      	ldr	r3, [r3, #0]
 800342a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800342e:	2b00      	cmp	r3, #0
 8003430:	d0f0      	beq.n	8003414 <HAL_RCC_OscConfig+0xe4>
 8003432:	e014      	b.n	800345e <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003434:	f7fe f9a8 	bl	8001788 <HAL_GetTick>
 8003438:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800343a:	e008      	b.n	800344e <HAL_RCC_OscConfig+0x11e>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800343c:	f7fe f9a4 	bl	8001788 <HAL_GetTick>
 8003440:	4602      	mov	r2, r0
 8003442:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003444:	1ad3      	subs	r3, r2, r3
 8003446:	2b64      	cmp	r3, #100	@ 0x64
 8003448:	d901      	bls.n	800344e <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800344a:	2303      	movs	r3, #3
 800344c:	e342      	b.n	8003ad4 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800344e:	4b49      	ldr	r3, [pc, #292]	@ (8003574 <HAL_RCC_OscConfig+0x244>)
 8003450:	681b      	ldr	r3, [r3, #0]
 8003452:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003456:	2b00      	cmp	r3, #0
 8003458:	d1f0      	bne.n	800343c <HAL_RCC_OscConfig+0x10c>
 800345a:	e000      	b.n	800345e <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800345c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	681b      	ldr	r3, [r3, #0]
 8003462:	f003 0302 	and.w	r3, r3, #2
 8003466:	2b00      	cmp	r3, #0
 8003468:	f000 808c 	beq.w	8003584 <HAL_RCC_OscConfig+0x254>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800346c:	4b41      	ldr	r3, [pc, #260]	@ (8003574 <HAL_RCC_OscConfig+0x244>)
 800346e:	691b      	ldr	r3, [r3, #16]
 8003470:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8003474:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8003476:	4b3f      	ldr	r3, [pc, #252]	@ (8003574 <HAL_RCC_OscConfig+0x244>)
 8003478:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800347a:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 800347c:	6a3b      	ldr	r3, [r7, #32]
 800347e:	2b00      	cmp	r3, #0
 8003480:	d007      	beq.n	8003492 <HAL_RCC_OscConfig+0x162>
 8003482:	6a3b      	ldr	r3, [r7, #32]
 8003484:	2b18      	cmp	r3, #24
 8003486:	d137      	bne.n	80034f8 <HAL_RCC_OscConfig+0x1c8>
 8003488:	69fb      	ldr	r3, [r7, #28]
 800348a:	f003 0303 	and.w	r3, r3, #3
 800348e:	2b00      	cmp	r3, #0
 8003490:	d132      	bne.n	80034f8 <HAL_RCC_OscConfig+0x1c8>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003492:	4b38      	ldr	r3, [pc, #224]	@ (8003574 <HAL_RCC_OscConfig+0x244>)
 8003494:	681b      	ldr	r3, [r3, #0]
 8003496:	f003 0304 	and.w	r3, r3, #4
 800349a:	2b00      	cmp	r3, #0
 800349c:	d005      	beq.n	80034aa <HAL_RCC_OscConfig+0x17a>
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	68db      	ldr	r3, [r3, #12]
 80034a2:	2b00      	cmp	r3, #0
 80034a4:	d101      	bne.n	80034aa <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 80034a6:	2301      	movs	r3, #1
 80034a8:	e314      	b.n	8003ad4 <HAL_RCC_OscConfig+0x7a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 80034aa:	4b32      	ldr	r3, [pc, #200]	@ (8003574 <HAL_RCC_OscConfig+0x244>)
 80034ac:	681b      	ldr	r3, [r3, #0]
 80034ae:	f023 0219 	bic.w	r2, r3, #25
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	68db      	ldr	r3, [r3, #12]
 80034b6:	492f      	ldr	r1, [pc, #188]	@ (8003574 <HAL_RCC_OscConfig+0x244>)
 80034b8:	4313      	orrs	r3, r2
 80034ba:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80034bc:	f7fe f964 	bl	8001788 <HAL_GetTick>
 80034c0:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80034c2:	e008      	b.n	80034d6 <HAL_RCC_OscConfig+0x1a6>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80034c4:	f7fe f960 	bl	8001788 <HAL_GetTick>
 80034c8:	4602      	mov	r2, r0
 80034ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80034cc:	1ad3      	subs	r3, r2, r3
 80034ce:	2b02      	cmp	r3, #2
 80034d0:	d901      	bls.n	80034d6 <HAL_RCC_OscConfig+0x1a6>
          {
            return HAL_TIMEOUT;
 80034d2:	2303      	movs	r3, #3
 80034d4:	e2fe      	b.n	8003ad4 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80034d6:	4b27      	ldr	r3, [pc, #156]	@ (8003574 <HAL_RCC_OscConfig+0x244>)
 80034d8:	681b      	ldr	r3, [r3, #0]
 80034da:	f003 0304 	and.w	r3, r3, #4
 80034de:	2b00      	cmp	r3, #0
 80034e0:	d0f0      	beq.n	80034c4 <HAL_RCC_OscConfig+0x194>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80034e2:	4b24      	ldr	r3, [pc, #144]	@ (8003574 <HAL_RCC_OscConfig+0x244>)
 80034e4:	685b      	ldr	r3, [r3, #4]
 80034e6:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	691b      	ldr	r3, [r3, #16]
 80034ee:	061b      	lsls	r3, r3, #24
 80034f0:	4920      	ldr	r1, [pc, #128]	@ (8003574 <HAL_RCC_OscConfig+0x244>)
 80034f2:	4313      	orrs	r3, r2
 80034f4:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80034f6:	e045      	b.n	8003584 <HAL_RCC_OscConfig+0x254>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	68db      	ldr	r3, [r3, #12]
 80034fc:	2b00      	cmp	r3, #0
 80034fe:	d026      	beq.n	800354e <HAL_RCC_OscConfig+0x21e>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8003500:	4b1c      	ldr	r3, [pc, #112]	@ (8003574 <HAL_RCC_OscConfig+0x244>)
 8003502:	681b      	ldr	r3, [r3, #0]
 8003504:	f023 0219 	bic.w	r2, r3, #25
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	68db      	ldr	r3, [r3, #12]
 800350c:	4919      	ldr	r1, [pc, #100]	@ (8003574 <HAL_RCC_OscConfig+0x244>)
 800350e:	4313      	orrs	r3, r2
 8003510:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003512:	f7fe f939 	bl	8001788 <HAL_GetTick>
 8003516:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8003518:	e008      	b.n	800352c <HAL_RCC_OscConfig+0x1fc>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800351a:	f7fe f935 	bl	8001788 <HAL_GetTick>
 800351e:	4602      	mov	r2, r0
 8003520:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003522:	1ad3      	subs	r3, r2, r3
 8003524:	2b02      	cmp	r3, #2
 8003526:	d901      	bls.n	800352c <HAL_RCC_OscConfig+0x1fc>
          {
            return HAL_TIMEOUT;
 8003528:	2303      	movs	r3, #3
 800352a:	e2d3      	b.n	8003ad4 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800352c:	4b11      	ldr	r3, [pc, #68]	@ (8003574 <HAL_RCC_OscConfig+0x244>)
 800352e:	681b      	ldr	r3, [r3, #0]
 8003530:	f003 0304 	and.w	r3, r3, #4
 8003534:	2b00      	cmp	r3, #0
 8003536:	d0f0      	beq.n	800351a <HAL_RCC_OscConfig+0x1ea>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003538:	4b0e      	ldr	r3, [pc, #56]	@ (8003574 <HAL_RCC_OscConfig+0x244>)
 800353a:	685b      	ldr	r3, [r3, #4]
 800353c:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	691b      	ldr	r3, [r3, #16]
 8003544:	061b      	lsls	r3, r3, #24
 8003546:	490b      	ldr	r1, [pc, #44]	@ (8003574 <HAL_RCC_OscConfig+0x244>)
 8003548:	4313      	orrs	r3, r2
 800354a:	604b      	str	r3, [r1, #4]
 800354c:	e01a      	b.n	8003584 <HAL_RCC_OscConfig+0x254>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800354e:	4b09      	ldr	r3, [pc, #36]	@ (8003574 <HAL_RCC_OscConfig+0x244>)
 8003550:	681b      	ldr	r3, [r3, #0]
 8003552:	4a08      	ldr	r2, [pc, #32]	@ (8003574 <HAL_RCC_OscConfig+0x244>)
 8003554:	f023 0301 	bic.w	r3, r3, #1
 8003558:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800355a:	f7fe f915 	bl	8001788 <HAL_GetTick>
 800355e:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8003560:	e00a      	b.n	8003578 <HAL_RCC_OscConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003562:	f7fe f911 	bl	8001788 <HAL_GetTick>
 8003566:	4602      	mov	r2, r0
 8003568:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800356a:	1ad3      	subs	r3, r2, r3
 800356c:	2b02      	cmp	r3, #2
 800356e:	d903      	bls.n	8003578 <HAL_RCC_OscConfig+0x248>
          {
            return HAL_TIMEOUT;
 8003570:	2303      	movs	r3, #3
 8003572:	e2af      	b.n	8003ad4 <HAL_RCC_OscConfig+0x7a4>
 8003574:	58024400 	.word	0x58024400
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8003578:	4b96      	ldr	r3, [pc, #600]	@ (80037d4 <HAL_RCC_OscConfig+0x4a4>)
 800357a:	681b      	ldr	r3, [r3, #0]
 800357c:	f003 0304 	and.w	r3, r3, #4
 8003580:	2b00      	cmp	r3, #0
 8003582:	d1ee      	bne.n	8003562 <HAL_RCC_OscConfig+0x232>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	681b      	ldr	r3, [r3, #0]
 8003588:	f003 0310 	and.w	r3, r3, #16
 800358c:	2b00      	cmp	r3, #0
 800358e:	d06a      	beq.n	8003666 <HAL_RCC_OscConfig+0x336>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003590:	4b90      	ldr	r3, [pc, #576]	@ (80037d4 <HAL_RCC_OscConfig+0x4a4>)
 8003592:	691b      	ldr	r3, [r3, #16]
 8003594:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8003598:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800359a:	4b8e      	ldr	r3, [pc, #568]	@ (80037d4 <HAL_RCC_OscConfig+0x4a4>)
 800359c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800359e:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 80035a0:	69bb      	ldr	r3, [r7, #24]
 80035a2:	2b08      	cmp	r3, #8
 80035a4:	d007      	beq.n	80035b6 <HAL_RCC_OscConfig+0x286>
 80035a6:	69bb      	ldr	r3, [r7, #24]
 80035a8:	2b18      	cmp	r3, #24
 80035aa:	d11b      	bne.n	80035e4 <HAL_RCC_OscConfig+0x2b4>
 80035ac:	697b      	ldr	r3, [r7, #20]
 80035ae:	f003 0303 	and.w	r3, r3, #3
 80035b2:	2b01      	cmp	r3, #1
 80035b4:	d116      	bne.n	80035e4 <HAL_RCC_OscConfig+0x2b4>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80035b6:	4b87      	ldr	r3, [pc, #540]	@ (80037d4 <HAL_RCC_OscConfig+0x4a4>)
 80035b8:	681b      	ldr	r3, [r3, #0]
 80035ba:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80035be:	2b00      	cmp	r3, #0
 80035c0:	d005      	beq.n	80035ce <HAL_RCC_OscConfig+0x29e>
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	69db      	ldr	r3, [r3, #28]
 80035c6:	2b80      	cmp	r3, #128	@ 0x80
 80035c8:	d001      	beq.n	80035ce <HAL_RCC_OscConfig+0x29e>
      {
        return HAL_ERROR;
 80035ca:	2301      	movs	r3, #1
 80035cc:	e282      	b.n	8003ad4 <HAL_RCC_OscConfig+0x7a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80035ce:	4b81      	ldr	r3, [pc, #516]	@ (80037d4 <HAL_RCC_OscConfig+0x4a4>)
 80035d0:	68db      	ldr	r3, [r3, #12]
 80035d2:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	6a1b      	ldr	r3, [r3, #32]
 80035da:	061b      	lsls	r3, r3, #24
 80035dc:	497d      	ldr	r1, [pc, #500]	@ (80037d4 <HAL_RCC_OscConfig+0x4a4>)
 80035de:	4313      	orrs	r3, r2
 80035e0:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80035e2:	e040      	b.n	8003666 <HAL_RCC_OscConfig+0x336>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	69db      	ldr	r3, [r3, #28]
 80035e8:	2b00      	cmp	r3, #0
 80035ea:	d023      	beq.n	8003634 <HAL_RCC_OscConfig+0x304>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 80035ec:	4b79      	ldr	r3, [pc, #484]	@ (80037d4 <HAL_RCC_OscConfig+0x4a4>)
 80035ee:	681b      	ldr	r3, [r3, #0]
 80035f0:	4a78      	ldr	r2, [pc, #480]	@ (80037d4 <HAL_RCC_OscConfig+0x4a4>)
 80035f2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80035f6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80035f8:	f7fe f8c6 	bl	8001788 <HAL_GetTick>
 80035fc:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80035fe:	e008      	b.n	8003612 <HAL_RCC_OscConfig+0x2e2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8003600:	f7fe f8c2 	bl	8001788 <HAL_GetTick>
 8003604:	4602      	mov	r2, r0
 8003606:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003608:	1ad3      	subs	r3, r2, r3
 800360a:	2b02      	cmp	r3, #2
 800360c:	d901      	bls.n	8003612 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 800360e:	2303      	movs	r3, #3
 8003610:	e260      	b.n	8003ad4 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8003612:	4b70      	ldr	r3, [pc, #448]	@ (80037d4 <HAL_RCC_OscConfig+0x4a4>)
 8003614:	681b      	ldr	r3, [r3, #0]
 8003616:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800361a:	2b00      	cmp	r3, #0
 800361c:	d0f0      	beq.n	8003600 <HAL_RCC_OscConfig+0x2d0>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800361e:	4b6d      	ldr	r3, [pc, #436]	@ (80037d4 <HAL_RCC_OscConfig+0x4a4>)
 8003620:	68db      	ldr	r3, [r3, #12]
 8003622:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	6a1b      	ldr	r3, [r3, #32]
 800362a:	061b      	lsls	r3, r3, #24
 800362c:	4969      	ldr	r1, [pc, #420]	@ (80037d4 <HAL_RCC_OscConfig+0x4a4>)
 800362e:	4313      	orrs	r3, r2
 8003630:	60cb      	str	r3, [r1, #12]
 8003632:	e018      	b.n	8003666 <HAL_RCC_OscConfig+0x336>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8003634:	4b67      	ldr	r3, [pc, #412]	@ (80037d4 <HAL_RCC_OscConfig+0x4a4>)
 8003636:	681b      	ldr	r3, [r3, #0]
 8003638:	4a66      	ldr	r2, [pc, #408]	@ (80037d4 <HAL_RCC_OscConfig+0x4a4>)
 800363a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800363e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003640:	f7fe f8a2 	bl	8001788 <HAL_GetTick>
 8003644:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8003646:	e008      	b.n	800365a <HAL_RCC_OscConfig+0x32a>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8003648:	f7fe f89e 	bl	8001788 <HAL_GetTick>
 800364c:	4602      	mov	r2, r0
 800364e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003650:	1ad3      	subs	r3, r2, r3
 8003652:	2b02      	cmp	r3, #2
 8003654:	d901      	bls.n	800365a <HAL_RCC_OscConfig+0x32a>
          {
            return HAL_TIMEOUT;
 8003656:	2303      	movs	r3, #3
 8003658:	e23c      	b.n	8003ad4 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 800365a:	4b5e      	ldr	r3, [pc, #376]	@ (80037d4 <HAL_RCC_OscConfig+0x4a4>)
 800365c:	681b      	ldr	r3, [r3, #0]
 800365e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003662:	2b00      	cmp	r3, #0
 8003664:	d1f0      	bne.n	8003648 <HAL_RCC_OscConfig+0x318>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	681b      	ldr	r3, [r3, #0]
 800366a:	f003 0308 	and.w	r3, r3, #8
 800366e:	2b00      	cmp	r3, #0
 8003670:	d036      	beq.n	80036e0 <HAL_RCC_OscConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	695b      	ldr	r3, [r3, #20]
 8003676:	2b00      	cmp	r3, #0
 8003678:	d019      	beq.n	80036ae <HAL_RCC_OscConfig+0x37e>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800367a:	4b56      	ldr	r3, [pc, #344]	@ (80037d4 <HAL_RCC_OscConfig+0x4a4>)
 800367c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800367e:	4a55      	ldr	r2, [pc, #340]	@ (80037d4 <HAL_RCC_OscConfig+0x4a4>)
 8003680:	f043 0301 	orr.w	r3, r3, #1
 8003684:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003686:	f7fe f87f 	bl	8001788 <HAL_GetTick>
 800368a:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800368c:	e008      	b.n	80036a0 <HAL_RCC_OscConfig+0x370>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800368e:	f7fe f87b 	bl	8001788 <HAL_GetTick>
 8003692:	4602      	mov	r2, r0
 8003694:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003696:	1ad3      	subs	r3, r2, r3
 8003698:	2b02      	cmp	r3, #2
 800369a:	d901      	bls.n	80036a0 <HAL_RCC_OscConfig+0x370>
        {
          return HAL_TIMEOUT;
 800369c:	2303      	movs	r3, #3
 800369e:	e219      	b.n	8003ad4 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80036a0:	4b4c      	ldr	r3, [pc, #304]	@ (80037d4 <HAL_RCC_OscConfig+0x4a4>)
 80036a2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80036a4:	f003 0302 	and.w	r3, r3, #2
 80036a8:	2b00      	cmp	r3, #0
 80036aa:	d0f0      	beq.n	800368e <HAL_RCC_OscConfig+0x35e>
 80036ac:	e018      	b.n	80036e0 <HAL_RCC_OscConfig+0x3b0>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80036ae:	4b49      	ldr	r3, [pc, #292]	@ (80037d4 <HAL_RCC_OscConfig+0x4a4>)
 80036b0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80036b2:	4a48      	ldr	r2, [pc, #288]	@ (80037d4 <HAL_RCC_OscConfig+0x4a4>)
 80036b4:	f023 0301 	bic.w	r3, r3, #1
 80036b8:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80036ba:	f7fe f865 	bl	8001788 <HAL_GetTick>
 80036be:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80036c0:	e008      	b.n	80036d4 <HAL_RCC_OscConfig+0x3a4>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80036c2:	f7fe f861 	bl	8001788 <HAL_GetTick>
 80036c6:	4602      	mov	r2, r0
 80036c8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80036ca:	1ad3      	subs	r3, r2, r3
 80036cc:	2b02      	cmp	r3, #2
 80036ce:	d901      	bls.n	80036d4 <HAL_RCC_OscConfig+0x3a4>
        {
          return HAL_TIMEOUT;
 80036d0:	2303      	movs	r3, #3
 80036d2:	e1ff      	b.n	8003ad4 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80036d4:	4b3f      	ldr	r3, [pc, #252]	@ (80037d4 <HAL_RCC_OscConfig+0x4a4>)
 80036d6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80036d8:	f003 0302 	and.w	r3, r3, #2
 80036dc:	2b00      	cmp	r3, #0
 80036de:	d1f0      	bne.n	80036c2 <HAL_RCC_OscConfig+0x392>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	681b      	ldr	r3, [r3, #0]
 80036e4:	f003 0320 	and.w	r3, r3, #32
 80036e8:	2b00      	cmp	r3, #0
 80036ea:	d036      	beq.n	800375a <HAL_RCC_OscConfig+0x42a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	699b      	ldr	r3, [r3, #24]
 80036f0:	2b00      	cmp	r3, #0
 80036f2:	d019      	beq.n	8003728 <HAL_RCC_OscConfig+0x3f8>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80036f4:	4b37      	ldr	r3, [pc, #220]	@ (80037d4 <HAL_RCC_OscConfig+0x4a4>)
 80036f6:	681b      	ldr	r3, [r3, #0]
 80036f8:	4a36      	ldr	r2, [pc, #216]	@ (80037d4 <HAL_RCC_OscConfig+0x4a4>)
 80036fa:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 80036fe:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8003700:	f7fe f842 	bl	8001788 <HAL_GetTick>
 8003704:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8003706:	e008      	b.n	800371a <HAL_RCC_OscConfig+0x3ea>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003708:	f7fe f83e 	bl	8001788 <HAL_GetTick>
 800370c:	4602      	mov	r2, r0
 800370e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003710:	1ad3      	subs	r3, r2, r3
 8003712:	2b02      	cmp	r3, #2
 8003714:	d901      	bls.n	800371a <HAL_RCC_OscConfig+0x3ea>
        {
          return HAL_TIMEOUT;
 8003716:	2303      	movs	r3, #3
 8003718:	e1dc      	b.n	8003ad4 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 800371a:	4b2e      	ldr	r3, [pc, #184]	@ (80037d4 <HAL_RCC_OscConfig+0x4a4>)
 800371c:	681b      	ldr	r3, [r3, #0]
 800371e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8003722:	2b00      	cmp	r3, #0
 8003724:	d0f0      	beq.n	8003708 <HAL_RCC_OscConfig+0x3d8>
 8003726:	e018      	b.n	800375a <HAL_RCC_OscConfig+0x42a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8003728:	4b2a      	ldr	r3, [pc, #168]	@ (80037d4 <HAL_RCC_OscConfig+0x4a4>)
 800372a:	681b      	ldr	r3, [r3, #0]
 800372c:	4a29      	ldr	r2, [pc, #164]	@ (80037d4 <HAL_RCC_OscConfig+0x4a4>)
 800372e:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8003732:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8003734:	f7fe f828 	bl	8001788 <HAL_GetTick>
 8003738:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800373a:	e008      	b.n	800374e <HAL_RCC_OscConfig+0x41e>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800373c:	f7fe f824 	bl	8001788 <HAL_GetTick>
 8003740:	4602      	mov	r2, r0
 8003742:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003744:	1ad3      	subs	r3, r2, r3
 8003746:	2b02      	cmp	r3, #2
 8003748:	d901      	bls.n	800374e <HAL_RCC_OscConfig+0x41e>
        {
          return HAL_TIMEOUT;
 800374a:	2303      	movs	r3, #3
 800374c:	e1c2      	b.n	8003ad4 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800374e:	4b21      	ldr	r3, [pc, #132]	@ (80037d4 <HAL_RCC_OscConfig+0x4a4>)
 8003750:	681b      	ldr	r3, [r3, #0]
 8003752:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8003756:	2b00      	cmp	r3, #0
 8003758:	d1f0      	bne.n	800373c <HAL_RCC_OscConfig+0x40c>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	681b      	ldr	r3, [r3, #0]
 800375e:	f003 0304 	and.w	r3, r3, #4
 8003762:	2b00      	cmp	r3, #0
 8003764:	f000 8086 	beq.w	8003874 <HAL_RCC_OscConfig+0x544>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8003768:	4b1b      	ldr	r3, [pc, #108]	@ (80037d8 <HAL_RCC_OscConfig+0x4a8>)
 800376a:	681b      	ldr	r3, [r3, #0]
 800376c:	4a1a      	ldr	r2, [pc, #104]	@ (80037d8 <HAL_RCC_OscConfig+0x4a8>)
 800376e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003772:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003774:	f7fe f808 	bl	8001788 <HAL_GetTick>
 8003778:	6278      	str	r0, [r7, #36]	@ 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800377a:	e008      	b.n	800378e <HAL_RCC_OscConfig+0x45e>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800377c:	f7fe f804 	bl	8001788 <HAL_GetTick>
 8003780:	4602      	mov	r2, r0
 8003782:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003784:	1ad3      	subs	r3, r2, r3
 8003786:	2b64      	cmp	r3, #100	@ 0x64
 8003788:	d901      	bls.n	800378e <HAL_RCC_OscConfig+0x45e>
      {
        return HAL_TIMEOUT;
 800378a:	2303      	movs	r3, #3
 800378c:	e1a2      	b.n	8003ad4 <HAL_RCC_OscConfig+0x7a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800378e:	4b12      	ldr	r3, [pc, #72]	@ (80037d8 <HAL_RCC_OscConfig+0x4a8>)
 8003790:	681b      	ldr	r3, [r3, #0]
 8003792:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003796:	2b00      	cmp	r3, #0
 8003798:	d0f0      	beq.n	800377c <HAL_RCC_OscConfig+0x44c>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	689b      	ldr	r3, [r3, #8]
 800379e:	2b01      	cmp	r3, #1
 80037a0:	d106      	bne.n	80037b0 <HAL_RCC_OscConfig+0x480>
 80037a2:	4b0c      	ldr	r3, [pc, #48]	@ (80037d4 <HAL_RCC_OscConfig+0x4a4>)
 80037a4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80037a6:	4a0b      	ldr	r2, [pc, #44]	@ (80037d4 <HAL_RCC_OscConfig+0x4a4>)
 80037a8:	f043 0301 	orr.w	r3, r3, #1
 80037ac:	6713      	str	r3, [r2, #112]	@ 0x70
 80037ae:	e032      	b.n	8003816 <HAL_RCC_OscConfig+0x4e6>
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	689b      	ldr	r3, [r3, #8]
 80037b4:	2b00      	cmp	r3, #0
 80037b6:	d111      	bne.n	80037dc <HAL_RCC_OscConfig+0x4ac>
 80037b8:	4b06      	ldr	r3, [pc, #24]	@ (80037d4 <HAL_RCC_OscConfig+0x4a4>)
 80037ba:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80037bc:	4a05      	ldr	r2, [pc, #20]	@ (80037d4 <HAL_RCC_OscConfig+0x4a4>)
 80037be:	f023 0301 	bic.w	r3, r3, #1
 80037c2:	6713      	str	r3, [r2, #112]	@ 0x70
 80037c4:	4b03      	ldr	r3, [pc, #12]	@ (80037d4 <HAL_RCC_OscConfig+0x4a4>)
 80037c6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80037c8:	4a02      	ldr	r2, [pc, #8]	@ (80037d4 <HAL_RCC_OscConfig+0x4a4>)
 80037ca:	f023 0304 	bic.w	r3, r3, #4
 80037ce:	6713      	str	r3, [r2, #112]	@ 0x70
 80037d0:	e021      	b.n	8003816 <HAL_RCC_OscConfig+0x4e6>
 80037d2:	bf00      	nop
 80037d4:	58024400 	.word	0x58024400
 80037d8:	58024800 	.word	0x58024800
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	689b      	ldr	r3, [r3, #8]
 80037e0:	2b05      	cmp	r3, #5
 80037e2:	d10c      	bne.n	80037fe <HAL_RCC_OscConfig+0x4ce>
 80037e4:	4b83      	ldr	r3, [pc, #524]	@ (80039f4 <HAL_RCC_OscConfig+0x6c4>)
 80037e6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80037e8:	4a82      	ldr	r2, [pc, #520]	@ (80039f4 <HAL_RCC_OscConfig+0x6c4>)
 80037ea:	f043 0304 	orr.w	r3, r3, #4
 80037ee:	6713      	str	r3, [r2, #112]	@ 0x70
 80037f0:	4b80      	ldr	r3, [pc, #512]	@ (80039f4 <HAL_RCC_OscConfig+0x6c4>)
 80037f2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80037f4:	4a7f      	ldr	r2, [pc, #508]	@ (80039f4 <HAL_RCC_OscConfig+0x6c4>)
 80037f6:	f043 0301 	orr.w	r3, r3, #1
 80037fa:	6713      	str	r3, [r2, #112]	@ 0x70
 80037fc:	e00b      	b.n	8003816 <HAL_RCC_OscConfig+0x4e6>
 80037fe:	4b7d      	ldr	r3, [pc, #500]	@ (80039f4 <HAL_RCC_OscConfig+0x6c4>)
 8003800:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003802:	4a7c      	ldr	r2, [pc, #496]	@ (80039f4 <HAL_RCC_OscConfig+0x6c4>)
 8003804:	f023 0301 	bic.w	r3, r3, #1
 8003808:	6713      	str	r3, [r2, #112]	@ 0x70
 800380a:	4b7a      	ldr	r3, [pc, #488]	@ (80039f4 <HAL_RCC_OscConfig+0x6c4>)
 800380c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800380e:	4a79      	ldr	r2, [pc, #484]	@ (80039f4 <HAL_RCC_OscConfig+0x6c4>)
 8003810:	f023 0304 	bic.w	r3, r3, #4
 8003814:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	689b      	ldr	r3, [r3, #8]
 800381a:	2b00      	cmp	r3, #0
 800381c:	d015      	beq.n	800384a <HAL_RCC_OscConfig+0x51a>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800381e:	f7fd ffb3 	bl	8001788 <HAL_GetTick>
 8003822:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003824:	e00a      	b.n	800383c <HAL_RCC_OscConfig+0x50c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003826:	f7fd ffaf 	bl	8001788 <HAL_GetTick>
 800382a:	4602      	mov	r2, r0
 800382c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800382e:	1ad3      	subs	r3, r2, r3
 8003830:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003834:	4293      	cmp	r3, r2
 8003836:	d901      	bls.n	800383c <HAL_RCC_OscConfig+0x50c>
        {
          return HAL_TIMEOUT;
 8003838:	2303      	movs	r3, #3
 800383a:	e14b      	b.n	8003ad4 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800383c:	4b6d      	ldr	r3, [pc, #436]	@ (80039f4 <HAL_RCC_OscConfig+0x6c4>)
 800383e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003840:	f003 0302 	and.w	r3, r3, #2
 8003844:	2b00      	cmp	r3, #0
 8003846:	d0ee      	beq.n	8003826 <HAL_RCC_OscConfig+0x4f6>
 8003848:	e014      	b.n	8003874 <HAL_RCC_OscConfig+0x544>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800384a:	f7fd ff9d 	bl	8001788 <HAL_GetTick>
 800384e:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8003850:	e00a      	b.n	8003868 <HAL_RCC_OscConfig+0x538>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003852:	f7fd ff99 	bl	8001788 <HAL_GetTick>
 8003856:	4602      	mov	r2, r0
 8003858:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800385a:	1ad3      	subs	r3, r2, r3
 800385c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003860:	4293      	cmp	r3, r2
 8003862:	d901      	bls.n	8003868 <HAL_RCC_OscConfig+0x538>
        {
          return HAL_TIMEOUT;
 8003864:	2303      	movs	r3, #3
 8003866:	e135      	b.n	8003ad4 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8003868:	4b62      	ldr	r3, [pc, #392]	@ (80039f4 <HAL_RCC_OscConfig+0x6c4>)
 800386a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800386c:	f003 0302 	and.w	r3, r3, #2
 8003870:	2b00      	cmp	r3, #0
 8003872:	d1ee      	bne.n	8003852 <HAL_RCC_OscConfig+0x522>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003878:	2b00      	cmp	r3, #0
 800387a:	f000 812a 	beq.w	8003ad2 <HAL_RCC_OscConfig+0x7a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 800387e:	4b5d      	ldr	r3, [pc, #372]	@ (80039f4 <HAL_RCC_OscConfig+0x6c4>)
 8003880:	691b      	ldr	r3, [r3, #16]
 8003882:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8003886:	2b18      	cmp	r3, #24
 8003888:	f000 80ba 	beq.w	8003a00 <HAL_RCC_OscConfig+0x6d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003890:	2b02      	cmp	r3, #2
 8003892:	f040 8095 	bne.w	80039c0 <HAL_RCC_OscConfig+0x690>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003896:	4b57      	ldr	r3, [pc, #348]	@ (80039f4 <HAL_RCC_OscConfig+0x6c4>)
 8003898:	681b      	ldr	r3, [r3, #0]
 800389a:	4a56      	ldr	r2, [pc, #344]	@ (80039f4 <HAL_RCC_OscConfig+0x6c4>)
 800389c:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80038a0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80038a2:	f7fd ff71 	bl	8001788 <HAL_GetTick>
 80038a6:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80038a8:	e008      	b.n	80038bc <HAL_RCC_OscConfig+0x58c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80038aa:	f7fd ff6d 	bl	8001788 <HAL_GetTick>
 80038ae:	4602      	mov	r2, r0
 80038b0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80038b2:	1ad3      	subs	r3, r2, r3
 80038b4:	2b02      	cmp	r3, #2
 80038b6:	d901      	bls.n	80038bc <HAL_RCC_OscConfig+0x58c>
          {
            return HAL_TIMEOUT;
 80038b8:	2303      	movs	r3, #3
 80038ba:	e10b      	b.n	8003ad4 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80038bc:	4b4d      	ldr	r3, [pc, #308]	@ (80039f4 <HAL_RCC_OscConfig+0x6c4>)
 80038be:	681b      	ldr	r3, [r3, #0]
 80038c0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80038c4:	2b00      	cmp	r3, #0
 80038c6:	d1f0      	bne.n	80038aa <HAL_RCC_OscConfig+0x57a>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80038c8:	4b4a      	ldr	r3, [pc, #296]	@ (80039f4 <HAL_RCC_OscConfig+0x6c4>)
 80038ca:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80038cc:	4b4a      	ldr	r3, [pc, #296]	@ (80039f8 <HAL_RCC_OscConfig+0x6c8>)
 80038ce:	4013      	ands	r3, r2
 80038d0:	687a      	ldr	r2, [r7, #4]
 80038d2:	6a91      	ldr	r1, [r2, #40]	@ 0x28
 80038d4:	687a      	ldr	r2, [r7, #4]
 80038d6:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 80038d8:	0112      	lsls	r2, r2, #4
 80038da:	430a      	orrs	r2, r1
 80038dc:	4945      	ldr	r1, [pc, #276]	@ (80039f4 <HAL_RCC_OscConfig+0x6c4>)
 80038de:	4313      	orrs	r3, r2
 80038e0:	628b      	str	r3, [r1, #40]	@ 0x28
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80038e6:	3b01      	subs	r3, #1
 80038e8:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80038f0:	3b01      	subs	r3, #1
 80038f2:	025b      	lsls	r3, r3, #9
 80038f4:	b29b      	uxth	r3, r3
 80038f6:	431a      	orrs	r2, r3
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80038fc:	3b01      	subs	r3, #1
 80038fe:	041b      	lsls	r3, r3, #16
 8003900:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8003904:	431a      	orrs	r2, r3
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800390a:	3b01      	subs	r3, #1
 800390c:	061b      	lsls	r3, r3, #24
 800390e:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8003912:	4938      	ldr	r1, [pc, #224]	@ (80039f4 <HAL_RCC_OscConfig+0x6c4>)
 8003914:	4313      	orrs	r3, r2
 8003916:	630b      	str	r3, [r1, #48]	@ 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 8003918:	4b36      	ldr	r3, [pc, #216]	@ (80039f4 <HAL_RCC_OscConfig+0x6c4>)
 800391a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800391c:	4a35      	ldr	r2, [pc, #212]	@ (80039f4 <HAL_RCC_OscConfig+0x6c4>)
 800391e:	f023 0301 	bic.w	r3, r3, #1
 8003922:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8003924:	4b33      	ldr	r3, [pc, #204]	@ (80039f4 <HAL_RCC_OscConfig+0x6c4>)
 8003926:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8003928:	4b34      	ldr	r3, [pc, #208]	@ (80039fc <HAL_RCC_OscConfig+0x6cc>)
 800392a:	4013      	ands	r3, r2
 800392c:	687a      	ldr	r2, [r7, #4]
 800392e:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8003930:	00d2      	lsls	r2, r2, #3
 8003932:	4930      	ldr	r1, [pc, #192]	@ (80039f4 <HAL_RCC_OscConfig+0x6c4>)
 8003934:	4313      	orrs	r3, r2
 8003936:	634b      	str	r3, [r1, #52]	@ 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8003938:	4b2e      	ldr	r3, [pc, #184]	@ (80039f4 <HAL_RCC_OscConfig+0x6c4>)
 800393a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800393c:	f023 020c 	bic.w	r2, r3, #12
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003944:	492b      	ldr	r1, [pc, #172]	@ (80039f4 <HAL_RCC_OscConfig+0x6c4>)
 8003946:	4313      	orrs	r3, r2
 8003948:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 800394a:	4b2a      	ldr	r3, [pc, #168]	@ (80039f4 <HAL_RCC_OscConfig+0x6c4>)
 800394c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800394e:	f023 0202 	bic.w	r2, r3, #2
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003956:	4927      	ldr	r1, [pc, #156]	@ (80039f4 <HAL_RCC_OscConfig+0x6c4>)
 8003958:	4313      	orrs	r3, r2
 800395a:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 800395c:	4b25      	ldr	r3, [pc, #148]	@ (80039f4 <HAL_RCC_OscConfig+0x6c4>)
 800395e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003960:	4a24      	ldr	r2, [pc, #144]	@ (80039f4 <HAL_RCC_OscConfig+0x6c4>)
 8003962:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003966:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003968:	4b22      	ldr	r3, [pc, #136]	@ (80039f4 <HAL_RCC_OscConfig+0x6c4>)
 800396a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800396c:	4a21      	ldr	r2, [pc, #132]	@ (80039f4 <HAL_RCC_OscConfig+0x6c4>)
 800396e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003972:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8003974:	4b1f      	ldr	r3, [pc, #124]	@ (80039f4 <HAL_RCC_OscConfig+0x6c4>)
 8003976:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003978:	4a1e      	ldr	r2, [pc, #120]	@ (80039f4 <HAL_RCC_OscConfig+0x6c4>)
 800397a:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800397e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 8003980:	4b1c      	ldr	r3, [pc, #112]	@ (80039f4 <HAL_RCC_OscConfig+0x6c4>)
 8003982:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003984:	4a1b      	ldr	r2, [pc, #108]	@ (80039f4 <HAL_RCC_OscConfig+0x6c4>)
 8003986:	f043 0301 	orr.w	r3, r3, #1
 800398a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800398c:	4b19      	ldr	r3, [pc, #100]	@ (80039f4 <HAL_RCC_OscConfig+0x6c4>)
 800398e:	681b      	ldr	r3, [r3, #0]
 8003990:	4a18      	ldr	r2, [pc, #96]	@ (80039f4 <HAL_RCC_OscConfig+0x6c4>)
 8003992:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8003996:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003998:	f7fd fef6 	bl	8001788 <HAL_GetTick>
 800399c:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800399e:	e008      	b.n	80039b2 <HAL_RCC_OscConfig+0x682>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80039a0:	f7fd fef2 	bl	8001788 <HAL_GetTick>
 80039a4:	4602      	mov	r2, r0
 80039a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80039a8:	1ad3      	subs	r3, r2, r3
 80039aa:	2b02      	cmp	r3, #2
 80039ac:	d901      	bls.n	80039b2 <HAL_RCC_OscConfig+0x682>
          {
            return HAL_TIMEOUT;
 80039ae:	2303      	movs	r3, #3
 80039b0:	e090      	b.n	8003ad4 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80039b2:	4b10      	ldr	r3, [pc, #64]	@ (80039f4 <HAL_RCC_OscConfig+0x6c4>)
 80039b4:	681b      	ldr	r3, [r3, #0]
 80039b6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80039ba:	2b00      	cmp	r3, #0
 80039bc:	d0f0      	beq.n	80039a0 <HAL_RCC_OscConfig+0x670>
 80039be:	e088      	b.n	8003ad2 <HAL_RCC_OscConfig+0x7a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80039c0:	4b0c      	ldr	r3, [pc, #48]	@ (80039f4 <HAL_RCC_OscConfig+0x6c4>)
 80039c2:	681b      	ldr	r3, [r3, #0]
 80039c4:	4a0b      	ldr	r2, [pc, #44]	@ (80039f4 <HAL_RCC_OscConfig+0x6c4>)
 80039c6:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80039ca:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80039cc:	f7fd fedc 	bl	8001788 <HAL_GetTick>
 80039d0:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80039d2:	e008      	b.n	80039e6 <HAL_RCC_OscConfig+0x6b6>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80039d4:	f7fd fed8 	bl	8001788 <HAL_GetTick>
 80039d8:	4602      	mov	r2, r0
 80039da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80039dc:	1ad3      	subs	r3, r2, r3
 80039de:	2b02      	cmp	r3, #2
 80039e0:	d901      	bls.n	80039e6 <HAL_RCC_OscConfig+0x6b6>
          {
            return HAL_TIMEOUT;
 80039e2:	2303      	movs	r3, #3
 80039e4:	e076      	b.n	8003ad4 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80039e6:	4b03      	ldr	r3, [pc, #12]	@ (80039f4 <HAL_RCC_OscConfig+0x6c4>)
 80039e8:	681b      	ldr	r3, [r3, #0]
 80039ea:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80039ee:	2b00      	cmp	r3, #0
 80039f0:	d1f0      	bne.n	80039d4 <HAL_RCC_OscConfig+0x6a4>
 80039f2:	e06e      	b.n	8003ad2 <HAL_RCC_OscConfig+0x7a2>
 80039f4:	58024400 	.word	0x58024400
 80039f8:	fffffc0c 	.word	0xfffffc0c
 80039fc:	ffff0007 	.word	0xffff0007
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8003a00:	4b36      	ldr	r3, [pc, #216]	@ (8003adc <HAL_RCC_OscConfig+0x7ac>)
 8003a02:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003a04:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8003a06:	4b35      	ldr	r3, [pc, #212]	@ (8003adc <HAL_RCC_OscConfig+0x7ac>)
 8003a08:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003a0a:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003a10:	2b01      	cmp	r3, #1
 8003a12:	d031      	beq.n	8003a78 <HAL_RCC_OscConfig+0x748>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003a14:	693b      	ldr	r3, [r7, #16]
 8003a16:	f003 0203 	and.w	r2, r3, #3
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003a1e:	429a      	cmp	r2, r3
 8003a20:	d12a      	bne.n	8003a78 <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8003a22:	693b      	ldr	r3, [r7, #16]
 8003a24:	091b      	lsrs	r3, r3, #4
 8003a26:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003a2e:	429a      	cmp	r2, r3
 8003a30:	d122      	bne.n	8003a78 <HAL_RCC_OscConfig+0x748>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8003a32:	68fb      	ldr	r3, [r7, #12]
 8003a34:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003a3c:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8003a3e:	429a      	cmp	r2, r3
 8003a40:	d11a      	bne.n	8003a78 <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8003a42:	68fb      	ldr	r3, [r7, #12]
 8003a44:	0a5b      	lsrs	r3, r3, #9
 8003a46:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003a4e:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8003a50:	429a      	cmp	r2, r3
 8003a52:	d111      	bne.n	8003a78 <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8003a54:	68fb      	ldr	r3, [r7, #12]
 8003a56:	0c1b      	lsrs	r3, r3, #16
 8003a58:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003a60:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8003a62:	429a      	cmp	r2, r3
 8003a64:	d108      	bne.n	8003a78 <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8003a66:	68fb      	ldr	r3, [r7, #12]
 8003a68:	0e1b      	lsrs	r3, r3, #24
 8003a6a:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003a72:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8003a74:	429a      	cmp	r2, r3
 8003a76:	d001      	beq.n	8003a7c <HAL_RCC_OscConfig+0x74c>
      {
        return HAL_ERROR;
 8003a78:	2301      	movs	r3, #1
 8003a7a:	e02b      	b.n	8003ad4 <HAL_RCC_OscConfig+0x7a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 8003a7c:	4b17      	ldr	r3, [pc, #92]	@ (8003adc <HAL_RCC_OscConfig+0x7ac>)
 8003a7e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003a80:	08db      	lsrs	r3, r3, #3
 8003a82:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8003a86:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003a8c:	693a      	ldr	r2, [r7, #16]
 8003a8e:	429a      	cmp	r2, r3
 8003a90:	d01f      	beq.n	8003ad2 <HAL_RCC_OscConfig+0x7a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 8003a92:	4b12      	ldr	r3, [pc, #72]	@ (8003adc <HAL_RCC_OscConfig+0x7ac>)
 8003a94:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003a96:	4a11      	ldr	r2, [pc, #68]	@ (8003adc <HAL_RCC_OscConfig+0x7ac>)
 8003a98:	f023 0301 	bic.w	r3, r3, #1
 8003a9c:	62d3      	str	r3, [r2, #44]	@ 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8003a9e:	f7fd fe73 	bl	8001788 <HAL_GetTick>
 8003aa2:	6278      	str	r0, [r7, #36]	@ 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 8003aa4:	bf00      	nop
 8003aa6:	f7fd fe6f 	bl	8001788 <HAL_GetTick>
 8003aaa:	4602      	mov	r2, r0
 8003aac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003aae:	4293      	cmp	r3, r2
 8003ab0:	d0f9      	beq.n	8003aa6 <HAL_RCC_OscConfig+0x776>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8003ab2:	4b0a      	ldr	r3, [pc, #40]	@ (8003adc <HAL_RCC_OscConfig+0x7ac>)
 8003ab4:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8003ab6:	4b0a      	ldr	r3, [pc, #40]	@ (8003ae0 <HAL_RCC_OscConfig+0x7b0>)
 8003ab8:	4013      	ands	r3, r2
 8003aba:	687a      	ldr	r2, [r7, #4]
 8003abc:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8003abe:	00d2      	lsls	r2, r2, #3
 8003ac0:	4906      	ldr	r1, [pc, #24]	@ (8003adc <HAL_RCC_OscConfig+0x7ac>)
 8003ac2:	4313      	orrs	r3, r2
 8003ac4:	634b      	str	r3, [r1, #52]	@ 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 8003ac6:	4b05      	ldr	r3, [pc, #20]	@ (8003adc <HAL_RCC_OscConfig+0x7ac>)
 8003ac8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003aca:	4a04      	ldr	r2, [pc, #16]	@ (8003adc <HAL_RCC_OscConfig+0x7ac>)
 8003acc:	f043 0301 	orr.w	r3, r3, #1
 8003ad0:	62d3      	str	r3, [r2, #44]	@ 0x2c
        }
      }
    }
  }
  return HAL_OK;
 8003ad2:	2300      	movs	r3, #0
}
 8003ad4:	4618      	mov	r0, r3
 8003ad6:	3730      	adds	r7, #48	@ 0x30
 8003ad8:	46bd      	mov	sp, r7
 8003ada:	bd80      	pop	{r7, pc}
 8003adc:	58024400 	.word	0x58024400
 8003ae0:	ffff0007 	.word	0xffff0007

08003ae4 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003ae4:	b580      	push	{r7, lr}
 8003ae6:	b086      	sub	sp, #24
 8003ae8:	af00      	add	r7, sp, #0
 8003aea:	6078      	str	r0, [r7, #4]
 8003aec:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	2b00      	cmp	r3, #0
 8003af2:	d101      	bne.n	8003af8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003af4:	2301      	movs	r3, #1
 8003af6:	e19c      	b.n	8003e32 <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003af8:	4b8a      	ldr	r3, [pc, #552]	@ (8003d24 <HAL_RCC_ClockConfig+0x240>)
 8003afa:	681b      	ldr	r3, [r3, #0]
 8003afc:	f003 030f 	and.w	r3, r3, #15
 8003b00:	683a      	ldr	r2, [r7, #0]
 8003b02:	429a      	cmp	r2, r3
 8003b04:	d910      	bls.n	8003b28 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003b06:	4b87      	ldr	r3, [pc, #540]	@ (8003d24 <HAL_RCC_ClockConfig+0x240>)
 8003b08:	681b      	ldr	r3, [r3, #0]
 8003b0a:	f023 020f 	bic.w	r2, r3, #15
 8003b0e:	4985      	ldr	r1, [pc, #532]	@ (8003d24 <HAL_RCC_ClockConfig+0x240>)
 8003b10:	683b      	ldr	r3, [r7, #0]
 8003b12:	4313      	orrs	r3, r2
 8003b14:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003b16:	4b83      	ldr	r3, [pc, #524]	@ (8003d24 <HAL_RCC_ClockConfig+0x240>)
 8003b18:	681b      	ldr	r3, [r3, #0]
 8003b1a:	f003 030f 	and.w	r3, r3, #15
 8003b1e:	683a      	ldr	r2, [r7, #0]
 8003b20:	429a      	cmp	r2, r3
 8003b22:	d001      	beq.n	8003b28 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8003b24:	2301      	movs	r3, #1
 8003b26:	e184      	b.n	8003e32 <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	681b      	ldr	r3, [r3, #0]
 8003b2c:	f003 0304 	and.w	r3, r3, #4
 8003b30:	2b00      	cmp	r3, #0
 8003b32:	d010      	beq.n	8003b56 <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	691a      	ldr	r2, [r3, #16]
 8003b38:	4b7b      	ldr	r3, [pc, #492]	@ (8003d28 <HAL_RCC_ClockConfig+0x244>)
 8003b3a:	699b      	ldr	r3, [r3, #24]
 8003b3c:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8003b40:	429a      	cmp	r2, r3
 8003b42:	d908      	bls.n	8003b56 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8003b44:	4b78      	ldr	r3, [pc, #480]	@ (8003d28 <HAL_RCC_ClockConfig+0x244>)
 8003b46:	699b      	ldr	r3, [r3, #24]
 8003b48:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	691b      	ldr	r3, [r3, #16]
 8003b50:	4975      	ldr	r1, [pc, #468]	@ (8003d28 <HAL_RCC_ClockConfig+0x244>)
 8003b52:	4313      	orrs	r3, r2
 8003b54:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	681b      	ldr	r3, [r3, #0]
 8003b5a:	f003 0308 	and.w	r3, r3, #8
 8003b5e:	2b00      	cmp	r3, #0
 8003b60:	d010      	beq.n	8003b84 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	695a      	ldr	r2, [r3, #20]
 8003b66:	4b70      	ldr	r3, [pc, #448]	@ (8003d28 <HAL_RCC_ClockConfig+0x244>)
 8003b68:	69db      	ldr	r3, [r3, #28]
 8003b6a:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8003b6e:	429a      	cmp	r2, r3
 8003b70:	d908      	bls.n	8003b84 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8003b72:	4b6d      	ldr	r3, [pc, #436]	@ (8003d28 <HAL_RCC_ClockConfig+0x244>)
 8003b74:	69db      	ldr	r3, [r3, #28]
 8003b76:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	695b      	ldr	r3, [r3, #20]
 8003b7e:	496a      	ldr	r1, [pc, #424]	@ (8003d28 <HAL_RCC_ClockConfig+0x244>)
 8003b80:	4313      	orrs	r3, r2
 8003b82:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	681b      	ldr	r3, [r3, #0]
 8003b88:	f003 0310 	and.w	r3, r3, #16
 8003b8c:	2b00      	cmp	r3, #0
 8003b8e:	d010      	beq.n	8003bb2 <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	699a      	ldr	r2, [r3, #24]
 8003b94:	4b64      	ldr	r3, [pc, #400]	@ (8003d28 <HAL_RCC_ClockConfig+0x244>)
 8003b96:	69db      	ldr	r3, [r3, #28]
 8003b98:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8003b9c:	429a      	cmp	r2, r3
 8003b9e:	d908      	bls.n	8003bb2 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8003ba0:	4b61      	ldr	r3, [pc, #388]	@ (8003d28 <HAL_RCC_ClockConfig+0x244>)
 8003ba2:	69db      	ldr	r3, [r3, #28]
 8003ba4:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	699b      	ldr	r3, [r3, #24]
 8003bac:	495e      	ldr	r1, [pc, #376]	@ (8003d28 <HAL_RCC_ClockConfig+0x244>)
 8003bae:	4313      	orrs	r3, r2
 8003bb0:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	681b      	ldr	r3, [r3, #0]
 8003bb6:	f003 0320 	and.w	r3, r3, #32
 8003bba:	2b00      	cmp	r3, #0
 8003bbc:	d010      	beq.n	8003be0 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	69da      	ldr	r2, [r3, #28]
 8003bc2:	4b59      	ldr	r3, [pc, #356]	@ (8003d28 <HAL_RCC_ClockConfig+0x244>)
 8003bc4:	6a1b      	ldr	r3, [r3, #32]
 8003bc6:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8003bca:	429a      	cmp	r2, r3
 8003bcc:	d908      	bls.n	8003be0 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8003bce:	4b56      	ldr	r3, [pc, #344]	@ (8003d28 <HAL_RCC_ClockConfig+0x244>)
 8003bd0:	6a1b      	ldr	r3, [r3, #32]
 8003bd2:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	69db      	ldr	r3, [r3, #28]
 8003bda:	4953      	ldr	r1, [pc, #332]	@ (8003d28 <HAL_RCC_ClockConfig+0x244>)
 8003bdc:	4313      	orrs	r3, r2
 8003bde:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	681b      	ldr	r3, [r3, #0]
 8003be4:	f003 0302 	and.w	r3, r3, #2
 8003be8:	2b00      	cmp	r3, #0
 8003bea:	d010      	beq.n	8003c0e <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	68da      	ldr	r2, [r3, #12]
 8003bf0:	4b4d      	ldr	r3, [pc, #308]	@ (8003d28 <HAL_RCC_ClockConfig+0x244>)
 8003bf2:	699b      	ldr	r3, [r3, #24]
 8003bf4:	f003 030f 	and.w	r3, r3, #15
 8003bf8:	429a      	cmp	r2, r3
 8003bfa:	d908      	bls.n	8003c0e <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003bfc:	4b4a      	ldr	r3, [pc, #296]	@ (8003d28 <HAL_RCC_ClockConfig+0x244>)
 8003bfe:	699b      	ldr	r3, [r3, #24]
 8003c00:	f023 020f 	bic.w	r2, r3, #15
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	68db      	ldr	r3, [r3, #12]
 8003c08:	4947      	ldr	r1, [pc, #284]	@ (8003d28 <HAL_RCC_ClockConfig+0x244>)
 8003c0a:	4313      	orrs	r3, r2
 8003c0c:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	681b      	ldr	r3, [r3, #0]
 8003c12:	f003 0301 	and.w	r3, r3, #1
 8003c16:	2b00      	cmp	r3, #0
 8003c18:	d055      	beq.n	8003cc6 <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8003c1a:	4b43      	ldr	r3, [pc, #268]	@ (8003d28 <HAL_RCC_ClockConfig+0x244>)
 8003c1c:	699b      	ldr	r3, [r3, #24]
 8003c1e:	f423 6270 	bic.w	r2, r3, #3840	@ 0xf00
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	689b      	ldr	r3, [r3, #8]
 8003c26:	4940      	ldr	r1, [pc, #256]	@ (8003d28 <HAL_RCC_ClockConfig+0x244>)
 8003c28:	4313      	orrs	r3, r2
 8003c2a:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	685b      	ldr	r3, [r3, #4]
 8003c30:	2b02      	cmp	r3, #2
 8003c32:	d107      	bne.n	8003c44 <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8003c34:	4b3c      	ldr	r3, [pc, #240]	@ (8003d28 <HAL_RCC_ClockConfig+0x244>)
 8003c36:	681b      	ldr	r3, [r3, #0]
 8003c38:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003c3c:	2b00      	cmp	r3, #0
 8003c3e:	d121      	bne.n	8003c84 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8003c40:	2301      	movs	r3, #1
 8003c42:	e0f6      	b.n	8003e32 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	685b      	ldr	r3, [r3, #4]
 8003c48:	2b03      	cmp	r3, #3
 8003c4a:	d107      	bne.n	8003c5c <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8003c4c:	4b36      	ldr	r3, [pc, #216]	@ (8003d28 <HAL_RCC_ClockConfig+0x244>)
 8003c4e:	681b      	ldr	r3, [r3, #0]
 8003c50:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003c54:	2b00      	cmp	r3, #0
 8003c56:	d115      	bne.n	8003c84 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8003c58:	2301      	movs	r3, #1
 8003c5a:	e0ea      	b.n	8003e32 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	685b      	ldr	r3, [r3, #4]
 8003c60:	2b01      	cmp	r3, #1
 8003c62:	d107      	bne.n	8003c74 <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8003c64:	4b30      	ldr	r3, [pc, #192]	@ (8003d28 <HAL_RCC_ClockConfig+0x244>)
 8003c66:	681b      	ldr	r3, [r3, #0]
 8003c68:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003c6c:	2b00      	cmp	r3, #0
 8003c6e:	d109      	bne.n	8003c84 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8003c70:	2301      	movs	r3, #1
 8003c72:	e0de      	b.n	8003e32 <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8003c74:	4b2c      	ldr	r3, [pc, #176]	@ (8003d28 <HAL_RCC_ClockConfig+0x244>)
 8003c76:	681b      	ldr	r3, [r3, #0]
 8003c78:	f003 0304 	and.w	r3, r3, #4
 8003c7c:	2b00      	cmp	r3, #0
 8003c7e:	d101      	bne.n	8003c84 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8003c80:	2301      	movs	r3, #1
 8003c82:	e0d6      	b.n	8003e32 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8003c84:	4b28      	ldr	r3, [pc, #160]	@ (8003d28 <HAL_RCC_ClockConfig+0x244>)
 8003c86:	691b      	ldr	r3, [r3, #16]
 8003c88:	f023 0207 	bic.w	r2, r3, #7
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	685b      	ldr	r3, [r3, #4]
 8003c90:	4925      	ldr	r1, [pc, #148]	@ (8003d28 <HAL_RCC_ClockConfig+0x244>)
 8003c92:	4313      	orrs	r3, r2
 8003c94:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003c96:	f7fd fd77 	bl	8001788 <HAL_GetTick>
 8003c9a:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003c9c:	e00a      	b.n	8003cb4 <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003c9e:	f7fd fd73 	bl	8001788 <HAL_GetTick>
 8003ca2:	4602      	mov	r2, r0
 8003ca4:	697b      	ldr	r3, [r7, #20]
 8003ca6:	1ad3      	subs	r3, r2, r3
 8003ca8:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003cac:	4293      	cmp	r3, r2
 8003cae:	d901      	bls.n	8003cb4 <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 8003cb0:	2303      	movs	r3, #3
 8003cb2:	e0be      	b.n	8003e32 <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003cb4:	4b1c      	ldr	r3, [pc, #112]	@ (8003d28 <HAL_RCC_ClockConfig+0x244>)
 8003cb6:	691b      	ldr	r3, [r3, #16]
 8003cb8:	f003 0238 	and.w	r2, r3, #56	@ 0x38
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	685b      	ldr	r3, [r3, #4]
 8003cc0:	00db      	lsls	r3, r3, #3
 8003cc2:	429a      	cmp	r2, r3
 8003cc4:	d1eb      	bne.n	8003c9e <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	681b      	ldr	r3, [r3, #0]
 8003cca:	f003 0302 	and.w	r3, r3, #2
 8003cce:	2b00      	cmp	r3, #0
 8003cd0:	d010      	beq.n	8003cf4 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	68da      	ldr	r2, [r3, #12]
 8003cd6:	4b14      	ldr	r3, [pc, #80]	@ (8003d28 <HAL_RCC_ClockConfig+0x244>)
 8003cd8:	699b      	ldr	r3, [r3, #24]
 8003cda:	f003 030f 	and.w	r3, r3, #15
 8003cde:	429a      	cmp	r2, r3
 8003ce0:	d208      	bcs.n	8003cf4 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003ce2:	4b11      	ldr	r3, [pc, #68]	@ (8003d28 <HAL_RCC_ClockConfig+0x244>)
 8003ce4:	699b      	ldr	r3, [r3, #24]
 8003ce6:	f023 020f 	bic.w	r2, r3, #15
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	68db      	ldr	r3, [r3, #12]
 8003cee:	490e      	ldr	r1, [pc, #56]	@ (8003d28 <HAL_RCC_ClockConfig+0x244>)
 8003cf0:	4313      	orrs	r3, r2
 8003cf2:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003cf4:	4b0b      	ldr	r3, [pc, #44]	@ (8003d24 <HAL_RCC_ClockConfig+0x240>)
 8003cf6:	681b      	ldr	r3, [r3, #0]
 8003cf8:	f003 030f 	and.w	r3, r3, #15
 8003cfc:	683a      	ldr	r2, [r7, #0]
 8003cfe:	429a      	cmp	r2, r3
 8003d00:	d214      	bcs.n	8003d2c <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003d02:	4b08      	ldr	r3, [pc, #32]	@ (8003d24 <HAL_RCC_ClockConfig+0x240>)
 8003d04:	681b      	ldr	r3, [r3, #0]
 8003d06:	f023 020f 	bic.w	r2, r3, #15
 8003d0a:	4906      	ldr	r1, [pc, #24]	@ (8003d24 <HAL_RCC_ClockConfig+0x240>)
 8003d0c:	683b      	ldr	r3, [r7, #0]
 8003d0e:	4313      	orrs	r3, r2
 8003d10:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003d12:	4b04      	ldr	r3, [pc, #16]	@ (8003d24 <HAL_RCC_ClockConfig+0x240>)
 8003d14:	681b      	ldr	r3, [r3, #0]
 8003d16:	f003 030f 	and.w	r3, r3, #15
 8003d1a:	683a      	ldr	r2, [r7, #0]
 8003d1c:	429a      	cmp	r2, r3
 8003d1e:	d005      	beq.n	8003d2c <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8003d20:	2301      	movs	r3, #1
 8003d22:	e086      	b.n	8003e32 <HAL_RCC_ClockConfig+0x34e>
 8003d24:	52002000 	.word	0x52002000
 8003d28:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	681b      	ldr	r3, [r3, #0]
 8003d30:	f003 0304 	and.w	r3, r3, #4
 8003d34:	2b00      	cmp	r3, #0
 8003d36:	d010      	beq.n	8003d5a <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	691a      	ldr	r2, [r3, #16]
 8003d3c:	4b3f      	ldr	r3, [pc, #252]	@ (8003e3c <HAL_RCC_ClockConfig+0x358>)
 8003d3e:	699b      	ldr	r3, [r3, #24]
 8003d40:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8003d44:	429a      	cmp	r2, r3
 8003d46:	d208      	bcs.n	8003d5a <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8003d48:	4b3c      	ldr	r3, [pc, #240]	@ (8003e3c <HAL_RCC_ClockConfig+0x358>)
 8003d4a:	699b      	ldr	r3, [r3, #24]
 8003d4c:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	691b      	ldr	r3, [r3, #16]
 8003d54:	4939      	ldr	r1, [pc, #228]	@ (8003e3c <HAL_RCC_ClockConfig+0x358>)
 8003d56:	4313      	orrs	r3, r2
 8003d58:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	681b      	ldr	r3, [r3, #0]
 8003d5e:	f003 0308 	and.w	r3, r3, #8
 8003d62:	2b00      	cmp	r3, #0
 8003d64:	d010      	beq.n	8003d88 <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	695a      	ldr	r2, [r3, #20]
 8003d6a:	4b34      	ldr	r3, [pc, #208]	@ (8003e3c <HAL_RCC_ClockConfig+0x358>)
 8003d6c:	69db      	ldr	r3, [r3, #28]
 8003d6e:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8003d72:	429a      	cmp	r2, r3
 8003d74:	d208      	bcs.n	8003d88 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8003d76:	4b31      	ldr	r3, [pc, #196]	@ (8003e3c <HAL_RCC_ClockConfig+0x358>)
 8003d78:	69db      	ldr	r3, [r3, #28]
 8003d7a:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	695b      	ldr	r3, [r3, #20]
 8003d82:	492e      	ldr	r1, [pc, #184]	@ (8003e3c <HAL_RCC_ClockConfig+0x358>)
 8003d84:	4313      	orrs	r3, r2
 8003d86:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	681b      	ldr	r3, [r3, #0]
 8003d8c:	f003 0310 	and.w	r3, r3, #16
 8003d90:	2b00      	cmp	r3, #0
 8003d92:	d010      	beq.n	8003db6 <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	699a      	ldr	r2, [r3, #24]
 8003d98:	4b28      	ldr	r3, [pc, #160]	@ (8003e3c <HAL_RCC_ClockConfig+0x358>)
 8003d9a:	69db      	ldr	r3, [r3, #28]
 8003d9c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8003da0:	429a      	cmp	r2, r3
 8003da2:	d208      	bcs.n	8003db6 <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8003da4:	4b25      	ldr	r3, [pc, #148]	@ (8003e3c <HAL_RCC_ClockConfig+0x358>)
 8003da6:	69db      	ldr	r3, [r3, #28]
 8003da8:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	699b      	ldr	r3, [r3, #24]
 8003db0:	4922      	ldr	r1, [pc, #136]	@ (8003e3c <HAL_RCC_ClockConfig+0x358>)
 8003db2:	4313      	orrs	r3, r2
 8003db4:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	681b      	ldr	r3, [r3, #0]
 8003dba:	f003 0320 	and.w	r3, r3, #32
 8003dbe:	2b00      	cmp	r3, #0
 8003dc0:	d010      	beq.n	8003de4 <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	69da      	ldr	r2, [r3, #28]
 8003dc6:	4b1d      	ldr	r3, [pc, #116]	@ (8003e3c <HAL_RCC_ClockConfig+0x358>)
 8003dc8:	6a1b      	ldr	r3, [r3, #32]
 8003dca:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8003dce:	429a      	cmp	r2, r3
 8003dd0:	d208      	bcs.n	8003de4 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8003dd2:	4b1a      	ldr	r3, [pc, #104]	@ (8003e3c <HAL_RCC_ClockConfig+0x358>)
 8003dd4:	6a1b      	ldr	r3, [r3, #32]
 8003dd6:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	69db      	ldr	r3, [r3, #28]
 8003dde:	4917      	ldr	r1, [pc, #92]	@ (8003e3c <HAL_RCC_ClockConfig+0x358>)
 8003de0:	4313      	orrs	r3, r2
 8003de2:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8003de4:	f000 f834 	bl	8003e50 <HAL_RCC_GetSysClockFreq>
 8003de8:	4602      	mov	r2, r0
 8003dea:	4b14      	ldr	r3, [pc, #80]	@ (8003e3c <HAL_RCC_ClockConfig+0x358>)
 8003dec:	699b      	ldr	r3, [r3, #24]
 8003dee:	0a1b      	lsrs	r3, r3, #8
 8003df0:	f003 030f 	and.w	r3, r3, #15
 8003df4:	4912      	ldr	r1, [pc, #72]	@ (8003e40 <HAL_RCC_ClockConfig+0x35c>)
 8003df6:	5ccb      	ldrb	r3, [r1, r3]
 8003df8:	f003 031f 	and.w	r3, r3, #31
 8003dfc:	fa22 f303 	lsr.w	r3, r2, r3
 8003e00:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8003e02:	4b0e      	ldr	r3, [pc, #56]	@ (8003e3c <HAL_RCC_ClockConfig+0x358>)
 8003e04:	699b      	ldr	r3, [r3, #24]
 8003e06:	f003 030f 	and.w	r3, r3, #15
 8003e0a:	4a0d      	ldr	r2, [pc, #52]	@ (8003e40 <HAL_RCC_ClockConfig+0x35c>)
 8003e0c:	5cd3      	ldrb	r3, [r2, r3]
 8003e0e:	f003 031f 	and.w	r3, r3, #31
 8003e12:	693a      	ldr	r2, [r7, #16]
 8003e14:	fa22 f303 	lsr.w	r3, r2, r3
 8003e18:	4a0a      	ldr	r2, [pc, #40]	@ (8003e44 <HAL_RCC_ClockConfig+0x360>)
 8003e1a:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8003e1c:	4a0a      	ldr	r2, [pc, #40]	@ (8003e48 <HAL_RCC_ClockConfig+0x364>)
 8003e1e:	693b      	ldr	r3, [r7, #16]
 8003e20:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 8003e22:	4b0a      	ldr	r3, [pc, #40]	@ (8003e4c <HAL_RCC_ClockConfig+0x368>)
 8003e24:	681b      	ldr	r3, [r3, #0]
 8003e26:	4618      	mov	r0, r3
 8003e28:	f7fd fc64 	bl	80016f4 <HAL_InitTick>
 8003e2c:	4603      	mov	r3, r0
 8003e2e:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8003e30:	7bfb      	ldrb	r3, [r7, #15]
}
 8003e32:	4618      	mov	r0, r3
 8003e34:	3718      	adds	r7, #24
 8003e36:	46bd      	mov	sp, r7
 8003e38:	bd80      	pop	{r7, pc}
 8003e3a:	bf00      	nop
 8003e3c:	58024400 	.word	0x58024400
 8003e40:	0800b2f4 	.word	0x0800b2f4
 8003e44:	24000004 	.word	0x24000004
 8003e48:	24000000 	.word	0x24000000
 8003e4c:	24000008 	.word	0x24000008

08003e50 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003e50:	b480      	push	{r7}
 8003e52:	b089      	sub	sp, #36	@ 0x24
 8003e54:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003e56:	4bb3      	ldr	r3, [pc, #716]	@ (8004124 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003e58:	691b      	ldr	r3, [r3, #16]
 8003e5a:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8003e5e:	2b18      	cmp	r3, #24
 8003e60:	f200 8155 	bhi.w	800410e <HAL_RCC_GetSysClockFreq+0x2be>
 8003e64:	a201      	add	r2, pc, #4	@ (adr r2, 8003e6c <HAL_RCC_GetSysClockFreq+0x1c>)
 8003e66:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003e6a:	bf00      	nop
 8003e6c:	08003ed1 	.word	0x08003ed1
 8003e70:	0800410f 	.word	0x0800410f
 8003e74:	0800410f 	.word	0x0800410f
 8003e78:	0800410f 	.word	0x0800410f
 8003e7c:	0800410f 	.word	0x0800410f
 8003e80:	0800410f 	.word	0x0800410f
 8003e84:	0800410f 	.word	0x0800410f
 8003e88:	0800410f 	.word	0x0800410f
 8003e8c:	08003ef7 	.word	0x08003ef7
 8003e90:	0800410f 	.word	0x0800410f
 8003e94:	0800410f 	.word	0x0800410f
 8003e98:	0800410f 	.word	0x0800410f
 8003e9c:	0800410f 	.word	0x0800410f
 8003ea0:	0800410f 	.word	0x0800410f
 8003ea4:	0800410f 	.word	0x0800410f
 8003ea8:	0800410f 	.word	0x0800410f
 8003eac:	08003efd 	.word	0x08003efd
 8003eb0:	0800410f 	.word	0x0800410f
 8003eb4:	0800410f 	.word	0x0800410f
 8003eb8:	0800410f 	.word	0x0800410f
 8003ebc:	0800410f 	.word	0x0800410f
 8003ec0:	0800410f 	.word	0x0800410f
 8003ec4:	0800410f 	.word	0x0800410f
 8003ec8:	0800410f 	.word	0x0800410f
 8003ecc:	08003f03 	.word	0x08003f03
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8003ed0:	4b94      	ldr	r3, [pc, #592]	@ (8004124 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003ed2:	681b      	ldr	r3, [r3, #0]
 8003ed4:	f003 0320 	and.w	r3, r3, #32
 8003ed8:	2b00      	cmp	r3, #0
 8003eda:	d009      	beq.n	8003ef0 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8003edc:	4b91      	ldr	r3, [pc, #580]	@ (8004124 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003ede:	681b      	ldr	r3, [r3, #0]
 8003ee0:	08db      	lsrs	r3, r3, #3
 8003ee2:	f003 0303 	and.w	r3, r3, #3
 8003ee6:	4a90      	ldr	r2, [pc, #576]	@ (8004128 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8003ee8:	fa22 f303 	lsr.w	r3, r2, r3
 8003eec:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 8003eee:	e111      	b.n	8004114 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8003ef0:	4b8d      	ldr	r3, [pc, #564]	@ (8004128 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8003ef2:	61bb      	str	r3, [r7, #24]
      break;
 8003ef4:	e10e      	b.n	8004114 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 8003ef6:	4b8d      	ldr	r3, [pc, #564]	@ (800412c <HAL_RCC_GetSysClockFreq+0x2dc>)
 8003ef8:	61bb      	str	r3, [r7, #24]
      break;
 8003efa:	e10b      	b.n	8004114 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 8003efc:	4b8c      	ldr	r3, [pc, #560]	@ (8004130 <HAL_RCC_GetSysClockFreq+0x2e0>)
 8003efe:	61bb      	str	r3, [r7, #24]
      break;
 8003f00:	e108      	b.n	8004114 <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8003f02:	4b88      	ldr	r3, [pc, #544]	@ (8004124 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003f04:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003f06:	f003 0303 	and.w	r3, r3, #3
 8003f0a:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 8003f0c:	4b85      	ldr	r3, [pc, #532]	@ (8004124 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003f0e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003f10:	091b      	lsrs	r3, r3, #4
 8003f12:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8003f16:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 8003f18:	4b82      	ldr	r3, [pc, #520]	@ (8004124 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003f1a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003f1c:	f003 0301 	and.w	r3, r3, #1
 8003f20:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 8003f22:	4b80      	ldr	r3, [pc, #512]	@ (8004124 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003f24:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003f26:	08db      	lsrs	r3, r3, #3
 8003f28:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8003f2c:	68fa      	ldr	r2, [r7, #12]
 8003f2e:	fb02 f303 	mul.w	r3, r2, r3
 8003f32:	ee07 3a90 	vmov	s15, r3
 8003f36:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003f3a:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 8003f3e:	693b      	ldr	r3, [r7, #16]
 8003f40:	2b00      	cmp	r3, #0
 8003f42:	f000 80e1 	beq.w	8004108 <HAL_RCC_GetSysClockFreq+0x2b8>
      {
        switch (pllsource)
 8003f46:	697b      	ldr	r3, [r7, #20]
 8003f48:	2b02      	cmp	r3, #2
 8003f4a:	f000 8083 	beq.w	8004054 <HAL_RCC_GetSysClockFreq+0x204>
 8003f4e:	697b      	ldr	r3, [r7, #20]
 8003f50:	2b02      	cmp	r3, #2
 8003f52:	f200 80a1 	bhi.w	8004098 <HAL_RCC_GetSysClockFreq+0x248>
 8003f56:	697b      	ldr	r3, [r7, #20]
 8003f58:	2b00      	cmp	r3, #0
 8003f5a:	d003      	beq.n	8003f64 <HAL_RCC_GetSysClockFreq+0x114>
 8003f5c:	697b      	ldr	r3, [r7, #20]
 8003f5e:	2b01      	cmp	r3, #1
 8003f60:	d056      	beq.n	8004010 <HAL_RCC_GetSysClockFreq+0x1c0>
 8003f62:	e099      	b.n	8004098 <HAL_RCC_GetSysClockFreq+0x248>
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8003f64:	4b6f      	ldr	r3, [pc, #444]	@ (8004124 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003f66:	681b      	ldr	r3, [r3, #0]
 8003f68:	f003 0320 	and.w	r3, r3, #32
 8003f6c:	2b00      	cmp	r3, #0
 8003f6e:	d02d      	beq.n	8003fcc <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8003f70:	4b6c      	ldr	r3, [pc, #432]	@ (8004124 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003f72:	681b      	ldr	r3, [r3, #0]
 8003f74:	08db      	lsrs	r3, r3, #3
 8003f76:	f003 0303 	and.w	r3, r3, #3
 8003f7a:	4a6b      	ldr	r2, [pc, #428]	@ (8004128 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8003f7c:	fa22 f303 	lsr.w	r3, r2, r3
 8003f80:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	ee07 3a90 	vmov	s15, r3
 8003f88:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003f8c:	693b      	ldr	r3, [r7, #16]
 8003f8e:	ee07 3a90 	vmov	s15, r3
 8003f92:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003f96:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003f9a:	4b62      	ldr	r3, [pc, #392]	@ (8004124 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003f9c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003f9e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003fa2:	ee07 3a90 	vmov	s15, r3
 8003fa6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003faa:	ed97 6a02 	vldr	s12, [r7, #8]
 8003fae:	eddf 5a61 	vldr	s11, [pc, #388]	@ 8004134 <HAL_RCC_GetSysClockFreq+0x2e4>
 8003fb2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003fb6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003fba:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8003fbe:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003fc2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003fc6:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 8003fca:	e087      	b.n	80040dc <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8003fcc:	693b      	ldr	r3, [r7, #16]
 8003fce:	ee07 3a90 	vmov	s15, r3
 8003fd2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003fd6:	eddf 6a58 	vldr	s13, [pc, #352]	@ 8004138 <HAL_RCC_GetSysClockFreq+0x2e8>
 8003fda:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003fde:	4b51      	ldr	r3, [pc, #324]	@ (8004124 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003fe0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003fe2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003fe6:	ee07 3a90 	vmov	s15, r3
 8003fea:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003fee:	ed97 6a02 	vldr	s12, [r7, #8]
 8003ff2:	eddf 5a50 	vldr	s11, [pc, #320]	@ 8004134 <HAL_RCC_GetSysClockFreq+0x2e4>
 8003ff6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003ffa:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003ffe:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004002:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004006:	ee67 7a27 	vmul.f32	s15, s14, s15
 800400a:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800400e:	e065      	b.n	80040dc <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8004010:	693b      	ldr	r3, [r7, #16]
 8004012:	ee07 3a90 	vmov	s15, r3
 8004016:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800401a:	eddf 6a48 	vldr	s13, [pc, #288]	@ 800413c <HAL_RCC_GetSysClockFreq+0x2ec>
 800401e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004022:	4b40      	ldr	r3, [pc, #256]	@ (8004124 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004024:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004026:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800402a:	ee07 3a90 	vmov	s15, r3
 800402e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004032:	ed97 6a02 	vldr	s12, [r7, #8]
 8004036:	eddf 5a3f 	vldr	s11, [pc, #252]	@ 8004134 <HAL_RCC_GetSysClockFreq+0x2e4>
 800403a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800403e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004042:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004046:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800404a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800404e:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8004052:	e043      	b.n	80040dc <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8004054:	693b      	ldr	r3, [r7, #16]
 8004056:	ee07 3a90 	vmov	s15, r3
 800405a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800405e:	eddf 6a38 	vldr	s13, [pc, #224]	@ 8004140 <HAL_RCC_GetSysClockFreq+0x2f0>
 8004062:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004066:	4b2f      	ldr	r3, [pc, #188]	@ (8004124 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004068:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800406a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800406e:	ee07 3a90 	vmov	s15, r3
 8004072:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004076:	ed97 6a02 	vldr	s12, [r7, #8]
 800407a:	eddf 5a2e 	vldr	s11, [pc, #184]	@ 8004134 <HAL_RCC_GetSysClockFreq+0x2e4>
 800407e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004082:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004086:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800408a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800408e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004092:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8004096:	e021      	b.n	80040dc <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8004098:	693b      	ldr	r3, [r7, #16]
 800409a:	ee07 3a90 	vmov	s15, r3
 800409e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80040a2:	eddf 6a26 	vldr	s13, [pc, #152]	@ 800413c <HAL_RCC_GetSysClockFreq+0x2ec>
 80040a6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80040aa:	4b1e      	ldr	r3, [pc, #120]	@ (8004124 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80040ac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80040ae:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80040b2:	ee07 3a90 	vmov	s15, r3
 80040b6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80040ba:	ed97 6a02 	vldr	s12, [r7, #8]
 80040be:	eddf 5a1d 	vldr	s11, [pc, #116]	@ 8004134 <HAL_RCC_GetSysClockFreq+0x2e4>
 80040c2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80040c6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80040ca:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80040ce:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80040d2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80040d6:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 80040da:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 80040dc:	4b11      	ldr	r3, [pc, #68]	@ (8004124 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80040de:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80040e0:	0a5b      	lsrs	r3, r3, #9
 80040e2:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80040e6:	3301      	adds	r3, #1
 80040e8:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 80040ea:	683b      	ldr	r3, [r7, #0]
 80040ec:	ee07 3a90 	vmov	s15, r3
 80040f0:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80040f4:	edd7 6a07 	vldr	s13, [r7, #28]
 80040f8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80040fc:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004100:	ee17 3a90 	vmov	r3, s15
 8004104:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 8004106:	e005      	b.n	8004114 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 8004108:	2300      	movs	r3, #0
 800410a:	61bb      	str	r3, [r7, #24]
      break;
 800410c:	e002      	b.n	8004114 <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 800410e:	4b07      	ldr	r3, [pc, #28]	@ (800412c <HAL_RCC_GetSysClockFreq+0x2dc>)
 8004110:	61bb      	str	r3, [r7, #24]
      break;
 8004112:	bf00      	nop
  }

  return sysclockfreq;
 8004114:	69bb      	ldr	r3, [r7, #24]
}
 8004116:	4618      	mov	r0, r3
 8004118:	3724      	adds	r7, #36	@ 0x24
 800411a:	46bd      	mov	sp, r7
 800411c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004120:	4770      	bx	lr
 8004122:	bf00      	nop
 8004124:	58024400 	.word	0x58024400
 8004128:	03d09000 	.word	0x03d09000
 800412c:	003d0900 	.word	0x003d0900
 8004130:	017d7840 	.word	0x017d7840
 8004134:	46000000 	.word	0x46000000
 8004138:	4c742400 	.word	0x4c742400
 800413c:	4a742400 	.word	0x4a742400
 8004140:	4bbebc20 	.word	0x4bbebc20

08004144 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004144:	b580      	push	{r7, lr}
 8004146:	b082      	sub	sp, #8
 8004148:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 800414a:	f7ff fe81 	bl	8003e50 <HAL_RCC_GetSysClockFreq>
 800414e:	4602      	mov	r2, r0
 8004150:	4b10      	ldr	r3, [pc, #64]	@ (8004194 <HAL_RCC_GetHCLKFreq+0x50>)
 8004152:	699b      	ldr	r3, [r3, #24]
 8004154:	0a1b      	lsrs	r3, r3, #8
 8004156:	f003 030f 	and.w	r3, r3, #15
 800415a:	490f      	ldr	r1, [pc, #60]	@ (8004198 <HAL_RCC_GetHCLKFreq+0x54>)
 800415c:	5ccb      	ldrb	r3, [r1, r3]
 800415e:	f003 031f 	and.w	r3, r3, #31
 8004162:	fa22 f303 	lsr.w	r3, r2, r3
 8004166:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8004168:	4b0a      	ldr	r3, [pc, #40]	@ (8004194 <HAL_RCC_GetHCLKFreq+0x50>)
 800416a:	699b      	ldr	r3, [r3, #24]
 800416c:	f003 030f 	and.w	r3, r3, #15
 8004170:	4a09      	ldr	r2, [pc, #36]	@ (8004198 <HAL_RCC_GetHCLKFreq+0x54>)
 8004172:	5cd3      	ldrb	r3, [r2, r3]
 8004174:	f003 031f 	and.w	r3, r3, #31
 8004178:	687a      	ldr	r2, [r7, #4]
 800417a:	fa22 f303 	lsr.w	r3, r2, r3
 800417e:	4a07      	ldr	r2, [pc, #28]	@ (800419c <HAL_RCC_GetHCLKFreq+0x58>)
 8004180:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8004182:	4a07      	ldr	r2, [pc, #28]	@ (80041a0 <HAL_RCC_GetHCLKFreq+0x5c>)
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8004188:	4b04      	ldr	r3, [pc, #16]	@ (800419c <HAL_RCC_GetHCLKFreq+0x58>)
 800418a:	681b      	ldr	r3, [r3, #0]
}
 800418c:	4618      	mov	r0, r3
 800418e:	3708      	adds	r7, #8
 8004190:	46bd      	mov	sp, r7
 8004192:	bd80      	pop	{r7, pc}
 8004194:	58024400 	.word	0x58024400
 8004198:	0800b2f4 	.word	0x0800b2f4
 800419c:	24000004 	.word	0x24000004
 80041a0:	24000000 	.word	0x24000000

080041a4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80041a4:	b580      	push	{r7, lr}
 80041a6:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 80041a8:	f7ff ffcc 	bl	8004144 <HAL_RCC_GetHCLKFreq>
 80041ac:	4602      	mov	r2, r0
 80041ae:	4b06      	ldr	r3, [pc, #24]	@ (80041c8 <HAL_RCC_GetPCLK1Freq+0x24>)
 80041b0:	69db      	ldr	r3, [r3, #28]
 80041b2:	091b      	lsrs	r3, r3, #4
 80041b4:	f003 0307 	and.w	r3, r3, #7
 80041b8:	4904      	ldr	r1, [pc, #16]	@ (80041cc <HAL_RCC_GetPCLK1Freq+0x28>)
 80041ba:	5ccb      	ldrb	r3, [r1, r3]
 80041bc:	f003 031f 	and.w	r3, r3, #31
 80041c0:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 80041c4:	4618      	mov	r0, r3
 80041c6:	bd80      	pop	{r7, pc}
 80041c8:	58024400 	.word	0x58024400
 80041cc:	0800b2f4 	.word	0x0800b2f4

080041d0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80041d0:	b580      	push	{r7, lr}
 80041d2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 80041d4:	f7ff ffb6 	bl	8004144 <HAL_RCC_GetHCLKFreq>
 80041d8:	4602      	mov	r2, r0
 80041da:	4b06      	ldr	r3, [pc, #24]	@ (80041f4 <HAL_RCC_GetPCLK2Freq+0x24>)
 80041dc:	69db      	ldr	r3, [r3, #28]
 80041de:	0a1b      	lsrs	r3, r3, #8
 80041e0:	f003 0307 	and.w	r3, r3, #7
 80041e4:	4904      	ldr	r1, [pc, #16]	@ (80041f8 <HAL_RCC_GetPCLK2Freq+0x28>)
 80041e6:	5ccb      	ldrb	r3, [r1, r3]
 80041e8:	f003 031f 	and.w	r3, r3, #31
 80041ec:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 80041f0:	4618      	mov	r0, r3
 80041f2:	bd80      	pop	{r7, pc}
 80041f4:	58024400 	.word	0x58024400
 80041f8:	0800b2f4 	.word	0x0800b2f4

080041fc <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80041fc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004200:	b0c6      	sub	sp, #280	@ 0x118
 8004202:	af00      	add	r7, sp, #0
 8004204:	f8c7 0104 	str.w	r0, [r7, #260]	@ 0x104
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8004208:	2300      	movs	r3, #0
 800420a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800420e:	2300      	movs	r3, #0
 8004210:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8004214:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004218:	e9d3 2300 	ldrd	r2, r3, [r3]
 800421c:	f002 6400 	and.w	r4, r2, #134217728	@ 0x8000000
 8004220:	2500      	movs	r5, #0
 8004222:	ea54 0305 	orrs.w	r3, r4, r5
 8004226:	d049      	beq.n	80042bc <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 8004228:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800422c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800422e:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8004232:	d02f      	beq.n	8004294 <HAL_RCCEx_PeriphCLKConfig+0x98>
 8004234:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8004238:	d828      	bhi.n	800428c <HAL_RCCEx_PeriphCLKConfig+0x90>
 800423a:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800423e:	d01a      	beq.n	8004276 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8004240:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8004244:	d822      	bhi.n	800428c <HAL_RCCEx_PeriphCLKConfig+0x90>
 8004246:	2b00      	cmp	r3, #0
 8004248:	d003      	beq.n	8004252 <HAL_RCCEx_PeriphCLKConfig+0x56>
 800424a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800424e:	d007      	beq.n	8004260 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8004250:	e01c      	b.n	800428c <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004252:	4bab      	ldr	r3, [pc, #684]	@ (8004500 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8004254:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004256:	4aaa      	ldr	r2, [pc, #680]	@ (8004500 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8004258:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800425c:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 800425e:	e01a      	b.n	8004296 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8004260:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004264:	3308      	adds	r3, #8
 8004266:	2102      	movs	r1, #2
 8004268:	4618      	mov	r0, r3
 800426a:	f001 fc25 	bl	8005ab8 <RCCEx_PLL2_Config>
 800426e:	4603      	mov	r3, r0
 8004270:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8004274:	e00f      	b.n	8004296 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8004276:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800427a:	3328      	adds	r3, #40	@ 0x28
 800427c:	2102      	movs	r1, #2
 800427e:	4618      	mov	r0, r3
 8004280:	f001 fccc 	bl	8005c1c <RCCEx_PLL3_Config>
 8004284:	4603      	mov	r3, r0
 8004286:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 800428a:	e004      	b.n	8004296 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800428c:	2301      	movs	r3, #1
 800428e:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8004292:	e000      	b.n	8004296 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 8004294:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004296:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800429a:	2b00      	cmp	r3, #0
 800429c:	d10a      	bne.n	80042b4 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 800429e:	4b98      	ldr	r3, [pc, #608]	@ (8004500 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80042a0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80042a2:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 80042a6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80042aa:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80042ac:	4a94      	ldr	r2, [pc, #592]	@ (8004500 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80042ae:	430b      	orrs	r3, r1
 80042b0:	6513      	str	r3, [r2, #80]	@ 0x50
 80042b2:	e003      	b.n	80042bc <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80042b4:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80042b8:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 80042bc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80042c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80042c4:	f402 7880 	and.w	r8, r2, #256	@ 0x100
 80042c8:	f04f 0900 	mov.w	r9, #0
 80042cc:	ea58 0309 	orrs.w	r3, r8, r9
 80042d0:	d047      	beq.n	8004362 <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 80042d2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80042d6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80042d8:	2b04      	cmp	r3, #4
 80042da:	d82a      	bhi.n	8004332 <HAL_RCCEx_PeriphCLKConfig+0x136>
 80042dc:	a201      	add	r2, pc, #4	@ (adr r2, 80042e4 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 80042de:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80042e2:	bf00      	nop
 80042e4:	080042f9 	.word	0x080042f9
 80042e8:	08004307 	.word	0x08004307
 80042ec:	0800431d 	.word	0x0800431d
 80042f0:	0800433b 	.word	0x0800433b
 80042f4:	0800433b 	.word	0x0800433b
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80042f8:	4b81      	ldr	r3, [pc, #516]	@ (8004500 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80042fa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80042fc:	4a80      	ldr	r2, [pc, #512]	@ (8004500 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80042fe:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004302:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8004304:	e01a      	b.n	800433c <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8004306:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800430a:	3308      	adds	r3, #8
 800430c:	2100      	movs	r1, #0
 800430e:	4618      	mov	r0, r3
 8004310:	f001 fbd2 	bl	8005ab8 <RCCEx_PLL2_Config>
 8004314:	4603      	mov	r3, r0
 8004316:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800431a:	e00f      	b.n	800433c <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800431c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004320:	3328      	adds	r3, #40	@ 0x28
 8004322:	2100      	movs	r1, #0
 8004324:	4618      	mov	r0, r3
 8004326:	f001 fc79 	bl	8005c1c <RCCEx_PLL3_Config>
 800432a:	4603      	mov	r3, r0
 800432c:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8004330:	e004      	b.n	800433c <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004332:	2301      	movs	r3, #1
 8004334:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8004338:	e000      	b.n	800433c <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 800433a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800433c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8004340:	2b00      	cmp	r3, #0
 8004342:	d10a      	bne.n	800435a <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8004344:	4b6e      	ldr	r3, [pc, #440]	@ (8004500 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8004346:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004348:	f023 0107 	bic.w	r1, r3, #7
 800434c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004350:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004352:	4a6b      	ldr	r2, [pc, #428]	@ (8004500 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8004354:	430b      	orrs	r3, r1
 8004356:	6513      	str	r3, [r2, #80]	@ 0x50
 8004358:	e003      	b.n	8004362 <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800435a:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800435e:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 8004362:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004366:	e9d3 2300 	ldrd	r2, r3, [r3]
 800436a:	f402 6a80 	and.w	sl, r2, #1024	@ 0x400
 800436e:	f04f 0b00 	mov.w	fp, #0
 8004372:	ea5a 030b 	orrs.w	r3, sl, fp
 8004376:	d05b      	beq.n	8004430 <HAL_RCCEx_PeriphCLKConfig+0x234>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 8004378:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800437c:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8004380:	f5b3 0f20 	cmp.w	r3, #10485760	@ 0xa00000
 8004384:	d03b      	beq.n	80043fe <HAL_RCCEx_PeriphCLKConfig+0x202>
 8004386:	f5b3 0f20 	cmp.w	r3, #10485760	@ 0xa00000
 800438a:	d834      	bhi.n	80043f6 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 800438c:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8004390:	d037      	beq.n	8004402 <HAL_RCCEx_PeriphCLKConfig+0x206>
 8004392:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8004396:	d82e      	bhi.n	80043f6 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 8004398:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 800439c:	d033      	beq.n	8004406 <HAL_RCCEx_PeriphCLKConfig+0x20a>
 800439e:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 80043a2:	d828      	bhi.n	80043f6 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 80043a4:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80043a8:	d01a      	beq.n	80043e0 <HAL_RCCEx_PeriphCLKConfig+0x1e4>
 80043aa:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80043ae:	d822      	bhi.n	80043f6 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 80043b0:	2b00      	cmp	r3, #0
 80043b2:	d003      	beq.n	80043bc <HAL_RCCEx_PeriphCLKConfig+0x1c0>
 80043b4:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80043b8:	d007      	beq.n	80043ca <HAL_RCCEx_PeriphCLKConfig+0x1ce>
 80043ba:	e01c      	b.n	80043f6 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80043bc:	4b50      	ldr	r3, [pc, #320]	@ (8004500 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80043be:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80043c0:	4a4f      	ldr	r2, [pc, #316]	@ (8004500 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80043c2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80043c6:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80043c8:	e01e      	b.n	8004408 <HAL_RCCEx_PeriphCLKConfig+0x20c>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80043ca:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80043ce:	3308      	adds	r3, #8
 80043d0:	2100      	movs	r1, #0
 80043d2:	4618      	mov	r0, r3
 80043d4:	f001 fb70 	bl	8005ab8 <RCCEx_PLL2_Config>
 80043d8:	4603      	mov	r3, r0
 80043da:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 80043de:	e013      	b.n	8004408 <HAL_RCCEx_PeriphCLKConfig+0x20c>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80043e0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80043e4:	3328      	adds	r3, #40	@ 0x28
 80043e6:	2100      	movs	r1, #0
 80043e8:	4618      	mov	r0, r3
 80043ea:	f001 fc17 	bl	8005c1c <RCCEx_PLL3_Config>
 80043ee:	4603      	mov	r3, r0
 80043f0:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80043f4:	e008      	b.n	8004408 <HAL_RCCEx_PeriphCLKConfig+0x20c>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 80043f6:	2301      	movs	r3, #1
 80043f8:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 80043fc:	e004      	b.n	8004408 <HAL_RCCEx_PeriphCLKConfig+0x20c>
        break;
 80043fe:	bf00      	nop
 8004400:	e002      	b.n	8004408 <HAL_RCCEx_PeriphCLKConfig+0x20c>
        break;
 8004402:	bf00      	nop
 8004404:	e000      	b.n	8004408 <HAL_RCCEx_PeriphCLKConfig+0x20c>
        break;
 8004406:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004408:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800440c:	2b00      	cmp	r3, #0
 800440e:	d10b      	bne.n	8004428 <HAL_RCCEx_PeriphCLKConfig+0x22c>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8004410:	4b3b      	ldr	r3, [pc, #236]	@ (8004500 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8004412:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004414:	f423 0160 	bic.w	r1, r3, #14680064	@ 0xe00000
 8004418:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800441c:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8004420:	4a37      	ldr	r2, [pc, #220]	@ (8004500 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8004422:	430b      	orrs	r3, r1
 8004424:	6593      	str	r3, [r2, #88]	@ 0x58
 8004426:	e003      	b.n	8004430 <HAL_RCCEx_PeriphCLKConfig+0x234>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004428:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800442c:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8004430:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004434:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004438:	f402 6300 	and.w	r3, r2, #2048	@ 0x800
 800443c:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 8004440:	2300      	movs	r3, #0
 8004442:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 8004446:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	@ 0xf8
 800444a:	460b      	mov	r3, r1
 800444c:	4313      	orrs	r3, r2
 800444e:	d05d      	beq.n	800450c <HAL_RCCEx_PeriphCLKConfig+0x310>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 8004450:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004454:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8004458:	f1b3 6fa0 	cmp.w	r3, #83886080	@ 0x5000000
 800445c:	d03b      	beq.n	80044d6 <HAL_RCCEx_PeriphCLKConfig+0x2da>
 800445e:	f1b3 6fa0 	cmp.w	r3, #83886080	@ 0x5000000
 8004462:	d834      	bhi.n	80044ce <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 8004464:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8004468:	d037      	beq.n	80044da <HAL_RCCEx_PeriphCLKConfig+0x2de>
 800446a:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800446e:	d82e      	bhi.n	80044ce <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 8004470:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8004474:	d033      	beq.n	80044de <HAL_RCCEx_PeriphCLKConfig+0x2e2>
 8004476:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 800447a:	d828      	bhi.n	80044ce <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 800447c:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8004480:	d01a      	beq.n	80044b8 <HAL_RCCEx_PeriphCLKConfig+0x2bc>
 8004482:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8004486:	d822      	bhi.n	80044ce <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 8004488:	2b00      	cmp	r3, #0
 800448a:	d003      	beq.n	8004494 <HAL_RCCEx_PeriphCLKConfig+0x298>
 800448c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8004490:	d007      	beq.n	80044a2 <HAL_RCCEx_PeriphCLKConfig+0x2a6>
 8004492:	e01c      	b.n	80044ce <HAL_RCCEx_PeriphCLKConfig+0x2d2>
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004494:	4b1a      	ldr	r3, [pc, #104]	@ (8004500 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8004496:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004498:	4a19      	ldr	r2, [pc, #100]	@ (8004500 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800449a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800449e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80044a0:	e01e      	b.n	80044e0 <HAL_RCCEx_PeriphCLKConfig+0x2e4>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80044a2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80044a6:	3308      	adds	r3, #8
 80044a8:	2100      	movs	r1, #0
 80044aa:	4618      	mov	r0, r3
 80044ac:	f001 fb04 	bl	8005ab8 <RCCEx_PLL2_Config>
 80044b0:	4603      	mov	r3, r0
 80044b2:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 80044b6:	e013      	b.n	80044e0 <HAL_RCCEx_PeriphCLKConfig+0x2e4>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80044b8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80044bc:	3328      	adds	r3, #40	@ 0x28
 80044be:	2100      	movs	r1, #0
 80044c0:	4618      	mov	r0, r3
 80044c2:	f001 fbab 	bl	8005c1c <RCCEx_PLL3_Config>
 80044c6:	4603      	mov	r3, r0
 80044c8:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80044cc:	e008      	b.n	80044e0 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 80044ce:	2301      	movs	r3, #1
 80044d0:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 80044d4:	e004      	b.n	80044e0 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        break;
 80044d6:	bf00      	nop
 80044d8:	e002      	b.n	80044e0 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        break;
 80044da:	bf00      	nop
 80044dc:	e000      	b.n	80044e0 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        break;
 80044de:	bf00      	nop
    }

    if (ret == HAL_OK)
 80044e0:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80044e4:	2b00      	cmp	r3, #0
 80044e6:	d10d      	bne.n	8004504 <HAL_RCCEx_PeriphCLKConfig+0x308>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 80044e8:	4b05      	ldr	r3, [pc, #20]	@ (8004500 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80044ea:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80044ec:	f023 61e0 	bic.w	r1, r3, #117440512	@ 0x7000000
 80044f0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80044f4:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 80044f8:	4a01      	ldr	r2, [pc, #4]	@ (8004500 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80044fa:	430b      	orrs	r3, r1
 80044fc:	6593      	str	r3, [r2, #88]	@ 0x58
 80044fe:	e005      	b.n	800450c <HAL_RCCEx_PeriphCLKConfig+0x310>
 8004500:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004504:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8004508:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
  }
#endif  /*QUADSPI*/

#if defined(OCTOSPI1) || defined(OCTOSPI2)
  /*---------------------------- OCTOSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 800450c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004510:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004514:	f002 7300 	and.w	r3, r2, #33554432	@ 0x2000000
 8004518:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 800451c:	2300      	movs	r3, #0
 800451e:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 8004522:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	@ 0xf0
 8004526:	460b      	mov	r3, r1
 8004528:	4313      	orrs	r3, r2
 800452a:	d03a      	beq.n	80045a2 <HAL_RCCEx_PeriphCLKConfig+0x3a6>
  {
    switch (PeriphClkInit->OspiClockSelection)
 800452c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004530:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004532:	2b30      	cmp	r3, #48	@ 0x30
 8004534:	d01f      	beq.n	8004576 <HAL_RCCEx_PeriphCLKConfig+0x37a>
 8004536:	2b30      	cmp	r3, #48	@ 0x30
 8004538:	d819      	bhi.n	800456e <HAL_RCCEx_PeriphCLKConfig+0x372>
 800453a:	2b20      	cmp	r3, #32
 800453c:	d00c      	beq.n	8004558 <HAL_RCCEx_PeriphCLKConfig+0x35c>
 800453e:	2b20      	cmp	r3, #32
 8004540:	d815      	bhi.n	800456e <HAL_RCCEx_PeriphCLKConfig+0x372>
 8004542:	2b00      	cmp	r3, #0
 8004544:	d019      	beq.n	800457a <HAL_RCCEx_PeriphCLKConfig+0x37e>
 8004546:	2b10      	cmp	r3, #16
 8004548:	d111      	bne.n	800456e <HAL_RCCEx_PeriphCLKConfig+0x372>
    {
      case RCC_OSPICLKSOURCE_PLL:      /* PLL is used as clock source for OSPI*/
        /* Enable OSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800454a:	4baa      	ldr	r3, [pc, #680]	@ (80047f4 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800454c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800454e:	4aa9      	ldr	r2, [pc, #676]	@ (80047f4 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8004550:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004554:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* OSPI clock source configuration done later after clock selection check */
        break;
 8004556:	e011      	b.n	800457c <HAL_RCCEx_PeriphCLKConfig+0x380>

      case RCC_OSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for OSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8004558:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800455c:	3308      	adds	r3, #8
 800455e:	2102      	movs	r1, #2
 8004560:	4618      	mov	r0, r3
 8004562:	f001 faa9 	bl	8005ab8 <RCCEx_PLL2_Config>
 8004566:	4603      	mov	r3, r0
 8004568:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* OSPI clock source configuration done later after clock selection check */
        break;
 800456c:	e006      	b.n	800457c <HAL_RCCEx_PeriphCLKConfig+0x380>
      case RCC_OSPICLKSOURCE_HCLK:
        /* HCLK clock selected as OSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 800456e:	2301      	movs	r3, #1
 8004570:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8004574:	e002      	b.n	800457c <HAL_RCCEx_PeriphCLKConfig+0x380>
        break;
 8004576:	bf00      	nop
 8004578:	e000      	b.n	800457c <HAL_RCCEx_PeriphCLKConfig+0x380>
        break;
 800457a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800457c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8004580:	2b00      	cmp	r3, #0
 8004582:	d10a      	bne.n	800459a <HAL_RCCEx_PeriphCLKConfig+0x39e>
    {
      /* Set the source of OSPI clock*/
      __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 8004584:	4b9b      	ldr	r3, [pc, #620]	@ (80047f4 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8004586:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004588:	f023 0130 	bic.w	r1, r3, #48	@ 0x30
 800458c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004590:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004592:	4a98      	ldr	r2, [pc, #608]	@ (80047f4 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8004594:	430b      	orrs	r3, r1
 8004596:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8004598:	e003      	b.n	80045a2 <HAL_RCCEx_PeriphCLKConfig+0x3a6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800459a:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800459e:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 80045a2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80045a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80045aa:	f402 5380 	and.w	r3, r2, #4096	@ 0x1000
 80045ae:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 80045b2:	2300      	movs	r3, #0
 80045b4:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 80045b8:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	@ 0xe8
 80045bc:	460b      	mov	r3, r1
 80045be:	4313      	orrs	r3, r2
 80045c0:	d051      	beq.n	8004666 <HAL_RCCEx_PeriphCLKConfig+0x46a>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 80045c2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80045c6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80045c8:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80045cc:	d035      	beq.n	800463a <HAL_RCCEx_PeriphCLKConfig+0x43e>
 80045ce:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80045d2:	d82e      	bhi.n	8004632 <HAL_RCCEx_PeriphCLKConfig+0x436>
 80045d4:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 80045d8:	d031      	beq.n	800463e <HAL_RCCEx_PeriphCLKConfig+0x442>
 80045da:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 80045de:	d828      	bhi.n	8004632 <HAL_RCCEx_PeriphCLKConfig+0x436>
 80045e0:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80045e4:	d01a      	beq.n	800461c <HAL_RCCEx_PeriphCLKConfig+0x420>
 80045e6:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80045ea:	d822      	bhi.n	8004632 <HAL_RCCEx_PeriphCLKConfig+0x436>
 80045ec:	2b00      	cmp	r3, #0
 80045ee:	d003      	beq.n	80045f8 <HAL_RCCEx_PeriphCLKConfig+0x3fc>
 80045f0:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80045f4:	d007      	beq.n	8004606 <HAL_RCCEx_PeriphCLKConfig+0x40a>
 80045f6:	e01c      	b.n	8004632 <HAL_RCCEx_PeriphCLKConfig+0x436>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80045f8:	4b7e      	ldr	r3, [pc, #504]	@ (80047f4 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80045fa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80045fc:	4a7d      	ldr	r2, [pc, #500]	@ (80047f4 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80045fe:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004602:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8004604:	e01c      	b.n	8004640 <HAL_RCCEx_PeriphCLKConfig+0x444>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8004606:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800460a:	3308      	adds	r3, #8
 800460c:	2100      	movs	r1, #0
 800460e:	4618      	mov	r0, r3
 8004610:	f001 fa52 	bl	8005ab8 <RCCEx_PLL2_Config>
 8004614:	4603      	mov	r3, r0
 8004616:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 800461a:	e011      	b.n	8004640 <HAL_RCCEx_PeriphCLKConfig+0x444>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800461c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004620:	3328      	adds	r3, #40	@ 0x28
 8004622:	2100      	movs	r1, #0
 8004624:	4618      	mov	r0, r3
 8004626:	f001 faf9 	bl	8005c1c <RCCEx_PLL3_Config>
 800462a:	4603      	mov	r3, r0
 800462c:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8004630:	e006      	b.n	8004640 <HAL_RCCEx_PeriphCLKConfig+0x444>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004632:	2301      	movs	r3, #1
 8004634:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8004638:	e002      	b.n	8004640 <HAL_RCCEx_PeriphCLKConfig+0x444>
        break;
 800463a:	bf00      	nop
 800463c:	e000      	b.n	8004640 <HAL_RCCEx_PeriphCLKConfig+0x444>
        break;
 800463e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004640:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8004644:	2b00      	cmp	r3, #0
 8004646:	d10a      	bne.n	800465e <HAL_RCCEx_PeriphCLKConfig+0x462>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8004648:	4b6a      	ldr	r3, [pc, #424]	@ (80047f4 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800464a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800464c:	f423 41e0 	bic.w	r1, r3, #28672	@ 0x7000
 8004650:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004654:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004656:	4a67      	ldr	r2, [pc, #412]	@ (80047f4 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8004658:	430b      	orrs	r3, r1
 800465a:	6513      	str	r3, [r2, #80]	@ 0x50
 800465c:	e003      	b.n	8004666 <HAL_RCCEx_PeriphCLKConfig+0x46a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800465e:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8004662:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8004666:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800466a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800466e:	f402 5300 	and.w	r3, r2, #8192	@ 0x2000
 8004672:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8004676:	2300      	movs	r3, #0
 8004678:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 800467c:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	@ 0xe0
 8004680:	460b      	mov	r3, r1
 8004682:	4313      	orrs	r3, r2
 8004684:	d053      	beq.n	800472e <HAL_RCCEx_PeriphCLKConfig+0x532>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 8004686:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800468a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800468c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8004690:	d033      	beq.n	80046fa <HAL_RCCEx_PeriphCLKConfig+0x4fe>
 8004692:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8004696:	d82c      	bhi.n	80046f2 <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 8004698:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800469c:	d02f      	beq.n	80046fe <HAL_RCCEx_PeriphCLKConfig+0x502>
 800469e:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 80046a2:	d826      	bhi.n	80046f2 <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 80046a4:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 80046a8:	d02b      	beq.n	8004702 <HAL_RCCEx_PeriphCLKConfig+0x506>
 80046aa:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 80046ae:	d820      	bhi.n	80046f2 <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 80046b0:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80046b4:	d012      	beq.n	80046dc <HAL_RCCEx_PeriphCLKConfig+0x4e0>
 80046b6:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80046ba:	d81a      	bhi.n	80046f2 <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 80046bc:	2b00      	cmp	r3, #0
 80046be:	d022      	beq.n	8004706 <HAL_RCCEx_PeriphCLKConfig+0x50a>
 80046c0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80046c4:	d115      	bne.n	80046f2 <HAL_RCCEx_PeriphCLKConfig+0x4f6>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80046c6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80046ca:	3308      	adds	r3, #8
 80046cc:	2101      	movs	r1, #1
 80046ce:	4618      	mov	r0, r3
 80046d0:	f001 f9f2 	bl	8005ab8 <RCCEx_PLL2_Config>
 80046d4:	4603      	mov	r3, r0
 80046d6:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 80046da:	e015      	b.n	8004708 <HAL_RCCEx_PeriphCLKConfig+0x50c>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80046dc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80046e0:	3328      	adds	r3, #40	@ 0x28
 80046e2:	2101      	movs	r1, #1
 80046e4:	4618      	mov	r0, r3
 80046e6:	f001 fa99 	bl	8005c1c <RCCEx_PLL3_Config>
 80046ea:	4603      	mov	r3, r0
 80046ec:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 80046f0:	e00a      	b.n	8004708 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80046f2:	2301      	movs	r3, #1
 80046f4:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 80046f8:	e006      	b.n	8004708 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 80046fa:	bf00      	nop
 80046fc:	e004      	b.n	8004708 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 80046fe:	bf00      	nop
 8004700:	e002      	b.n	8004708 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 8004702:	bf00      	nop
 8004704:	e000      	b.n	8004708 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 8004706:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004708:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800470c:	2b00      	cmp	r3, #0
 800470e:	d10a      	bne.n	8004726 <HAL_RCCEx_PeriphCLKConfig+0x52a>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8004710:	4b38      	ldr	r3, [pc, #224]	@ (80047f4 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8004712:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004714:	f423 21e0 	bic.w	r1, r3, #458752	@ 0x70000
 8004718:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800471c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800471e:	4a35      	ldr	r2, [pc, #212]	@ (80047f4 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8004720:	430b      	orrs	r3, r1
 8004722:	6513      	str	r3, [r2, #80]	@ 0x50
 8004724:	e003      	b.n	800472e <HAL_RCCEx_PeriphCLKConfig+0x532>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004726:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800472a:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 800472e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004732:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004736:	f402 4380 	and.w	r3, r2, #16384	@ 0x4000
 800473a:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 800473e:	2300      	movs	r3, #0
 8004740:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 8004744:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8004748:	460b      	mov	r3, r1
 800474a:	4313      	orrs	r3, r2
 800474c:	d058      	beq.n	8004800 <HAL_RCCEx_PeriphCLKConfig+0x604>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 800474e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004752:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8004756:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800475a:	d033      	beq.n	80047c4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>
 800475c:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8004760:	d82c      	bhi.n	80047bc <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 8004762:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004766:	d02f      	beq.n	80047c8 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
 8004768:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800476c:	d826      	bhi.n	80047bc <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 800476e:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8004772:	d02b      	beq.n	80047cc <HAL_RCCEx_PeriphCLKConfig+0x5d0>
 8004774:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8004778:	d820      	bhi.n	80047bc <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 800477a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800477e:	d012      	beq.n	80047a6 <HAL_RCCEx_PeriphCLKConfig+0x5aa>
 8004780:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8004784:	d81a      	bhi.n	80047bc <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 8004786:	2b00      	cmp	r3, #0
 8004788:	d022      	beq.n	80047d0 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 800478a:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800478e:	d115      	bne.n	80047bc <HAL_RCCEx_PeriphCLKConfig+0x5c0>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8004790:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004794:	3308      	adds	r3, #8
 8004796:	2101      	movs	r1, #1
 8004798:	4618      	mov	r0, r3
 800479a:	f001 f98d 	bl	8005ab8 <RCCEx_PLL2_Config>
 800479e:	4603      	mov	r3, r0
 80047a0:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 80047a4:	e015      	b.n	80047d2 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80047a6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80047aa:	3328      	adds	r3, #40	@ 0x28
 80047ac:	2101      	movs	r1, #1
 80047ae:	4618      	mov	r0, r3
 80047b0:	f001 fa34 	bl	8005c1c <RCCEx_PLL3_Config>
 80047b4:	4603      	mov	r3, r0
 80047b6:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 80047ba:	e00a      	b.n	80047d2 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 80047bc:	2301      	movs	r3, #1
 80047be:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 80047c2:	e006      	b.n	80047d2 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 80047c4:	bf00      	nop
 80047c6:	e004      	b.n	80047d2 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 80047c8:	bf00      	nop
 80047ca:	e002      	b.n	80047d2 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 80047cc:	bf00      	nop
 80047ce:	e000      	b.n	80047d2 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 80047d0:	bf00      	nop
    }

    if (ret == HAL_OK)
 80047d2:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80047d6:	2b00      	cmp	r3, #0
 80047d8:	d10e      	bne.n	80047f8 <HAL_RCCEx_PeriphCLKConfig+0x5fc>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 80047da:	4b06      	ldr	r3, [pc, #24]	@ (80047f4 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80047dc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80047de:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 80047e2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80047e6:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 80047ea:	4a02      	ldr	r2, [pc, #8]	@ (80047f4 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80047ec:	430b      	orrs	r3, r1
 80047ee:	6593      	str	r3, [r2, #88]	@ 0x58
 80047f0:	e006      	b.n	8004800 <HAL_RCCEx_PeriphCLKConfig+0x604>
 80047f2:	bf00      	nop
 80047f4:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80047f8:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80047fc:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8004800:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004804:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004808:	f402 4300 	and.w	r3, r2, #32768	@ 0x8000
 800480c:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8004810:	2300      	movs	r3, #0
 8004812:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 8004816:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	@ 0xd0
 800481a:	460b      	mov	r3, r1
 800481c:	4313      	orrs	r3, r2
 800481e:	d037      	beq.n	8004890 <HAL_RCCEx_PeriphCLKConfig+0x694>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 8004820:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004824:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004826:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800482a:	d00e      	beq.n	800484a <HAL_RCCEx_PeriphCLKConfig+0x64e>
 800482c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8004830:	d816      	bhi.n	8004860 <HAL_RCCEx_PeriphCLKConfig+0x664>
 8004832:	2b00      	cmp	r3, #0
 8004834:	d018      	beq.n	8004868 <HAL_RCCEx_PeriphCLKConfig+0x66c>
 8004836:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800483a:	d111      	bne.n	8004860 <HAL_RCCEx_PeriphCLKConfig+0x664>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800483c:	4bc4      	ldr	r3, [pc, #784]	@ (8004b50 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800483e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004840:	4ac3      	ldr	r2, [pc, #780]	@ (8004b50 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8004842:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004846:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8004848:	e00f      	b.n	800486a <HAL_RCCEx_PeriphCLKConfig+0x66e>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800484a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800484e:	3308      	adds	r3, #8
 8004850:	2101      	movs	r1, #1
 8004852:	4618      	mov	r0, r3
 8004854:	f001 f930 	bl	8005ab8 <RCCEx_PLL2_Config>
 8004858:	4603      	mov	r3, r0
 800485a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 800485e:	e004      	b.n	800486a <HAL_RCCEx_PeriphCLKConfig+0x66e>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004860:	2301      	movs	r3, #1
 8004862:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8004866:	e000      	b.n	800486a <HAL_RCCEx_PeriphCLKConfig+0x66e>
        break;
 8004868:	bf00      	nop
    }

    if (ret == HAL_OK)
 800486a:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800486e:	2b00      	cmp	r3, #0
 8004870:	d10a      	bne.n	8004888 <HAL_RCCEx_PeriphCLKConfig+0x68c>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8004872:	4bb7      	ldr	r3, [pc, #732]	@ (8004b50 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8004874:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004876:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 800487a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800487e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004880:	4ab3      	ldr	r2, [pc, #716]	@ (8004b50 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8004882:	430b      	orrs	r3, r1
 8004884:	6513      	str	r3, [r2, #80]	@ 0x50
 8004886:	e003      	b.n	8004890 <HAL_RCCEx_PeriphCLKConfig+0x694>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004888:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800488c:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8004890:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004894:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004898:	f002 7380 	and.w	r3, r2, #16777216	@ 0x1000000
 800489c:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80048a0:	2300      	movs	r3, #0
 80048a2:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 80048a6:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	@ 0xc8
 80048aa:	460b      	mov	r3, r1
 80048ac:	4313      	orrs	r3, r2
 80048ae:	d039      	beq.n	8004924 <HAL_RCCEx_PeriphCLKConfig+0x728>
  {
    switch (PeriphClkInit->FmcClockSelection)
 80048b0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80048b4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80048b6:	2b03      	cmp	r3, #3
 80048b8:	d81c      	bhi.n	80048f4 <HAL_RCCEx_PeriphCLKConfig+0x6f8>
 80048ba:	a201      	add	r2, pc, #4	@ (adr r2, 80048c0 <HAL_RCCEx_PeriphCLKConfig+0x6c4>)
 80048bc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80048c0:	080048fd 	.word	0x080048fd
 80048c4:	080048d1 	.word	0x080048d1
 80048c8:	080048df 	.word	0x080048df
 80048cc:	080048fd 	.word	0x080048fd
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80048d0:	4b9f      	ldr	r3, [pc, #636]	@ (8004b50 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80048d2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80048d4:	4a9e      	ldr	r2, [pc, #632]	@ (8004b50 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80048d6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80048da:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 80048dc:	e00f      	b.n	80048fe <HAL_RCCEx_PeriphCLKConfig+0x702>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80048de:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80048e2:	3308      	adds	r3, #8
 80048e4:	2102      	movs	r1, #2
 80048e6:	4618      	mov	r0, r3
 80048e8:	f001 f8e6 	bl	8005ab8 <RCCEx_PLL2_Config>
 80048ec:	4603      	mov	r3, r0
 80048ee:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* FMC clock source configuration done later after clock selection check */
        break;
 80048f2:	e004      	b.n	80048fe <HAL_RCCEx_PeriphCLKConfig+0x702>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 80048f4:	2301      	movs	r3, #1
 80048f6:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 80048fa:	e000      	b.n	80048fe <HAL_RCCEx_PeriphCLKConfig+0x702>
        break;
 80048fc:	bf00      	nop
    }

    if (ret == HAL_OK)
 80048fe:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8004902:	2b00      	cmp	r3, #0
 8004904:	d10a      	bne.n	800491c <HAL_RCCEx_PeriphCLKConfig+0x720>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8004906:	4b92      	ldr	r3, [pc, #584]	@ (8004b50 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8004908:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800490a:	f023 0103 	bic.w	r1, r3, #3
 800490e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004912:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004914:	4a8e      	ldr	r2, [pc, #568]	@ (8004b50 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8004916:	430b      	orrs	r3, r1
 8004918:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800491a:	e003      	b.n	8004924 <HAL_RCCEx_PeriphCLKConfig+0x728>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800491c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8004920:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8004924:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004928:	e9d3 2300 	ldrd	r2, r3, [r3]
 800492c:	f402 0380 	and.w	r3, r2, #4194304	@ 0x400000
 8004930:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8004934:	2300      	movs	r3, #0
 8004936:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800493a:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 800493e:	460b      	mov	r3, r1
 8004940:	4313      	orrs	r3, r2
 8004942:	f000 8099 	beq.w	8004a78 <HAL_RCCEx_PeriphCLKConfig+0x87c>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004946:	4b83      	ldr	r3, [pc, #524]	@ (8004b54 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8004948:	681b      	ldr	r3, [r3, #0]
 800494a:	4a82      	ldr	r2, [pc, #520]	@ (8004b54 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 800494c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004950:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8004952:	f7fc ff19 	bl	8001788 <HAL_GetTick>
 8004956:	f8c7 0110 	str.w	r0, [r7, #272]	@ 0x110

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800495a:	e00b      	b.n	8004974 <HAL_RCCEx_PeriphCLKConfig+0x778>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800495c:	f7fc ff14 	bl	8001788 <HAL_GetTick>
 8004960:	4602      	mov	r2, r0
 8004962:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 8004966:	1ad3      	subs	r3, r2, r3
 8004968:	2b64      	cmp	r3, #100	@ 0x64
 800496a:	d903      	bls.n	8004974 <HAL_RCCEx_PeriphCLKConfig+0x778>
      {
        ret = HAL_TIMEOUT;
 800496c:	2303      	movs	r3, #3
 800496e:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8004972:	e005      	b.n	8004980 <HAL_RCCEx_PeriphCLKConfig+0x784>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004974:	4b77      	ldr	r3, [pc, #476]	@ (8004b54 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8004976:	681b      	ldr	r3, [r3, #0]
 8004978:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800497c:	2b00      	cmp	r3, #0
 800497e:	d0ed      	beq.n	800495c <HAL_RCCEx_PeriphCLKConfig+0x760>
      }
    }

    if (ret == HAL_OK)
 8004980:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8004984:	2b00      	cmp	r3, #0
 8004986:	d173      	bne.n	8004a70 <HAL_RCCEx_PeriphCLKConfig+0x874>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8004988:	4b71      	ldr	r3, [pc, #452]	@ (8004b50 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 800498a:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 800498c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004990:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8004994:	4053      	eors	r3, r2
 8004996:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800499a:	2b00      	cmp	r3, #0
 800499c:	d015      	beq.n	80049ca <HAL_RCCEx_PeriphCLKConfig+0x7ce>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800499e:	4b6c      	ldr	r3, [pc, #432]	@ (8004b50 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80049a0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80049a2:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80049a6:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80049aa:	4b69      	ldr	r3, [pc, #420]	@ (8004b50 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80049ac:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80049ae:	4a68      	ldr	r2, [pc, #416]	@ (8004b50 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80049b0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80049b4:	6713      	str	r3, [r2, #112]	@ 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 80049b6:	4b66      	ldr	r3, [pc, #408]	@ (8004b50 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80049b8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80049ba:	4a65      	ldr	r2, [pc, #404]	@ (8004b50 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80049bc:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80049c0:	6713      	str	r3, [r2, #112]	@ 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 80049c2:	4a63      	ldr	r2, [pc, #396]	@ (8004b50 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80049c4:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80049c8:	6713      	str	r3, [r2, #112]	@ 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 80049ca:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80049ce:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 80049d2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80049d6:	d118      	bne.n	8004a0a <HAL_RCCEx_PeriphCLKConfig+0x80e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80049d8:	f7fc fed6 	bl	8001788 <HAL_GetTick>
 80049dc:	f8c7 0110 	str.w	r0, [r7, #272]	@ 0x110

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80049e0:	e00d      	b.n	80049fe <HAL_RCCEx_PeriphCLKConfig+0x802>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80049e2:	f7fc fed1 	bl	8001788 <HAL_GetTick>
 80049e6:	4602      	mov	r2, r0
 80049e8:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 80049ec:	1ad2      	subs	r2, r2, r3
 80049ee:	f241 3388 	movw	r3, #5000	@ 0x1388
 80049f2:	429a      	cmp	r2, r3
 80049f4:	d903      	bls.n	80049fe <HAL_RCCEx_PeriphCLKConfig+0x802>
          {
            ret = HAL_TIMEOUT;
 80049f6:	2303      	movs	r3, #3
 80049f8:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
            break;
 80049fc:	e005      	b.n	8004a0a <HAL_RCCEx_PeriphCLKConfig+0x80e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80049fe:	4b54      	ldr	r3, [pc, #336]	@ (8004b50 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8004a00:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004a02:	f003 0302 	and.w	r3, r3, #2
 8004a06:	2b00      	cmp	r3, #0
 8004a08:	d0eb      	beq.n	80049e2 <HAL_RCCEx_PeriphCLKConfig+0x7e6>
          }
        }
      }

      if (ret == HAL_OK)
 8004a0a:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8004a0e:	2b00      	cmp	r3, #0
 8004a10:	d129      	bne.n	8004a66 <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004a12:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004a16:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8004a1a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004a1e:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8004a22:	d10e      	bne.n	8004a42 <HAL_RCCEx_PeriphCLKConfig+0x846>
 8004a24:	4b4a      	ldr	r3, [pc, #296]	@ (8004b50 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8004a26:	691b      	ldr	r3, [r3, #16]
 8004a28:	f423 517c 	bic.w	r1, r3, #16128	@ 0x3f00
 8004a2c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004a30:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8004a34:	091a      	lsrs	r2, r3, #4
 8004a36:	4b48      	ldr	r3, [pc, #288]	@ (8004b58 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 8004a38:	4013      	ands	r3, r2
 8004a3a:	4a45      	ldr	r2, [pc, #276]	@ (8004b50 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8004a3c:	430b      	orrs	r3, r1
 8004a3e:	6113      	str	r3, [r2, #16]
 8004a40:	e005      	b.n	8004a4e <HAL_RCCEx_PeriphCLKConfig+0x852>
 8004a42:	4b43      	ldr	r3, [pc, #268]	@ (8004b50 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8004a44:	691b      	ldr	r3, [r3, #16]
 8004a46:	4a42      	ldr	r2, [pc, #264]	@ (8004b50 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8004a48:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8004a4c:	6113      	str	r3, [r2, #16]
 8004a4e:	4b40      	ldr	r3, [pc, #256]	@ (8004b50 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8004a50:	6f19      	ldr	r1, [r3, #112]	@ 0x70
 8004a52:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004a56:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8004a5a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004a5e:	4a3c      	ldr	r2, [pc, #240]	@ (8004b50 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8004a60:	430b      	orrs	r3, r1
 8004a62:	6713      	str	r3, [r2, #112]	@ 0x70
 8004a64:	e008      	b.n	8004a78 <HAL_RCCEx_PeriphCLKConfig+0x87c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8004a66:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8004a6a:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
 8004a6e:	e003      	b.n	8004a78 <HAL_RCCEx_PeriphCLKConfig+0x87c>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004a70:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8004a74:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8004a78:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004a7c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004a80:	f002 0301 	and.w	r3, r2, #1
 8004a84:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8004a88:	2300      	movs	r3, #0
 8004a8a:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 8004a8e:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	@ 0xb8
 8004a92:	460b      	mov	r3, r1
 8004a94:	4313      	orrs	r3, r2
 8004a96:	f000 808f 	beq.w	8004bb8 <HAL_RCCEx_PeriphCLKConfig+0x9bc>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 8004a9a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004a9e:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8004aa0:	2b28      	cmp	r3, #40	@ 0x28
 8004aa2:	d871      	bhi.n	8004b88 <HAL_RCCEx_PeriphCLKConfig+0x98c>
 8004aa4:	a201      	add	r2, pc, #4	@ (adr r2, 8004aac <HAL_RCCEx_PeriphCLKConfig+0x8b0>)
 8004aa6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004aaa:	bf00      	nop
 8004aac:	08004b91 	.word	0x08004b91
 8004ab0:	08004b89 	.word	0x08004b89
 8004ab4:	08004b89 	.word	0x08004b89
 8004ab8:	08004b89 	.word	0x08004b89
 8004abc:	08004b89 	.word	0x08004b89
 8004ac0:	08004b89 	.word	0x08004b89
 8004ac4:	08004b89 	.word	0x08004b89
 8004ac8:	08004b89 	.word	0x08004b89
 8004acc:	08004b5d 	.word	0x08004b5d
 8004ad0:	08004b89 	.word	0x08004b89
 8004ad4:	08004b89 	.word	0x08004b89
 8004ad8:	08004b89 	.word	0x08004b89
 8004adc:	08004b89 	.word	0x08004b89
 8004ae0:	08004b89 	.word	0x08004b89
 8004ae4:	08004b89 	.word	0x08004b89
 8004ae8:	08004b89 	.word	0x08004b89
 8004aec:	08004b73 	.word	0x08004b73
 8004af0:	08004b89 	.word	0x08004b89
 8004af4:	08004b89 	.word	0x08004b89
 8004af8:	08004b89 	.word	0x08004b89
 8004afc:	08004b89 	.word	0x08004b89
 8004b00:	08004b89 	.word	0x08004b89
 8004b04:	08004b89 	.word	0x08004b89
 8004b08:	08004b89 	.word	0x08004b89
 8004b0c:	08004b91 	.word	0x08004b91
 8004b10:	08004b89 	.word	0x08004b89
 8004b14:	08004b89 	.word	0x08004b89
 8004b18:	08004b89 	.word	0x08004b89
 8004b1c:	08004b89 	.word	0x08004b89
 8004b20:	08004b89 	.word	0x08004b89
 8004b24:	08004b89 	.word	0x08004b89
 8004b28:	08004b89 	.word	0x08004b89
 8004b2c:	08004b91 	.word	0x08004b91
 8004b30:	08004b89 	.word	0x08004b89
 8004b34:	08004b89 	.word	0x08004b89
 8004b38:	08004b89 	.word	0x08004b89
 8004b3c:	08004b89 	.word	0x08004b89
 8004b40:	08004b89 	.word	0x08004b89
 8004b44:	08004b89 	.word	0x08004b89
 8004b48:	08004b89 	.word	0x08004b89
 8004b4c:	08004b91 	.word	0x08004b91
 8004b50:	58024400 	.word	0x58024400
 8004b54:	58024800 	.word	0x58024800
 8004b58:	00ffffcf 	.word	0x00ffffcf
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8004b5c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004b60:	3308      	adds	r3, #8
 8004b62:	2101      	movs	r1, #1
 8004b64:	4618      	mov	r0, r3
 8004b66:	f000 ffa7 	bl	8005ab8 <RCCEx_PLL2_Config>
 8004b6a:	4603      	mov	r3, r0
 8004b6c:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8004b70:	e00f      	b.n	8004b92 <HAL_RCCEx_PeriphCLKConfig+0x996>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8004b72:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004b76:	3328      	adds	r3, #40	@ 0x28
 8004b78:	2101      	movs	r1, #1
 8004b7a:	4618      	mov	r0, r3
 8004b7c:	f001 f84e 	bl	8005c1c <RCCEx_PLL3_Config>
 8004b80:	4603      	mov	r3, r0
 8004b82:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8004b86:	e004      	b.n	8004b92 <HAL_RCCEx_PeriphCLKConfig+0x996>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004b88:	2301      	movs	r3, #1
 8004b8a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8004b8e:	e000      	b.n	8004b92 <HAL_RCCEx_PeriphCLKConfig+0x996>
        break;
 8004b90:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004b92:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8004b96:	2b00      	cmp	r3, #0
 8004b98:	d10a      	bne.n	8004bb0 <HAL_RCCEx_PeriphCLKConfig+0x9b4>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8004b9a:	4bbf      	ldr	r3, [pc, #764]	@ (8004e98 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8004b9c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004b9e:	f023 0138 	bic.w	r1, r3, #56	@ 0x38
 8004ba2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004ba6:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8004ba8:	4abb      	ldr	r2, [pc, #748]	@ (8004e98 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8004baa:	430b      	orrs	r3, r1
 8004bac:	6553      	str	r3, [r2, #84]	@ 0x54
 8004bae:	e003      	b.n	8004bb8 <HAL_RCCEx_PeriphCLKConfig+0x9bc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004bb0:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8004bb4:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8004bb8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004bbc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004bc0:	f002 0302 	and.w	r3, r2, #2
 8004bc4:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8004bc8:	2300      	movs	r3, #0
 8004bca:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8004bce:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	@ 0xb0
 8004bd2:	460b      	mov	r3, r1
 8004bd4:	4313      	orrs	r3, r2
 8004bd6:	d041      	beq.n	8004c5c <HAL_RCCEx_PeriphCLKConfig+0xa60>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 8004bd8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004bdc:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004bde:	2b05      	cmp	r3, #5
 8004be0:	d824      	bhi.n	8004c2c <HAL_RCCEx_PeriphCLKConfig+0xa30>
 8004be2:	a201      	add	r2, pc, #4	@ (adr r2, 8004be8 <HAL_RCCEx_PeriphCLKConfig+0x9ec>)
 8004be4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004be8:	08004c35 	.word	0x08004c35
 8004bec:	08004c01 	.word	0x08004c01
 8004bf0:	08004c17 	.word	0x08004c17
 8004bf4:	08004c35 	.word	0x08004c35
 8004bf8:	08004c35 	.word	0x08004c35
 8004bfc:	08004c35 	.word	0x08004c35
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8004c00:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004c04:	3308      	adds	r3, #8
 8004c06:	2101      	movs	r1, #1
 8004c08:	4618      	mov	r0, r3
 8004c0a:	f000 ff55 	bl	8005ab8 <RCCEx_PLL2_Config>
 8004c0e:	4603      	mov	r3, r0
 8004c10:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8004c14:	e00f      	b.n	8004c36 <HAL_RCCEx_PeriphCLKConfig+0xa3a>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8004c16:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004c1a:	3328      	adds	r3, #40	@ 0x28
 8004c1c:	2101      	movs	r1, #1
 8004c1e:	4618      	mov	r0, r3
 8004c20:	f000 fffc 	bl	8005c1c <RCCEx_PLL3_Config>
 8004c24:	4603      	mov	r3, r0
 8004c26:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8004c2a:	e004      	b.n	8004c36 <HAL_RCCEx_PeriphCLKConfig+0xa3a>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004c2c:	2301      	movs	r3, #1
 8004c2e:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8004c32:	e000      	b.n	8004c36 <HAL_RCCEx_PeriphCLKConfig+0xa3a>
        break;
 8004c34:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004c36:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8004c3a:	2b00      	cmp	r3, #0
 8004c3c:	d10a      	bne.n	8004c54 <HAL_RCCEx_PeriphCLKConfig+0xa58>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8004c3e:	4b96      	ldr	r3, [pc, #600]	@ (8004e98 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8004c40:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004c42:	f023 0107 	bic.w	r1, r3, #7
 8004c46:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004c4a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004c4c:	4a92      	ldr	r2, [pc, #584]	@ (8004e98 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8004c4e:	430b      	orrs	r3, r1
 8004c50:	6553      	str	r3, [r2, #84]	@ 0x54
 8004c52:	e003      	b.n	8004c5c <HAL_RCCEx_PeriphCLKConfig+0xa60>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004c54:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8004c58:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8004c5c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004c60:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004c64:	f002 0304 	and.w	r3, r2, #4
 8004c68:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8004c6c:	2300      	movs	r3, #0
 8004c6e:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8004c72:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8004c76:	460b      	mov	r3, r1
 8004c78:	4313      	orrs	r3, r2
 8004c7a:	d044      	beq.n	8004d06 <HAL_RCCEx_PeriphCLKConfig+0xb0a>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 8004c7c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004c80:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004c84:	2b05      	cmp	r3, #5
 8004c86:	d825      	bhi.n	8004cd4 <HAL_RCCEx_PeriphCLKConfig+0xad8>
 8004c88:	a201      	add	r2, pc, #4	@ (adr r2, 8004c90 <HAL_RCCEx_PeriphCLKConfig+0xa94>)
 8004c8a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004c8e:	bf00      	nop
 8004c90:	08004cdd 	.word	0x08004cdd
 8004c94:	08004ca9 	.word	0x08004ca9
 8004c98:	08004cbf 	.word	0x08004cbf
 8004c9c:	08004cdd 	.word	0x08004cdd
 8004ca0:	08004cdd 	.word	0x08004cdd
 8004ca4:	08004cdd 	.word	0x08004cdd
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8004ca8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004cac:	3308      	adds	r3, #8
 8004cae:	2101      	movs	r1, #1
 8004cb0:	4618      	mov	r0, r3
 8004cb2:	f000 ff01 	bl	8005ab8 <RCCEx_PLL2_Config>
 8004cb6:	4603      	mov	r3, r0
 8004cb8:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8004cbc:	e00f      	b.n	8004cde <HAL_RCCEx_PeriphCLKConfig+0xae2>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8004cbe:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004cc2:	3328      	adds	r3, #40	@ 0x28
 8004cc4:	2101      	movs	r1, #1
 8004cc6:	4618      	mov	r0, r3
 8004cc8:	f000 ffa8 	bl	8005c1c <RCCEx_PLL3_Config>
 8004ccc:	4603      	mov	r3, r0
 8004cce:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8004cd2:	e004      	b.n	8004cde <HAL_RCCEx_PeriphCLKConfig+0xae2>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004cd4:	2301      	movs	r3, #1
 8004cd6:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8004cda:	e000      	b.n	8004cde <HAL_RCCEx_PeriphCLKConfig+0xae2>
        break;
 8004cdc:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004cde:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8004ce2:	2b00      	cmp	r3, #0
 8004ce4:	d10b      	bne.n	8004cfe <HAL_RCCEx_PeriphCLKConfig+0xb02>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8004ce6:	4b6c      	ldr	r3, [pc, #432]	@ (8004e98 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8004ce8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004cea:	f023 0107 	bic.w	r1, r3, #7
 8004cee:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004cf2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004cf6:	4a68      	ldr	r2, [pc, #416]	@ (8004e98 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8004cf8:	430b      	orrs	r3, r1
 8004cfa:	6593      	str	r3, [r2, #88]	@ 0x58
 8004cfc:	e003      	b.n	8004d06 <HAL_RCCEx_PeriphCLKConfig+0xb0a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004cfe:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8004d02:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8004d06:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004d0a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004d0e:	f002 0320 	and.w	r3, r2, #32
 8004d12:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8004d16:	2300      	movs	r3, #0
 8004d18:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 8004d1c:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	@ 0xa0
 8004d20:	460b      	mov	r3, r1
 8004d22:	4313      	orrs	r3, r2
 8004d24:	d055      	beq.n	8004dd2 <HAL_RCCEx_PeriphCLKConfig+0xbd6>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 8004d26:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004d2a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8004d2e:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8004d32:	d033      	beq.n	8004d9c <HAL_RCCEx_PeriphCLKConfig+0xba0>
 8004d34:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8004d38:	d82c      	bhi.n	8004d94 <HAL_RCCEx_PeriphCLKConfig+0xb98>
 8004d3a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004d3e:	d02f      	beq.n	8004da0 <HAL_RCCEx_PeriphCLKConfig+0xba4>
 8004d40:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004d44:	d826      	bhi.n	8004d94 <HAL_RCCEx_PeriphCLKConfig+0xb98>
 8004d46:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8004d4a:	d02b      	beq.n	8004da4 <HAL_RCCEx_PeriphCLKConfig+0xba8>
 8004d4c:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8004d50:	d820      	bhi.n	8004d94 <HAL_RCCEx_PeriphCLKConfig+0xb98>
 8004d52:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8004d56:	d012      	beq.n	8004d7e <HAL_RCCEx_PeriphCLKConfig+0xb82>
 8004d58:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8004d5c:	d81a      	bhi.n	8004d94 <HAL_RCCEx_PeriphCLKConfig+0xb98>
 8004d5e:	2b00      	cmp	r3, #0
 8004d60:	d022      	beq.n	8004da8 <HAL_RCCEx_PeriphCLKConfig+0xbac>
 8004d62:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8004d66:	d115      	bne.n	8004d94 <HAL_RCCEx_PeriphCLKConfig+0xb98>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8004d68:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004d6c:	3308      	adds	r3, #8
 8004d6e:	2100      	movs	r1, #0
 8004d70:	4618      	mov	r0, r3
 8004d72:	f000 fea1 	bl	8005ab8 <RCCEx_PLL2_Config>
 8004d76:	4603      	mov	r3, r0
 8004d78:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8004d7c:	e015      	b.n	8004daa <HAL_RCCEx_PeriphCLKConfig+0xbae>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8004d7e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004d82:	3328      	adds	r3, #40	@ 0x28
 8004d84:	2102      	movs	r1, #2
 8004d86:	4618      	mov	r0, r3
 8004d88:	f000 ff48 	bl	8005c1c <RCCEx_PLL3_Config>
 8004d8c:	4603      	mov	r3, r0
 8004d8e:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8004d92:	e00a      	b.n	8004daa <HAL_RCCEx_PeriphCLKConfig+0xbae>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004d94:	2301      	movs	r3, #1
 8004d96:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8004d9a:	e006      	b.n	8004daa <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 8004d9c:	bf00      	nop
 8004d9e:	e004      	b.n	8004daa <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 8004da0:	bf00      	nop
 8004da2:	e002      	b.n	8004daa <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 8004da4:	bf00      	nop
 8004da6:	e000      	b.n	8004daa <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 8004da8:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004daa:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8004dae:	2b00      	cmp	r3, #0
 8004db0:	d10b      	bne.n	8004dca <HAL_RCCEx_PeriphCLKConfig+0xbce>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8004db2:	4b39      	ldr	r3, [pc, #228]	@ (8004e98 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8004db4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004db6:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 8004dba:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004dbe:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8004dc2:	4a35      	ldr	r2, [pc, #212]	@ (8004e98 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8004dc4:	430b      	orrs	r3, r1
 8004dc6:	6553      	str	r3, [r2, #84]	@ 0x54
 8004dc8:	e003      	b.n	8004dd2 <HAL_RCCEx_PeriphCLKConfig+0xbd6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004dca:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8004dce:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8004dd2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004dd6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004dda:	f002 0340 	and.w	r3, r2, #64	@ 0x40
 8004dde:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8004de2:	2300      	movs	r3, #0
 8004de4:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8004de8:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	@ 0x98
 8004dec:	460b      	mov	r3, r1
 8004dee:	4313      	orrs	r3, r2
 8004df0:	d058      	beq.n	8004ea4 <HAL_RCCEx_PeriphCLKConfig+0xca8>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 8004df2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004df6:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8004dfa:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 8004dfe:	d033      	beq.n	8004e68 <HAL_RCCEx_PeriphCLKConfig+0xc6c>
 8004e00:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 8004e04:	d82c      	bhi.n	8004e60 <HAL_RCCEx_PeriphCLKConfig+0xc64>
 8004e06:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004e0a:	d02f      	beq.n	8004e6c <HAL_RCCEx_PeriphCLKConfig+0xc70>
 8004e0c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004e10:	d826      	bhi.n	8004e60 <HAL_RCCEx_PeriphCLKConfig+0xc64>
 8004e12:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8004e16:	d02b      	beq.n	8004e70 <HAL_RCCEx_PeriphCLKConfig+0xc74>
 8004e18:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8004e1c:	d820      	bhi.n	8004e60 <HAL_RCCEx_PeriphCLKConfig+0xc64>
 8004e1e:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004e22:	d012      	beq.n	8004e4a <HAL_RCCEx_PeriphCLKConfig+0xc4e>
 8004e24:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004e28:	d81a      	bhi.n	8004e60 <HAL_RCCEx_PeriphCLKConfig+0xc64>
 8004e2a:	2b00      	cmp	r3, #0
 8004e2c:	d022      	beq.n	8004e74 <HAL_RCCEx_PeriphCLKConfig+0xc78>
 8004e2e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004e32:	d115      	bne.n	8004e60 <HAL_RCCEx_PeriphCLKConfig+0xc64>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8004e34:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004e38:	3308      	adds	r3, #8
 8004e3a:	2100      	movs	r1, #0
 8004e3c:	4618      	mov	r0, r3
 8004e3e:	f000 fe3b 	bl	8005ab8 <RCCEx_PLL2_Config>
 8004e42:	4603      	mov	r3, r0
 8004e44:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8004e48:	e015      	b.n	8004e76 <HAL_RCCEx_PeriphCLKConfig+0xc7a>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8004e4a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004e4e:	3328      	adds	r3, #40	@ 0x28
 8004e50:	2102      	movs	r1, #2
 8004e52:	4618      	mov	r0, r3
 8004e54:	f000 fee2 	bl	8005c1c <RCCEx_PLL3_Config>
 8004e58:	4603      	mov	r3, r0
 8004e5a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8004e5e:	e00a      	b.n	8004e76 <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004e60:	2301      	movs	r3, #1
 8004e62:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8004e66:	e006      	b.n	8004e76 <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 8004e68:	bf00      	nop
 8004e6a:	e004      	b.n	8004e76 <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 8004e6c:	bf00      	nop
 8004e6e:	e002      	b.n	8004e76 <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 8004e70:	bf00      	nop
 8004e72:	e000      	b.n	8004e76 <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 8004e74:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004e76:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8004e7a:	2b00      	cmp	r3, #0
 8004e7c:	d10e      	bne.n	8004e9c <HAL_RCCEx_PeriphCLKConfig+0xca0>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8004e7e:	4b06      	ldr	r3, [pc, #24]	@ (8004e98 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8004e80:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004e82:	f423 51e0 	bic.w	r1, r3, #7168	@ 0x1c00
 8004e86:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004e8a:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8004e8e:	4a02      	ldr	r2, [pc, #8]	@ (8004e98 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8004e90:	430b      	orrs	r3, r1
 8004e92:	6593      	str	r3, [r2, #88]	@ 0x58
 8004e94:	e006      	b.n	8004ea4 <HAL_RCCEx_PeriphCLKConfig+0xca8>
 8004e96:	bf00      	nop
 8004e98:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004e9c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8004ea0:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8004ea4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004ea8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004eac:	f002 0380 	and.w	r3, r2, #128	@ 0x80
 8004eb0:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8004eb4:	2300      	movs	r3, #0
 8004eb6:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8004eba:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	@ 0x90
 8004ebe:	460b      	mov	r3, r1
 8004ec0:	4313      	orrs	r3, r2
 8004ec2:	d055      	beq.n	8004f70 <HAL_RCCEx_PeriphCLKConfig+0xd74>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 8004ec4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004ec8:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8004ecc:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 8004ed0:	d033      	beq.n	8004f3a <HAL_RCCEx_PeriphCLKConfig+0xd3e>
 8004ed2:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 8004ed6:	d82c      	bhi.n	8004f32 <HAL_RCCEx_PeriphCLKConfig+0xd36>
 8004ed8:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004edc:	d02f      	beq.n	8004f3e <HAL_RCCEx_PeriphCLKConfig+0xd42>
 8004ede:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004ee2:	d826      	bhi.n	8004f32 <HAL_RCCEx_PeriphCLKConfig+0xd36>
 8004ee4:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 8004ee8:	d02b      	beq.n	8004f42 <HAL_RCCEx_PeriphCLKConfig+0xd46>
 8004eea:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 8004eee:	d820      	bhi.n	8004f32 <HAL_RCCEx_PeriphCLKConfig+0xd36>
 8004ef0:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8004ef4:	d012      	beq.n	8004f1c <HAL_RCCEx_PeriphCLKConfig+0xd20>
 8004ef6:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8004efa:	d81a      	bhi.n	8004f32 <HAL_RCCEx_PeriphCLKConfig+0xd36>
 8004efc:	2b00      	cmp	r3, #0
 8004efe:	d022      	beq.n	8004f46 <HAL_RCCEx_PeriphCLKConfig+0xd4a>
 8004f00:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004f04:	d115      	bne.n	8004f32 <HAL_RCCEx_PeriphCLKConfig+0xd36>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8004f06:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004f0a:	3308      	adds	r3, #8
 8004f0c:	2100      	movs	r1, #0
 8004f0e:	4618      	mov	r0, r3
 8004f10:	f000 fdd2 	bl	8005ab8 <RCCEx_PLL2_Config>
 8004f14:	4603      	mov	r3, r0
 8004f16:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8004f1a:	e015      	b.n	8004f48 <HAL_RCCEx_PeriphCLKConfig+0xd4c>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8004f1c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004f20:	3328      	adds	r3, #40	@ 0x28
 8004f22:	2102      	movs	r1, #2
 8004f24:	4618      	mov	r0, r3
 8004f26:	f000 fe79 	bl	8005c1c <RCCEx_PLL3_Config>
 8004f2a:	4603      	mov	r3, r0
 8004f2c:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8004f30:	e00a      	b.n	8004f48 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004f32:	2301      	movs	r3, #1
 8004f34:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8004f38:	e006      	b.n	8004f48 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 8004f3a:	bf00      	nop
 8004f3c:	e004      	b.n	8004f48 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 8004f3e:	bf00      	nop
 8004f40:	e002      	b.n	8004f48 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 8004f42:	bf00      	nop
 8004f44:	e000      	b.n	8004f48 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 8004f46:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004f48:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8004f4c:	2b00      	cmp	r3, #0
 8004f4e:	d10b      	bne.n	8004f68 <HAL_RCCEx_PeriphCLKConfig+0xd6c>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8004f50:	4ba0      	ldr	r3, [pc, #640]	@ (80051d4 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8004f52:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004f54:	f423 4160 	bic.w	r1, r3, #57344	@ 0xe000
 8004f58:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004f5c:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8004f60:	4a9c      	ldr	r2, [pc, #624]	@ (80051d4 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8004f62:	430b      	orrs	r3, r1
 8004f64:	6593      	str	r3, [r2, #88]	@ 0x58
 8004f66:	e003      	b.n	8004f70 <HAL_RCCEx_PeriphCLKConfig+0xd74>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004f68:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8004f6c:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*------------------------------ I2C1/2/3/5* Configuration ------------------------*/
#if defined(I2C5)
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1235) == RCC_PERIPHCLK_I2C1235)
 8004f70:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004f74:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004f78:	f002 0308 	and.w	r3, r2, #8
 8004f7c:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8004f80:	2300      	movs	r3, #0
 8004f82:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8004f86:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	@ 0x88
 8004f8a:	460b      	mov	r3, r1
 8004f8c:	4313      	orrs	r3, r2
 8004f8e:	d01e      	beq.n	8004fce <HAL_RCCEx_PeriphCLKConfig+0xdd2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1235CLKSOURCE(PeriphClkInit->I2c1235ClockSelection));

    if ((PeriphClkInit->I2c1235ClockSelection) == RCC_I2C1235CLKSOURCE_PLL3)
 8004f90:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004f94:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004f98:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004f9c:	d10c      	bne.n	8004fb8 <HAL_RCCEx_PeriphCLKConfig+0xdbc>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8004f9e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004fa2:	3328      	adds	r3, #40	@ 0x28
 8004fa4:	2102      	movs	r1, #2
 8004fa6:	4618      	mov	r0, r3
 8004fa8:	f000 fe38 	bl	8005c1c <RCCEx_PLL3_Config>
 8004fac:	4603      	mov	r3, r0
 8004fae:	2b00      	cmp	r3, #0
 8004fb0:	d002      	beq.n	8004fb8 <HAL_RCCEx_PeriphCLKConfig+0xdbc>
      {
        status = HAL_ERROR;
 8004fb2:	2301      	movs	r3, #1
 8004fb4:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
      }
    }

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);
 8004fb8:	4b86      	ldr	r3, [pc, #536]	@ (80051d4 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8004fba:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004fbc:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8004fc0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004fc4:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004fc8:	4a82      	ldr	r2, [pc, #520]	@ (80051d4 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8004fca:	430b      	orrs	r3, r1
 8004fcc:	6553      	str	r3, [r2, #84]	@ 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8004fce:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004fd2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004fd6:	f002 0310 	and.w	r3, r2, #16
 8004fda:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8004fde:	2300      	movs	r3, #0
 8004fe0:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8004fe4:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	@ 0x80
 8004fe8:	460b      	mov	r3, r1
 8004fea:	4313      	orrs	r3, r2
 8004fec:	d01e      	beq.n	800502c <HAL_RCCEx_PeriphCLKConfig+0xe30>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 8004fee:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004ff2:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004ff6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004ffa:	d10c      	bne.n	8005016 <HAL_RCCEx_PeriphCLKConfig+0xe1a>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8004ffc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005000:	3328      	adds	r3, #40	@ 0x28
 8005002:	2102      	movs	r1, #2
 8005004:	4618      	mov	r0, r3
 8005006:	f000 fe09 	bl	8005c1c <RCCEx_PLL3_Config>
 800500a:	4603      	mov	r3, r0
 800500c:	2b00      	cmp	r3, #0
 800500e:	d002      	beq.n	8005016 <HAL_RCCEx_PeriphCLKConfig+0xe1a>
      {
        status = HAL_ERROR;
 8005010:	2301      	movs	r3, #1
 8005012:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8005016:	4b6f      	ldr	r3, [pc, #444]	@ (80051d4 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8005018:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800501a:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 800501e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005022:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8005026:	4a6b      	ldr	r2, [pc, #428]	@ (80051d4 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8005028:	430b      	orrs	r3, r1
 800502a:	6593      	str	r3, [r2, #88]	@ 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800502c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005030:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005034:	f402 2300 	and.w	r3, r2, #524288	@ 0x80000
 8005038:	67bb      	str	r3, [r7, #120]	@ 0x78
 800503a:	2300      	movs	r3, #0
 800503c:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800503e:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	@ 0x78
 8005042:	460b      	mov	r3, r1
 8005044:	4313      	orrs	r3, r2
 8005046:	d03e      	beq.n	80050c6 <HAL_RCCEx_PeriphCLKConfig+0xeca>
  {
    switch (PeriphClkInit->AdcClockSelection)
 8005048:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800504c:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8005050:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8005054:	d022      	beq.n	800509c <HAL_RCCEx_PeriphCLKConfig+0xea0>
 8005056:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800505a:	d81b      	bhi.n	8005094 <HAL_RCCEx_PeriphCLKConfig+0xe98>
 800505c:	2b00      	cmp	r3, #0
 800505e:	d003      	beq.n	8005068 <HAL_RCCEx_PeriphCLKConfig+0xe6c>
 8005060:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005064:	d00b      	beq.n	800507e <HAL_RCCEx_PeriphCLKConfig+0xe82>
 8005066:	e015      	b.n	8005094 <HAL_RCCEx_PeriphCLKConfig+0xe98>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8005068:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800506c:	3308      	adds	r3, #8
 800506e:	2100      	movs	r1, #0
 8005070:	4618      	mov	r0, r3
 8005072:	f000 fd21 	bl	8005ab8 <RCCEx_PLL2_Config>
 8005076:	4603      	mov	r3, r0
 8005078:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* ADC clock source configuration done later after clock selection check */
        break;
 800507c:	e00f      	b.n	800509e <HAL_RCCEx_PeriphCLKConfig+0xea2>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800507e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005082:	3328      	adds	r3, #40	@ 0x28
 8005084:	2102      	movs	r1, #2
 8005086:	4618      	mov	r0, r3
 8005088:	f000 fdc8 	bl	8005c1c <RCCEx_PLL3_Config>
 800508c:	4603      	mov	r3, r0
 800508e:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* ADC clock source configuration done later after clock selection check */
        break;
 8005092:	e004      	b.n	800509e <HAL_RCCEx_PeriphCLKConfig+0xea2>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005094:	2301      	movs	r3, #1
 8005096:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800509a:	e000      	b.n	800509e <HAL_RCCEx_PeriphCLKConfig+0xea2>
        break;
 800509c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800509e:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80050a2:	2b00      	cmp	r3, #0
 80050a4:	d10b      	bne.n	80050be <HAL_RCCEx_PeriphCLKConfig+0xec2>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80050a6:	4b4b      	ldr	r3, [pc, #300]	@ (80051d4 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 80050a8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80050aa:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
 80050ae:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80050b2:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 80050b6:	4a47      	ldr	r2, [pc, #284]	@ (80051d4 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 80050b8:	430b      	orrs	r3, r1
 80050ba:	6593      	str	r3, [r2, #88]	@ 0x58
 80050bc:	e003      	b.n	80050c6 <HAL_RCCEx_PeriphCLKConfig+0xeca>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80050be:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80050c2:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80050c6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80050ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80050ce:	f402 2380 	and.w	r3, r2, #262144	@ 0x40000
 80050d2:	673b      	str	r3, [r7, #112]	@ 0x70
 80050d4:	2300      	movs	r3, #0
 80050d6:	677b      	str	r3, [r7, #116]	@ 0x74
 80050d8:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	@ 0x70
 80050dc:	460b      	mov	r3, r1
 80050de:	4313      	orrs	r3, r2
 80050e0:	d03b      	beq.n	800515a <HAL_RCCEx_PeriphCLKConfig+0xf5e>
  {

    switch (PeriphClkInit->UsbClockSelection)
 80050e2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80050e6:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80050ea:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 80050ee:	d01f      	beq.n	8005130 <HAL_RCCEx_PeriphCLKConfig+0xf34>
 80050f0:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 80050f4:	d818      	bhi.n	8005128 <HAL_RCCEx_PeriphCLKConfig+0xf2c>
 80050f6:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80050fa:	d003      	beq.n	8005104 <HAL_RCCEx_PeriphCLKConfig+0xf08>
 80050fc:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8005100:	d007      	beq.n	8005112 <HAL_RCCEx_PeriphCLKConfig+0xf16>
 8005102:	e011      	b.n	8005128 <HAL_RCCEx_PeriphCLKConfig+0xf2c>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005104:	4b33      	ldr	r3, [pc, #204]	@ (80051d4 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8005106:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005108:	4a32      	ldr	r2, [pc, #200]	@ (80051d4 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800510a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800510e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 8005110:	e00f      	b.n	8005132 <HAL_RCCEx_PeriphCLKConfig+0xf36>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8005112:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005116:	3328      	adds	r3, #40	@ 0x28
 8005118:	2101      	movs	r1, #1
 800511a:	4618      	mov	r0, r3
 800511c:	f000 fd7e 	bl	8005c1c <RCCEx_PLL3_Config>
 8005120:	4603      	mov	r3, r0
 8005122:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* USB clock source configuration done later after clock selection check */
        break;
 8005126:	e004      	b.n	8005132 <HAL_RCCEx_PeriphCLKConfig+0xf36>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005128:	2301      	movs	r3, #1
 800512a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800512e:	e000      	b.n	8005132 <HAL_RCCEx_PeriphCLKConfig+0xf36>
        break;
 8005130:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005132:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8005136:	2b00      	cmp	r3, #0
 8005138:	d10b      	bne.n	8005152 <HAL_RCCEx_PeriphCLKConfig+0xf56>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800513a:	4b26      	ldr	r3, [pc, #152]	@ (80051d4 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800513c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800513e:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 8005142:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005146:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800514a:	4a22      	ldr	r2, [pc, #136]	@ (80051d4 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800514c:	430b      	orrs	r3, r1
 800514e:	6553      	str	r3, [r2, #84]	@ 0x54
 8005150:	e003      	b.n	800515a <HAL_RCCEx_PeriphCLKConfig+0xf5e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005152:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8005156:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 800515a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800515e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005162:	f402 3380 	and.w	r3, r2, #65536	@ 0x10000
 8005166:	66bb      	str	r3, [r7, #104]	@ 0x68
 8005168:	2300      	movs	r3, #0
 800516a:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800516c:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	@ 0x68
 8005170:	460b      	mov	r3, r1
 8005172:	4313      	orrs	r3, r2
 8005174:	d034      	beq.n	80051e0 <HAL_RCCEx_PeriphCLKConfig+0xfe4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 8005176:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800517a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800517c:	2b00      	cmp	r3, #0
 800517e:	d003      	beq.n	8005188 <HAL_RCCEx_PeriphCLKConfig+0xf8c>
 8005180:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005184:	d007      	beq.n	8005196 <HAL_RCCEx_PeriphCLKConfig+0xf9a>
 8005186:	e011      	b.n	80051ac <HAL_RCCEx_PeriphCLKConfig+0xfb0>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005188:	4b12      	ldr	r3, [pc, #72]	@ (80051d4 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800518a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800518c:	4a11      	ldr	r2, [pc, #68]	@ (80051d4 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800518e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005192:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8005194:	e00e      	b.n	80051b4 <HAL_RCCEx_PeriphCLKConfig+0xfb8>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8005196:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800519a:	3308      	adds	r3, #8
 800519c:	2102      	movs	r1, #2
 800519e:	4618      	mov	r0, r3
 80051a0:	f000 fc8a 	bl	8005ab8 <RCCEx_PLL2_Config>
 80051a4:	4603      	mov	r3, r0
 80051a6:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 80051aa:	e003      	b.n	80051b4 <HAL_RCCEx_PeriphCLKConfig+0xfb8>

      default:
        ret = HAL_ERROR;
 80051ac:	2301      	movs	r3, #1
 80051ae:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 80051b2:	bf00      	nop
    }

    if (ret == HAL_OK)
 80051b4:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80051b8:	2b00      	cmp	r3, #0
 80051ba:	d10d      	bne.n	80051d8 <HAL_RCCEx_PeriphCLKConfig+0xfdc>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 80051bc:	4b05      	ldr	r3, [pc, #20]	@ (80051d4 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 80051be:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80051c0:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 80051c4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80051c8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80051ca:	4a02      	ldr	r2, [pc, #8]	@ (80051d4 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 80051cc:	430b      	orrs	r3, r1
 80051ce:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80051d0:	e006      	b.n	80051e0 <HAL_RCCEx_PeriphCLKConfig+0xfe4>
 80051d2:	bf00      	nop
 80051d4:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80051d8:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80051dc:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 80051e0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80051e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80051e8:	f002 5300 	and.w	r3, r2, #536870912	@ 0x20000000
 80051ec:	663b      	str	r3, [r7, #96]	@ 0x60
 80051ee:	2300      	movs	r3, #0
 80051f0:	667b      	str	r3, [r7, #100]	@ 0x64
 80051f2:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	@ 0x60
 80051f6:	460b      	mov	r3, r1
 80051f8:	4313      	orrs	r3, r2
 80051fa:	d00c      	beq.n	8005216 <HAL_RCCEx_PeriphCLKConfig+0x101a>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 80051fc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005200:	3328      	adds	r3, #40	@ 0x28
 8005202:	2102      	movs	r1, #2
 8005204:	4618      	mov	r0, r3
 8005206:	f000 fd09 	bl	8005c1c <RCCEx_PLL3_Config>
 800520a:	4603      	mov	r3, r0
 800520c:	2b00      	cmp	r3, #0
 800520e:	d002      	beq.n	8005216 <HAL_RCCEx_PeriphCLKConfig+0x101a>
    {
      status = HAL_ERROR;
 8005210:	2301      	movs	r3, #1
 8005212:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8005216:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800521a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800521e:	f402 3300 	and.w	r3, r2, #131072	@ 0x20000
 8005222:	65bb      	str	r3, [r7, #88]	@ 0x58
 8005224:	2300      	movs	r3, #0
 8005226:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8005228:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	@ 0x58
 800522c:	460b      	mov	r3, r1
 800522e:	4313      	orrs	r3, r2
 8005230:	d036      	beq.n	80052a0 <HAL_RCCEx_PeriphCLKConfig+0x10a4>
  {

    switch (PeriphClkInit->RngClockSelection)
 8005232:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005236:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8005238:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800523c:	d018      	beq.n	8005270 <HAL_RCCEx_PeriphCLKConfig+0x1074>
 800523e:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8005242:	d811      	bhi.n	8005268 <HAL_RCCEx_PeriphCLKConfig+0x106c>
 8005244:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005248:	d014      	beq.n	8005274 <HAL_RCCEx_PeriphCLKConfig+0x1078>
 800524a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800524e:	d80b      	bhi.n	8005268 <HAL_RCCEx_PeriphCLKConfig+0x106c>
 8005250:	2b00      	cmp	r3, #0
 8005252:	d011      	beq.n	8005278 <HAL_RCCEx_PeriphCLKConfig+0x107c>
 8005254:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005258:	d106      	bne.n	8005268 <HAL_RCCEx_PeriphCLKConfig+0x106c>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800525a:	4bb7      	ldr	r3, [pc, #732]	@ (8005538 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800525c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800525e:	4ab6      	ldr	r2, [pc, #728]	@ (8005538 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8005260:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005264:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 8005266:	e008      	b.n	800527a <HAL_RCCEx_PeriphCLKConfig+0x107e>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005268:	2301      	movs	r3, #1
 800526a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800526e:	e004      	b.n	800527a <HAL_RCCEx_PeriphCLKConfig+0x107e>
        break;
 8005270:	bf00      	nop
 8005272:	e002      	b.n	800527a <HAL_RCCEx_PeriphCLKConfig+0x107e>
        break;
 8005274:	bf00      	nop
 8005276:	e000      	b.n	800527a <HAL_RCCEx_PeriphCLKConfig+0x107e>
        break;
 8005278:	bf00      	nop
    }

    if (ret == HAL_OK)
 800527a:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800527e:	2b00      	cmp	r3, #0
 8005280:	d10a      	bne.n	8005298 <HAL_RCCEx_PeriphCLKConfig+0x109c>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8005282:	4bad      	ldr	r3, [pc, #692]	@ (8005538 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8005284:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005286:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 800528a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800528e:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8005290:	4aa9      	ldr	r2, [pc, #676]	@ (8005538 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8005292:	430b      	orrs	r3, r1
 8005294:	6553      	str	r3, [r2, #84]	@ 0x54
 8005296:	e003      	b.n	80052a0 <HAL_RCCEx_PeriphCLKConfig+0x10a4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005298:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800529c:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 80052a0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80052a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80052a8:	f402 1380 	and.w	r3, r2, #1048576	@ 0x100000
 80052ac:	653b      	str	r3, [r7, #80]	@ 0x50
 80052ae:	2300      	movs	r3, #0
 80052b0:	657b      	str	r3, [r7, #84]	@ 0x54
 80052b2:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	@ 0x50
 80052b6:	460b      	mov	r3, r1
 80052b8:	4313      	orrs	r3, r2
 80052ba:	d009      	beq.n	80052d0 <HAL_RCCEx_PeriphCLKConfig+0x10d4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 80052bc:	4b9e      	ldr	r3, [pc, #632]	@ (8005538 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 80052be:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80052c0:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 80052c4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80052c8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80052ca:	4a9b      	ldr	r2, [pc, #620]	@ (8005538 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 80052cc:	430b      	orrs	r3, r1
 80052ce:	6513      	str	r3, [r2, #80]	@ 0x50
    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80052d0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80052d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80052d8:	f402 1300 	and.w	r3, r2, #2097152	@ 0x200000
 80052dc:	64bb      	str	r3, [r7, #72]	@ 0x48
 80052de:	2300      	movs	r3, #0
 80052e0:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80052e2:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	@ 0x48
 80052e6:	460b      	mov	r3, r1
 80052e8:	4313      	orrs	r3, r2
 80052ea:	d009      	beq.n	8005300 <HAL_RCCEx_PeriphCLKConfig+0x1104>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80052ec:	4b92      	ldr	r3, [pc, #584]	@ (8005538 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 80052ee:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80052f0:	f023 7180 	bic.w	r1, r3, #16777216	@ 0x1000000
 80052f4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80052f8:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80052fa:	4a8f      	ldr	r2, [pc, #572]	@ (8005538 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 80052fc:	430b      	orrs	r3, r1
 80052fe:	6513      	str	r3, [r2, #80]	@ 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8005300:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005304:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005308:	f002 4380 	and.w	r3, r2, #1073741824	@ 0x40000000
 800530c:	643b      	str	r3, [r7, #64]	@ 0x40
 800530e:	2300      	movs	r3, #0
 8005310:	647b      	str	r3, [r7, #68]	@ 0x44
 8005312:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	@ 0x40
 8005316:	460b      	mov	r3, r1
 8005318:	4313      	orrs	r3, r2
 800531a:	d00e      	beq.n	800533a <HAL_RCCEx_PeriphCLKConfig+0x113e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800531c:	4b86      	ldr	r3, [pc, #536]	@ (8005538 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800531e:	691b      	ldr	r3, [r3, #16]
 8005320:	4a85      	ldr	r2, [pc, #532]	@ (8005538 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8005322:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8005326:	6113      	str	r3, [r2, #16]
 8005328:	4b83      	ldr	r3, [pc, #524]	@ (8005538 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800532a:	6919      	ldr	r1, [r3, #16]
 800532c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005330:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8005334:	4a80      	ldr	r2, [pc, #512]	@ (8005538 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8005336:	430b      	orrs	r3, r1
 8005338:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 800533a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800533e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005342:	f002 4300 	and.w	r3, r2, #2147483648	@ 0x80000000
 8005346:	63bb      	str	r3, [r7, #56]	@ 0x38
 8005348:	2300      	movs	r3, #0
 800534a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800534c:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	@ 0x38
 8005350:	460b      	mov	r3, r1
 8005352:	4313      	orrs	r3, r2
 8005354:	d009      	beq.n	800536a <HAL_RCCEx_PeriphCLKConfig+0x116e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8005356:	4b78      	ldr	r3, [pc, #480]	@ (8005538 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8005358:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800535a:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 800535e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005362:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005364:	4a74      	ldr	r2, [pc, #464]	@ (8005538 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8005366:	430b      	orrs	r3, r1
 8005368:	64d3      	str	r3, [r2, #76]	@ 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800536a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800536e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005372:	f402 0300 	and.w	r3, r2, #8388608	@ 0x800000
 8005376:	633b      	str	r3, [r7, #48]	@ 0x30
 8005378:	2300      	movs	r3, #0
 800537a:	637b      	str	r3, [r7, #52]	@ 0x34
 800537c:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	@ 0x30
 8005380:	460b      	mov	r3, r1
 8005382:	4313      	orrs	r3, r2
 8005384:	d00a      	beq.n	800539c <HAL_RCCEx_PeriphCLKConfig+0x11a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8005386:	4b6c      	ldr	r3, [pc, #432]	@ (8005538 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8005388:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800538a:	f423 0140 	bic.w	r1, r3, #12582912	@ 0xc00000
 800538e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005392:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005396:	4a68      	ldr	r2, [pc, #416]	@ (8005538 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8005398:	430b      	orrs	r3, r1
 800539a:	6553      	str	r3, [r2, #84]	@ 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 800539c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80053a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80053a4:	2100      	movs	r1, #0
 80053a6:	62b9      	str	r1, [r7, #40]	@ 0x28
 80053a8:	f003 0301 	and.w	r3, r3, #1
 80053ac:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80053ae:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	@ 0x28
 80053b2:	460b      	mov	r3, r1
 80053b4:	4313      	orrs	r3, r2
 80053b6:	d011      	beq.n	80053dc <HAL_RCCEx_PeriphCLKConfig+0x11e0>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80053b8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80053bc:	3308      	adds	r3, #8
 80053be:	2100      	movs	r1, #0
 80053c0:	4618      	mov	r0, r3
 80053c2:	f000 fb79 	bl	8005ab8 <RCCEx_PLL2_Config>
 80053c6:	4603      	mov	r3, r0
 80053c8:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
    
    if (ret == HAL_OK)
 80053cc:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80053d0:	2b00      	cmp	r3, #0
 80053d2:	d003      	beq.n	80053dc <HAL_RCCEx_PeriphCLKConfig+0x11e0>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80053d4:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80053d8:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 80053dc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80053e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80053e4:	2100      	movs	r1, #0
 80053e6:	6239      	str	r1, [r7, #32]
 80053e8:	f003 0302 	and.w	r3, r3, #2
 80053ec:	627b      	str	r3, [r7, #36]	@ 0x24
 80053ee:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 80053f2:	460b      	mov	r3, r1
 80053f4:	4313      	orrs	r3, r2
 80053f6:	d011      	beq.n	800541c <HAL_RCCEx_PeriphCLKConfig+0x1220>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80053f8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80053fc:	3308      	adds	r3, #8
 80053fe:	2101      	movs	r1, #1
 8005400:	4618      	mov	r0, r3
 8005402:	f000 fb59 	bl	8005ab8 <RCCEx_PLL2_Config>
 8005406:	4603      	mov	r3, r0
 8005408:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
    
    if (ret == HAL_OK)
 800540c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8005410:	2b00      	cmp	r3, #0
 8005412:	d003      	beq.n	800541c <HAL_RCCEx_PeriphCLKConfig+0x1220>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005414:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8005418:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 800541c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005420:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005424:	2100      	movs	r1, #0
 8005426:	61b9      	str	r1, [r7, #24]
 8005428:	f003 0304 	and.w	r3, r3, #4
 800542c:	61fb      	str	r3, [r7, #28]
 800542e:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 8005432:	460b      	mov	r3, r1
 8005434:	4313      	orrs	r3, r2
 8005436:	d011      	beq.n	800545c <HAL_RCCEx_PeriphCLKConfig+0x1260>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8005438:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800543c:	3308      	adds	r3, #8
 800543e:	2102      	movs	r1, #2
 8005440:	4618      	mov	r0, r3
 8005442:	f000 fb39 	bl	8005ab8 <RCCEx_PLL2_Config>
 8005446:	4603      	mov	r3, r0
 8005448:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
    
    if (ret == HAL_OK)
 800544c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8005450:	2b00      	cmp	r3, #0
 8005452:	d003      	beq.n	800545c <HAL_RCCEx_PeriphCLKConfig+0x1260>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005454:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8005458:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 800545c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005460:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005464:	2100      	movs	r1, #0
 8005466:	6139      	str	r1, [r7, #16]
 8005468:	f003 0308 	and.w	r3, r3, #8
 800546c:	617b      	str	r3, [r7, #20]
 800546e:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8005472:	460b      	mov	r3, r1
 8005474:	4313      	orrs	r3, r2
 8005476:	d011      	beq.n	800549c <HAL_RCCEx_PeriphCLKConfig+0x12a0>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8005478:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800547c:	3328      	adds	r3, #40	@ 0x28
 800547e:	2100      	movs	r1, #0
 8005480:	4618      	mov	r0, r3
 8005482:	f000 fbcb 	bl	8005c1c <RCCEx_PLL3_Config>
 8005486:	4603      	mov	r3, r0
 8005488:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
  
    if (ret == HAL_OK)
 800548c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8005490:	2b00      	cmp	r3, #0
 8005492:	d003      	beq.n	800549c <HAL_RCCEx_PeriphCLKConfig+0x12a0>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005494:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8005498:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 800549c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80054a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80054a4:	2100      	movs	r1, #0
 80054a6:	60b9      	str	r1, [r7, #8]
 80054a8:	f003 0310 	and.w	r3, r3, #16
 80054ac:	60fb      	str	r3, [r7, #12]
 80054ae:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 80054b2:	460b      	mov	r3, r1
 80054b4:	4313      	orrs	r3, r2
 80054b6:	d011      	beq.n	80054dc <HAL_RCCEx_PeriphCLKConfig+0x12e0>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80054b8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80054bc:	3328      	adds	r3, #40	@ 0x28
 80054be:	2101      	movs	r1, #1
 80054c0:	4618      	mov	r0, r3
 80054c2:	f000 fbab 	bl	8005c1c <RCCEx_PLL3_Config>
 80054c6:	4603      	mov	r3, r0
 80054c8:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
    
    if (ret == HAL_OK)
 80054cc:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80054d0:	2b00      	cmp	r3, #0
 80054d2:	d003      	beq.n	80054dc <HAL_RCCEx_PeriphCLKConfig+0x12e0>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80054d4:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80054d8:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 80054dc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80054e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80054e4:	2100      	movs	r1, #0
 80054e6:	6039      	str	r1, [r7, #0]
 80054e8:	f003 0320 	and.w	r3, r3, #32
 80054ec:	607b      	str	r3, [r7, #4]
 80054ee:	e9d7 1200 	ldrd	r1, r2, [r7]
 80054f2:	460b      	mov	r3, r1
 80054f4:	4313      	orrs	r3, r2
 80054f6:	d011      	beq.n	800551c <HAL_RCCEx_PeriphCLKConfig+0x1320>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80054f8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80054fc:	3328      	adds	r3, #40	@ 0x28
 80054fe:	2102      	movs	r1, #2
 8005500:	4618      	mov	r0, r3
 8005502:	f000 fb8b 	bl	8005c1c <RCCEx_PLL3_Config>
 8005506:	4603      	mov	r3, r0
 8005508:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
    
    if (ret == HAL_OK)
 800550c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8005510:	2b00      	cmp	r3, #0
 8005512:	d003      	beq.n	800551c <HAL_RCCEx_PeriphCLKConfig+0x1320>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005514:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8005518:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    } 
  }

  if (status == HAL_OK)
 800551c:	f897 3116 	ldrb.w	r3, [r7, #278]	@ 0x116
 8005520:	2b00      	cmp	r3, #0
 8005522:	d101      	bne.n	8005528 <HAL_RCCEx_PeriphCLKConfig+0x132c>
  {
    return HAL_OK;
 8005524:	2300      	movs	r3, #0
 8005526:	e000      	b.n	800552a <HAL_RCCEx_PeriphCLKConfig+0x132e>
  }
  return HAL_ERROR;
 8005528:	2301      	movs	r3, #1
}
 800552a:	4618      	mov	r0, r3
 800552c:	f507 778c 	add.w	r7, r7, #280	@ 0x118
 8005530:	46bd      	mov	sp, r7
 8005532:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005536:	bf00      	nop
 8005538:	58024400 	.word	0x58024400

0800553c <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 800553c:	b580      	push	{r7, lr}
 800553e:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 8005540:	f7fe fe00 	bl	8004144 <HAL_RCC_GetHCLKFreq>
 8005544:	4602      	mov	r2, r0
 8005546:	4b06      	ldr	r3, [pc, #24]	@ (8005560 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 8005548:	6a1b      	ldr	r3, [r3, #32]
 800554a:	091b      	lsrs	r3, r3, #4
 800554c:	f003 0307 	and.w	r3, r3, #7
 8005550:	4904      	ldr	r1, [pc, #16]	@ (8005564 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 8005552:	5ccb      	ldrb	r3, [r1, r3]
 8005554:	f003 031f 	and.w	r3, r3, #31
 8005558:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 800555c:	4618      	mov	r0, r3
 800555e:	bd80      	pop	{r7, pc}
 8005560:	58024400 	.word	0x58024400
 8005564:	0800b2f4 	.word	0x0800b2f4

08005568 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 8005568:	b480      	push	{r7}
 800556a:	b089      	sub	sp, #36	@ 0x24
 800556c:	af00      	add	r7, sp, #0
 800556e:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8005570:	4ba1      	ldr	r3, [pc, #644]	@ (80057f8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005572:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005574:	f003 0303 	and.w	r3, r3, #3
 8005578:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 800557a:	4b9f      	ldr	r3, [pc, #636]	@ (80057f8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800557c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800557e:	0b1b      	lsrs	r3, r3, #12
 8005580:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8005584:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 8005586:	4b9c      	ldr	r3, [pc, #624]	@ (80057f8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005588:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800558a:	091b      	lsrs	r3, r3, #4
 800558c:	f003 0301 	and.w	r3, r3, #1
 8005590:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 8005592:	4b99      	ldr	r3, [pc, #612]	@ (80057f8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005594:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005596:	08db      	lsrs	r3, r3, #3
 8005598:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800559c:	693a      	ldr	r2, [r7, #16]
 800559e:	fb02 f303 	mul.w	r3, r2, r3
 80055a2:	ee07 3a90 	vmov	s15, r3
 80055a6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80055aa:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 80055ae:	697b      	ldr	r3, [r7, #20]
 80055b0:	2b00      	cmp	r3, #0
 80055b2:	f000 8111 	beq.w	80057d8 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 80055b6:	69bb      	ldr	r3, [r7, #24]
 80055b8:	2b02      	cmp	r3, #2
 80055ba:	f000 8083 	beq.w	80056c4 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 80055be:	69bb      	ldr	r3, [r7, #24]
 80055c0:	2b02      	cmp	r3, #2
 80055c2:	f200 80a1 	bhi.w	8005708 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 80055c6:	69bb      	ldr	r3, [r7, #24]
 80055c8:	2b00      	cmp	r3, #0
 80055ca:	d003      	beq.n	80055d4 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 80055cc:	69bb      	ldr	r3, [r7, #24]
 80055ce:	2b01      	cmp	r3, #1
 80055d0:	d056      	beq.n	8005680 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 80055d2:	e099      	b.n	8005708 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80055d4:	4b88      	ldr	r3, [pc, #544]	@ (80057f8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80055d6:	681b      	ldr	r3, [r3, #0]
 80055d8:	f003 0320 	and.w	r3, r3, #32
 80055dc:	2b00      	cmp	r3, #0
 80055de:	d02d      	beq.n	800563c <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80055e0:	4b85      	ldr	r3, [pc, #532]	@ (80057f8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80055e2:	681b      	ldr	r3, [r3, #0]
 80055e4:	08db      	lsrs	r3, r3, #3
 80055e6:	f003 0303 	and.w	r3, r3, #3
 80055ea:	4a84      	ldr	r2, [pc, #528]	@ (80057fc <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 80055ec:	fa22 f303 	lsr.w	r3, r2, r3
 80055f0:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 80055f2:	68bb      	ldr	r3, [r7, #8]
 80055f4:	ee07 3a90 	vmov	s15, r3
 80055f8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80055fc:	697b      	ldr	r3, [r7, #20]
 80055fe:	ee07 3a90 	vmov	s15, r3
 8005602:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005606:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800560a:	4b7b      	ldr	r3, [pc, #492]	@ (80057f8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800560c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800560e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005612:	ee07 3a90 	vmov	s15, r3
 8005616:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800561a:	ed97 6a03 	vldr	s12, [r7, #12]
 800561e:	eddf 5a78 	vldr	s11, [pc, #480]	@ 8005800 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8005622:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005626:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800562a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800562e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005632:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005636:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800563a:	e087      	b.n	800574c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800563c:	697b      	ldr	r3, [r7, #20]
 800563e:	ee07 3a90 	vmov	s15, r3
 8005642:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005646:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 8005804 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 800564a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800564e:	4b6a      	ldr	r3, [pc, #424]	@ (80057f8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005650:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005652:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005656:	ee07 3a90 	vmov	s15, r3
 800565a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800565e:	ed97 6a03 	vldr	s12, [r7, #12]
 8005662:	eddf 5a67 	vldr	s11, [pc, #412]	@ 8005800 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8005666:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800566a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800566e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005672:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005676:	ee67 7a27 	vmul.f32	s15, s14, s15
 800567a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800567e:	e065      	b.n	800574c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8005680:	697b      	ldr	r3, [r7, #20]
 8005682:	ee07 3a90 	vmov	s15, r3
 8005686:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800568a:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 8005808 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800568e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005692:	4b59      	ldr	r3, [pc, #356]	@ (80057f8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005694:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005696:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800569a:	ee07 3a90 	vmov	s15, r3
 800569e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80056a2:	ed97 6a03 	vldr	s12, [r7, #12]
 80056a6:	eddf 5a56 	vldr	s11, [pc, #344]	@ 8005800 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80056aa:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80056ae:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80056b2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80056b6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80056ba:	ee67 7a27 	vmul.f32	s15, s14, s15
 80056be:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80056c2:	e043      	b.n	800574c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 80056c4:	697b      	ldr	r3, [r7, #20]
 80056c6:	ee07 3a90 	vmov	s15, r3
 80056ca:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80056ce:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 800580c <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 80056d2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80056d6:	4b48      	ldr	r3, [pc, #288]	@ (80057f8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80056d8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80056da:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80056de:	ee07 3a90 	vmov	s15, r3
 80056e2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80056e6:	ed97 6a03 	vldr	s12, [r7, #12]
 80056ea:	eddf 5a45 	vldr	s11, [pc, #276]	@ 8005800 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80056ee:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80056f2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80056f6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80056fa:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80056fe:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005702:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8005706:	e021      	b.n	800574c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8005708:	697b      	ldr	r3, [r7, #20]
 800570a:	ee07 3a90 	vmov	s15, r3
 800570e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005712:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 8005808 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8005716:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800571a:	4b37      	ldr	r3, [pc, #220]	@ (80057f8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800571c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800571e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005722:	ee07 3a90 	vmov	s15, r3
 8005726:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800572a:	ed97 6a03 	vldr	s12, [r7, #12]
 800572e:	eddf 5a34 	vldr	s11, [pc, #208]	@ 8005800 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8005732:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005736:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800573a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800573e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005742:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005746:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800574a:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 800574c:	4b2a      	ldr	r3, [pc, #168]	@ (80057f8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800574e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005750:	0a5b      	lsrs	r3, r3, #9
 8005752:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8005756:	ee07 3a90 	vmov	s15, r3
 800575a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800575e:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8005762:	ee37 7a87 	vadd.f32	s14, s15, s14
 8005766:	edd7 6a07 	vldr	s13, [r7, #28]
 800576a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800576e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005772:	ee17 2a90 	vmov	r2, s15
 8005776:	687b      	ldr	r3, [r7, #4]
 8005778:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 800577a:	4b1f      	ldr	r3, [pc, #124]	@ (80057f8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800577c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800577e:	0c1b      	lsrs	r3, r3, #16
 8005780:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8005784:	ee07 3a90 	vmov	s15, r3
 8005788:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800578c:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8005790:	ee37 7a87 	vadd.f32	s14, s15, s14
 8005794:	edd7 6a07 	vldr	s13, [r7, #28]
 8005798:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800579c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80057a0:	ee17 2a90 	vmov	r2, s15
 80057a4:	687b      	ldr	r3, [r7, #4]
 80057a6:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 80057a8:	4b13      	ldr	r3, [pc, #76]	@ (80057f8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80057aa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80057ac:	0e1b      	lsrs	r3, r3, #24
 80057ae:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80057b2:	ee07 3a90 	vmov	s15, r3
 80057b6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80057ba:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80057be:	ee37 7a87 	vadd.f32	s14, s15, s14
 80057c2:	edd7 6a07 	vldr	s13, [r7, #28]
 80057c6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80057ca:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80057ce:	ee17 2a90 	vmov	r2, s15
 80057d2:	687b      	ldr	r3, [r7, #4]
 80057d4:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 80057d6:	e008      	b.n	80057ea <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 80057d8:	687b      	ldr	r3, [r7, #4]
 80057da:	2200      	movs	r2, #0
 80057dc:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 80057de:	687b      	ldr	r3, [r7, #4]
 80057e0:	2200      	movs	r2, #0
 80057e2:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 80057e4:	687b      	ldr	r3, [r7, #4]
 80057e6:	2200      	movs	r2, #0
 80057e8:	609a      	str	r2, [r3, #8]
}
 80057ea:	bf00      	nop
 80057ec:	3724      	adds	r7, #36	@ 0x24
 80057ee:	46bd      	mov	sp, r7
 80057f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057f4:	4770      	bx	lr
 80057f6:	bf00      	nop
 80057f8:	58024400 	.word	0x58024400
 80057fc:	03d09000 	.word	0x03d09000
 8005800:	46000000 	.word	0x46000000
 8005804:	4c742400 	.word	0x4c742400
 8005808:	4a742400 	.word	0x4a742400
 800580c:	4bbebc20 	.word	0x4bbebc20

08005810 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 8005810:	b480      	push	{r7}
 8005812:	b089      	sub	sp, #36	@ 0x24
 8005814:	af00      	add	r7, sp, #0
 8005816:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8005818:	4ba1      	ldr	r3, [pc, #644]	@ (8005aa0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800581a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800581c:	f003 0303 	and.w	r3, r3, #3
 8005820:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 8005822:	4b9f      	ldr	r3, [pc, #636]	@ (8005aa0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005824:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005826:	0d1b      	lsrs	r3, r3, #20
 8005828:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800582c:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 800582e:	4b9c      	ldr	r3, [pc, #624]	@ (8005aa0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005830:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005832:	0a1b      	lsrs	r3, r3, #8
 8005834:	f003 0301 	and.w	r3, r3, #1
 8005838:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 800583a:	4b99      	ldr	r3, [pc, #612]	@ (8005aa0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800583c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800583e:	08db      	lsrs	r3, r3, #3
 8005840:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8005844:	693a      	ldr	r2, [r7, #16]
 8005846:	fb02 f303 	mul.w	r3, r2, r3
 800584a:	ee07 3a90 	vmov	s15, r3
 800584e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005852:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 8005856:	697b      	ldr	r3, [r7, #20]
 8005858:	2b00      	cmp	r3, #0
 800585a:	f000 8111 	beq.w	8005a80 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 800585e:	69bb      	ldr	r3, [r7, #24]
 8005860:	2b02      	cmp	r3, #2
 8005862:	f000 8083 	beq.w	800596c <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 8005866:	69bb      	ldr	r3, [r7, #24]
 8005868:	2b02      	cmp	r3, #2
 800586a:	f200 80a1 	bhi.w	80059b0 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 800586e:	69bb      	ldr	r3, [r7, #24]
 8005870:	2b00      	cmp	r3, #0
 8005872:	d003      	beq.n	800587c <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 8005874:	69bb      	ldr	r3, [r7, #24]
 8005876:	2b01      	cmp	r3, #1
 8005878:	d056      	beq.n	8005928 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 800587a:	e099      	b.n	80059b0 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800587c:	4b88      	ldr	r3, [pc, #544]	@ (8005aa0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800587e:	681b      	ldr	r3, [r3, #0]
 8005880:	f003 0320 	and.w	r3, r3, #32
 8005884:	2b00      	cmp	r3, #0
 8005886:	d02d      	beq.n	80058e4 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8005888:	4b85      	ldr	r3, [pc, #532]	@ (8005aa0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800588a:	681b      	ldr	r3, [r3, #0]
 800588c:	08db      	lsrs	r3, r3, #3
 800588e:	f003 0303 	and.w	r3, r3, #3
 8005892:	4a84      	ldr	r2, [pc, #528]	@ (8005aa4 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 8005894:	fa22 f303 	lsr.w	r3, r2, r3
 8005898:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800589a:	68bb      	ldr	r3, [r7, #8]
 800589c:	ee07 3a90 	vmov	s15, r3
 80058a0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80058a4:	697b      	ldr	r3, [r7, #20]
 80058a6:	ee07 3a90 	vmov	s15, r3
 80058aa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80058ae:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80058b2:	4b7b      	ldr	r3, [pc, #492]	@ (8005aa0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80058b4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80058b6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80058ba:	ee07 3a90 	vmov	s15, r3
 80058be:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80058c2:	ed97 6a03 	vldr	s12, [r7, #12]
 80058c6:	eddf 5a78 	vldr	s11, [pc, #480]	@ 8005aa8 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80058ca:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80058ce:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80058d2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80058d6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80058da:	ee67 7a27 	vmul.f32	s15, s14, s15
 80058de:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 80058e2:	e087      	b.n	80059f4 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 80058e4:	697b      	ldr	r3, [r7, #20]
 80058e6:	ee07 3a90 	vmov	s15, r3
 80058ea:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80058ee:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 8005aac <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 80058f2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80058f6:	4b6a      	ldr	r3, [pc, #424]	@ (8005aa0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80058f8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80058fa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80058fe:	ee07 3a90 	vmov	s15, r3
 8005902:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005906:	ed97 6a03 	vldr	s12, [r7, #12]
 800590a:	eddf 5a67 	vldr	s11, [pc, #412]	@ 8005aa8 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800590e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005912:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005916:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800591a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800591e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005922:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8005926:	e065      	b.n	80059f4 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8005928:	697b      	ldr	r3, [r7, #20]
 800592a:	ee07 3a90 	vmov	s15, r3
 800592e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005932:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 8005ab0 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8005936:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800593a:	4b59      	ldr	r3, [pc, #356]	@ (8005aa0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800593c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800593e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005942:	ee07 3a90 	vmov	s15, r3
 8005946:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800594a:	ed97 6a03 	vldr	s12, [r7, #12]
 800594e:	eddf 5a56 	vldr	s11, [pc, #344]	@ 8005aa8 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8005952:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005956:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800595a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800595e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005962:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005966:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800596a:	e043      	b.n	80059f4 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800596c:	697b      	ldr	r3, [r7, #20]
 800596e:	ee07 3a90 	vmov	s15, r3
 8005972:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005976:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 8005ab4 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 800597a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800597e:	4b48      	ldr	r3, [pc, #288]	@ (8005aa0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005980:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005982:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005986:	ee07 3a90 	vmov	s15, r3
 800598a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800598e:	ed97 6a03 	vldr	s12, [r7, #12]
 8005992:	eddf 5a45 	vldr	s11, [pc, #276]	@ 8005aa8 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8005996:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800599a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800599e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80059a2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80059a6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80059aa:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80059ae:	e021      	b.n	80059f4 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 80059b0:	697b      	ldr	r3, [r7, #20]
 80059b2:	ee07 3a90 	vmov	s15, r3
 80059b6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80059ba:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 8005ab0 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 80059be:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80059c2:	4b37      	ldr	r3, [pc, #220]	@ (8005aa0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80059c4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80059c6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80059ca:	ee07 3a90 	vmov	s15, r3
 80059ce:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80059d2:	ed97 6a03 	vldr	s12, [r7, #12]
 80059d6:	eddf 5a34 	vldr	s11, [pc, #208]	@ 8005aa8 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80059da:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80059de:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80059e2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80059e6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80059ea:	ee67 7a27 	vmul.f32	s15, s14, s15
 80059ee:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80059f2:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 80059f4:	4b2a      	ldr	r3, [pc, #168]	@ (8005aa0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80059f6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80059f8:	0a5b      	lsrs	r3, r3, #9
 80059fa:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80059fe:	ee07 3a90 	vmov	s15, r3
 8005a02:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005a06:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8005a0a:	ee37 7a87 	vadd.f32	s14, s15, s14
 8005a0e:	edd7 6a07 	vldr	s13, [r7, #28]
 8005a12:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005a16:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005a1a:	ee17 2a90 	vmov	r2, s15
 8005a1e:	687b      	ldr	r3, [r7, #4]
 8005a20:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 8005a22:	4b1f      	ldr	r3, [pc, #124]	@ (8005aa0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005a24:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005a26:	0c1b      	lsrs	r3, r3, #16
 8005a28:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8005a2c:	ee07 3a90 	vmov	s15, r3
 8005a30:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005a34:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8005a38:	ee37 7a87 	vadd.f32	s14, s15, s14
 8005a3c:	edd7 6a07 	vldr	s13, [r7, #28]
 8005a40:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005a44:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005a48:	ee17 2a90 	vmov	r2, s15
 8005a4c:	687b      	ldr	r3, [r7, #4]
 8005a4e:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 8005a50:	4b13      	ldr	r3, [pc, #76]	@ (8005aa0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005a52:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005a54:	0e1b      	lsrs	r3, r3, #24
 8005a56:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8005a5a:	ee07 3a90 	vmov	s15, r3
 8005a5e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005a62:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8005a66:	ee37 7a87 	vadd.f32	s14, s15, s14
 8005a6a:	edd7 6a07 	vldr	s13, [r7, #28]
 8005a6e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005a72:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005a76:	ee17 2a90 	vmov	r2, s15
 8005a7a:	687b      	ldr	r3, [r7, #4]
 8005a7c:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 8005a7e:	e008      	b.n	8005a92 <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8005a80:	687b      	ldr	r3, [r7, #4]
 8005a82:	2200      	movs	r2, #0
 8005a84:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 8005a86:	687b      	ldr	r3, [r7, #4]
 8005a88:	2200      	movs	r2, #0
 8005a8a:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8005a8c:	687b      	ldr	r3, [r7, #4]
 8005a8e:	2200      	movs	r2, #0
 8005a90:	609a      	str	r2, [r3, #8]
}
 8005a92:	bf00      	nop
 8005a94:	3724      	adds	r7, #36	@ 0x24
 8005a96:	46bd      	mov	sp, r7
 8005a98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a9c:	4770      	bx	lr
 8005a9e:	bf00      	nop
 8005aa0:	58024400 	.word	0x58024400
 8005aa4:	03d09000 	.word	0x03d09000
 8005aa8:	46000000 	.word	0x46000000
 8005aac:	4c742400 	.word	0x4c742400
 8005ab0:	4a742400 	.word	0x4a742400
 8005ab4:	4bbebc20 	.word	0x4bbebc20

08005ab8 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(const RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8005ab8:	b580      	push	{r7, lr}
 8005aba:	b084      	sub	sp, #16
 8005abc:	af00      	add	r7, sp, #0
 8005abe:	6078      	str	r0, [r7, #4]
 8005ac0:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8005ac2:	2300      	movs	r3, #0
 8005ac4:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8005ac6:	4b53      	ldr	r3, [pc, #332]	@ (8005c14 <RCCEx_PLL2_Config+0x15c>)
 8005ac8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005aca:	f003 0303 	and.w	r3, r3, #3
 8005ace:	2b03      	cmp	r3, #3
 8005ad0:	d101      	bne.n	8005ad6 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 8005ad2:	2301      	movs	r3, #1
 8005ad4:	e099      	b.n	8005c0a <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 8005ad6:	4b4f      	ldr	r3, [pc, #316]	@ (8005c14 <RCCEx_PLL2_Config+0x15c>)
 8005ad8:	681b      	ldr	r3, [r3, #0]
 8005ada:	4a4e      	ldr	r2, [pc, #312]	@ (8005c14 <RCCEx_PLL2_Config+0x15c>)
 8005adc:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8005ae0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005ae2:	f7fb fe51 	bl	8001788 <HAL_GetTick>
 8005ae6:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8005ae8:	e008      	b.n	8005afc <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8005aea:	f7fb fe4d 	bl	8001788 <HAL_GetTick>
 8005aee:	4602      	mov	r2, r0
 8005af0:	68bb      	ldr	r3, [r7, #8]
 8005af2:	1ad3      	subs	r3, r2, r3
 8005af4:	2b02      	cmp	r3, #2
 8005af6:	d901      	bls.n	8005afc <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8005af8:	2303      	movs	r3, #3
 8005afa:	e086      	b.n	8005c0a <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8005afc:	4b45      	ldr	r3, [pc, #276]	@ (8005c14 <RCCEx_PLL2_Config+0x15c>)
 8005afe:	681b      	ldr	r3, [r3, #0]
 8005b00:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8005b04:	2b00      	cmp	r3, #0
 8005b06:	d1f0      	bne.n	8005aea <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8005b08:	4b42      	ldr	r3, [pc, #264]	@ (8005c14 <RCCEx_PLL2_Config+0x15c>)
 8005b0a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005b0c:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 8005b10:	687b      	ldr	r3, [r7, #4]
 8005b12:	681b      	ldr	r3, [r3, #0]
 8005b14:	031b      	lsls	r3, r3, #12
 8005b16:	493f      	ldr	r1, [pc, #252]	@ (8005c14 <RCCEx_PLL2_Config+0x15c>)
 8005b18:	4313      	orrs	r3, r2
 8005b1a:	628b      	str	r3, [r1, #40]	@ 0x28
 8005b1c:	687b      	ldr	r3, [r7, #4]
 8005b1e:	685b      	ldr	r3, [r3, #4]
 8005b20:	3b01      	subs	r3, #1
 8005b22:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8005b26:	687b      	ldr	r3, [r7, #4]
 8005b28:	689b      	ldr	r3, [r3, #8]
 8005b2a:	3b01      	subs	r3, #1
 8005b2c:	025b      	lsls	r3, r3, #9
 8005b2e:	b29b      	uxth	r3, r3
 8005b30:	431a      	orrs	r2, r3
 8005b32:	687b      	ldr	r3, [r7, #4]
 8005b34:	68db      	ldr	r3, [r3, #12]
 8005b36:	3b01      	subs	r3, #1
 8005b38:	041b      	lsls	r3, r3, #16
 8005b3a:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8005b3e:	431a      	orrs	r2, r3
 8005b40:	687b      	ldr	r3, [r7, #4]
 8005b42:	691b      	ldr	r3, [r3, #16]
 8005b44:	3b01      	subs	r3, #1
 8005b46:	061b      	lsls	r3, r3, #24
 8005b48:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8005b4c:	4931      	ldr	r1, [pc, #196]	@ (8005c14 <RCCEx_PLL2_Config+0x15c>)
 8005b4e:	4313      	orrs	r3, r2
 8005b50:	638b      	str	r3, [r1, #56]	@ 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 8005b52:	4b30      	ldr	r3, [pc, #192]	@ (8005c14 <RCCEx_PLL2_Config+0x15c>)
 8005b54:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005b56:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8005b5a:	687b      	ldr	r3, [r7, #4]
 8005b5c:	695b      	ldr	r3, [r3, #20]
 8005b5e:	492d      	ldr	r1, [pc, #180]	@ (8005c14 <RCCEx_PLL2_Config+0x15c>)
 8005b60:	4313      	orrs	r3, r2
 8005b62:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8005b64:	4b2b      	ldr	r3, [pc, #172]	@ (8005c14 <RCCEx_PLL2_Config+0x15c>)
 8005b66:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005b68:	f023 0220 	bic.w	r2, r3, #32
 8005b6c:	687b      	ldr	r3, [r7, #4]
 8005b6e:	699b      	ldr	r3, [r3, #24]
 8005b70:	4928      	ldr	r1, [pc, #160]	@ (8005c14 <RCCEx_PLL2_Config+0x15c>)
 8005b72:	4313      	orrs	r3, r2
 8005b74:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 8005b76:	4b27      	ldr	r3, [pc, #156]	@ (8005c14 <RCCEx_PLL2_Config+0x15c>)
 8005b78:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005b7a:	4a26      	ldr	r2, [pc, #152]	@ (8005c14 <RCCEx_PLL2_Config+0x15c>)
 8005b7c:	f023 0310 	bic.w	r3, r3, #16
 8005b80:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8005b82:	4b24      	ldr	r3, [pc, #144]	@ (8005c14 <RCCEx_PLL2_Config+0x15c>)
 8005b84:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8005b86:	4b24      	ldr	r3, [pc, #144]	@ (8005c18 <RCCEx_PLL2_Config+0x160>)
 8005b88:	4013      	ands	r3, r2
 8005b8a:	687a      	ldr	r2, [r7, #4]
 8005b8c:	69d2      	ldr	r2, [r2, #28]
 8005b8e:	00d2      	lsls	r2, r2, #3
 8005b90:	4920      	ldr	r1, [pc, #128]	@ (8005c14 <RCCEx_PLL2_Config+0x15c>)
 8005b92:	4313      	orrs	r3, r2
 8005b94:	63cb      	str	r3, [r1, #60]	@ 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 8005b96:	4b1f      	ldr	r3, [pc, #124]	@ (8005c14 <RCCEx_PLL2_Config+0x15c>)
 8005b98:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005b9a:	4a1e      	ldr	r2, [pc, #120]	@ (8005c14 <RCCEx_PLL2_Config+0x15c>)
 8005b9c:	f043 0310 	orr.w	r3, r3, #16
 8005ba0:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 8005ba2:	683b      	ldr	r3, [r7, #0]
 8005ba4:	2b00      	cmp	r3, #0
 8005ba6:	d106      	bne.n	8005bb6 <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8005ba8:	4b1a      	ldr	r3, [pc, #104]	@ (8005c14 <RCCEx_PLL2_Config+0x15c>)
 8005baa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005bac:	4a19      	ldr	r2, [pc, #100]	@ (8005c14 <RCCEx_PLL2_Config+0x15c>)
 8005bae:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8005bb2:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8005bb4:	e00f      	b.n	8005bd6 <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8005bb6:	683b      	ldr	r3, [r7, #0]
 8005bb8:	2b01      	cmp	r3, #1
 8005bba:	d106      	bne.n	8005bca <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8005bbc:	4b15      	ldr	r3, [pc, #84]	@ (8005c14 <RCCEx_PLL2_Config+0x15c>)
 8005bbe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005bc0:	4a14      	ldr	r2, [pc, #80]	@ (8005c14 <RCCEx_PLL2_Config+0x15c>)
 8005bc2:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8005bc6:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8005bc8:	e005      	b.n	8005bd6 <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 8005bca:	4b12      	ldr	r3, [pc, #72]	@ (8005c14 <RCCEx_PLL2_Config+0x15c>)
 8005bcc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005bce:	4a11      	ldr	r2, [pc, #68]	@ (8005c14 <RCCEx_PLL2_Config+0x15c>)
 8005bd0:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8005bd4:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 8005bd6:	4b0f      	ldr	r3, [pc, #60]	@ (8005c14 <RCCEx_PLL2_Config+0x15c>)
 8005bd8:	681b      	ldr	r3, [r3, #0]
 8005bda:	4a0e      	ldr	r2, [pc, #56]	@ (8005c14 <RCCEx_PLL2_Config+0x15c>)
 8005bdc:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8005be0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005be2:	f7fb fdd1 	bl	8001788 <HAL_GetTick>
 8005be6:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8005be8:	e008      	b.n	8005bfc <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8005bea:	f7fb fdcd 	bl	8001788 <HAL_GetTick>
 8005bee:	4602      	mov	r2, r0
 8005bf0:	68bb      	ldr	r3, [r7, #8]
 8005bf2:	1ad3      	subs	r3, r2, r3
 8005bf4:	2b02      	cmp	r3, #2
 8005bf6:	d901      	bls.n	8005bfc <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 8005bf8:	2303      	movs	r3, #3
 8005bfa:	e006      	b.n	8005c0a <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8005bfc:	4b05      	ldr	r3, [pc, #20]	@ (8005c14 <RCCEx_PLL2_Config+0x15c>)
 8005bfe:	681b      	ldr	r3, [r3, #0]
 8005c00:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8005c04:	2b00      	cmp	r3, #0
 8005c06:	d0f0      	beq.n	8005bea <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 8005c08:	7bfb      	ldrb	r3, [r7, #15]
}
 8005c0a:	4618      	mov	r0, r3
 8005c0c:	3710      	adds	r7, #16
 8005c0e:	46bd      	mov	sp, r7
 8005c10:	bd80      	pop	{r7, pc}
 8005c12:	bf00      	nop
 8005c14:	58024400 	.word	0x58024400
 8005c18:	ffff0007 	.word	0xffff0007

08005c1c <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(const RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8005c1c:	b580      	push	{r7, lr}
 8005c1e:	b084      	sub	sp, #16
 8005c20:	af00      	add	r7, sp, #0
 8005c22:	6078      	str	r0, [r7, #4]
 8005c24:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8005c26:	2300      	movs	r3, #0
 8005c28:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8005c2a:	4b53      	ldr	r3, [pc, #332]	@ (8005d78 <RCCEx_PLL3_Config+0x15c>)
 8005c2c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005c2e:	f003 0303 	and.w	r3, r3, #3
 8005c32:	2b03      	cmp	r3, #3
 8005c34:	d101      	bne.n	8005c3a <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 8005c36:	2301      	movs	r3, #1
 8005c38:	e099      	b.n	8005d6e <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 8005c3a:	4b4f      	ldr	r3, [pc, #316]	@ (8005d78 <RCCEx_PLL3_Config+0x15c>)
 8005c3c:	681b      	ldr	r3, [r3, #0]
 8005c3e:	4a4e      	ldr	r2, [pc, #312]	@ (8005d78 <RCCEx_PLL3_Config+0x15c>)
 8005c40:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8005c44:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005c46:	f7fb fd9f 	bl	8001788 <HAL_GetTick>
 8005c4a:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8005c4c:	e008      	b.n	8005c60 <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8005c4e:	f7fb fd9b 	bl	8001788 <HAL_GetTick>
 8005c52:	4602      	mov	r2, r0
 8005c54:	68bb      	ldr	r3, [r7, #8]
 8005c56:	1ad3      	subs	r3, r2, r3
 8005c58:	2b02      	cmp	r3, #2
 8005c5a:	d901      	bls.n	8005c60 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8005c5c:	2303      	movs	r3, #3
 8005c5e:	e086      	b.n	8005d6e <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8005c60:	4b45      	ldr	r3, [pc, #276]	@ (8005d78 <RCCEx_PLL3_Config+0x15c>)
 8005c62:	681b      	ldr	r3, [r3, #0]
 8005c64:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8005c68:	2b00      	cmp	r3, #0
 8005c6a:	d1f0      	bne.n	8005c4e <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8005c6c:	4b42      	ldr	r3, [pc, #264]	@ (8005d78 <RCCEx_PLL3_Config+0x15c>)
 8005c6e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005c70:	f023 727c 	bic.w	r2, r3, #66060288	@ 0x3f00000
 8005c74:	687b      	ldr	r3, [r7, #4]
 8005c76:	681b      	ldr	r3, [r3, #0]
 8005c78:	051b      	lsls	r3, r3, #20
 8005c7a:	493f      	ldr	r1, [pc, #252]	@ (8005d78 <RCCEx_PLL3_Config+0x15c>)
 8005c7c:	4313      	orrs	r3, r2
 8005c7e:	628b      	str	r3, [r1, #40]	@ 0x28
 8005c80:	687b      	ldr	r3, [r7, #4]
 8005c82:	685b      	ldr	r3, [r3, #4]
 8005c84:	3b01      	subs	r3, #1
 8005c86:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8005c8a:	687b      	ldr	r3, [r7, #4]
 8005c8c:	689b      	ldr	r3, [r3, #8]
 8005c8e:	3b01      	subs	r3, #1
 8005c90:	025b      	lsls	r3, r3, #9
 8005c92:	b29b      	uxth	r3, r3
 8005c94:	431a      	orrs	r2, r3
 8005c96:	687b      	ldr	r3, [r7, #4]
 8005c98:	68db      	ldr	r3, [r3, #12]
 8005c9a:	3b01      	subs	r3, #1
 8005c9c:	041b      	lsls	r3, r3, #16
 8005c9e:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8005ca2:	431a      	orrs	r2, r3
 8005ca4:	687b      	ldr	r3, [r7, #4]
 8005ca6:	691b      	ldr	r3, [r3, #16]
 8005ca8:	3b01      	subs	r3, #1
 8005caa:	061b      	lsls	r3, r3, #24
 8005cac:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8005cb0:	4931      	ldr	r1, [pc, #196]	@ (8005d78 <RCCEx_PLL3_Config+0x15c>)
 8005cb2:	4313      	orrs	r3, r2
 8005cb4:	640b      	str	r3, [r1, #64]	@ 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 8005cb6:	4b30      	ldr	r3, [pc, #192]	@ (8005d78 <RCCEx_PLL3_Config+0x15c>)
 8005cb8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005cba:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8005cbe:	687b      	ldr	r3, [r7, #4]
 8005cc0:	695b      	ldr	r3, [r3, #20]
 8005cc2:	492d      	ldr	r1, [pc, #180]	@ (8005d78 <RCCEx_PLL3_Config+0x15c>)
 8005cc4:	4313      	orrs	r3, r2
 8005cc6:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8005cc8:	4b2b      	ldr	r3, [pc, #172]	@ (8005d78 <RCCEx_PLL3_Config+0x15c>)
 8005cca:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005ccc:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 8005cd0:	687b      	ldr	r3, [r7, #4]
 8005cd2:	699b      	ldr	r3, [r3, #24]
 8005cd4:	4928      	ldr	r1, [pc, #160]	@ (8005d78 <RCCEx_PLL3_Config+0x15c>)
 8005cd6:	4313      	orrs	r3, r2
 8005cd8:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 8005cda:	4b27      	ldr	r3, [pc, #156]	@ (8005d78 <RCCEx_PLL3_Config+0x15c>)
 8005cdc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005cde:	4a26      	ldr	r2, [pc, #152]	@ (8005d78 <RCCEx_PLL3_Config+0x15c>)
 8005ce0:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8005ce4:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8005ce6:	4b24      	ldr	r3, [pc, #144]	@ (8005d78 <RCCEx_PLL3_Config+0x15c>)
 8005ce8:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8005cea:	4b24      	ldr	r3, [pc, #144]	@ (8005d7c <RCCEx_PLL3_Config+0x160>)
 8005cec:	4013      	ands	r3, r2
 8005cee:	687a      	ldr	r2, [r7, #4]
 8005cf0:	69d2      	ldr	r2, [r2, #28]
 8005cf2:	00d2      	lsls	r2, r2, #3
 8005cf4:	4920      	ldr	r1, [pc, #128]	@ (8005d78 <RCCEx_PLL3_Config+0x15c>)
 8005cf6:	4313      	orrs	r3, r2
 8005cf8:	644b      	str	r3, [r1, #68]	@ 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 8005cfa:	4b1f      	ldr	r3, [pc, #124]	@ (8005d78 <RCCEx_PLL3_Config+0x15c>)
 8005cfc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005cfe:	4a1e      	ldr	r2, [pc, #120]	@ (8005d78 <RCCEx_PLL3_Config+0x15c>)
 8005d00:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005d04:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 8005d06:	683b      	ldr	r3, [r7, #0]
 8005d08:	2b00      	cmp	r3, #0
 8005d0a:	d106      	bne.n	8005d1a <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8005d0c:	4b1a      	ldr	r3, [pc, #104]	@ (8005d78 <RCCEx_PLL3_Config+0x15c>)
 8005d0e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005d10:	4a19      	ldr	r2, [pc, #100]	@ (8005d78 <RCCEx_PLL3_Config+0x15c>)
 8005d12:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8005d16:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8005d18:	e00f      	b.n	8005d3a <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8005d1a:	683b      	ldr	r3, [r7, #0]
 8005d1c:	2b01      	cmp	r3, #1
 8005d1e:	d106      	bne.n	8005d2e <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8005d20:	4b15      	ldr	r3, [pc, #84]	@ (8005d78 <RCCEx_PLL3_Config+0x15c>)
 8005d22:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005d24:	4a14      	ldr	r2, [pc, #80]	@ (8005d78 <RCCEx_PLL3_Config+0x15c>)
 8005d26:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8005d2a:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8005d2c:	e005      	b.n	8005d3a <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 8005d2e:	4b12      	ldr	r3, [pc, #72]	@ (8005d78 <RCCEx_PLL3_Config+0x15c>)
 8005d30:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005d32:	4a11      	ldr	r2, [pc, #68]	@ (8005d78 <RCCEx_PLL3_Config+0x15c>)
 8005d34:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8005d38:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 8005d3a:	4b0f      	ldr	r3, [pc, #60]	@ (8005d78 <RCCEx_PLL3_Config+0x15c>)
 8005d3c:	681b      	ldr	r3, [r3, #0]
 8005d3e:	4a0e      	ldr	r2, [pc, #56]	@ (8005d78 <RCCEx_PLL3_Config+0x15c>)
 8005d40:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005d44:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005d46:	f7fb fd1f 	bl	8001788 <HAL_GetTick>
 8005d4a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8005d4c:	e008      	b.n	8005d60 <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8005d4e:	f7fb fd1b 	bl	8001788 <HAL_GetTick>
 8005d52:	4602      	mov	r2, r0
 8005d54:	68bb      	ldr	r3, [r7, #8]
 8005d56:	1ad3      	subs	r3, r2, r3
 8005d58:	2b02      	cmp	r3, #2
 8005d5a:	d901      	bls.n	8005d60 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 8005d5c:	2303      	movs	r3, #3
 8005d5e:	e006      	b.n	8005d6e <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8005d60:	4b05      	ldr	r3, [pc, #20]	@ (8005d78 <RCCEx_PLL3_Config+0x15c>)
 8005d62:	681b      	ldr	r3, [r3, #0]
 8005d64:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8005d68:	2b00      	cmp	r3, #0
 8005d6a:	d0f0      	beq.n	8005d4e <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 8005d6c:	7bfb      	ldrb	r3, [r7, #15]
}
 8005d6e:	4618      	mov	r0, r3
 8005d70:	3710      	adds	r7, #16
 8005d72:	46bd      	mov	sp, r7
 8005d74:	bd80      	pop	{r7, pc}
 8005d76:	bf00      	nop
 8005d78:	58024400 	.word	0x58024400
 8005d7c:	ffff0007 	.word	0xffff0007

08005d80 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8005d80:	b580      	push	{r7, lr}
 8005d82:	b082      	sub	sp, #8
 8005d84:	af00      	add	r7, sp, #0
 8005d86:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005d88:	687b      	ldr	r3, [r7, #4]
 8005d8a:	2b00      	cmp	r3, #0
 8005d8c:	d101      	bne.n	8005d92 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8005d8e:	2301      	movs	r3, #1
 8005d90:	e049      	b.n	8005e26 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005d92:	687b      	ldr	r3, [r7, #4]
 8005d94:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005d98:	b2db      	uxtb	r3, r3
 8005d9a:	2b00      	cmp	r3, #0
 8005d9c:	d106      	bne.n	8005dac <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005d9e:	687b      	ldr	r3, [r7, #4]
 8005da0:	2200      	movs	r2, #0
 8005da2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8005da6:	6878      	ldr	r0, [r7, #4]
 8005da8:	f7fb f950 	bl	800104c <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005dac:	687b      	ldr	r3, [r7, #4]
 8005dae:	2202      	movs	r2, #2
 8005db0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005db4:	687b      	ldr	r3, [r7, #4]
 8005db6:	681a      	ldr	r2, [r3, #0]
 8005db8:	687b      	ldr	r3, [r7, #4]
 8005dba:	3304      	adds	r3, #4
 8005dbc:	4619      	mov	r1, r3
 8005dbe:	4610      	mov	r0, r2
 8005dc0:	f000 fa66 	bl	8006290 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005dc4:	687b      	ldr	r3, [r7, #4]
 8005dc6:	2201      	movs	r2, #1
 8005dc8:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005dcc:	687b      	ldr	r3, [r7, #4]
 8005dce:	2201      	movs	r2, #1
 8005dd0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8005dd4:	687b      	ldr	r3, [r7, #4]
 8005dd6:	2201      	movs	r2, #1
 8005dd8:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8005ddc:	687b      	ldr	r3, [r7, #4]
 8005dde:	2201      	movs	r2, #1
 8005de0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8005de4:	687b      	ldr	r3, [r7, #4]
 8005de6:	2201      	movs	r2, #1
 8005de8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8005dec:	687b      	ldr	r3, [r7, #4]
 8005dee:	2201      	movs	r2, #1
 8005df0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8005df4:	687b      	ldr	r3, [r7, #4]
 8005df6:	2201      	movs	r2, #1
 8005df8:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005dfc:	687b      	ldr	r3, [r7, #4]
 8005dfe:	2201      	movs	r2, #1
 8005e00:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8005e04:	687b      	ldr	r3, [r7, #4]
 8005e06:	2201      	movs	r2, #1
 8005e08:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8005e0c:	687b      	ldr	r3, [r7, #4]
 8005e0e:	2201      	movs	r2, #1
 8005e10:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8005e14:	687b      	ldr	r3, [r7, #4]
 8005e16:	2201      	movs	r2, #1
 8005e18:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005e1c:	687b      	ldr	r3, [r7, #4]
 8005e1e:	2201      	movs	r2, #1
 8005e20:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8005e24:	2300      	movs	r3, #0
}
 8005e26:	4618      	mov	r0, r3
 8005e28:	3708      	adds	r7, #8
 8005e2a:	46bd      	mov	sp, r7
 8005e2c:	bd80      	pop	{r7, pc}
	...

08005e30 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005e30:	b580      	push	{r7, lr}
 8005e32:	b084      	sub	sp, #16
 8005e34:	af00      	add	r7, sp, #0
 8005e36:	6078      	str	r0, [r7, #4]
 8005e38:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8005e3a:	683b      	ldr	r3, [r7, #0]
 8005e3c:	2b00      	cmp	r3, #0
 8005e3e:	d109      	bne.n	8005e54 <HAL_TIM_PWM_Start+0x24>
 8005e40:	687b      	ldr	r3, [r7, #4]
 8005e42:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8005e46:	b2db      	uxtb	r3, r3
 8005e48:	2b01      	cmp	r3, #1
 8005e4a:	bf14      	ite	ne
 8005e4c:	2301      	movne	r3, #1
 8005e4e:	2300      	moveq	r3, #0
 8005e50:	b2db      	uxtb	r3, r3
 8005e52:	e03c      	b.n	8005ece <HAL_TIM_PWM_Start+0x9e>
 8005e54:	683b      	ldr	r3, [r7, #0]
 8005e56:	2b04      	cmp	r3, #4
 8005e58:	d109      	bne.n	8005e6e <HAL_TIM_PWM_Start+0x3e>
 8005e5a:	687b      	ldr	r3, [r7, #4]
 8005e5c:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8005e60:	b2db      	uxtb	r3, r3
 8005e62:	2b01      	cmp	r3, #1
 8005e64:	bf14      	ite	ne
 8005e66:	2301      	movne	r3, #1
 8005e68:	2300      	moveq	r3, #0
 8005e6a:	b2db      	uxtb	r3, r3
 8005e6c:	e02f      	b.n	8005ece <HAL_TIM_PWM_Start+0x9e>
 8005e6e:	683b      	ldr	r3, [r7, #0]
 8005e70:	2b08      	cmp	r3, #8
 8005e72:	d109      	bne.n	8005e88 <HAL_TIM_PWM_Start+0x58>
 8005e74:	687b      	ldr	r3, [r7, #4]
 8005e76:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8005e7a:	b2db      	uxtb	r3, r3
 8005e7c:	2b01      	cmp	r3, #1
 8005e7e:	bf14      	ite	ne
 8005e80:	2301      	movne	r3, #1
 8005e82:	2300      	moveq	r3, #0
 8005e84:	b2db      	uxtb	r3, r3
 8005e86:	e022      	b.n	8005ece <HAL_TIM_PWM_Start+0x9e>
 8005e88:	683b      	ldr	r3, [r7, #0]
 8005e8a:	2b0c      	cmp	r3, #12
 8005e8c:	d109      	bne.n	8005ea2 <HAL_TIM_PWM_Start+0x72>
 8005e8e:	687b      	ldr	r3, [r7, #4]
 8005e90:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005e94:	b2db      	uxtb	r3, r3
 8005e96:	2b01      	cmp	r3, #1
 8005e98:	bf14      	ite	ne
 8005e9a:	2301      	movne	r3, #1
 8005e9c:	2300      	moveq	r3, #0
 8005e9e:	b2db      	uxtb	r3, r3
 8005ea0:	e015      	b.n	8005ece <HAL_TIM_PWM_Start+0x9e>
 8005ea2:	683b      	ldr	r3, [r7, #0]
 8005ea4:	2b10      	cmp	r3, #16
 8005ea6:	d109      	bne.n	8005ebc <HAL_TIM_PWM_Start+0x8c>
 8005ea8:	687b      	ldr	r3, [r7, #4]
 8005eaa:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8005eae:	b2db      	uxtb	r3, r3
 8005eb0:	2b01      	cmp	r3, #1
 8005eb2:	bf14      	ite	ne
 8005eb4:	2301      	movne	r3, #1
 8005eb6:	2300      	moveq	r3, #0
 8005eb8:	b2db      	uxtb	r3, r3
 8005eba:	e008      	b.n	8005ece <HAL_TIM_PWM_Start+0x9e>
 8005ebc:	687b      	ldr	r3, [r7, #4]
 8005ebe:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8005ec2:	b2db      	uxtb	r3, r3
 8005ec4:	2b01      	cmp	r3, #1
 8005ec6:	bf14      	ite	ne
 8005ec8:	2301      	movne	r3, #1
 8005eca:	2300      	moveq	r3, #0
 8005ecc:	b2db      	uxtb	r3, r3
 8005ece:	2b00      	cmp	r3, #0
 8005ed0:	d001      	beq.n	8005ed6 <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 8005ed2:	2301      	movs	r3, #1
 8005ed4:	e0ab      	b.n	800602e <HAL_TIM_PWM_Start+0x1fe>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8005ed6:	683b      	ldr	r3, [r7, #0]
 8005ed8:	2b00      	cmp	r3, #0
 8005eda:	d104      	bne.n	8005ee6 <HAL_TIM_PWM_Start+0xb6>
 8005edc:	687b      	ldr	r3, [r7, #4]
 8005ede:	2202      	movs	r2, #2
 8005ee0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8005ee4:	e023      	b.n	8005f2e <HAL_TIM_PWM_Start+0xfe>
 8005ee6:	683b      	ldr	r3, [r7, #0]
 8005ee8:	2b04      	cmp	r3, #4
 8005eea:	d104      	bne.n	8005ef6 <HAL_TIM_PWM_Start+0xc6>
 8005eec:	687b      	ldr	r3, [r7, #4]
 8005eee:	2202      	movs	r2, #2
 8005ef0:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8005ef4:	e01b      	b.n	8005f2e <HAL_TIM_PWM_Start+0xfe>
 8005ef6:	683b      	ldr	r3, [r7, #0]
 8005ef8:	2b08      	cmp	r3, #8
 8005efa:	d104      	bne.n	8005f06 <HAL_TIM_PWM_Start+0xd6>
 8005efc:	687b      	ldr	r3, [r7, #4]
 8005efe:	2202      	movs	r2, #2
 8005f00:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8005f04:	e013      	b.n	8005f2e <HAL_TIM_PWM_Start+0xfe>
 8005f06:	683b      	ldr	r3, [r7, #0]
 8005f08:	2b0c      	cmp	r3, #12
 8005f0a:	d104      	bne.n	8005f16 <HAL_TIM_PWM_Start+0xe6>
 8005f0c:	687b      	ldr	r3, [r7, #4]
 8005f0e:	2202      	movs	r2, #2
 8005f10:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8005f14:	e00b      	b.n	8005f2e <HAL_TIM_PWM_Start+0xfe>
 8005f16:	683b      	ldr	r3, [r7, #0]
 8005f18:	2b10      	cmp	r3, #16
 8005f1a:	d104      	bne.n	8005f26 <HAL_TIM_PWM_Start+0xf6>
 8005f1c:	687b      	ldr	r3, [r7, #4]
 8005f1e:	2202      	movs	r2, #2
 8005f20:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8005f24:	e003      	b.n	8005f2e <HAL_TIM_PWM_Start+0xfe>
 8005f26:	687b      	ldr	r3, [r7, #4]
 8005f28:	2202      	movs	r2, #2
 8005f2a:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8005f2e:	687b      	ldr	r3, [r7, #4]
 8005f30:	681b      	ldr	r3, [r3, #0]
 8005f32:	2201      	movs	r2, #1
 8005f34:	6839      	ldr	r1, [r7, #0]
 8005f36:	4618      	mov	r0, r3
 8005f38:	f000 fd2c 	bl	8006994 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8005f3c:	687b      	ldr	r3, [r7, #4]
 8005f3e:	681b      	ldr	r3, [r3, #0]
 8005f40:	4a3d      	ldr	r2, [pc, #244]	@ (8006038 <HAL_TIM_PWM_Start+0x208>)
 8005f42:	4293      	cmp	r3, r2
 8005f44:	d013      	beq.n	8005f6e <HAL_TIM_PWM_Start+0x13e>
 8005f46:	687b      	ldr	r3, [r7, #4]
 8005f48:	681b      	ldr	r3, [r3, #0]
 8005f4a:	4a3c      	ldr	r2, [pc, #240]	@ (800603c <HAL_TIM_PWM_Start+0x20c>)
 8005f4c:	4293      	cmp	r3, r2
 8005f4e:	d00e      	beq.n	8005f6e <HAL_TIM_PWM_Start+0x13e>
 8005f50:	687b      	ldr	r3, [r7, #4]
 8005f52:	681b      	ldr	r3, [r3, #0]
 8005f54:	4a3a      	ldr	r2, [pc, #232]	@ (8006040 <HAL_TIM_PWM_Start+0x210>)
 8005f56:	4293      	cmp	r3, r2
 8005f58:	d009      	beq.n	8005f6e <HAL_TIM_PWM_Start+0x13e>
 8005f5a:	687b      	ldr	r3, [r7, #4]
 8005f5c:	681b      	ldr	r3, [r3, #0]
 8005f5e:	4a39      	ldr	r2, [pc, #228]	@ (8006044 <HAL_TIM_PWM_Start+0x214>)
 8005f60:	4293      	cmp	r3, r2
 8005f62:	d004      	beq.n	8005f6e <HAL_TIM_PWM_Start+0x13e>
 8005f64:	687b      	ldr	r3, [r7, #4]
 8005f66:	681b      	ldr	r3, [r3, #0]
 8005f68:	4a37      	ldr	r2, [pc, #220]	@ (8006048 <HAL_TIM_PWM_Start+0x218>)
 8005f6a:	4293      	cmp	r3, r2
 8005f6c:	d101      	bne.n	8005f72 <HAL_TIM_PWM_Start+0x142>
 8005f6e:	2301      	movs	r3, #1
 8005f70:	e000      	b.n	8005f74 <HAL_TIM_PWM_Start+0x144>
 8005f72:	2300      	movs	r3, #0
 8005f74:	2b00      	cmp	r3, #0
 8005f76:	d007      	beq.n	8005f88 <HAL_TIM_PWM_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8005f78:	687b      	ldr	r3, [r7, #4]
 8005f7a:	681b      	ldr	r3, [r3, #0]
 8005f7c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8005f7e:	687b      	ldr	r3, [r7, #4]
 8005f80:	681b      	ldr	r3, [r3, #0]
 8005f82:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8005f86:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005f88:	687b      	ldr	r3, [r7, #4]
 8005f8a:	681b      	ldr	r3, [r3, #0]
 8005f8c:	4a2a      	ldr	r2, [pc, #168]	@ (8006038 <HAL_TIM_PWM_Start+0x208>)
 8005f8e:	4293      	cmp	r3, r2
 8005f90:	d02c      	beq.n	8005fec <HAL_TIM_PWM_Start+0x1bc>
 8005f92:	687b      	ldr	r3, [r7, #4]
 8005f94:	681b      	ldr	r3, [r3, #0]
 8005f96:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005f9a:	d027      	beq.n	8005fec <HAL_TIM_PWM_Start+0x1bc>
 8005f9c:	687b      	ldr	r3, [r7, #4]
 8005f9e:	681b      	ldr	r3, [r3, #0]
 8005fa0:	4a2a      	ldr	r2, [pc, #168]	@ (800604c <HAL_TIM_PWM_Start+0x21c>)
 8005fa2:	4293      	cmp	r3, r2
 8005fa4:	d022      	beq.n	8005fec <HAL_TIM_PWM_Start+0x1bc>
 8005fa6:	687b      	ldr	r3, [r7, #4]
 8005fa8:	681b      	ldr	r3, [r3, #0]
 8005faa:	4a29      	ldr	r2, [pc, #164]	@ (8006050 <HAL_TIM_PWM_Start+0x220>)
 8005fac:	4293      	cmp	r3, r2
 8005fae:	d01d      	beq.n	8005fec <HAL_TIM_PWM_Start+0x1bc>
 8005fb0:	687b      	ldr	r3, [r7, #4]
 8005fb2:	681b      	ldr	r3, [r3, #0]
 8005fb4:	4a27      	ldr	r2, [pc, #156]	@ (8006054 <HAL_TIM_PWM_Start+0x224>)
 8005fb6:	4293      	cmp	r3, r2
 8005fb8:	d018      	beq.n	8005fec <HAL_TIM_PWM_Start+0x1bc>
 8005fba:	687b      	ldr	r3, [r7, #4]
 8005fbc:	681b      	ldr	r3, [r3, #0]
 8005fbe:	4a1f      	ldr	r2, [pc, #124]	@ (800603c <HAL_TIM_PWM_Start+0x20c>)
 8005fc0:	4293      	cmp	r3, r2
 8005fc2:	d013      	beq.n	8005fec <HAL_TIM_PWM_Start+0x1bc>
 8005fc4:	687b      	ldr	r3, [r7, #4]
 8005fc6:	681b      	ldr	r3, [r3, #0]
 8005fc8:	4a23      	ldr	r2, [pc, #140]	@ (8006058 <HAL_TIM_PWM_Start+0x228>)
 8005fca:	4293      	cmp	r3, r2
 8005fcc:	d00e      	beq.n	8005fec <HAL_TIM_PWM_Start+0x1bc>
 8005fce:	687b      	ldr	r3, [r7, #4]
 8005fd0:	681b      	ldr	r3, [r3, #0]
 8005fd2:	4a1b      	ldr	r2, [pc, #108]	@ (8006040 <HAL_TIM_PWM_Start+0x210>)
 8005fd4:	4293      	cmp	r3, r2
 8005fd6:	d009      	beq.n	8005fec <HAL_TIM_PWM_Start+0x1bc>
 8005fd8:	687b      	ldr	r3, [r7, #4]
 8005fda:	681b      	ldr	r3, [r3, #0]
 8005fdc:	4a1f      	ldr	r2, [pc, #124]	@ (800605c <HAL_TIM_PWM_Start+0x22c>)
 8005fde:	4293      	cmp	r3, r2
 8005fe0:	d004      	beq.n	8005fec <HAL_TIM_PWM_Start+0x1bc>
 8005fe2:	687b      	ldr	r3, [r7, #4]
 8005fe4:	681b      	ldr	r3, [r3, #0]
 8005fe6:	4a1e      	ldr	r2, [pc, #120]	@ (8006060 <HAL_TIM_PWM_Start+0x230>)
 8005fe8:	4293      	cmp	r3, r2
 8005fea:	d115      	bne.n	8006018 <HAL_TIM_PWM_Start+0x1e8>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005fec:	687b      	ldr	r3, [r7, #4]
 8005fee:	681b      	ldr	r3, [r3, #0]
 8005ff0:	689a      	ldr	r2, [r3, #8]
 8005ff2:	4b1c      	ldr	r3, [pc, #112]	@ (8006064 <HAL_TIM_PWM_Start+0x234>)
 8005ff4:	4013      	ands	r3, r2
 8005ff6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005ff8:	68fb      	ldr	r3, [r7, #12]
 8005ffa:	2b06      	cmp	r3, #6
 8005ffc:	d015      	beq.n	800602a <HAL_TIM_PWM_Start+0x1fa>
 8005ffe:	68fb      	ldr	r3, [r7, #12]
 8006000:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006004:	d011      	beq.n	800602a <HAL_TIM_PWM_Start+0x1fa>
    {
      __HAL_TIM_ENABLE(htim);
 8006006:	687b      	ldr	r3, [r7, #4]
 8006008:	681b      	ldr	r3, [r3, #0]
 800600a:	681a      	ldr	r2, [r3, #0]
 800600c:	687b      	ldr	r3, [r7, #4]
 800600e:	681b      	ldr	r3, [r3, #0]
 8006010:	f042 0201 	orr.w	r2, r2, #1
 8006014:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006016:	e008      	b.n	800602a <HAL_TIM_PWM_Start+0x1fa>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006018:	687b      	ldr	r3, [r7, #4]
 800601a:	681b      	ldr	r3, [r3, #0]
 800601c:	681a      	ldr	r2, [r3, #0]
 800601e:	687b      	ldr	r3, [r7, #4]
 8006020:	681b      	ldr	r3, [r3, #0]
 8006022:	f042 0201 	orr.w	r2, r2, #1
 8006026:	601a      	str	r2, [r3, #0]
 8006028:	e000      	b.n	800602c <HAL_TIM_PWM_Start+0x1fc>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800602a:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800602c:	2300      	movs	r3, #0
}
 800602e:	4618      	mov	r0, r3
 8006030:	3710      	adds	r7, #16
 8006032:	46bd      	mov	sp, r7
 8006034:	bd80      	pop	{r7, pc}
 8006036:	bf00      	nop
 8006038:	40010000 	.word	0x40010000
 800603c:	40010400 	.word	0x40010400
 8006040:	40014000 	.word	0x40014000
 8006044:	40014400 	.word	0x40014400
 8006048:	40014800 	.word	0x40014800
 800604c:	40000400 	.word	0x40000400
 8006050:	40000800 	.word	0x40000800
 8006054:	40000c00 	.word	0x40000c00
 8006058:	40001800 	.word	0x40001800
 800605c:	4000e000 	.word	0x4000e000
 8006060:	4000e400 	.word	0x4000e400
 8006064:	00010007 	.word	0x00010007

08006068 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8006068:	b580      	push	{r7, lr}
 800606a:	b086      	sub	sp, #24
 800606c:	af00      	add	r7, sp, #0
 800606e:	60f8      	str	r0, [r7, #12]
 8006070:	60b9      	str	r1, [r7, #8]
 8006072:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006074:	2300      	movs	r3, #0
 8006076:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8006078:	68fb      	ldr	r3, [r7, #12]
 800607a:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800607e:	2b01      	cmp	r3, #1
 8006080:	d101      	bne.n	8006086 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8006082:	2302      	movs	r3, #2
 8006084:	e0ff      	b.n	8006286 <HAL_TIM_PWM_ConfigChannel+0x21e>
 8006086:	68fb      	ldr	r3, [r7, #12]
 8006088:	2201      	movs	r2, #1
 800608a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 800608e:	687b      	ldr	r3, [r7, #4]
 8006090:	2b14      	cmp	r3, #20
 8006092:	f200 80f0 	bhi.w	8006276 <HAL_TIM_PWM_ConfigChannel+0x20e>
 8006096:	a201      	add	r2, pc, #4	@ (adr r2, 800609c <HAL_TIM_PWM_ConfigChannel+0x34>)
 8006098:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800609c:	080060f1 	.word	0x080060f1
 80060a0:	08006277 	.word	0x08006277
 80060a4:	08006277 	.word	0x08006277
 80060a8:	08006277 	.word	0x08006277
 80060ac:	08006131 	.word	0x08006131
 80060b0:	08006277 	.word	0x08006277
 80060b4:	08006277 	.word	0x08006277
 80060b8:	08006277 	.word	0x08006277
 80060bc:	08006173 	.word	0x08006173
 80060c0:	08006277 	.word	0x08006277
 80060c4:	08006277 	.word	0x08006277
 80060c8:	08006277 	.word	0x08006277
 80060cc:	080061b3 	.word	0x080061b3
 80060d0:	08006277 	.word	0x08006277
 80060d4:	08006277 	.word	0x08006277
 80060d8:	08006277 	.word	0x08006277
 80060dc:	080061f5 	.word	0x080061f5
 80060e0:	08006277 	.word	0x08006277
 80060e4:	08006277 	.word	0x08006277
 80060e8:	08006277 	.word	0x08006277
 80060ec:	08006235 	.word	0x08006235
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80060f0:	68fb      	ldr	r3, [r7, #12]
 80060f2:	681b      	ldr	r3, [r3, #0]
 80060f4:	68b9      	ldr	r1, [r7, #8]
 80060f6:	4618      	mov	r0, r3
 80060f8:	f000 f976 	bl	80063e8 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80060fc:	68fb      	ldr	r3, [r7, #12]
 80060fe:	681b      	ldr	r3, [r3, #0]
 8006100:	699a      	ldr	r2, [r3, #24]
 8006102:	68fb      	ldr	r3, [r7, #12]
 8006104:	681b      	ldr	r3, [r3, #0]
 8006106:	f042 0208 	orr.w	r2, r2, #8
 800610a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800610c:	68fb      	ldr	r3, [r7, #12]
 800610e:	681b      	ldr	r3, [r3, #0]
 8006110:	699a      	ldr	r2, [r3, #24]
 8006112:	68fb      	ldr	r3, [r7, #12]
 8006114:	681b      	ldr	r3, [r3, #0]
 8006116:	f022 0204 	bic.w	r2, r2, #4
 800611a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800611c:	68fb      	ldr	r3, [r7, #12]
 800611e:	681b      	ldr	r3, [r3, #0]
 8006120:	6999      	ldr	r1, [r3, #24]
 8006122:	68bb      	ldr	r3, [r7, #8]
 8006124:	691a      	ldr	r2, [r3, #16]
 8006126:	68fb      	ldr	r3, [r7, #12]
 8006128:	681b      	ldr	r3, [r3, #0]
 800612a:	430a      	orrs	r2, r1
 800612c:	619a      	str	r2, [r3, #24]
      break;
 800612e:	e0a5      	b.n	800627c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8006130:	68fb      	ldr	r3, [r7, #12]
 8006132:	681b      	ldr	r3, [r3, #0]
 8006134:	68b9      	ldr	r1, [r7, #8]
 8006136:	4618      	mov	r0, r3
 8006138:	f000 f9e6 	bl	8006508 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800613c:	68fb      	ldr	r3, [r7, #12]
 800613e:	681b      	ldr	r3, [r3, #0]
 8006140:	699a      	ldr	r2, [r3, #24]
 8006142:	68fb      	ldr	r3, [r7, #12]
 8006144:	681b      	ldr	r3, [r3, #0]
 8006146:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800614a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800614c:	68fb      	ldr	r3, [r7, #12]
 800614e:	681b      	ldr	r3, [r3, #0]
 8006150:	699a      	ldr	r2, [r3, #24]
 8006152:	68fb      	ldr	r3, [r7, #12]
 8006154:	681b      	ldr	r3, [r3, #0]
 8006156:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800615a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800615c:	68fb      	ldr	r3, [r7, #12]
 800615e:	681b      	ldr	r3, [r3, #0]
 8006160:	6999      	ldr	r1, [r3, #24]
 8006162:	68bb      	ldr	r3, [r7, #8]
 8006164:	691b      	ldr	r3, [r3, #16]
 8006166:	021a      	lsls	r2, r3, #8
 8006168:	68fb      	ldr	r3, [r7, #12]
 800616a:	681b      	ldr	r3, [r3, #0]
 800616c:	430a      	orrs	r2, r1
 800616e:	619a      	str	r2, [r3, #24]
      break;
 8006170:	e084      	b.n	800627c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8006172:	68fb      	ldr	r3, [r7, #12]
 8006174:	681b      	ldr	r3, [r3, #0]
 8006176:	68b9      	ldr	r1, [r7, #8]
 8006178:	4618      	mov	r0, r3
 800617a:	f000 fa4f 	bl	800661c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800617e:	68fb      	ldr	r3, [r7, #12]
 8006180:	681b      	ldr	r3, [r3, #0]
 8006182:	69da      	ldr	r2, [r3, #28]
 8006184:	68fb      	ldr	r3, [r7, #12]
 8006186:	681b      	ldr	r3, [r3, #0]
 8006188:	f042 0208 	orr.w	r2, r2, #8
 800618c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800618e:	68fb      	ldr	r3, [r7, #12]
 8006190:	681b      	ldr	r3, [r3, #0]
 8006192:	69da      	ldr	r2, [r3, #28]
 8006194:	68fb      	ldr	r3, [r7, #12]
 8006196:	681b      	ldr	r3, [r3, #0]
 8006198:	f022 0204 	bic.w	r2, r2, #4
 800619c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800619e:	68fb      	ldr	r3, [r7, #12]
 80061a0:	681b      	ldr	r3, [r3, #0]
 80061a2:	69d9      	ldr	r1, [r3, #28]
 80061a4:	68bb      	ldr	r3, [r7, #8]
 80061a6:	691a      	ldr	r2, [r3, #16]
 80061a8:	68fb      	ldr	r3, [r7, #12]
 80061aa:	681b      	ldr	r3, [r3, #0]
 80061ac:	430a      	orrs	r2, r1
 80061ae:	61da      	str	r2, [r3, #28]
      break;
 80061b0:	e064      	b.n	800627c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80061b2:	68fb      	ldr	r3, [r7, #12]
 80061b4:	681b      	ldr	r3, [r3, #0]
 80061b6:	68b9      	ldr	r1, [r7, #8]
 80061b8:	4618      	mov	r0, r3
 80061ba:	f000 fab7 	bl	800672c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80061be:	68fb      	ldr	r3, [r7, #12]
 80061c0:	681b      	ldr	r3, [r3, #0]
 80061c2:	69da      	ldr	r2, [r3, #28]
 80061c4:	68fb      	ldr	r3, [r7, #12]
 80061c6:	681b      	ldr	r3, [r3, #0]
 80061c8:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80061cc:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80061ce:	68fb      	ldr	r3, [r7, #12]
 80061d0:	681b      	ldr	r3, [r3, #0]
 80061d2:	69da      	ldr	r2, [r3, #28]
 80061d4:	68fb      	ldr	r3, [r7, #12]
 80061d6:	681b      	ldr	r3, [r3, #0]
 80061d8:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80061dc:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80061de:	68fb      	ldr	r3, [r7, #12]
 80061e0:	681b      	ldr	r3, [r3, #0]
 80061e2:	69d9      	ldr	r1, [r3, #28]
 80061e4:	68bb      	ldr	r3, [r7, #8]
 80061e6:	691b      	ldr	r3, [r3, #16]
 80061e8:	021a      	lsls	r2, r3, #8
 80061ea:	68fb      	ldr	r3, [r7, #12]
 80061ec:	681b      	ldr	r3, [r3, #0]
 80061ee:	430a      	orrs	r2, r1
 80061f0:	61da      	str	r2, [r3, #28]
      break;
 80061f2:	e043      	b.n	800627c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 80061f4:	68fb      	ldr	r3, [r7, #12]
 80061f6:	681b      	ldr	r3, [r3, #0]
 80061f8:	68b9      	ldr	r1, [r7, #8]
 80061fa:	4618      	mov	r0, r3
 80061fc:	f000 fb00 	bl	8006800 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8006200:	68fb      	ldr	r3, [r7, #12]
 8006202:	681b      	ldr	r3, [r3, #0]
 8006204:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8006206:	68fb      	ldr	r3, [r7, #12]
 8006208:	681b      	ldr	r3, [r3, #0]
 800620a:	f042 0208 	orr.w	r2, r2, #8
 800620e:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8006210:	68fb      	ldr	r3, [r7, #12]
 8006212:	681b      	ldr	r3, [r3, #0]
 8006214:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8006216:	68fb      	ldr	r3, [r7, #12]
 8006218:	681b      	ldr	r3, [r3, #0]
 800621a:	f022 0204 	bic.w	r2, r2, #4
 800621e:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8006220:	68fb      	ldr	r3, [r7, #12]
 8006222:	681b      	ldr	r3, [r3, #0]
 8006224:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 8006226:	68bb      	ldr	r3, [r7, #8]
 8006228:	691a      	ldr	r2, [r3, #16]
 800622a:	68fb      	ldr	r3, [r7, #12]
 800622c:	681b      	ldr	r3, [r3, #0]
 800622e:	430a      	orrs	r2, r1
 8006230:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 8006232:	e023      	b.n	800627c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8006234:	68fb      	ldr	r3, [r7, #12]
 8006236:	681b      	ldr	r3, [r3, #0]
 8006238:	68b9      	ldr	r1, [r7, #8]
 800623a:	4618      	mov	r0, r3
 800623c:	f000 fb44 	bl	80068c8 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8006240:	68fb      	ldr	r3, [r7, #12]
 8006242:	681b      	ldr	r3, [r3, #0]
 8006244:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8006246:	68fb      	ldr	r3, [r7, #12]
 8006248:	681b      	ldr	r3, [r3, #0]
 800624a:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800624e:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8006250:	68fb      	ldr	r3, [r7, #12]
 8006252:	681b      	ldr	r3, [r3, #0]
 8006254:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8006256:	68fb      	ldr	r3, [r7, #12]
 8006258:	681b      	ldr	r3, [r3, #0]
 800625a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800625e:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8006260:	68fb      	ldr	r3, [r7, #12]
 8006262:	681b      	ldr	r3, [r3, #0]
 8006264:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 8006266:	68bb      	ldr	r3, [r7, #8]
 8006268:	691b      	ldr	r3, [r3, #16]
 800626a:	021a      	lsls	r2, r3, #8
 800626c:	68fb      	ldr	r3, [r7, #12]
 800626e:	681b      	ldr	r3, [r3, #0]
 8006270:	430a      	orrs	r2, r1
 8006272:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 8006274:	e002      	b.n	800627c <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 8006276:	2301      	movs	r3, #1
 8006278:	75fb      	strb	r3, [r7, #23]
      break;
 800627a:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800627c:	68fb      	ldr	r3, [r7, #12]
 800627e:	2200      	movs	r2, #0
 8006280:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8006284:	7dfb      	ldrb	r3, [r7, #23]
}
 8006286:	4618      	mov	r0, r3
 8006288:	3718      	adds	r7, #24
 800628a:	46bd      	mov	sp, r7
 800628c:	bd80      	pop	{r7, pc}
 800628e:	bf00      	nop

08006290 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8006290:	b480      	push	{r7}
 8006292:	b085      	sub	sp, #20
 8006294:	af00      	add	r7, sp, #0
 8006296:	6078      	str	r0, [r7, #4]
 8006298:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800629a:	687b      	ldr	r3, [r7, #4]
 800629c:	681b      	ldr	r3, [r3, #0]
 800629e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80062a0:	687b      	ldr	r3, [r7, #4]
 80062a2:	4a47      	ldr	r2, [pc, #284]	@ (80063c0 <TIM_Base_SetConfig+0x130>)
 80062a4:	4293      	cmp	r3, r2
 80062a6:	d013      	beq.n	80062d0 <TIM_Base_SetConfig+0x40>
 80062a8:	687b      	ldr	r3, [r7, #4]
 80062aa:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80062ae:	d00f      	beq.n	80062d0 <TIM_Base_SetConfig+0x40>
 80062b0:	687b      	ldr	r3, [r7, #4]
 80062b2:	4a44      	ldr	r2, [pc, #272]	@ (80063c4 <TIM_Base_SetConfig+0x134>)
 80062b4:	4293      	cmp	r3, r2
 80062b6:	d00b      	beq.n	80062d0 <TIM_Base_SetConfig+0x40>
 80062b8:	687b      	ldr	r3, [r7, #4]
 80062ba:	4a43      	ldr	r2, [pc, #268]	@ (80063c8 <TIM_Base_SetConfig+0x138>)
 80062bc:	4293      	cmp	r3, r2
 80062be:	d007      	beq.n	80062d0 <TIM_Base_SetConfig+0x40>
 80062c0:	687b      	ldr	r3, [r7, #4]
 80062c2:	4a42      	ldr	r2, [pc, #264]	@ (80063cc <TIM_Base_SetConfig+0x13c>)
 80062c4:	4293      	cmp	r3, r2
 80062c6:	d003      	beq.n	80062d0 <TIM_Base_SetConfig+0x40>
 80062c8:	687b      	ldr	r3, [r7, #4]
 80062ca:	4a41      	ldr	r2, [pc, #260]	@ (80063d0 <TIM_Base_SetConfig+0x140>)
 80062cc:	4293      	cmp	r3, r2
 80062ce:	d108      	bne.n	80062e2 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80062d0:	68fb      	ldr	r3, [r7, #12]
 80062d2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80062d6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80062d8:	683b      	ldr	r3, [r7, #0]
 80062da:	685b      	ldr	r3, [r3, #4]
 80062dc:	68fa      	ldr	r2, [r7, #12]
 80062de:	4313      	orrs	r3, r2
 80062e0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80062e2:	687b      	ldr	r3, [r7, #4]
 80062e4:	4a36      	ldr	r2, [pc, #216]	@ (80063c0 <TIM_Base_SetConfig+0x130>)
 80062e6:	4293      	cmp	r3, r2
 80062e8:	d027      	beq.n	800633a <TIM_Base_SetConfig+0xaa>
 80062ea:	687b      	ldr	r3, [r7, #4]
 80062ec:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80062f0:	d023      	beq.n	800633a <TIM_Base_SetConfig+0xaa>
 80062f2:	687b      	ldr	r3, [r7, #4]
 80062f4:	4a33      	ldr	r2, [pc, #204]	@ (80063c4 <TIM_Base_SetConfig+0x134>)
 80062f6:	4293      	cmp	r3, r2
 80062f8:	d01f      	beq.n	800633a <TIM_Base_SetConfig+0xaa>
 80062fa:	687b      	ldr	r3, [r7, #4]
 80062fc:	4a32      	ldr	r2, [pc, #200]	@ (80063c8 <TIM_Base_SetConfig+0x138>)
 80062fe:	4293      	cmp	r3, r2
 8006300:	d01b      	beq.n	800633a <TIM_Base_SetConfig+0xaa>
 8006302:	687b      	ldr	r3, [r7, #4]
 8006304:	4a31      	ldr	r2, [pc, #196]	@ (80063cc <TIM_Base_SetConfig+0x13c>)
 8006306:	4293      	cmp	r3, r2
 8006308:	d017      	beq.n	800633a <TIM_Base_SetConfig+0xaa>
 800630a:	687b      	ldr	r3, [r7, #4]
 800630c:	4a30      	ldr	r2, [pc, #192]	@ (80063d0 <TIM_Base_SetConfig+0x140>)
 800630e:	4293      	cmp	r3, r2
 8006310:	d013      	beq.n	800633a <TIM_Base_SetConfig+0xaa>
 8006312:	687b      	ldr	r3, [r7, #4]
 8006314:	4a2f      	ldr	r2, [pc, #188]	@ (80063d4 <TIM_Base_SetConfig+0x144>)
 8006316:	4293      	cmp	r3, r2
 8006318:	d00f      	beq.n	800633a <TIM_Base_SetConfig+0xaa>
 800631a:	687b      	ldr	r3, [r7, #4]
 800631c:	4a2e      	ldr	r2, [pc, #184]	@ (80063d8 <TIM_Base_SetConfig+0x148>)
 800631e:	4293      	cmp	r3, r2
 8006320:	d00b      	beq.n	800633a <TIM_Base_SetConfig+0xaa>
 8006322:	687b      	ldr	r3, [r7, #4]
 8006324:	4a2d      	ldr	r2, [pc, #180]	@ (80063dc <TIM_Base_SetConfig+0x14c>)
 8006326:	4293      	cmp	r3, r2
 8006328:	d007      	beq.n	800633a <TIM_Base_SetConfig+0xaa>
 800632a:	687b      	ldr	r3, [r7, #4]
 800632c:	4a2c      	ldr	r2, [pc, #176]	@ (80063e0 <TIM_Base_SetConfig+0x150>)
 800632e:	4293      	cmp	r3, r2
 8006330:	d003      	beq.n	800633a <TIM_Base_SetConfig+0xaa>
 8006332:	687b      	ldr	r3, [r7, #4]
 8006334:	4a2b      	ldr	r2, [pc, #172]	@ (80063e4 <TIM_Base_SetConfig+0x154>)
 8006336:	4293      	cmp	r3, r2
 8006338:	d108      	bne.n	800634c <TIM_Base_SetConfig+0xbc>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800633a:	68fb      	ldr	r3, [r7, #12]
 800633c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006340:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006342:	683b      	ldr	r3, [r7, #0]
 8006344:	68db      	ldr	r3, [r3, #12]
 8006346:	68fa      	ldr	r2, [r7, #12]
 8006348:	4313      	orrs	r3, r2
 800634a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800634c:	68fb      	ldr	r3, [r7, #12]
 800634e:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8006352:	683b      	ldr	r3, [r7, #0]
 8006354:	695b      	ldr	r3, [r3, #20]
 8006356:	4313      	orrs	r3, r2
 8006358:	60fb      	str	r3, [r7, #12]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800635a:	683b      	ldr	r3, [r7, #0]
 800635c:	689a      	ldr	r2, [r3, #8]
 800635e:	687b      	ldr	r3, [r7, #4]
 8006360:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006362:	683b      	ldr	r3, [r7, #0]
 8006364:	681a      	ldr	r2, [r3, #0]
 8006366:	687b      	ldr	r3, [r7, #4]
 8006368:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800636a:	687b      	ldr	r3, [r7, #4]
 800636c:	4a14      	ldr	r2, [pc, #80]	@ (80063c0 <TIM_Base_SetConfig+0x130>)
 800636e:	4293      	cmp	r3, r2
 8006370:	d00f      	beq.n	8006392 <TIM_Base_SetConfig+0x102>
 8006372:	687b      	ldr	r3, [r7, #4]
 8006374:	4a16      	ldr	r2, [pc, #88]	@ (80063d0 <TIM_Base_SetConfig+0x140>)
 8006376:	4293      	cmp	r3, r2
 8006378:	d00b      	beq.n	8006392 <TIM_Base_SetConfig+0x102>
 800637a:	687b      	ldr	r3, [r7, #4]
 800637c:	4a15      	ldr	r2, [pc, #84]	@ (80063d4 <TIM_Base_SetConfig+0x144>)
 800637e:	4293      	cmp	r3, r2
 8006380:	d007      	beq.n	8006392 <TIM_Base_SetConfig+0x102>
 8006382:	687b      	ldr	r3, [r7, #4]
 8006384:	4a14      	ldr	r2, [pc, #80]	@ (80063d8 <TIM_Base_SetConfig+0x148>)
 8006386:	4293      	cmp	r3, r2
 8006388:	d003      	beq.n	8006392 <TIM_Base_SetConfig+0x102>
 800638a:	687b      	ldr	r3, [r7, #4]
 800638c:	4a13      	ldr	r2, [pc, #76]	@ (80063dc <TIM_Base_SetConfig+0x14c>)
 800638e:	4293      	cmp	r3, r2
 8006390:	d103      	bne.n	800639a <TIM_Base_SetConfig+0x10a>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006392:	683b      	ldr	r3, [r7, #0]
 8006394:	691a      	ldr	r2, [r3, #16]
 8006396:	687b      	ldr	r3, [r7, #4]
 8006398:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Disable Update Event (UEV) with Update Generation (UG)
     by changing Update Request Source (URS) to avoid Update flag (UIF) */
  SET_BIT(TIMx->CR1, TIM_CR1_URS);
 800639a:	687b      	ldr	r3, [r7, #4]
 800639c:	681b      	ldr	r3, [r3, #0]
 800639e:	f043 0204 	orr.w	r2, r3, #4
 80063a2:	687b      	ldr	r3, [r7, #4]
 80063a4:	601a      	str	r2, [r3, #0]

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80063a6:	687b      	ldr	r3, [r7, #4]
 80063a8:	2201      	movs	r2, #1
 80063aa:	615a      	str	r2, [r3, #20]

  TIMx->CR1 = tmpcr1;
 80063ac:	687b      	ldr	r3, [r7, #4]
 80063ae:	68fa      	ldr	r2, [r7, #12]
 80063b0:	601a      	str	r2, [r3, #0]
}
 80063b2:	bf00      	nop
 80063b4:	3714      	adds	r7, #20
 80063b6:	46bd      	mov	sp, r7
 80063b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063bc:	4770      	bx	lr
 80063be:	bf00      	nop
 80063c0:	40010000 	.word	0x40010000
 80063c4:	40000400 	.word	0x40000400
 80063c8:	40000800 	.word	0x40000800
 80063cc:	40000c00 	.word	0x40000c00
 80063d0:	40010400 	.word	0x40010400
 80063d4:	40014000 	.word	0x40014000
 80063d8:	40014400 	.word	0x40014400
 80063dc:	40014800 	.word	0x40014800
 80063e0:	4000e000 	.word	0x4000e000
 80063e4:	4000e400 	.word	0x4000e400

080063e8 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80063e8:	b480      	push	{r7}
 80063ea:	b087      	sub	sp, #28
 80063ec:	af00      	add	r7, sp, #0
 80063ee:	6078      	str	r0, [r7, #4]
 80063f0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80063f2:	687b      	ldr	r3, [r7, #4]
 80063f4:	6a1b      	ldr	r3, [r3, #32]
 80063f6:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80063f8:	687b      	ldr	r3, [r7, #4]
 80063fa:	6a1b      	ldr	r3, [r3, #32]
 80063fc:	f023 0201 	bic.w	r2, r3, #1
 8006400:	687b      	ldr	r3, [r7, #4]
 8006402:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006404:	687b      	ldr	r3, [r7, #4]
 8006406:	685b      	ldr	r3, [r3, #4]
 8006408:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800640a:	687b      	ldr	r3, [r7, #4]
 800640c:	699b      	ldr	r3, [r3, #24]
 800640e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8006410:	68fa      	ldr	r2, [r7, #12]
 8006412:	4b37      	ldr	r3, [pc, #220]	@ (80064f0 <TIM_OC1_SetConfig+0x108>)
 8006414:	4013      	ands	r3, r2
 8006416:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8006418:	68fb      	ldr	r3, [r7, #12]
 800641a:	f023 0303 	bic.w	r3, r3, #3
 800641e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006420:	683b      	ldr	r3, [r7, #0]
 8006422:	681b      	ldr	r3, [r3, #0]
 8006424:	68fa      	ldr	r2, [r7, #12]
 8006426:	4313      	orrs	r3, r2
 8006428:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800642a:	697b      	ldr	r3, [r7, #20]
 800642c:	f023 0302 	bic.w	r3, r3, #2
 8006430:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8006432:	683b      	ldr	r3, [r7, #0]
 8006434:	689b      	ldr	r3, [r3, #8]
 8006436:	697a      	ldr	r2, [r7, #20]
 8006438:	4313      	orrs	r3, r2
 800643a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800643c:	687b      	ldr	r3, [r7, #4]
 800643e:	4a2d      	ldr	r2, [pc, #180]	@ (80064f4 <TIM_OC1_SetConfig+0x10c>)
 8006440:	4293      	cmp	r3, r2
 8006442:	d00f      	beq.n	8006464 <TIM_OC1_SetConfig+0x7c>
 8006444:	687b      	ldr	r3, [r7, #4]
 8006446:	4a2c      	ldr	r2, [pc, #176]	@ (80064f8 <TIM_OC1_SetConfig+0x110>)
 8006448:	4293      	cmp	r3, r2
 800644a:	d00b      	beq.n	8006464 <TIM_OC1_SetConfig+0x7c>
 800644c:	687b      	ldr	r3, [r7, #4]
 800644e:	4a2b      	ldr	r2, [pc, #172]	@ (80064fc <TIM_OC1_SetConfig+0x114>)
 8006450:	4293      	cmp	r3, r2
 8006452:	d007      	beq.n	8006464 <TIM_OC1_SetConfig+0x7c>
 8006454:	687b      	ldr	r3, [r7, #4]
 8006456:	4a2a      	ldr	r2, [pc, #168]	@ (8006500 <TIM_OC1_SetConfig+0x118>)
 8006458:	4293      	cmp	r3, r2
 800645a:	d003      	beq.n	8006464 <TIM_OC1_SetConfig+0x7c>
 800645c:	687b      	ldr	r3, [r7, #4]
 800645e:	4a29      	ldr	r2, [pc, #164]	@ (8006504 <TIM_OC1_SetConfig+0x11c>)
 8006460:	4293      	cmp	r3, r2
 8006462:	d10c      	bne.n	800647e <TIM_OC1_SetConfig+0x96>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8006464:	697b      	ldr	r3, [r7, #20]
 8006466:	f023 0308 	bic.w	r3, r3, #8
 800646a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800646c:	683b      	ldr	r3, [r7, #0]
 800646e:	68db      	ldr	r3, [r3, #12]
 8006470:	697a      	ldr	r2, [r7, #20]
 8006472:	4313      	orrs	r3, r2
 8006474:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8006476:	697b      	ldr	r3, [r7, #20]
 8006478:	f023 0304 	bic.w	r3, r3, #4
 800647c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800647e:	687b      	ldr	r3, [r7, #4]
 8006480:	4a1c      	ldr	r2, [pc, #112]	@ (80064f4 <TIM_OC1_SetConfig+0x10c>)
 8006482:	4293      	cmp	r3, r2
 8006484:	d00f      	beq.n	80064a6 <TIM_OC1_SetConfig+0xbe>
 8006486:	687b      	ldr	r3, [r7, #4]
 8006488:	4a1b      	ldr	r2, [pc, #108]	@ (80064f8 <TIM_OC1_SetConfig+0x110>)
 800648a:	4293      	cmp	r3, r2
 800648c:	d00b      	beq.n	80064a6 <TIM_OC1_SetConfig+0xbe>
 800648e:	687b      	ldr	r3, [r7, #4]
 8006490:	4a1a      	ldr	r2, [pc, #104]	@ (80064fc <TIM_OC1_SetConfig+0x114>)
 8006492:	4293      	cmp	r3, r2
 8006494:	d007      	beq.n	80064a6 <TIM_OC1_SetConfig+0xbe>
 8006496:	687b      	ldr	r3, [r7, #4]
 8006498:	4a19      	ldr	r2, [pc, #100]	@ (8006500 <TIM_OC1_SetConfig+0x118>)
 800649a:	4293      	cmp	r3, r2
 800649c:	d003      	beq.n	80064a6 <TIM_OC1_SetConfig+0xbe>
 800649e:	687b      	ldr	r3, [r7, #4]
 80064a0:	4a18      	ldr	r2, [pc, #96]	@ (8006504 <TIM_OC1_SetConfig+0x11c>)
 80064a2:	4293      	cmp	r3, r2
 80064a4:	d111      	bne.n	80064ca <TIM_OC1_SetConfig+0xe2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80064a6:	693b      	ldr	r3, [r7, #16]
 80064a8:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80064ac:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80064ae:	693b      	ldr	r3, [r7, #16]
 80064b0:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80064b4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80064b6:	683b      	ldr	r3, [r7, #0]
 80064b8:	695b      	ldr	r3, [r3, #20]
 80064ba:	693a      	ldr	r2, [r7, #16]
 80064bc:	4313      	orrs	r3, r2
 80064be:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80064c0:	683b      	ldr	r3, [r7, #0]
 80064c2:	699b      	ldr	r3, [r3, #24]
 80064c4:	693a      	ldr	r2, [r7, #16]
 80064c6:	4313      	orrs	r3, r2
 80064c8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80064ca:	687b      	ldr	r3, [r7, #4]
 80064cc:	693a      	ldr	r2, [r7, #16]
 80064ce:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80064d0:	687b      	ldr	r3, [r7, #4]
 80064d2:	68fa      	ldr	r2, [r7, #12]
 80064d4:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80064d6:	683b      	ldr	r3, [r7, #0]
 80064d8:	685a      	ldr	r2, [r3, #4]
 80064da:	687b      	ldr	r3, [r7, #4]
 80064dc:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80064de:	687b      	ldr	r3, [r7, #4]
 80064e0:	697a      	ldr	r2, [r7, #20]
 80064e2:	621a      	str	r2, [r3, #32]
}
 80064e4:	bf00      	nop
 80064e6:	371c      	adds	r7, #28
 80064e8:	46bd      	mov	sp, r7
 80064ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064ee:	4770      	bx	lr
 80064f0:	fffeff8f 	.word	0xfffeff8f
 80064f4:	40010000 	.word	0x40010000
 80064f8:	40010400 	.word	0x40010400
 80064fc:	40014000 	.word	0x40014000
 8006500:	40014400 	.word	0x40014400
 8006504:	40014800 	.word	0x40014800

08006508 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006508:	b480      	push	{r7}
 800650a:	b087      	sub	sp, #28
 800650c:	af00      	add	r7, sp, #0
 800650e:	6078      	str	r0, [r7, #4]
 8006510:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006512:	687b      	ldr	r3, [r7, #4]
 8006514:	6a1b      	ldr	r3, [r3, #32]
 8006516:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006518:	687b      	ldr	r3, [r7, #4]
 800651a:	6a1b      	ldr	r3, [r3, #32]
 800651c:	f023 0210 	bic.w	r2, r3, #16
 8006520:	687b      	ldr	r3, [r7, #4]
 8006522:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006524:	687b      	ldr	r3, [r7, #4]
 8006526:	685b      	ldr	r3, [r3, #4]
 8006528:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800652a:	687b      	ldr	r3, [r7, #4]
 800652c:	699b      	ldr	r3, [r3, #24]
 800652e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8006530:	68fa      	ldr	r2, [r7, #12]
 8006532:	4b34      	ldr	r3, [pc, #208]	@ (8006604 <TIM_OC2_SetConfig+0xfc>)
 8006534:	4013      	ands	r3, r2
 8006536:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8006538:	68fb      	ldr	r3, [r7, #12]
 800653a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800653e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006540:	683b      	ldr	r3, [r7, #0]
 8006542:	681b      	ldr	r3, [r3, #0]
 8006544:	021b      	lsls	r3, r3, #8
 8006546:	68fa      	ldr	r2, [r7, #12]
 8006548:	4313      	orrs	r3, r2
 800654a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800654c:	697b      	ldr	r3, [r7, #20]
 800654e:	f023 0320 	bic.w	r3, r3, #32
 8006552:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8006554:	683b      	ldr	r3, [r7, #0]
 8006556:	689b      	ldr	r3, [r3, #8]
 8006558:	011b      	lsls	r3, r3, #4
 800655a:	697a      	ldr	r2, [r7, #20]
 800655c:	4313      	orrs	r3, r2
 800655e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8006560:	687b      	ldr	r3, [r7, #4]
 8006562:	4a29      	ldr	r2, [pc, #164]	@ (8006608 <TIM_OC2_SetConfig+0x100>)
 8006564:	4293      	cmp	r3, r2
 8006566:	d003      	beq.n	8006570 <TIM_OC2_SetConfig+0x68>
 8006568:	687b      	ldr	r3, [r7, #4]
 800656a:	4a28      	ldr	r2, [pc, #160]	@ (800660c <TIM_OC2_SetConfig+0x104>)
 800656c:	4293      	cmp	r3, r2
 800656e:	d10d      	bne.n	800658c <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8006570:	697b      	ldr	r3, [r7, #20]
 8006572:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8006576:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8006578:	683b      	ldr	r3, [r7, #0]
 800657a:	68db      	ldr	r3, [r3, #12]
 800657c:	011b      	lsls	r3, r3, #4
 800657e:	697a      	ldr	r2, [r7, #20]
 8006580:	4313      	orrs	r3, r2
 8006582:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8006584:	697b      	ldr	r3, [r7, #20]
 8006586:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800658a:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800658c:	687b      	ldr	r3, [r7, #4]
 800658e:	4a1e      	ldr	r2, [pc, #120]	@ (8006608 <TIM_OC2_SetConfig+0x100>)
 8006590:	4293      	cmp	r3, r2
 8006592:	d00f      	beq.n	80065b4 <TIM_OC2_SetConfig+0xac>
 8006594:	687b      	ldr	r3, [r7, #4]
 8006596:	4a1d      	ldr	r2, [pc, #116]	@ (800660c <TIM_OC2_SetConfig+0x104>)
 8006598:	4293      	cmp	r3, r2
 800659a:	d00b      	beq.n	80065b4 <TIM_OC2_SetConfig+0xac>
 800659c:	687b      	ldr	r3, [r7, #4]
 800659e:	4a1c      	ldr	r2, [pc, #112]	@ (8006610 <TIM_OC2_SetConfig+0x108>)
 80065a0:	4293      	cmp	r3, r2
 80065a2:	d007      	beq.n	80065b4 <TIM_OC2_SetConfig+0xac>
 80065a4:	687b      	ldr	r3, [r7, #4]
 80065a6:	4a1b      	ldr	r2, [pc, #108]	@ (8006614 <TIM_OC2_SetConfig+0x10c>)
 80065a8:	4293      	cmp	r3, r2
 80065aa:	d003      	beq.n	80065b4 <TIM_OC2_SetConfig+0xac>
 80065ac:	687b      	ldr	r3, [r7, #4]
 80065ae:	4a1a      	ldr	r2, [pc, #104]	@ (8006618 <TIM_OC2_SetConfig+0x110>)
 80065b0:	4293      	cmp	r3, r2
 80065b2:	d113      	bne.n	80065dc <TIM_OC2_SetConfig+0xd4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80065b4:	693b      	ldr	r3, [r7, #16]
 80065b6:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80065ba:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80065bc:	693b      	ldr	r3, [r7, #16]
 80065be:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80065c2:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80065c4:	683b      	ldr	r3, [r7, #0]
 80065c6:	695b      	ldr	r3, [r3, #20]
 80065c8:	009b      	lsls	r3, r3, #2
 80065ca:	693a      	ldr	r2, [r7, #16]
 80065cc:	4313      	orrs	r3, r2
 80065ce:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80065d0:	683b      	ldr	r3, [r7, #0]
 80065d2:	699b      	ldr	r3, [r3, #24]
 80065d4:	009b      	lsls	r3, r3, #2
 80065d6:	693a      	ldr	r2, [r7, #16]
 80065d8:	4313      	orrs	r3, r2
 80065da:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80065dc:	687b      	ldr	r3, [r7, #4]
 80065de:	693a      	ldr	r2, [r7, #16]
 80065e0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80065e2:	687b      	ldr	r3, [r7, #4]
 80065e4:	68fa      	ldr	r2, [r7, #12]
 80065e6:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80065e8:	683b      	ldr	r3, [r7, #0]
 80065ea:	685a      	ldr	r2, [r3, #4]
 80065ec:	687b      	ldr	r3, [r7, #4]
 80065ee:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80065f0:	687b      	ldr	r3, [r7, #4]
 80065f2:	697a      	ldr	r2, [r7, #20]
 80065f4:	621a      	str	r2, [r3, #32]
}
 80065f6:	bf00      	nop
 80065f8:	371c      	adds	r7, #28
 80065fa:	46bd      	mov	sp, r7
 80065fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006600:	4770      	bx	lr
 8006602:	bf00      	nop
 8006604:	feff8fff 	.word	0xfeff8fff
 8006608:	40010000 	.word	0x40010000
 800660c:	40010400 	.word	0x40010400
 8006610:	40014000 	.word	0x40014000
 8006614:	40014400 	.word	0x40014400
 8006618:	40014800 	.word	0x40014800

0800661c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800661c:	b480      	push	{r7}
 800661e:	b087      	sub	sp, #28
 8006620:	af00      	add	r7, sp, #0
 8006622:	6078      	str	r0, [r7, #4]
 8006624:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006626:	687b      	ldr	r3, [r7, #4]
 8006628:	6a1b      	ldr	r3, [r3, #32]
 800662a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800662c:	687b      	ldr	r3, [r7, #4]
 800662e:	6a1b      	ldr	r3, [r3, #32]
 8006630:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8006634:	687b      	ldr	r3, [r7, #4]
 8006636:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006638:	687b      	ldr	r3, [r7, #4]
 800663a:	685b      	ldr	r3, [r3, #4]
 800663c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800663e:	687b      	ldr	r3, [r7, #4]
 8006640:	69db      	ldr	r3, [r3, #28]
 8006642:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8006644:	68fa      	ldr	r2, [r7, #12]
 8006646:	4b33      	ldr	r3, [pc, #204]	@ (8006714 <TIM_OC3_SetConfig+0xf8>)
 8006648:	4013      	ands	r3, r2
 800664a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800664c:	68fb      	ldr	r3, [r7, #12]
 800664e:	f023 0303 	bic.w	r3, r3, #3
 8006652:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006654:	683b      	ldr	r3, [r7, #0]
 8006656:	681b      	ldr	r3, [r3, #0]
 8006658:	68fa      	ldr	r2, [r7, #12]
 800665a:	4313      	orrs	r3, r2
 800665c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800665e:	697b      	ldr	r3, [r7, #20]
 8006660:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8006664:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8006666:	683b      	ldr	r3, [r7, #0]
 8006668:	689b      	ldr	r3, [r3, #8]
 800666a:	021b      	lsls	r3, r3, #8
 800666c:	697a      	ldr	r2, [r7, #20]
 800666e:	4313      	orrs	r3, r2
 8006670:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8006672:	687b      	ldr	r3, [r7, #4]
 8006674:	4a28      	ldr	r2, [pc, #160]	@ (8006718 <TIM_OC3_SetConfig+0xfc>)
 8006676:	4293      	cmp	r3, r2
 8006678:	d003      	beq.n	8006682 <TIM_OC3_SetConfig+0x66>
 800667a:	687b      	ldr	r3, [r7, #4]
 800667c:	4a27      	ldr	r2, [pc, #156]	@ (800671c <TIM_OC3_SetConfig+0x100>)
 800667e:	4293      	cmp	r3, r2
 8006680:	d10d      	bne.n	800669e <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8006682:	697b      	ldr	r3, [r7, #20]
 8006684:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8006688:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800668a:	683b      	ldr	r3, [r7, #0]
 800668c:	68db      	ldr	r3, [r3, #12]
 800668e:	021b      	lsls	r3, r3, #8
 8006690:	697a      	ldr	r2, [r7, #20]
 8006692:	4313      	orrs	r3, r2
 8006694:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8006696:	697b      	ldr	r3, [r7, #20]
 8006698:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800669c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800669e:	687b      	ldr	r3, [r7, #4]
 80066a0:	4a1d      	ldr	r2, [pc, #116]	@ (8006718 <TIM_OC3_SetConfig+0xfc>)
 80066a2:	4293      	cmp	r3, r2
 80066a4:	d00f      	beq.n	80066c6 <TIM_OC3_SetConfig+0xaa>
 80066a6:	687b      	ldr	r3, [r7, #4]
 80066a8:	4a1c      	ldr	r2, [pc, #112]	@ (800671c <TIM_OC3_SetConfig+0x100>)
 80066aa:	4293      	cmp	r3, r2
 80066ac:	d00b      	beq.n	80066c6 <TIM_OC3_SetConfig+0xaa>
 80066ae:	687b      	ldr	r3, [r7, #4]
 80066b0:	4a1b      	ldr	r2, [pc, #108]	@ (8006720 <TIM_OC3_SetConfig+0x104>)
 80066b2:	4293      	cmp	r3, r2
 80066b4:	d007      	beq.n	80066c6 <TIM_OC3_SetConfig+0xaa>
 80066b6:	687b      	ldr	r3, [r7, #4]
 80066b8:	4a1a      	ldr	r2, [pc, #104]	@ (8006724 <TIM_OC3_SetConfig+0x108>)
 80066ba:	4293      	cmp	r3, r2
 80066bc:	d003      	beq.n	80066c6 <TIM_OC3_SetConfig+0xaa>
 80066be:	687b      	ldr	r3, [r7, #4]
 80066c0:	4a19      	ldr	r2, [pc, #100]	@ (8006728 <TIM_OC3_SetConfig+0x10c>)
 80066c2:	4293      	cmp	r3, r2
 80066c4:	d113      	bne.n	80066ee <TIM_OC3_SetConfig+0xd2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80066c6:	693b      	ldr	r3, [r7, #16]
 80066c8:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80066cc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80066ce:	693b      	ldr	r3, [r7, #16]
 80066d0:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80066d4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80066d6:	683b      	ldr	r3, [r7, #0]
 80066d8:	695b      	ldr	r3, [r3, #20]
 80066da:	011b      	lsls	r3, r3, #4
 80066dc:	693a      	ldr	r2, [r7, #16]
 80066de:	4313      	orrs	r3, r2
 80066e0:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80066e2:	683b      	ldr	r3, [r7, #0]
 80066e4:	699b      	ldr	r3, [r3, #24]
 80066e6:	011b      	lsls	r3, r3, #4
 80066e8:	693a      	ldr	r2, [r7, #16]
 80066ea:	4313      	orrs	r3, r2
 80066ec:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80066ee:	687b      	ldr	r3, [r7, #4]
 80066f0:	693a      	ldr	r2, [r7, #16]
 80066f2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80066f4:	687b      	ldr	r3, [r7, #4]
 80066f6:	68fa      	ldr	r2, [r7, #12]
 80066f8:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80066fa:	683b      	ldr	r3, [r7, #0]
 80066fc:	685a      	ldr	r2, [r3, #4]
 80066fe:	687b      	ldr	r3, [r7, #4]
 8006700:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006702:	687b      	ldr	r3, [r7, #4]
 8006704:	697a      	ldr	r2, [r7, #20]
 8006706:	621a      	str	r2, [r3, #32]
}
 8006708:	bf00      	nop
 800670a:	371c      	adds	r7, #28
 800670c:	46bd      	mov	sp, r7
 800670e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006712:	4770      	bx	lr
 8006714:	fffeff8f 	.word	0xfffeff8f
 8006718:	40010000 	.word	0x40010000
 800671c:	40010400 	.word	0x40010400
 8006720:	40014000 	.word	0x40014000
 8006724:	40014400 	.word	0x40014400
 8006728:	40014800 	.word	0x40014800

0800672c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800672c:	b480      	push	{r7}
 800672e:	b087      	sub	sp, #28
 8006730:	af00      	add	r7, sp, #0
 8006732:	6078      	str	r0, [r7, #4]
 8006734:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006736:	687b      	ldr	r3, [r7, #4]
 8006738:	6a1b      	ldr	r3, [r3, #32]
 800673a:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800673c:	687b      	ldr	r3, [r7, #4]
 800673e:	6a1b      	ldr	r3, [r3, #32]
 8006740:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8006744:	687b      	ldr	r3, [r7, #4]
 8006746:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006748:	687b      	ldr	r3, [r7, #4]
 800674a:	685b      	ldr	r3, [r3, #4]
 800674c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800674e:	687b      	ldr	r3, [r7, #4]
 8006750:	69db      	ldr	r3, [r3, #28]
 8006752:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8006754:	68fa      	ldr	r2, [r7, #12]
 8006756:	4b24      	ldr	r3, [pc, #144]	@ (80067e8 <TIM_OC4_SetConfig+0xbc>)
 8006758:	4013      	ands	r3, r2
 800675a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800675c:	68fb      	ldr	r3, [r7, #12]
 800675e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006762:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006764:	683b      	ldr	r3, [r7, #0]
 8006766:	681b      	ldr	r3, [r3, #0]
 8006768:	021b      	lsls	r3, r3, #8
 800676a:	68fa      	ldr	r2, [r7, #12]
 800676c:	4313      	orrs	r3, r2
 800676e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8006770:	693b      	ldr	r3, [r7, #16]
 8006772:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8006776:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8006778:	683b      	ldr	r3, [r7, #0]
 800677a:	689b      	ldr	r3, [r3, #8]
 800677c:	031b      	lsls	r3, r3, #12
 800677e:	693a      	ldr	r2, [r7, #16]
 8006780:	4313      	orrs	r3, r2
 8006782:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006784:	687b      	ldr	r3, [r7, #4]
 8006786:	4a19      	ldr	r2, [pc, #100]	@ (80067ec <TIM_OC4_SetConfig+0xc0>)
 8006788:	4293      	cmp	r3, r2
 800678a:	d00f      	beq.n	80067ac <TIM_OC4_SetConfig+0x80>
 800678c:	687b      	ldr	r3, [r7, #4]
 800678e:	4a18      	ldr	r2, [pc, #96]	@ (80067f0 <TIM_OC4_SetConfig+0xc4>)
 8006790:	4293      	cmp	r3, r2
 8006792:	d00b      	beq.n	80067ac <TIM_OC4_SetConfig+0x80>
 8006794:	687b      	ldr	r3, [r7, #4]
 8006796:	4a17      	ldr	r2, [pc, #92]	@ (80067f4 <TIM_OC4_SetConfig+0xc8>)
 8006798:	4293      	cmp	r3, r2
 800679a:	d007      	beq.n	80067ac <TIM_OC4_SetConfig+0x80>
 800679c:	687b      	ldr	r3, [r7, #4]
 800679e:	4a16      	ldr	r2, [pc, #88]	@ (80067f8 <TIM_OC4_SetConfig+0xcc>)
 80067a0:	4293      	cmp	r3, r2
 80067a2:	d003      	beq.n	80067ac <TIM_OC4_SetConfig+0x80>
 80067a4:	687b      	ldr	r3, [r7, #4]
 80067a6:	4a15      	ldr	r2, [pc, #84]	@ (80067fc <TIM_OC4_SetConfig+0xd0>)
 80067a8:	4293      	cmp	r3, r2
 80067aa:	d109      	bne.n	80067c0 <TIM_OC4_SetConfig+0x94>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80067ac:	697b      	ldr	r3, [r7, #20]
 80067ae:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80067b2:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80067b4:	683b      	ldr	r3, [r7, #0]
 80067b6:	695b      	ldr	r3, [r3, #20]
 80067b8:	019b      	lsls	r3, r3, #6
 80067ba:	697a      	ldr	r2, [r7, #20]
 80067bc:	4313      	orrs	r3, r2
 80067be:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80067c0:	687b      	ldr	r3, [r7, #4]
 80067c2:	697a      	ldr	r2, [r7, #20]
 80067c4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80067c6:	687b      	ldr	r3, [r7, #4]
 80067c8:	68fa      	ldr	r2, [r7, #12]
 80067ca:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80067cc:	683b      	ldr	r3, [r7, #0]
 80067ce:	685a      	ldr	r2, [r3, #4]
 80067d0:	687b      	ldr	r3, [r7, #4]
 80067d2:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80067d4:	687b      	ldr	r3, [r7, #4]
 80067d6:	693a      	ldr	r2, [r7, #16]
 80067d8:	621a      	str	r2, [r3, #32]
}
 80067da:	bf00      	nop
 80067dc:	371c      	adds	r7, #28
 80067de:	46bd      	mov	sp, r7
 80067e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067e4:	4770      	bx	lr
 80067e6:	bf00      	nop
 80067e8:	feff8fff 	.word	0xfeff8fff
 80067ec:	40010000 	.word	0x40010000
 80067f0:	40010400 	.word	0x40010400
 80067f4:	40014000 	.word	0x40014000
 80067f8:	40014400 	.word	0x40014400
 80067fc:	40014800 	.word	0x40014800

08006800 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8006800:	b480      	push	{r7}
 8006802:	b087      	sub	sp, #28
 8006804:	af00      	add	r7, sp, #0
 8006806:	6078      	str	r0, [r7, #4]
 8006808:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800680a:	687b      	ldr	r3, [r7, #4]
 800680c:	6a1b      	ldr	r3, [r3, #32]
 800680e:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8006810:	687b      	ldr	r3, [r7, #4]
 8006812:	6a1b      	ldr	r3, [r3, #32]
 8006814:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8006818:	687b      	ldr	r3, [r7, #4]
 800681a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800681c:	687b      	ldr	r3, [r7, #4]
 800681e:	685b      	ldr	r3, [r3, #4]
 8006820:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8006822:	687b      	ldr	r3, [r7, #4]
 8006824:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006826:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8006828:	68fa      	ldr	r2, [r7, #12]
 800682a:	4b21      	ldr	r3, [pc, #132]	@ (80068b0 <TIM_OC5_SetConfig+0xb0>)
 800682c:	4013      	ands	r3, r2
 800682e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006830:	683b      	ldr	r3, [r7, #0]
 8006832:	681b      	ldr	r3, [r3, #0]
 8006834:	68fa      	ldr	r2, [r7, #12]
 8006836:	4313      	orrs	r3, r2
 8006838:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800683a:	693b      	ldr	r3, [r7, #16]
 800683c:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 8006840:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8006842:	683b      	ldr	r3, [r7, #0]
 8006844:	689b      	ldr	r3, [r3, #8]
 8006846:	041b      	lsls	r3, r3, #16
 8006848:	693a      	ldr	r2, [r7, #16]
 800684a:	4313      	orrs	r3, r2
 800684c:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800684e:	687b      	ldr	r3, [r7, #4]
 8006850:	4a18      	ldr	r2, [pc, #96]	@ (80068b4 <TIM_OC5_SetConfig+0xb4>)
 8006852:	4293      	cmp	r3, r2
 8006854:	d00f      	beq.n	8006876 <TIM_OC5_SetConfig+0x76>
 8006856:	687b      	ldr	r3, [r7, #4]
 8006858:	4a17      	ldr	r2, [pc, #92]	@ (80068b8 <TIM_OC5_SetConfig+0xb8>)
 800685a:	4293      	cmp	r3, r2
 800685c:	d00b      	beq.n	8006876 <TIM_OC5_SetConfig+0x76>
 800685e:	687b      	ldr	r3, [r7, #4]
 8006860:	4a16      	ldr	r2, [pc, #88]	@ (80068bc <TIM_OC5_SetConfig+0xbc>)
 8006862:	4293      	cmp	r3, r2
 8006864:	d007      	beq.n	8006876 <TIM_OC5_SetConfig+0x76>
 8006866:	687b      	ldr	r3, [r7, #4]
 8006868:	4a15      	ldr	r2, [pc, #84]	@ (80068c0 <TIM_OC5_SetConfig+0xc0>)
 800686a:	4293      	cmp	r3, r2
 800686c:	d003      	beq.n	8006876 <TIM_OC5_SetConfig+0x76>
 800686e:	687b      	ldr	r3, [r7, #4]
 8006870:	4a14      	ldr	r2, [pc, #80]	@ (80068c4 <TIM_OC5_SetConfig+0xc4>)
 8006872:	4293      	cmp	r3, r2
 8006874:	d109      	bne.n	800688a <TIM_OC5_SetConfig+0x8a>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8006876:	697b      	ldr	r3, [r7, #20]
 8006878:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800687c:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800687e:	683b      	ldr	r3, [r7, #0]
 8006880:	695b      	ldr	r3, [r3, #20]
 8006882:	021b      	lsls	r3, r3, #8
 8006884:	697a      	ldr	r2, [r7, #20]
 8006886:	4313      	orrs	r3, r2
 8006888:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800688a:	687b      	ldr	r3, [r7, #4]
 800688c:	697a      	ldr	r2, [r7, #20]
 800688e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8006890:	687b      	ldr	r3, [r7, #4]
 8006892:	68fa      	ldr	r2, [r7, #12]
 8006894:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8006896:	683b      	ldr	r3, [r7, #0]
 8006898:	685a      	ldr	r2, [r3, #4]
 800689a:	687b      	ldr	r3, [r7, #4]
 800689c:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800689e:	687b      	ldr	r3, [r7, #4]
 80068a0:	693a      	ldr	r2, [r7, #16]
 80068a2:	621a      	str	r2, [r3, #32]
}
 80068a4:	bf00      	nop
 80068a6:	371c      	adds	r7, #28
 80068a8:	46bd      	mov	sp, r7
 80068aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068ae:	4770      	bx	lr
 80068b0:	fffeff8f 	.word	0xfffeff8f
 80068b4:	40010000 	.word	0x40010000
 80068b8:	40010400 	.word	0x40010400
 80068bc:	40014000 	.word	0x40014000
 80068c0:	40014400 	.word	0x40014400
 80068c4:	40014800 	.word	0x40014800

080068c8 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 80068c8:	b480      	push	{r7}
 80068ca:	b087      	sub	sp, #28
 80068cc:	af00      	add	r7, sp, #0
 80068ce:	6078      	str	r0, [r7, #4]
 80068d0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80068d2:	687b      	ldr	r3, [r7, #4]
 80068d4:	6a1b      	ldr	r3, [r3, #32]
 80068d6:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 80068d8:	687b      	ldr	r3, [r7, #4]
 80068da:	6a1b      	ldr	r3, [r3, #32]
 80068dc:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 80068e0:	687b      	ldr	r3, [r7, #4]
 80068e2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80068e4:	687b      	ldr	r3, [r7, #4]
 80068e6:	685b      	ldr	r3, [r3, #4]
 80068e8:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80068ea:	687b      	ldr	r3, [r7, #4]
 80068ec:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80068ee:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 80068f0:	68fa      	ldr	r2, [r7, #12]
 80068f2:	4b22      	ldr	r3, [pc, #136]	@ (800697c <TIM_OC6_SetConfig+0xb4>)
 80068f4:	4013      	ands	r3, r2
 80068f6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80068f8:	683b      	ldr	r3, [r7, #0]
 80068fa:	681b      	ldr	r3, [r3, #0]
 80068fc:	021b      	lsls	r3, r3, #8
 80068fe:	68fa      	ldr	r2, [r7, #12]
 8006900:	4313      	orrs	r3, r2
 8006902:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8006904:	693b      	ldr	r3, [r7, #16]
 8006906:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 800690a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 800690c:	683b      	ldr	r3, [r7, #0]
 800690e:	689b      	ldr	r3, [r3, #8]
 8006910:	051b      	lsls	r3, r3, #20
 8006912:	693a      	ldr	r2, [r7, #16]
 8006914:	4313      	orrs	r3, r2
 8006916:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006918:	687b      	ldr	r3, [r7, #4]
 800691a:	4a19      	ldr	r2, [pc, #100]	@ (8006980 <TIM_OC6_SetConfig+0xb8>)
 800691c:	4293      	cmp	r3, r2
 800691e:	d00f      	beq.n	8006940 <TIM_OC6_SetConfig+0x78>
 8006920:	687b      	ldr	r3, [r7, #4]
 8006922:	4a18      	ldr	r2, [pc, #96]	@ (8006984 <TIM_OC6_SetConfig+0xbc>)
 8006924:	4293      	cmp	r3, r2
 8006926:	d00b      	beq.n	8006940 <TIM_OC6_SetConfig+0x78>
 8006928:	687b      	ldr	r3, [r7, #4]
 800692a:	4a17      	ldr	r2, [pc, #92]	@ (8006988 <TIM_OC6_SetConfig+0xc0>)
 800692c:	4293      	cmp	r3, r2
 800692e:	d007      	beq.n	8006940 <TIM_OC6_SetConfig+0x78>
 8006930:	687b      	ldr	r3, [r7, #4]
 8006932:	4a16      	ldr	r2, [pc, #88]	@ (800698c <TIM_OC6_SetConfig+0xc4>)
 8006934:	4293      	cmp	r3, r2
 8006936:	d003      	beq.n	8006940 <TIM_OC6_SetConfig+0x78>
 8006938:	687b      	ldr	r3, [r7, #4]
 800693a:	4a15      	ldr	r2, [pc, #84]	@ (8006990 <TIM_OC6_SetConfig+0xc8>)
 800693c:	4293      	cmp	r3, r2
 800693e:	d109      	bne.n	8006954 <TIM_OC6_SetConfig+0x8c>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8006940:	697b      	ldr	r3, [r7, #20]
 8006942:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8006946:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8006948:	683b      	ldr	r3, [r7, #0]
 800694a:	695b      	ldr	r3, [r3, #20]
 800694c:	029b      	lsls	r3, r3, #10
 800694e:	697a      	ldr	r2, [r7, #20]
 8006950:	4313      	orrs	r3, r2
 8006952:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006954:	687b      	ldr	r3, [r7, #4]
 8006956:	697a      	ldr	r2, [r7, #20]
 8006958:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800695a:	687b      	ldr	r3, [r7, #4]
 800695c:	68fa      	ldr	r2, [r7, #12]
 800695e:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8006960:	683b      	ldr	r3, [r7, #0]
 8006962:	685a      	ldr	r2, [r3, #4]
 8006964:	687b      	ldr	r3, [r7, #4]
 8006966:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006968:	687b      	ldr	r3, [r7, #4]
 800696a:	693a      	ldr	r2, [r7, #16]
 800696c:	621a      	str	r2, [r3, #32]
}
 800696e:	bf00      	nop
 8006970:	371c      	adds	r7, #28
 8006972:	46bd      	mov	sp, r7
 8006974:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006978:	4770      	bx	lr
 800697a:	bf00      	nop
 800697c:	feff8fff 	.word	0xfeff8fff
 8006980:	40010000 	.word	0x40010000
 8006984:	40010400 	.word	0x40010400
 8006988:	40014000 	.word	0x40014000
 800698c:	40014400 	.word	0x40014400
 8006990:	40014800 	.word	0x40014800

08006994 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8006994:	b480      	push	{r7}
 8006996:	b087      	sub	sp, #28
 8006998:	af00      	add	r7, sp, #0
 800699a:	60f8      	str	r0, [r7, #12]
 800699c:	60b9      	str	r1, [r7, #8]
 800699e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80069a0:	68bb      	ldr	r3, [r7, #8]
 80069a2:	f003 031f 	and.w	r3, r3, #31
 80069a6:	2201      	movs	r2, #1
 80069a8:	fa02 f303 	lsl.w	r3, r2, r3
 80069ac:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80069ae:	68fb      	ldr	r3, [r7, #12]
 80069b0:	6a1a      	ldr	r2, [r3, #32]
 80069b2:	697b      	ldr	r3, [r7, #20]
 80069b4:	43db      	mvns	r3, r3
 80069b6:	401a      	ands	r2, r3
 80069b8:	68fb      	ldr	r3, [r7, #12]
 80069ba:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80069bc:	68fb      	ldr	r3, [r7, #12]
 80069be:	6a1a      	ldr	r2, [r3, #32]
 80069c0:	68bb      	ldr	r3, [r7, #8]
 80069c2:	f003 031f 	and.w	r3, r3, #31
 80069c6:	6879      	ldr	r1, [r7, #4]
 80069c8:	fa01 f303 	lsl.w	r3, r1, r3
 80069cc:	431a      	orrs	r2, r3
 80069ce:	68fb      	ldr	r3, [r7, #12]
 80069d0:	621a      	str	r2, [r3, #32]
}
 80069d2:	bf00      	nop
 80069d4:	371c      	adds	r7, #28
 80069d6:	46bd      	mov	sp, r7
 80069d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069dc:	4770      	bx	lr
	...

080069e0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80069e0:	b480      	push	{r7}
 80069e2:	b085      	sub	sp, #20
 80069e4:	af00      	add	r7, sp, #0
 80069e6:	6078      	str	r0, [r7, #4]
 80069e8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80069ea:	687b      	ldr	r3, [r7, #4]
 80069ec:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80069f0:	2b01      	cmp	r3, #1
 80069f2:	d101      	bne.n	80069f8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80069f4:	2302      	movs	r3, #2
 80069f6:	e077      	b.n	8006ae8 <HAL_TIMEx_MasterConfigSynchronization+0x108>
 80069f8:	687b      	ldr	r3, [r7, #4]
 80069fa:	2201      	movs	r2, #1
 80069fc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006a00:	687b      	ldr	r3, [r7, #4]
 8006a02:	2202      	movs	r2, #2
 8006a04:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006a08:	687b      	ldr	r3, [r7, #4]
 8006a0a:	681b      	ldr	r3, [r3, #0]
 8006a0c:	685b      	ldr	r3, [r3, #4]
 8006a0e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006a10:	687b      	ldr	r3, [r7, #4]
 8006a12:	681b      	ldr	r3, [r3, #0]
 8006a14:	689b      	ldr	r3, [r3, #8]
 8006a16:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8006a18:	687b      	ldr	r3, [r7, #4]
 8006a1a:	681b      	ldr	r3, [r3, #0]
 8006a1c:	4a35      	ldr	r2, [pc, #212]	@ (8006af4 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8006a1e:	4293      	cmp	r3, r2
 8006a20:	d004      	beq.n	8006a2c <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8006a22:	687b      	ldr	r3, [r7, #4]
 8006a24:	681b      	ldr	r3, [r3, #0]
 8006a26:	4a34      	ldr	r2, [pc, #208]	@ (8006af8 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8006a28:	4293      	cmp	r3, r2
 8006a2a:	d108      	bne.n	8006a3e <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8006a2c:	68fb      	ldr	r3, [r7, #12]
 8006a2e:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 8006a32:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8006a34:	683b      	ldr	r3, [r7, #0]
 8006a36:	685b      	ldr	r3, [r3, #4]
 8006a38:	68fa      	ldr	r2, [r7, #12]
 8006a3a:	4313      	orrs	r3, r2
 8006a3c:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8006a3e:	68fb      	ldr	r3, [r7, #12]
 8006a40:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006a44:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006a46:	683b      	ldr	r3, [r7, #0]
 8006a48:	681b      	ldr	r3, [r3, #0]
 8006a4a:	68fa      	ldr	r2, [r7, #12]
 8006a4c:	4313      	orrs	r3, r2
 8006a4e:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8006a50:	687b      	ldr	r3, [r7, #4]
 8006a52:	681b      	ldr	r3, [r3, #0]
 8006a54:	68fa      	ldr	r2, [r7, #12]
 8006a56:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006a58:	687b      	ldr	r3, [r7, #4]
 8006a5a:	681b      	ldr	r3, [r3, #0]
 8006a5c:	4a25      	ldr	r2, [pc, #148]	@ (8006af4 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8006a5e:	4293      	cmp	r3, r2
 8006a60:	d02c      	beq.n	8006abc <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 8006a62:	687b      	ldr	r3, [r7, #4]
 8006a64:	681b      	ldr	r3, [r3, #0]
 8006a66:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006a6a:	d027      	beq.n	8006abc <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 8006a6c:	687b      	ldr	r3, [r7, #4]
 8006a6e:	681b      	ldr	r3, [r3, #0]
 8006a70:	4a22      	ldr	r2, [pc, #136]	@ (8006afc <HAL_TIMEx_MasterConfigSynchronization+0x11c>)
 8006a72:	4293      	cmp	r3, r2
 8006a74:	d022      	beq.n	8006abc <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 8006a76:	687b      	ldr	r3, [r7, #4]
 8006a78:	681b      	ldr	r3, [r3, #0]
 8006a7a:	4a21      	ldr	r2, [pc, #132]	@ (8006b00 <HAL_TIMEx_MasterConfigSynchronization+0x120>)
 8006a7c:	4293      	cmp	r3, r2
 8006a7e:	d01d      	beq.n	8006abc <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 8006a80:	687b      	ldr	r3, [r7, #4]
 8006a82:	681b      	ldr	r3, [r3, #0]
 8006a84:	4a1f      	ldr	r2, [pc, #124]	@ (8006b04 <HAL_TIMEx_MasterConfigSynchronization+0x124>)
 8006a86:	4293      	cmp	r3, r2
 8006a88:	d018      	beq.n	8006abc <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 8006a8a:	687b      	ldr	r3, [r7, #4]
 8006a8c:	681b      	ldr	r3, [r3, #0]
 8006a8e:	4a1a      	ldr	r2, [pc, #104]	@ (8006af8 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8006a90:	4293      	cmp	r3, r2
 8006a92:	d013      	beq.n	8006abc <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 8006a94:	687b      	ldr	r3, [r7, #4]
 8006a96:	681b      	ldr	r3, [r3, #0]
 8006a98:	4a1b      	ldr	r2, [pc, #108]	@ (8006b08 <HAL_TIMEx_MasterConfigSynchronization+0x128>)
 8006a9a:	4293      	cmp	r3, r2
 8006a9c:	d00e      	beq.n	8006abc <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 8006a9e:	687b      	ldr	r3, [r7, #4]
 8006aa0:	681b      	ldr	r3, [r3, #0]
 8006aa2:	4a1a      	ldr	r2, [pc, #104]	@ (8006b0c <HAL_TIMEx_MasterConfigSynchronization+0x12c>)
 8006aa4:	4293      	cmp	r3, r2
 8006aa6:	d009      	beq.n	8006abc <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 8006aa8:	687b      	ldr	r3, [r7, #4]
 8006aaa:	681b      	ldr	r3, [r3, #0]
 8006aac:	4a18      	ldr	r2, [pc, #96]	@ (8006b10 <HAL_TIMEx_MasterConfigSynchronization+0x130>)
 8006aae:	4293      	cmp	r3, r2
 8006ab0:	d004      	beq.n	8006abc <HAL_TIMEx_MasterConfigSynchronization+0xdc>
 8006ab2:	687b      	ldr	r3, [r7, #4]
 8006ab4:	681b      	ldr	r3, [r3, #0]
 8006ab6:	4a17      	ldr	r2, [pc, #92]	@ (8006b14 <HAL_TIMEx_MasterConfigSynchronization+0x134>)
 8006ab8:	4293      	cmp	r3, r2
 8006aba:	d10c      	bne.n	8006ad6 <HAL_TIMEx_MasterConfigSynchronization+0xf6>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8006abc:	68bb      	ldr	r3, [r7, #8]
 8006abe:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8006ac2:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8006ac4:	683b      	ldr	r3, [r7, #0]
 8006ac6:	689b      	ldr	r3, [r3, #8]
 8006ac8:	68ba      	ldr	r2, [r7, #8]
 8006aca:	4313      	orrs	r3, r2
 8006acc:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8006ace:	687b      	ldr	r3, [r7, #4]
 8006ad0:	681b      	ldr	r3, [r3, #0]
 8006ad2:	68ba      	ldr	r2, [r7, #8]
 8006ad4:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8006ad6:	687b      	ldr	r3, [r7, #4]
 8006ad8:	2201      	movs	r2, #1
 8006ada:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8006ade:	687b      	ldr	r3, [r7, #4]
 8006ae0:	2200      	movs	r2, #0
 8006ae2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8006ae6:	2300      	movs	r3, #0
}
 8006ae8:	4618      	mov	r0, r3
 8006aea:	3714      	adds	r7, #20
 8006aec:	46bd      	mov	sp, r7
 8006aee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006af2:	4770      	bx	lr
 8006af4:	40010000 	.word	0x40010000
 8006af8:	40010400 	.word	0x40010400
 8006afc:	40000400 	.word	0x40000400
 8006b00:	40000800 	.word	0x40000800
 8006b04:	40000c00 	.word	0x40000c00
 8006b08:	40001800 	.word	0x40001800
 8006b0c:	40014000 	.word	0x40014000
 8006b10:	4000e000 	.word	0x4000e000
 8006b14:	4000e400 	.word	0x4000e400

08006b18 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8006b18:	b480      	push	{r7}
 8006b1a:	b085      	sub	sp, #20
 8006b1c:	af00      	add	r7, sp, #0
 8006b1e:	6078      	str	r0, [r7, #4]
 8006b20:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8006b22:	2300      	movs	r3, #0
 8006b24:	60fb      	str	r3, [r7, #12]
#if defined(TIM_BDTR_BKBID)
  assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));
#endif /* TIM_BDTR_BKBID */

  /* Check input state */
  __HAL_LOCK(htim);
 8006b26:	687b      	ldr	r3, [r7, #4]
 8006b28:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8006b2c:	2b01      	cmp	r3, #1
 8006b2e:	d101      	bne.n	8006b34 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8006b30:	2302      	movs	r3, #2
 8006b32:	e073      	b.n	8006c1c <HAL_TIMEx_ConfigBreakDeadTime+0x104>
 8006b34:	687b      	ldr	r3, [r7, #4]
 8006b36:	2201      	movs	r2, #1
 8006b38:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8006b3c:	68fb      	ldr	r3, [r7, #12]
 8006b3e:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 8006b42:	683b      	ldr	r3, [r7, #0]
 8006b44:	68db      	ldr	r3, [r3, #12]
 8006b46:	4313      	orrs	r3, r2
 8006b48:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8006b4a:	68fb      	ldr	r3, [r7, #12]
 8006b4c:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8006b50:	683b      	ldr	r3, [r7, #0]
 8006b52:	689b      	ldr	r3, [r3, #8]
 8006b54:	4313      	orrs	r3, r2
 8006b56:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8006b58:	68fb      	ldr	r3, [r7, #12]
 8006b5a:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 8006b5e:	683b      	ldr	r3, [r7, #0]
 8006b60:	685b      	ldr	r3, [r3, #4]
 8006b62:	4313      	orrs	r3, r2
 8006b64:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8006b66:	68fb      	ldr	r3, [r7, #12]
 8006b68:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 8006b6c:	683b      	ldr	r3, [r7, #0]
 8006b6e:	681b      	ldr	r3, [r3, #0]
 8006b70:	4313      	orrs	r3, r2
 8006b72:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8006b74:	68fb      	ldr	r3, [r7, #12]
 8006b76:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8006b7a:	683b      	ldr	r3, [r7, #0]
 8006b7c:	691b      	ldr	r3, [r3, #16]
 8006b7e:	4313      	orrs	r3, r2
 8006b80:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8006b82:	68fb      	ldr	r3, [r7, #12]
 8006b84:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 8006b88:	683b      	ldr	r3, [r7, #0]
 8006b8a:	695b      	ldr	r3, [r3, #20]
 8006b8c:	4313      	orrs	r3, r2
 8006b8e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8006b90:	68fb      	ldr	r3, [r7, #12]
 8006b92:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 8006b96:	683b      	ldr	r3, [r7, #0]
 8006b98:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006b9a:	4313      	orrs	r3, r2
 8006b9c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8006b9e:	68fb      	ldr	r3, [r7, #12]
 8006ba0:	f423 2270 	bic.w	r2, r3, #983040	@ 0xf0000
 8006ba4:	683b      	ldr	r3, [r7, #0]
 8006ba6:	699b      	ldr	r3, [r3, #24]
 8006ba8:	041b      	lsls	r3, r3, #16
 8006baa:	4313      	orrs	r3, r2
 8006bac:	60fb      	str	r3, [r7, #12]
#if defined(TIM_BDTR_BKBID)
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 8006bae:	68fb      	ldr	r3, [r7, #12]
 8006bb0:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 8006bb4:	683b      	ldr	r3, [r7, #0]
 8006bb6:	69db      	ldr	r3, [r3, #28]
 8006bb8:	4313      	orrs	r3, r2
 8006bba:	60fb      	str	r3, [r7, #12]
#endif /* TIM_BDTR_BKBID */

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8006bbc:	687b      	ldr	r3, [r7, #4]
 8006bbe:	681b      	ldr	r3, [r3, #0]
 8006bc0:	4a19      	ldr	r2, [pc, #100]	@ (8006c28 <HAL_TIMEx_ConfigBreakDeadTime+0x110>)
 8006bc2:	4293      	cmp	r3, r2
 8006bc4:	d004      	beq.n	8006bd0 <HAL_TIMEx_ConfigBreakDeadTime+0xb8>
 8006bc6:	687b      	ldr	r3, [r7, #4]
 8006bc8:	681b      	ldr	r3, [r3, #0]
 8006bca:	4a18      	ldr	r2, [pc, #96]	@ (8006c2c <HAL_TIMEx_ConfigBreakDeadTime+0x114>)
 8006bcc:	4293      	cmp	r3, r2
 8006bce:	d11c      	bne.n	8006c0a <HAL_TIMEx_ConfigBreakDeadTime+0xf2>
#if defined(TIM_BDTR_BKBID)
    assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));
#endif /* TIM_BDTR_BKBID */

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8006bd0:	68fb      	ldr	r3, [r7, #12]
 8006bd2:	f423 0270 	bic.w	r2, r3, #15728640	@ 0xf00000
 8006bd6:	683b      	ldr	r3, [r7, #0]
 8006bd8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006bda:	051b      	lsls	r3, r3, #20
 8006bdc:	4313      	orrs	r3, r2
 8006bde:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8006be0:	68fb      	ldr	r3, [r7, #12]
 8006be2:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 8006be6:	683b      	ldr	r3, [r7, #0]
 8006be8:	6a1b      	ldr	r3, [r3, #32]
 8006bea:	4313      	orrs	r3, r2
 8006bec:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8006bee:	68fb      	ldr	r3, [r7, #12]
 8006bf0:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 8006bf4:	683b      	ldr	r3, [r7, #0]
 8006bf6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006bf8:	4313      	orrs	r3, r2
 8006bfa:	60fb      	str	r3, [r7, #12]
#if defined(TIM_BDTR_BKBID)
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 8006bfc:	68fb      	ldr	r3, [r7, #12]
 8006bfe:	f023 5200 	bic.w	r2, r3, #536870912	@ 0x20000000
 8006c02:	683b      	ldr	r3, [r7, #0]
 8006c04:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006c06:	4313      	orrs	r3, r2
 8006c08:	60fb      	str	r3, [r7, #12]
#endif /* TIM_BDTR_BKBID */
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8006c0a:	687b      	ldr	r3, [r7, #4]
 8006c0c:	681b      	ldr	r3, [r3, #0]
 8006c0e:	68fa      	ldr	r2, [r7, #12]
 8006c10:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 8006c12:	687b      	ldr	r3, [r7, #4]
 8006c14:	2200      	movs	r2, #0
 8006c16:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8006c1a:	2300      	movs	r3, #0
}
 8006c1c:	4618      	mov	r0, r3
 8006c1e:	3714      	adds	r7, #20
 8006c20:	46bd      	mov	sp, r7
 8006c22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c26:	4770      	bx	lr
 8006c28:	40010000 	.word	0x40010000
 8006c2c:	40010400 	.word	0x40010400

08006c30 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006c30:	b580      	push	{r7, lr}
 8006c32:	b082      	sub	sp, #8
 8006c34:	af00      	add	r7, sp, #0
 8006c36:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006c38:	687b      	ldr	r3, [r7, #4]
 8006c3a:	2b00      	cmp	r3, #0
 8006c3c:	d101      	bne.n	8006c42 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8006c3e:	2301      	movs	r3, #1
 8006c40:	e042      	b.n	8006cc8 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8006c42:	687b      	ldr	r3, [r7, #4]
 8006c44:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006c48:	2b00      	cmp	r3, #0
 8006c4a:	d106      	bne.n	8006c5a <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006c4c:	687b      	ldr	r3, [r7, #4]
 8006c4e:	2200      	movs	r2, #0
 8006c50:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006c54:	6878      	ldr	r0, [r7, #4]
 8006c56:	f7fa fa57 	bl	8001108 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006c5a:	687b      	ldr	r3, [r7, #4]
 8006c5c:	2224      	movs	r2, #36	@ 0x24
 8006c5e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 8006c62:	687b      	ldr	r3, [r7, #4]
 8006c64:	681b      	ldr	r3, [r3, #0]
 8006c66:	681a      	ldr	r2, [r3, #0]
 8006c68:	687b      	ldr	r3, [r7, #4]
 8006c6a:	681b      	ldr	r3, [r3, #0]
 8006c6c:	f022 0201 	bic.w	r2, r2, #1
 8006c70:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8006c72:	687b      	ldr	r3, [r7, #4]
 8006c74:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006c76:	2b00      	cmp	r3, #0
 8006c78:	d002      	beq.n	8006c80 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 8006c7a:	6878      	ldr	r0, [r7, #4]
 8006c7c:	f001 fb18 	bl	80082b0 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8006c80:	6878      	ldr	r0, [r7, #4]
 8006c82:	f000 fca9 	bl	80075d8 <UART_SetConfig>
 8006c86:	4603      	mov	r3, r0
 8006c88:	2b01      	cmp	r3, #1
 8006c8a:	d101      	bne.n	8006c90 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 8006c8c:	2301      	movs	r3, #1
 8006c8e:	e01b      	b.n	8006cc8 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006c90:	687b      	ldr	r3, [r7, #4]
 8006c92:	681b      	ldr	r3, [r3, #0]
 8006c94:	685a      	ldr	r2, [r3, #4]
 8006c96:	687b      	ldr	r3, [r7, #4]
 8006c98:	681b      	ldr	r3, [r3, #0]
 8006c9a:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8006c9e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006ca0:	687b      	ldr	r3, [r7, #4]
 8006ca2:	681b      	ldr	r3, [r3, #0]
 8006ca4:	689a      	ldr	r2, [r3, #8]
 8006ca6:	687b      	ldr	r3, [r7, #4]
 8006ca8:	681b      	ldr	r3, [r3, #0]
 8006caa:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8006cae:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8006cb0:	687b      	ldr	r3, [r7, #4]
 8006cb2:	681b      	ldr	r3, [r3, #0]
 8006cb4:	681a      	ldr	r2, [r3, #0]
 8006cb6:	687b      	ldr	r3, [r7, #4]
 8006cb8:	681b      	ldr	r3, [r3, #0]
 8006cba:	f042 0201 	orr.w	r2, r2, #1
 8006cbe:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8006cc0:	6878      	ldr	r0, [r7, #4]
 8006cc2:	f001 fb97 	bl	80083f4 <UART_CheckIdleState>
 8006cc6:	4603      	mov	r3, r0
}
 8006cc8:	4618      	mov	r0, r3
 8006cca:	3708      	adds	r7, #8
 8006ccc:	46bd      	mov	sp, r7
 8006cce:	bd80      	pop	{r7, pc}

08006cd0 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006cd0:	b580      	push	{r7, lr}
 8006cd2:	b08a      	sub	sp, #40	@ 0x28
 8006cd4:	af02      	add	r7, sp, #8
 8006cd6:	60f8      	str	r0, [r7, #12]
 8006cd8:	60b9      	str	r1, [r7, #8]
 8006cda:	603b      	str	r3, [r7, #0]
 8006cdc:	4613      	mov	r3, r2
 8006cde:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8006ce0:	68fb      	ldr	r3, [r7, #12]
 8006ce2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006ce6:	2b20      	cmp	r3, #32
 8006ce8:	d17b      	bne.n	8006de2 <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 8006cea:	68bb      	ldr	r3, [r7, #8]
 8006cec:	2b00      	cmp	r3, #0
 8006cee:	d002      	beq.n	8006cf6 <HAL_UART_Transmit+0x26>
 8006cf0:	88fb      	ldrh	r3, [r7, #6]
 8006cf2:	2b00      	cmp	r3, #0
 8006cf4:	d101      	bne.n	8006cfa <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8006cf6:	2301      	movs	r3, #1
 8006cf8:	e074      	b.n	8006de4 <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006cfa:	68fb      	ldr	r3, [r7, #12]
 8006cfc:	2200      	movs	r2, #0
 8006cfe:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8006d02:	68fb      	ldr	r3, [r7, #12]
 8006d04:	2221      	movs	r2, #33	@ 0x21
 8006d06:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8006d0a:	f7fa fd3d 	bl	8001788 <HAL_GetTick>
 8006d0e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8006d10:	68fb      	ldr	r3, [r7, #12]
 8006d12:	88fa      	ldrh	r2, [r7, #6]
 8006d14:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 8006d18:	68fb      	ldr	r3, [r7, #12]
 8006d1a:	88fa      	ldrh	r2, [r7, #6]
 8006d1c:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006d20:	68fb      	ldr	r3, [r7, #12]
 8006d22:	689b      	ldr	r3, [r3, #8]
 8006d24:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006d28:	d108      	bne.n	8006d3c <HAL_UART_Transmit+0x6c>
 8006d2a:	68fb      	ldr	r3, [r7, #12]
 8006d2c:	691b      	ldr	r3, [r3, #16]
 8006d2e:	2b00      	cmp	r3, #0
 8006d30:	d104      	bne.n	8006d3c <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8006d32:	2300      	movs	r3, #0
 8006d34:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8006d36:	68bb      	ldr	r3, [r7, #8]
 8006d38:	61bb      	str	r3, [r7, #24]
 8006d3a:	e003      	b.n	8006d44 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8006d3c:	68bb      	ldr	r3, [r7, #8]
 8006d3e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8006d40:	2300      	movs	r3, #0
 8006d42:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8006d44:	e030      	b.n	8006da8 <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8006d46:	683b      	ldr	r3, [r7, #0]
 8006d48:	9300      	str	r3, [sp, #0]
 8006d4a:	697b      	ldr	r3, [r7, #20]
 8006d4c:	2200      	movs	r2, #0
 8006d4e:	2180      	movs	r1, #128	@ 0x80
 8006d50:	68f8      	ldr	r0, [r7, #12]
 8006d52:	f001 fbf9 	bl	8008548 <UART_WaitOnFlagUntilTimeout>
 8006d56:	4603      	mov	r3, r0
 8006d58:	2b00      	cmp	r3, #0
 8006d5a:	d005      	beq.n	8006d68 <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 8006d5c:	68fb      	ldr	r3, [r7, #12]
 8006d5e:	2220      	movs	r2, #32
 8006d60:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_TIMEOUT;
 8006d64:	2303      	movs	r3, #3
 8006d66:	e03d      	b.n	8006de4 <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 8006d68:	69fb      	ldr	r3, [r7, #28]
 8006d6a:	2b00      	cmp	r3, #0
 8006d6c:	d10b      	bne.n	8006d86 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8006d6e:	69bb      	ldr	r3, [r7, #24]
 8006d70:	881b      	ldrh	r3, [r3, #0]
 8006d72:	461a      	mov	r2, r3
 8006d74:	68fb      	ldr	r3, [r7, #12]
 8006d76:	681b      	ldr	r3, [r3, #0]
 8006d78:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006d7c:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8006d7e:	69bb      	ldr	r3, [r7, #24]
 8006d80:	3302      	adds	r3, #2
 8006d82:	61bb      	str	r3, [r7, #24]
 8006d84:	e007      	b.n	8006d96 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8006d86:	69fb      	ldr	r3, [r7, #28]
 8006d88:	781a      	ldrb	r2, [r3, #0]
 8006d8a:	68fb      	ldr	r3, [r7, #12]
 8006d8c:	681b      	ldr	r3, [r3, #0]
 8006d8e:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 8006d90:	69fb      	ldr	r3, [r7, #28]
 8006d92:	3301      	adds	r3, #1
 8006d94:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8006d96:	68fb      	ldr	r3, [r7, #12]
 8006d98:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8006d9c:	b29b      	uxth	r3, r3
 8006d9e:	3b01      	subs	r3, #1
 8006da0:	b29a      	uxth	r2, r3
 8006da2:	68fb      	ldr	r3, [r7, #12]
 8006da4:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    while (huart->TxXferCount > 0U)
 8006da8:	68fb      	ldr	r3, [r7, #12]
 8006daa:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8006dae:	b29b      	uxth	r3, r3
 8006db0:	2b00      	cmp	r3, #0
 8006db2:	d1c8      	bne.n	8006d46 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8006db4:	683b      	ldr	r3, [r7, #0]
 8006db6:	9300      	str	r3, [sp, #0]
 8006db8:	697b      	ldr	r3, [r7, #20]
 8006dba:	2200      	movs	r2, #0
 8006dbc:	2140      	movs	r1, #64	@ 0x40
 8006dbe:	68f8      	ldr	r0, [r7, #12]
 8006dc0:	f001 fbc2 	bl	8008548 <UART_WaitOnFlagUntilTimeout>
 8006dc4:	4603      	mov	r3, r0
 8006dc6:	2b00      	cmp	r3, #0
 8006dc8:	d005      	beq.n	8006dd6 <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 8006dca:	68fb      	ldr	r3, [r7, #12]
 8006dcc:	2220      	movs	r2, #32
 8006dce:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      return HAL_TIMEOUT;
 8006dd2:	2303      	movs	r3, #3
 8006dd4:	e006      	b.n	8006de4 <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8006dd6:	68fb      	ldr	r3, [r7, #12]
 8006dd8:	2220      	movs	r2, #32
 8006dda:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    return HAL_OK;
 8006dde:	2300      	movs	r3, #0
 8006de0:	e000      	b.n	8006de4 <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 8006de2:	2302      	movs	r3, #2
  }
}
 8006de4:	4618      	mov	r0, r3
 8006de6:	3720      	adds	r7, #32
 8006de8:	46bd      	mov	sp, r7
 8006dea:	bd80      	pop	{r7, pc}

08006dec <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8006dec:	b580      	push	{r7, lr}
 8006dee:	b0ba      	sub	sp, #232	@ 0xe8
 8006df0:	af00      	add	r7, sp, #0
 8006df2:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8006df4:	687b      	ldr	r3, [r7, #4]
 8006df6:	681b      	ldr	r3, [r3, #0]
 8006df8:	69db      	ldr	r3, [r3, #28]
 8006dfa:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8006dfe:	687b      	ldr	r3, [r7, #4]
 8006e00:	681b      	ldr	r3, [r3, #0]
 8006e02:	681b      	ldr	r3, [r3, #0]
 8006e04:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8006e08:	687b      	ldr	r3, [r7, #4]
 8006e0a:	681b      	ldr	r3, [r3, #0]
 8006e0c:	689b      	ldr	r3, [r3, #8]
 8006e0e:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8006e12:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 8006e16:	f640 030f 	movw	r3, #2063	@ 0x80f
 8006e1a:	4013      	ands	r3, r2
 8006e1c:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 8006e20:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8006e24:	2b00      	cmp	r3, #0
 8006e26:	d11b      	bne.n	8006e60 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8006e28:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006e2c:	f003 0320 	and.w	r3, r3, #32
 8006e30:	2b00      	cmp	r3, #0
 8006e32:	d015      	beq.n	8006e60 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8006e34:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006e38:	f003 0320 	and.w	r3, r3, #32
 8006e3c:	2b00      	cmp	r3, #0
 8006e3e:	d105      	bne.n	8006e4c <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8006e40:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8006e44:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8006e48:	2b00      	cmp	r3, #0
 8006e4a:	d009      	beq.n	8006e60 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 8006e4c:	687b      	ldr	r3, [r7, #4]
 8006e4e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006e50:	2b00      	cmp	r3, #0
 8006e52:	f000 8393 	beq.w	800757c <HAL_UART_IRQHandler+0x790>
      {
        huart->RxISR(huart);
 8006e56:	687b      	ldr	r3, [r7, #4]
 8006e58:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006e5a:	6878      	ldr	r0, [r7, #4]
 8006e5c:	4798      	blx	r3
      }
      return;
 8006e5e:	e38d      	b.n	800757c <HAL_UART_IRQHandler+0x790>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8006e60:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8006e64:	2b00      	cmp	r3, #0
 8006e66:	f000 8123 	beq.w	80070b0 <HAL_UART_IRQHandler+0x2c4>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 8006e6a:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 8006e6e:	4b8d      	ldr	r3, [pc, #564]	@ (80070a4 <HAL_UART_IRQHandler+0x2b8>)
 8006e70:	4013      	ands	r3, r2
 8006e72:	2b00      	cmp	r3, #0
 8006e74:	d106      	bne.n	8006e84 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 8006e76:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 8006e7a:	4b8b      	ldr	r3, [pc, #556]	@ (80070a8 <HAL_UART_IRQHandler+0x2bc>)
 8006e7c:	4013      	ands	r3, r2
 8006e7e:	2b00      	cmp	r3, #0
 8006e80:	f000 8116 	beq.w	80070b0 <HAL_UART_IRQHandler+0x2c4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8006e84:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006e88:	f003 0301 	and.w	r3, r3, #1
 8006e8c:	2b00      	cmp	r3, #0
 8006e8e:	d011      	beq.n	8006eb4 <HAL_UART_IRQHandler+0xc8>
 8006e90:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006e94:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006e98:	2b00      	cmp	r3, #0
 8006e9a:	d00b      	beq.n	8006eb4 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8006e9c:	687b      	ldr	r3, [r7, #4]
 8006e9e:	681b      	ldr	r3, [r3, #0]
 8006ea0:	2201      	movs	r2, #1
 8006ea2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8006ea4:	687b      	ldr	r3, [r7, #4]
 8006ea6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006eaa:	f043 0201 	orr.w	r2, r3, #1
 8006eae:	687b      	ldr	r3, [r7, #4]
 8006eb0:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8006eb4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006eb8:	f003 0302 	and.w	r3, r3, #2
 8006ebc:	2b00      	cmp	r3, #0
 8006ebe:	d011      	beq.n	8006ee4 <HAL_UART_IRQHandler+0xf8>
 8006ec0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8006ec4:	f003 0301 	and.w	r3, r3, #1
 8006ec8:	2b00      	cmp	r3, #0
 8006eca:	d00b      	beq.n	8006ee4 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8006ecc:	687b      	ldr	r3, [r7, #4]
 8006ece:	681b      	ldr	r3, [r3, #0]
 8006ed0:	2202      	movs	r2, #2
 8006ed2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8006ed4:	687b      	ldr	r3, [r7, #4]
 8006ed6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006eda:	f043 0204 	orr.w	r2, r3, #4
 8006ede:	687b      	ldr	r3, [r7, #4]
 8006ee0:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8006ee4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006ee8:	f003 0304 	and.w	r3, r3, #4
 8006eec:	2b00      	cmp	r3, #0
 8006eee:	d011      	beq.n	8006f14 <HAL_UART_IRQHandler+0x128>
 8006ef0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8006ef4:	f003 0301 	and.w	r3, r3, #1
 8006ef8:	2b00      	cmp	r3, #0
 8006efa:	d00b      	beq.n	8006f14 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8006efc:	687b      	ldr	r3, [r7, #4]
 8006efe:	681b      	ldr	r3, [r3, #0]
 8006f00:	2204      	movs	r2, #4
 8006f02:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8006f04:	687b      	ldr	r3, [r7, #4]
 8006f06:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006f0a:	f043 0202 	orr.w	r2, r3, #2
 8006f0e:	687b      	ldr	r3, [r7, #4]
 8006f10:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8006f14:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006f18:	f003 0308 	and.w	r3, r3, #8
 8006f1c:	2b00      	cmp	r3, #0
 8006f1e:	d017      	beq.n	8006f50 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8006f20:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006f24:	f003 0320 	and.w	r3, r3, #32
 8006f28:	2b00      	cmp	r3, #0
 8006f2a:	d105      	bne.n	8006f38 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 8006f2c:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 8006f30:	4b5c      	ldr	r3, [pc, #368]	@ (80070a4 <HAL_UART_IRQHandler+0x2b8>)
 8006f32:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8006f34:	2b00      	cmp	r3, #0
 8006f36:	d00b      	beq.n	8006f50 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8006f38:	687b      	ldr	r3, [r7, #4]
 8006f3a:	681b      	ldr	r3, [r3, #0]
 8006f3c:	2208      	movs	r2, #8
 8006f3e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8006f40:	687b      	ldr	r3, [r7, #4]
 8006f42:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006f46:	f043 0208 	orr.w	r2, r3, #8
 8006f4a:	687b      	ldr	r3, [r7, #4]
 8006f4c:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8006f50:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006f54:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8006f58:	2b00      	cmp	r3, #0
 8006f5a:	d012      	beq.n	8006f82 <HAL_UART_IRQHandler+0x196>
 8006f5c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006f60:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8006f64:	2b00      	cmp	r3, #0
 8006f66:	d00c      	beq.n	8006f82 <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8006f68:	687b      	ldr	r3, [r7, #4]
 8006f6a:	681b      	ldr	r3, [r3, #0]
 8006f6c:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8006f70:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8006f72:	687b      	ldr	r3, [r7, #4]
 8006f74:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006f78:	f043 0220 	orr.w	r2, r3, #32
 8006f7c:	687b      	ldr	r3, [r7, #4]
 8006f7e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8006f82:	687b      	ldr	r3, [r7, #4]
 8006f84:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006f88:	2b00      	cmp	r3, #0
 8006f8a:	f000 82f9 	beq.w	8007580 <HAL_UART_IRQHandler+0x794>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8006f8e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006f92:	f003 0320 	and.w	r3, r3, #32
 8006f96:	2b00      	cmp	r3, #0
 8006f98:	d013      	beq.n	8006fc2 <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8006f9a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006f9e:	f003 0320 	and.w	r3, r3, #32
 8006fa2:	2b00      	cmp	r3, #0
 8006fa4:	d105      	bne.n	8006fb2 <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8006fa6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8006faa:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8006fae:	2b00      	cmp	r3, #0
 8006fb0:	d007      	beq.n	8006fc2 <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 8006fb2:	687b      	ldr	r3, [r7, #4]
 8006fb4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006fb6:	2b00      	cmp	r3, #0
 8006fb8:	d003      	beq.n	8006fc2 <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 8006fba:	687b      	ldr	r3, [r7, #4]
 8006fbc:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006fbe:	6878      	ldr	r0, [r7, #4]
 8006fc0:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8006fc2:	687b      	ldr	r3, [r7, #4]
 8006fc4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006fc8:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8006fcc:	687b      	ldr	r3, [r7, #4]
 8006fce:	681b      	ldr	r3, [r3, #0]
 8006fd0:	689b      	ldr	r3, [r3, #8]
 8006fd2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006fd6:	2b40      	cmp	r3, #64	@ 0x40
 8006fd8:	d005      	beq.n	8006fe6 <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8006fda:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8006fde:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8006fe2:	2b00      	cmp	r3, #0
 8006fe4:	d054      	beq.n	8007090 <HAL_UART_IRQHandler+0x2a4>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8006fe6:	6878      	ldr	r0, [r7, #4]
 8006fe8:	f001 fb1c 	bl	8008624 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006fec:	687b      	ldr	r3, [r7, #4]
 8006fee:	681b      	ldr	r3, [r3, #0]
 8006ff0:	689b      	ldr	r3, [r3, #8]
 8006ff2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006ff6:	2b40      	cmp	r3, #64	@ 0x40
 8006ff8:	d146      	bne.n	8007088 <HAL_UART_IRQHandler+0x29c>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006ffa:	687b      	ldr	r3, [r7, #4]
 8006ffc:	681b      	ldr	r3, [r3, #0]
 8006ffe:	3308      	adds	r3, #8
 8007000:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007004:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8007008:	e853 3f00 	ldrex	r3, [r3]
 800700c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8007010:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8007014:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8007018:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800701c:	687b      	ldr	r3, [r7, #4]
 800701e:	681b      	ldr	r3, [r3, #0]
 8007020:	3308      	adds	r3, #8
 8007022:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8007026:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 800702a:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800702e:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8007032:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8007036:	e841 2300 	strex	r3, r2, [r1]
 800703a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 800703e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8007042:	2b00      	cmp	r3, #0
 8007044:	d1d9      	bne.n	8006ffa <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8007046:	687b      	ldr	r3, [r7, #4]
 8007048:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800704c:	2b00      	cmp	r3, #0
 800704e:	d017      	beq.n	8007080 <HAL_UART_IRQHandler+0x294>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8007050:	687b      	ldr	r3, [r7, #4]
 8007052:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007056:	4a15      	ldr	r2, [pc, #84]	@ (80070ac <HAL_UART_IRQHandler+0x2c0>)
 8007058:	651a      	str	r2, [r3, #80]	@ 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800705a:	687b      	ldr	r3, [r7, #4]
 800705c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007060:	4618      	mov	r0, r3
 8007062:	f7fb f867 	bl	8002134 <HAL_DMA_Abort_IT>
 8007066:	4603      	mov	r3, r0
 8007068:	2b00      	cmp	r3, #0
 800706a:	d019      	beq.n	80070a0 <HAL_UART_IRQHandler+0x2b4>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800706c:	687b      	ldr	r3, [r7, #4]
 800706e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007072:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007074:	687a      	ldr	r2, [r7, #4]
 8007076:	f8d2 2080 	ldr.w	r2, [r2, #128]	@ 0x80
 800707a:	4610      	mov	r0, r2
 800707c:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800707e:	e00f      	b.n	80070a0 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8007080:	6878      	ldr	r0, [r7, #4]
 8007082:	f000 fa93 	bl	80075ac <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007086:	e00b      	b.n	80070a0 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8007088:	6878      	ldr	r0, [r7, #4]
 800708a:	f000 fa8f 	bl	80075ac <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800708e:	e007      	b.n	80070a0 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8007090:	6878      	ldr	r0, [r7, #4]
 8007092:	f000 fa8b 	bl	80075ac <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007096:	687b      	ldr	r3, [r7, #4]
 8007098:	2200      	movs	r2, #0
 800709a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
      }
    }
    return;
 800709e:	e26f      	b.n	8007580 <HAL_UART_IRQHandler+0x794>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80070a0:	bf00      	nop
    return;
 80070a2:	e26d      	b.n	8007580 <HAL_UART_IRQHandler+0x794>
 80070a4:	10000001 	.word	0x10000001
 80070a8:	04000120 	.word	0x04000120
 80070ac:	080086f1 	.word	0x080086f1

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80070b0:	687b      	ldr	r3, [r7, #4]
 80070b2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80070b4:	2b01      	cmp	r3, #1
 80070b6:	f040 8203 	bne.w	80074c0 <HAL_UART_IRQHandler+0x6d4>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 80070ba:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80070be:	f003 0310 	and.w	r3, r3, #16
 80070c2:	2b00      	cmp	r3, #0
 80070c4:	f000 81fc 	beq.w	80074c0 <HAL_UART_IRQHandler+0x6d4>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 80070c8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80070cc:	f003 0310 	and.w	r3, r3, #16
 80070d0:	2b00      	cmp	r3, #0
 80070d2:	f000 81f5 	beq.w	80074c0 <HAL_UART_IRQHandler+0x6d4>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80070d6:	687b      	ldr	r3, [r7, #4]
 80070d8:	681b      	ldr	r3, [r3, #0]
 80070da:	2210      	movs	r2, #16
 80070dc:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80070de:	687b      	ldr	r3, [r7, #4]
 80070e0:	681b      	ldr	r3, [r3, #0]
 80070e2:	689b      	ldr	r3, [r3, #8]
 80070e4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80070e8:	2b40      	cmp	r3, #64	@ 0x40
 80070ea:	f040 816d 	bne.w	80073c8 <HAL_UART_IRQHandler+0x5dc>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80070ee:	687b      	ldr	r3, [r7, #4]
 80070f0:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80070f4:	681b      	ldr	r3, [r3, #0]
 80070f6:	4aa4      	ldr	r2, [pc, #656]	@ (8007388 <HAL_UART_IRQHandler+0x59c>)
 80070f8:	4293      	cmp	r3, r2
 80070fa:	d068      	beq.n	80071ce <HAL_UART_IRQHandler+0x3e2>
 80070fc:	687b      	ldr	r3, [r7, #4]
 80070fe:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007102:	681b      	ldr	r3, [r3, #0]
 8007104:	4aa1      	ldr	r2, [pc, #644]	@ (800738c <HAL_UART_IRQHandler+0x5a0>)
 8007106:	4293      	cmp	r3, r2
 8007108:	d061      	beq.n	80071ce <HAL_UART_IRQHandler+0x3e2>
 800710a:	687b      	ldr	r3, [r7, #4]
 800710c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007110:	681b      	ldr	r3, [r3, #0]
 8007112:	4a9f      	ldr	r2, [pc, #636]	@ (8007390 <HAL_UART_IRQHandler+0x5a4>)
 8007114:	4293      	cmp	r3, r2
 8007116:	d05a      	beq.n	80071ce <HAL_UART_IRQHandler+0x3e2>
 8007118:	687b      	ldr	r3, [r7, #4]
 800711a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800711e:	681b      	ldr	r3, [r3, #0]
 8007120:	4a9c      	ldr	r2, [pc, #624]	@ (8007394 <HAL_UART_IRQHandler+0x5a8>)
 8007122:	4293      	cmp	r3, r2
 8007124:	d053      	beq.n	80071ce <HAL_UART_IRQHandler+0x3e2>
 8007126:	687b      	ldr	r3, [r7, #4]
 8007128:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800712c:	681b      	ldr	r3, [r3, #0]
 800712e:	4a9a      	ldr	r2, [pc, #616]	@ (8007398 <HAL_UART_IRQHandler+0x5ac>)
 8007130:	4293      	cmp	r3, r2
 8007132:	d04c      	beq.n	80071ce <HAL_UART_IRQHandler+0x3e2>
 8007134:	687b      	ldr	r3, [r7, #4]
 8007136:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800713a:	681b      	ldr	r3, [r3, #0]
 800713c:	4a97      	ldr	r2, [pc, #604]	@ (800739c <HAL_UART_IRQHandler+0x5b0>)
 800713e:	4293      	cmp	r3, r2
 8007140:	d045      	beq.n	80071ce <HAL_UART_IRQHandler+0x3e2>
 8007142:	687b      	ldr	r3, [r7, #4]
 8007144:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007148:	681b      	ldr	r3, [r3, #0]
 800714a:	4a95      	ldr	r2, [pc, #596]	@ (80073a0 <HAL_UART_IRQHandler+0x5b4>)
 800714c:	4293      	cmp	r3, r2
 800714e:	d03e      	beq.n	80071ce <HAL_UART_IRQHandler+0x3e2>
 8007150:	687b      	ldr	r3, [r7, #4]
 8007152:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007156:	681b      	ldr	r3, [r3, #0]
 8007158:	4a92      	ldr	r2, [pc, #584]	@ (80073a4 <HAL_UART_IRQHandler+0x5b8>)
 800715a:	4293      	cmp	r3, r2
 800715c:	d037      	beq.n	80071ce <HAL_UART_IRQHandler+0x3e2>
 800715e:	687b      	ldr	r3, [r7, #4]
 8007160:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007164:	681b      	ldr	r3, [r3, #0]
 8007166:	4a90      	ldr	r2, [pc, #576]	@ (80073a8 <HAL_UART_IRQHandler+0x5bc>)
 8007168:	4293      	cmp	r3, r2
 800716a:	d030      	beq.n	80071ce <HAL_UART_IRQHandler+0x3e2>
 800716c:	687b      	ldr	r3, [r7, #4]
 800716e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007172:	681b      	ldr	r3, [r3, #0]
 8007174:	4a8d      	ldr	r2, [pc, #564]	@ (80073ac <HAL_UART_IRQHandler+0x5c0>)
 8007176:	4293      	cmp	r3, r2
 8007178:	d029      	beq.n	80071ce <HAL_UART_IRQHandler+0x3e2>
 800717a:	687b      	ldr	r3, [r7, #4]
 800717c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007180:	681b      	ldr	r3, [r3, #0]
 8007182:	4a8b      	ldr	r2, [pc, #556]	@ (80073b0 <HAL_UART_IRQHandler+0x5c4>)
 8007184:	4293      	cmp	r3, r2
 8007186:	d022      	beq.n	80071ce <HAL_UART_IRQHandler+0x3e2>
 8007188:	687b      	ldr	r3, [r7, #4]
 800718a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800718e:	681b      	ldr	r3, [r3, #0]
 8007190:	4a88      	ldr	r2, [pc, #544]	@ (80073b4 <HAL_UART_IRQHandler+0x5c8>)
 8007192:	4293      	cmp	r3, r2
 8007194:	d01b      	beq.n	80071ce <HAL_UART_IRQHandler+0x3e2>
 8007196:	687b      	ldr	r3, [r7, #4]
 8007198:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800719c:	681b      	ldr	r3, [r3, #0]
 800719e:	4a86      	ldr	r2, [pc, #536]	@ (80073b8 <HAL_UART_IRQHandler+0x5cc>)
 80071a0:	4293      	cmp	r3, r2
 80071a2:	d014      	beq.n	80071ce <HAL_UART_IRQHandler+0x3e2>
 80071a4:	687b      	ldr	r3, [r7, #4]
 80071a6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80071aa:	681b      	ldr	r3, [r3, #0]
 80071ac:	4a83      	ldr	r2, [pc, #524]	@ (80073bc <HAL_UART_IRQHandler+0x5d0>)
 80071ae:	4293      	cmp	r3, r2
 80071b0:	d00d      	beq.n	80071ce <HAL_UART_IRQHandler+0x3e2>
 80071b2:	687b      	ldr	r3, [r7, #4]
 80071b4:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80071b8:	681b      	ldr	r3, [r3, #0]
 80071ba:	4a81      	ldr	r2, [pc, #516]	@ (80073c0 <HAL_UART_IRQHandler+0x5d4>)
 80071bc:	4293      	cmp	r3, r2
 80071be:	d006      	beq.n	80071ce <HAL_UART_IRQHandler+0x3e2>
 80071c0:	687b      	ldr	r3, [r7, #4]
 80071c2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80071c6:	681b      	ldr	r3, [r3, #0]
 80071c8:	4a7e      	ldr	r2, [pc, #504]	@ (80073c4 <HAL_UART_IRQHandler+0x5d8>)
 80071ca:	4293      	cmp	r3, r2
 80071cc:	d106      	bne.n	80071dc <HAL_UART_IRQHandler+0x3f0>
 80071ce:	687b      	ldr	r3, [r7, #4]
 80071d0:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80071d4:	681b      	ldr	r3, [r3, #0]
 80071d6:	685b      	ldr	r3, [r3, #4]
 80071d8:	b29b      	uxth	r3, r3
 80071da:	e005      	b.n	80071e8 <HAL_UART_IRQHandler+0x3fc>
 80071dc:	687b      	ldr	r3, [r7, #4]
 80071de:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80071e2:	681b      	ldr	r3, [r3, #0]
 80071e4:	685b      	ldr	r3, [r3, #4]
 80071e6:	b29b      	uxth	r3, r3
 80071e8:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 80071ec:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 80071f0:	2b00      	cmp	r3, #0
 80071f2:	f000 80ad 	beq.w	8007350 <HAL_UART_IRQHandler+0x564>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80071f6:	687b      	ldr	r3, [r7, #4]
 80071f8:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 80071fc:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8007200:	429a      	cmp	r2, r3
 8007202:	f080 80a5 	bcs.w	8007350 <HAL_UART_IRQHandler+0x564>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8007206:	687b      	ldr	r3, [r7, #4]
 8007208:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800720c:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8007210:	687b      	ldr	r3, [r7, #4]
 8007212:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007216:	69db      	ldr	r3, [r3, #28]
 8007218:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800721c:	f000 8087 	beq.w	800732e <HAL_UART_IRQHandler+0x542>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8007220:	687b      	ldr	r3, [r7, #4]
 8007222:	681b      	ldr	r3, [r3, #0]
 8007224:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007228:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800722c:	e853 3f00 	ldrex	r3, [r3]
 8007230:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8007234:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8007238:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800723c:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8007240:	687b      	ldr	r3, [r7, #4]
 8007242:	681b      	ldr	r3, [r3, #0]
 8007244:	461a      	mov	r2, r3
 8007246:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800724a:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800724e:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007252:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8007256:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 800725a:	e841 2300 	strex	r3, r2, [r1]
 800725e:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8007262:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8007266:	2b00      	cmp	r3, #0
 8007268:	d1da      	bne.n	8007220 <HAL_UART_IRQHandler+0x434>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800726a:	687b      	ldr	r3, [r7, #4]
 800726c:	681b      	ldr	r3, [r3, #0]
 800726e:	3308      	adds	r3, #8
 8007270:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007272:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8007274:	e853 3f00 	ldrex	r3, [r3]
 8007278:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 800727a:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800727c:	f023 0301 	bic.w	r3, r3, #1
 8007280:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8007284:	687b      	ldr	r3, [r7, #4]
 8007286:	681b      	ldr	r3, [r3, #0]
 8007288:	3308      	adds	r3, #8
 800728a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 800728e:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8007292:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007294:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8007296:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 800729a:	e841 2300 	strex	r3, r2, [r1]
 800729e:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 80072a0:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80072a2:	2b00      	cmp	r3, #0
 80072a4:	d1e1      	bne.n	800726a <HAL_UART_IRQHandler+0x47e>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80072a6:	687b      	ldr	r3, [r7, #4]
 80072a8:	681b      	ldr	r3, [r3, #0]
 80072aa:	3308      	adds	r3, #8
 80072ac:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80072ae:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80072b0:	e853 3f00 	ldrex	r3, [r3]
 80072b4:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 80072b6:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80072b8:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80072bc:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80072c0:	687b      	ldr	r3, [r7, #4]
 80072c2:	681b      	ldr	r3, [r3, #0]
 80072c4:	3308      	adds	r3, #8
 80072c6:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 80072ca:	66fa      	str	r2, [r7, #108]	@ 0x6c
 80072cc:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80072ce:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 80072d0:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 80072d2:	e841 2300 	strex	r3, r2, [r1]
 80072d6:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 80072d8:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80072da:	2b00      	cmp	r3, #0
 80072dc:	d1e3      	bne.n	80072a6 <HAL_UART_IRQHandler+0x4ba>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80072de:	687b      	ldr	r3, [r7, #4]
 80072e0:	2220      	movs	r2, #32
 80072e2:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80072e6:	687b      	ldr	r3, [r7, #4]
 80072e8:	2200      	movs	r2, #0
 80072ea:	66da      	str	r2, [r3, #108]	@ 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80072ec:	687b      	ldr	r3, [r7, #4]
 80072ee:	681b      	ldr	r3, [r3, #0]
 80072f0:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80072f2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80072f4:	e853 3f00 	ldrex	r3, [r3]
 80072f8:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 80072fa:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80072fc:	f023 0310 	bic.w	r3, r3, #16
 8007300:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8007304:	687b      	ldr	r3, [r7, #4]
 8007306:	681b      	ldr	r3, [r3, #0]
 8007308:	461a      	mov	r2, r3
 800730a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800730e:	65bb      	str	r3, [r7, #88]	@ 0x58
 8007310:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007312:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8007314:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8007316:	e841 2300 	strex	r3, r2, [r1]
 800731a:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800731c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800731e:	2b00      	cmp	r3, #0
 8007320:	d1e4      	bne.n	80072ec <HAL_UART_IRQHandler+0x500>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8007322:	687b      	ldr	r3, [r7, #4]
 8007324:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007328:	4618      	mov	r0, r3
 800732a:	f7fa fbe5 	bl	8001af8 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800732e:	687b      	ldr	r3, [r7, #4]
 8007330:	2202      	movs	r2, #2
 8007332:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8007334:	687b      	ldr	r3, [r7, #4]
 8007336:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 800733a:	687b      	ldr	r3, [r7, #4]
 800733c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8007340:	b29b      	uxth	r3, r3
 8007342:	1ad3      	subs	r3, r2, r3
 8007344:	b29b      	uxth	r3, r3
 8007346:	4619      	mov	r1, r3
 8007348:	6878      	ldr	r0, [r7, #4]
 800734a:	f000 f939 	bl	80075c0 <HAL_UARTEx_RxEventCallback>
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
          }
        }
      }
      return;
 800734e:	e119      	b.n	8007584 <HAL_UART_IRQHandler+0x798>
        if (nb_remaining_rx_data == huart->RxXferSize)
 8007350:	687b      	ldr	r3, [r7, #4]
 8007352:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8007356:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800735a:	429a      	cmp	r2, r3
 800735c:	f040 8112 	bne.w	8007584 <HAL_UART_IRQHandler+0x798>
          if (huart->hdmarx->Init.Mode == DMA_CIRCULAR)
 8007360:	687b      	ldr	r3, [r7, #4]
 8007362:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007366:	69db      	ldr	r3, [r3, #28]
 8007368:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800736c:	f040 810a 	bne.w	8007584 <HAL_UART_IRQHandler+0x798>
            huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8007370:	687b      	ldr	r3, [r7, #4]
 8007372:	2202      	movs	r2, #2
 8007374:	671a      	str	r2, [r3, #112]	@ 0x70
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8007376:	687b      	ldr	r3, [r7, #4]
 8007378:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800737c:	4619      	mov	r1, r3
 800737e:	6878      	ldr	r0, [r7, #4]
 8007380:	f000 f91e 	bl	80075c0 <HAL_UARTEx_RxEventCallback>
      return;
 8007384:	e0fe      	b.n	8007584 <HAL_UART_IRQHandler+0x798>
 8007386:	bf00      	nop
 8007388:	40020010 	.word	0x40020010
 800738c:	40020028 	.word	0x40020028
 8007390:	40020040 	.word	0x40020040
 8007394:	40020058 	.word	0x40020058
 8007398:	40020070 	.word	0x40020070
 800739c:	40020088 	.word	0x40020088
 80073a0:	400200a0 	.word	0x400200a0
 80073a4:	400200b8 	.word	0x400200b8
 80073a8:	40020410 	.word	0x40020410
 80073ac:	40020428 	.word	0x40020428
 80073b0:	40020440 	.word	0x40020440
 80073b4:	40020458 	.word	0x40020458
 80073b8:	40020470 	.word	0x40020470
 80073bc:	40020488 	.word	0x40020488
 80073c0:	400204a0 	.word	0x400204a0
 80073c4:	400204b8 	.word	0x400204b8
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80073c8:	687b      	ldr	r3, [r7, #4]
 80073ca:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 80073ce:	687b      	ldr	r3, [r7, #4]
 80073d0:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 80073d4:	b29b      	uxth	r3, r3
 80073d6:	1ad3      	subs	r3, r2, r3
 80073d8:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 80073dc:	687b      	ldr	r3, [r7, #4]
 80073de:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 80073e2:	b29b      	uxth	r3, r3
 80073e4:	2b00      	cmp	r3, #0
 80073e6:	f000 80cf 	beq.w	8007588 <HAL_UART_IRQHandler+0x79c>
          && (nb_rx_data > 0U))
 80073ea:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 80073ee:	2b00      	cmp	r3, #0
 80073f0:	f000 80ca 	beq.w	8007588 <HAL_UART_IRQHandler+0x79c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80073f4:	687b      	ldr	r3, [r7, #4]
 80073f6:	681b      	ldr	r3, [r3, #0]
 80073f8:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80073fa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80073fc:	e853 3f00 	ldrex	r3, [r3]
 8007400:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8007402:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007404:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8007408:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800740c:	687b      	ldr	r3, [r7, #4]
 800740e:	681b      	ldr	r3, [r3, #0]
 8007410:	461a      	mov	r2, r3
 8007412:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8007416:	647b      	str	r3, [r7, #68]	@ 0x44
 8007418:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800741a:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800741c:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800741e:	e841 2300 	strex	r3, r2, [r1]
 8007422:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8007424:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007426:	2b00      	cmp	r3, #0
 8007428:	d1e4      	bne.n	80073f4 <HAL_UART_IRQHandler+0x608>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800742a:	687b      	ldr	r3, [r7, #4]
 800742c:	681b      	ldr	r3, [r3, #0]
 800742e:	3308      	adds	r3, #8
 8007430:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007432:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007434:	e853 3f00 	ldrex	r3, [r3]
 8007438:	623b      	str	r3, [r7, #32]
   return(result);
 800743a:	6a3a      	ldr	r2, [r7, #32]
 800743c:	4b55      	ldr	r3, [pc, #340]	@ (8007594 <HAL_UART_IRQHandler+0x7a8>)
 800743e:	4013      	ands	r3, r2
 8007440:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8007444:	687b      	ldr	r3, [r7, #4]
 8007446:	681b      	ldr	r3, [r3, #0]
 8007448:	3308      	adds	r3, #8
 800744a:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 800744e:	633a      	str	r2, [r7, #48]	@ 0x30
 8007450:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007452:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8007454:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007456:	e841 2300 	strex	r3, r2, [r1]
 800745a:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800745c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800745e:	2b00      	cmp	r3, #0
 8007460:	d1e3      	bne.n	800742a <HAL_UART_IRQHandler+0x63e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8007462:	687b      	ldr	r3, [r7, #4]
 8007464:	2220      	movs	r2, #32
 8007466:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800746a:	687b      	ldr	r3, [r7, #4]
 800746c:	2200      	movs	r2, #0
 800746e:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8007470:	687b      	ldr	r3, [r7, #4]
 8007472:	2200      	movs	r2, #0
 8007474:	675a      	str	r2, [r3, #116]	@ 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007476:	687b      	ldr	r3, [r7, #4]
 8007478:	681b      	ldr	r3, [r3, #0]
 800747a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800747c:	693b      	ldr	r3, [r7, #16]
 800747e:	e853 3f00 	ldrex	r3, [r3]
 8007482:	60fb      	str	r3, [r7, #12]
   return(result);
 8007484:	68fb      	ldr	r3, [r7, #12]
 8007486:	f023 0310 	bic.w	r3, r3, #16
 800748a:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800748e:	687b      	ldr	r3, [r7, #4]
 8007490:	681b      	ldr	r3, [r3, #0]
 8007492:	461a      	mov	r2, r3
 8007494:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8007498:	61fb      	str	r3, [r7, #28]
 800749a:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800749c:	69b9      	ldr	r1, [r7, #24]
 800749e:	69fa      	ldr	r2, [r7, #28]
 80074a0:	e841 2300 	strex	r3, r2, [r1]
 80074a4:	617b      	str	r3, [r7, #20]
   return(result);
 80074a6:	697b      	ldr	r3, [r7, #20]
 80074a8:	2b00      	cmp	r3, #0
 80074aa:	d1e4      	bne.n	8007476 <HAL_UART_IRQHandler+0x68a>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80074ac:	687b      	ldr	r3, [r7, #4]
 80074ae:	2202      	movs	r2, #2
 80074b0:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80074b2:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 80074b6:	4619      	mov	r1, r3
 80074b8:	6878      	ldr	r0, [r7, #4]
 80074ba:	f000 f881 	bl	80075c0 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80074be:	e063      	b.n	8007588 <HAL_UART_IRQHandler+0x79c>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 80074c0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80074c4:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80074c8:	2b00      	cmp	r3, #0
 80074ca:	d00e      	beq.n	80074ea <HAL_UART_IRQHandler+0x6fe>
 80074cc:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80074d0:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80074d4:	2b00      	cmp	r3, #0
 80074d6:	d008      	beq.n	80074ea <HAL_UART_IRQHandler+0x6fe>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 80074d8:	687b      	ldr	r3, [r7, #4]
 80074da:	681b      	ldr	r3, [r3, #0]
 80074dc:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 80074e0:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 80074e2:	6878      	ldr	r0, [r7, #4]
 80074e4:	f001 f941 	bl	800876a <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80074e8:	e051      	b.n	800758e <HAL_UART_IRQHandler+0x7a2>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 80074ea:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80074ee:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80074f2:	2b00      	cmp	r3, #0
 80074f4:	d014      	beq.n	8007520 <HAL_UART_IRQHandler+0x734>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 80074f6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80074fa:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80074fe:	2b00      	cmp	r3, #0
 8007500:	d105      	bne.n	800750e <HAL_UART_IRQHandler+0x722>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 8007502:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8007506:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800750a:	2b00      	cmp	r3, #0
 800750c:	d008      	beq.n	8007520 <HAL_UART_IRQHandler+0x734>
  {
    if (huart->TxISR != NULL)
 800750e:	687b      	ldr	r3, [r7, #4]
 8007510:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8007512:	2b00      	cmp	r3, #0
 8007514:	d03a      	beq.n	800758c <HAL_UART_IRQHandler+0x7a0>
    {
      huart->TxISR(huart);
 8007516:	687b      	ldr	r3, [r7, #4]
 8007518:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800751a:	6878      	ldr	r0, [r7, #4]
 800751c:	4798      	blx	r3
    }
    return;
 800751e:	e035      	b.n	800758c <HAL_UART_IRQHandler+0x7a0>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8007520:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007524:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007528:	2b00      	cmp	r3, #0
 800752a:	d009      	beq.n	8007540 <HAL_UART_IRQHandler+0x754>
 800752c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007530:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007534:	2b00      	cmp	r3, #0
 8007536:	d003      	beq.n	8007540 <HAL_UART_IRQHandler+0x754>
  {
    UART_EndTransmit_IT(huart);
 8007538:	6878      	ldr	r0, [r7, #4]
 800753a:	f001 f8eb 	bl	8008714 <UART_EndTransmit_IT>
    return;
 800753e:	e026      	b.n	800758e <HAL_UART_IRQHandler+0x7a2>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 8007540:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007544:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8007548:	2b00      	cmp	r3, #0
 800754a:	d009      	beq.n	8007560 <HAL_UART_IRQHandler+0x774>
 800754c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007550:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8007554:	2b00      	cmp	r3, #0
 8007556:	d003      	beq.n	8007560 <HAL_UART_IRQHandler+0x774>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 8007558:	6878      	ldr	r0, [r7, #4]
 800755a:	f001 f91a 	bl	8008792 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800755e:	e016      	b.n	800758e <HAL_UART_IRQHandler+0x7a2>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 8007560:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007564:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8007568:	2b00      	cmp	r3, #0
 800756a:	d010      	beq.n	800758e <HAL_UART_IRQHandler+0x7a2>
 800756c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007570:	2b00      	cmp	r3, #0
 8007572:	da0c      	bge.n	800758e <HAL_UART_IRQHandler+0x7a2>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 8007574:	6878      	ldr	r0, [r7, #4]
 8007576:	f001 f902 	bl	800877e <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800757a:	e008      	b.n	800758e <HAL_UART_IRQHandler+0x7a2>
      return;
 800757c:	bf00      	nop
 800757e:	e006      	b.n	800758e <HAL_UART_IRQHandler+0x7a2>
    return;
 8007580:	bf00      	nop
 8007582:	e004      	b.n	800758e <HAL_UART_IRQHandler+0x7a2>
      return;
 8007584:	bf00      	nop
 8007586:	e002      	b.n	800758e <HAL_UART_IRQHandler+0x7a2>
      return;
 8007588:	bf00      	nop
 800758a:	e000      	b.n	800758e <HAL_UART_IRQHandler+0x7a2>
    return;
 800758c:	bf00      	nop
  }
}
 800758e:	37e8      	adds	r7, #232	@ 0xe8
 8007590:	46bd      	mov	sp, r7
 8007592:	bd80      	pop	{r7, pc}
 8007594:	effffffe 	.word	0xeffffffe

08007598 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8007598:	b480      	push	{r7}
 800759a:	b083      	sub	sp, #12
 800759c:	af00      	add	r7, sp, #0
 800759e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 80075a0:	bf00      	nop
 80075a2:	370c      	adds	r7, #12
 80075a4:	46bd      	mov	sp, r7
 80075a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075aa:	4770      	bx	lr

080075ac <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80075ac:	b480      	push	{r7}
 80075ae:	b083      	sub	sp, #12
 80075b0:	af00      	add	r7, sp, #0
 80075b2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 80075b4:	bf00      	nop
 80075b6:	370c      	adds	r7, #12
 80075b8:	46bd      	mov	sp, r7
 80075ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075be:	4770      	bx	lr

080075c0 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80075c0:	b480      	push	{r7}
 80075c2:	b083      	sub	sp, #12
 80075c4:	af00      	add	r7, sp, #0
 80075c6:	6078      	str	r0, [r7, #4]
 80075c8:	460b      	mov	r3, r1
 80075ca:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80075cc:	bf00      	nop
 80075ce:	370c      	adds	r7, #12
 80075d0:	46bd      	mov	sp, r7
 80075d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075d6:	4770      	bx	lr

080075d8 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80075d8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80075dc:	b092      	sub	sp, #72	@ 0x48
 80075de:	af00      	add	r7, sp, #0
 80075e0:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80075e2:	2300      	movs	r3, #0
 80075e4:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80075e8:	697b      	ldr	r3, [r7, #20]
 80075ea:	689a      	ldr	r2, [r3, #8]
 80075ec:	697b      	ldr	r3, [r7, #20]
 80075ee:	691b      	ldr	r3, [r3, #16]
 80075f0:	431a      	orrs	r2, r3
 80075f2:	697b      	ldr	r3, [r7, #20]
 80075f4:	695b      	ldr	r3, [r3, #20]
 80075f6:	431a      	orrs	r2, r3
 80075f8:	697b      	ldr	r3, [r7, #20]
 80075fa:	69db      	ldr	r3, [r3, #28]
 80075fc:	4313      	orrs	r3, r2
 80075fe:	647b      	str	r3, [r7, #68]	@ 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8007600:	697b      	ldr	r3, [r7, #20]
 8007602:	681b      	ldr	r3, [r3, #0]
 8007604:	681a      	ldr	r2, [r3, #0]
 8007606:	4bbe      	ldr	r3, [pc, #760]	@ (8007900 <UART_SetConfig+0x328>)
 8007608:	4013      	ands	r3, r2
 800760a:	697a      	ldr	r2, [r7, #20]
 800760c:	6812      	ldr	r2, [r2, #0]
 800760e:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8007610:	430b      	orrs	r3, r1
 8007612:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8007614:	697b      	ldr	r3, [r7, #20]
 8007616:	681b      	ldr	r3, [r3, #0]
 8007618:	685b      	ldr	r3, [r3, #4]
 800761a:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800761e:	697b      	ldr	r3, [r7, #20]
 8007620:	68da      	ldr	r2, [r3, #12]
 8007622:	697b      	ldr	r3, [r7, #20]
 8007624:	681b      	ldr	r3, [r3, #0]
 8007626:	430a      	orrs	r2, r1
 8007628:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800762a:	697b      	ldr	r3, [r7, #20]
 800762c:	699b      	ldr	r3, [r3, #24]
 800762e:	647b      	str	r3, [r7, #68]	@ 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8007630:	697b      	ldr	r3, [r7, #20]
 8007632:	681b      	ldr	r3, [r3, #0]
 8007634:	4ab3      	ldr	r2, [pc, #716]	@ (8007904 <UART_SetConfig+0x32c>)
 8007636:	4293      	cmp	r3, r2
 8007638:	d004      	beq.n	8007644 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800763a:	697b      	ldr	r3, [r7, #20]
 800763c:	6a1b      	ldr	r3, [r3, #32]
 800763e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8007640:	4313      	orrs	r3, r2
 8007642:	647b      	str	r3, [r7, #68]	@ 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8007644:	697b      	ldr	r3, [r7, #20]
 8007646:	681b      	ldr	r3, [r3, #0]
 8007648:	689a      	ldr	r2, [r3, #8]
 800764a:	4baf      	ldr	r3, [pc, #700]	@ (8007908 <UART_SetConfig+0x330>)
 800764c:	4013      	ands	r3, r2
 800764e:	697a      	ldr	r2, [r7, #20]
 8007650:	6812      	ldr	r2, [r2, #0]
 8007652:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8007654:	430b      	orrs	r3, r1
 8007656:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8007658:	697b      	ldr	r3, [r7, #20]
 800765a:	681b      	ldr	r3, [r3, #0]
 800765c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800765e:	f023 010f 	bic.w	r1, r3, #15
 8007662:	697b      	ldr	r3, [r7, #20]
 8007664:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8007666:	697b      	ldr	r3, [r7, #20]
 8007668:	681b      	ldr	r3, [r3, #0]
 800766a:	430a      	orrs	r2, r1
 800766c:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800766e:	697b      	ldr	r3, [r7, #20]
 8007670:	681b      	ldr	r3, [r3, #0]
 8007672:	4aa6      	ldr	r2, [pc, #664]	@ (800790c <UART_SetConfig+0x334>)
 8007674:	4293      	cmp	r3, r2
 8007676:	d177      	bne.n	8007768 <UART_SetConfig+0x190>
 8007678:	4ba5      	ldr	r3, [pc, #660]	@ (8007910 <UART_SetConfig+0x338>)
 800767a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800767c:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8007680:	2b28      	cmp	r3, #40	@ 0x28
 8007682:	d86d      	bhi.n	8007760 <UART_SetConfig+0x188>
 8007684:	a201      	add	r2, pc, #4	@ (adr r2, 800768c <UART_SetConfig+0xb4>)
 8007686:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800768a:	bf00      	nop
 800768c:	08007731 	.word	0x08007731
 8007690:	08007761 	.word	0x08007761
 8007694:	08007761 	.word	0x08007761
 8007698:	08007761 	.word	0x08007761
 800769c:	08007761 	.word	0x08007761
 80076a0:	08007761 	.word	0x08007761
 80076a4:	08007761 	.word	0x08007761
 80076a8:	08007761 	.word	0x08007761
 80076ac:	08007739 	.word	0x08007739
 80076b0:	08007761 	.word	0x08007761
 80076b4:	08007761 	.word	0x08007761
 80076b8:	08007761 	.word	0x08007761
 80076bc:	08007761 	.word	0x08007761
 80076c0:	08007761 	.word	0x08007761
 80076c4:	08007761 	.word	0x08007761
 80076c8:	08007761 	.word	0x08007761
 80076cc:	08007741 	.word	0x08007741
 80076d0:	08007761 	.word	0x08007761
 80076d4:	08007761 	.word	0x08007761
 80076d8:	08007761 	.word	0x08007761
 80076dc:	08007761 	.word	0x08007761
 80076e0:	08007761 	.word	0x08007761
 80076e4:	08007761 	.word	0x08007761
 80076e8:	08007761 	.word	0x08007761
 80076ec:	08007749 	.word	0x08007749
 80076f0:	08007761 	.word	0x08007761
 80076f4:	08007761 	.word	0x08007761
 80076f8:	08007761 	.word	0x08007761
 80076fc:	08007761 	.word	0x08007761
 8007700:	08007761 	.word	0x08007761
 8007704:	08007761 	.word	0x08007761
 8007708:	08007761 	.word	0x08007761
 800770c:	08007751 	.word	0x08007751
 8007710:	08007761 	.word	0x08007761
 8007714:	08007761 	.word	0x08007761
 8007718:	08007761 	.word	0x08007761
 800771c:	08007761 	.word	0x08007761
 8007720:	08007761 	.word	0x08007761
 8007724:	08007761 	.word	0x08007761
 8007728:	08007761 	.word	0x08007761
 800772c:	08007759 	.word	0x08007759
 8007730:	2301      	movs	r3, #1
 8007732:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007736:	e326      	b.n	8007d86 <UART_SetConfig+0x7ae>
 8007738:	2304      	movs	r3, #4
 800773a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800773e:	e322      	b.n	8007d86 <UART_SetConfig+0x7ae>
 8007740:	2308      	movs	r3, #8
 8007742:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007746:	e31e      	b.n	8007d86 <UART_SetConfig+0x7ae>
 8007748:	2310      	movs	r3, #16
 800774a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800774e:	e31a      	b.n	8007d86 <UART_SetConfig+0x7ae>
 8007750:	2320      	movs	r3, #32
 8007752:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007756:	e316      	b.n	8007d86 <UART_SetConfig+0x7ae>
 8007758:	2340      	movs	r3, #64	@ 0x40
 800775a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800775e:	e312      	b.n	8007d86 <UART_SetConfig+0x7ae>
 8007760:	2380      	movs	r3, #128	@ 0x80
 8007762:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007766:	e30e      	b.n	8007d86 <UART_SetConfig+0x7ae>
 8007768:	697b      	ldr	r3, [r7, #20]
 800776a:	681b      	ldr	r3, [r3, #0]
 800776c:	4a69      	ldr	r2, [pc, #420]	@ (8007914 <UART_SetConfig+0x33c>)
 800776e:	4293      	cmp	r3, r2
 8007770:	d130      	bne.n	80077d4 <UART_SetConfig+0x1fc>
 8007772:	4b67      	ldr	r3, [pc, #412]	@ (8007910 <UART_SetConfig+0x338>)
 8007774:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007776:	f003 0307 	and.w	r3, r3, #7
 800777a:	2b05      	cmp	r3, #5
 800777c:	d826      	bhi.n	80077cc <UART_SetConfig+0x1f4>
 800777e:	a201      	add	r2, pc, #4	@ (adr r2, 8007784 <UART_SetConfig+0x1ac>)
 8007780:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007784:	0800779d 	.word	0x0800779d
 8007788:	080077a5 	.word	0x080077a5
 800778c:	080077ad 	.word	0x080077ad
 8007790:	080077b5 	.word	0x080077b5
 8007794:	080077bd 	.word	0x080077bd
 8007798:	080077c5 	.word	0x080077c5
 800779c:	2300      	movs	r3, #0
 800779e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80077a2:	e2f0      	b.n	8007d86 <UART_SetConfig+0x7ae>
 80077a4:	2304      	movs	r3, #4
 80077a6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80077aa:	e2ec      	b.n	8007d86 <UART_SetConfig+0x7ae>
 80077ac:	2308      	movs	r3, #8
 80077ae:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80077b2:	e2e8      	b.n	8007d86 <UART_SetConfig+0x7ae>
 80077b4:	2310      	movs	r3, #16
 80077b6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80077ba:	e2e4      	b.n	8007d86 <UART_SetConfig+0x7ae>
 80077bc:	2320      	movs	r3, #32
 80077be:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80077c2:	e2e0      	b.n	8007d86 <UART_SetConfig+0x7ae>
 80077c4:	2340      	movs	r3, #64	@ 0x40
 80077c6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80077ca:	e2dc      	b.n	8007d86 <UART_SetConfig+0x7ae>
 80077cc:	2380      	movs	r3, #128	@ 0x80
 80077ce:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80077d2:	e2d8      	b.n	8007d86 <UART_SetConfig+0x7ae>
 80077d4:	697b      	ldr	r3, [r7, #20]
 80077d6:	681b      	ldr	r3, [r3, #0]
 80077d8:	4a4f      	ldr	r2, [pc, #316]	@ (8007918 <UART_SetConfig+0x340>)
 80077da:	4293      	cmp	r3, r2
 80077dc:	d130      	bne.n	8007840 <UART_SetConfig+0x268>
 80077de:	4b4c      	ldr	r3, [pc, #304]	@ (8007910 <UART_SetConfig+0x338>)
 80077e0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80077e2:	f003 0307 	and.w	r3, r3, #7
 80077e6:	2b05      	cmp	r3, #5
 80077e8:	d826      	bhi.n	8007838 <UART_SetConfig+0x260>
 80077ea:	a201      	add	r2, pc, #4	@ (adr r2, 80077f0 <UART_SetConfig+0x218>)
 80077ec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80077f0:	08007809 	.word	0x08007809
 80077f4:	08007811 	.word	0x08007811
 80077f8:	08007819 	.word	0x08007819
 80077fc:	08007821 	.word	0x08007821
 8007800:	08007829 	.word	0x08007829
 8007804:	08007831 	.word	0x08007831
 8007808:	2300      	movs	r3, #0
 800780a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800780e:	e2ba      	b.n	8007d86 <UART_SetConfig+0x7ae>
 8007810:	2304      	movs	r3, #4
 8007812:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007816:	e2b6      	b.n	8007d86 <UART_SetConfig+0x7ae>
 8007818:	2308      	movs	r3, #8
 800781a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800781e:	e2b2      	b.n	8007d86 <UART_SetConfig+0x7ae>
 8007820:	2310      	movs	r3, #16
 8007822:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007826:	e2ae      	b.n	8007d86 <UART_SetConfig+0x7ae>
 8007828:	2320      	movs	r3, #32
 800782a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800782e:	e2aa      	b.n	8007d86 <UART_SetConfig+0x7ae>
 8007830:	2340      	movs	r3, #64	@ 0x40
 8007832:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007836:	e2a6      	b.n	8007d86 <UART_SetConfig+0x7ae>
 8007838:	2380      	movs	r3, #128	@ 0x80
 800783a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800783e:	e2a2      	b.n	8007d86 <UART_SetConfig+0x7ae>
 8007840:	697b      	ldr	r3, [r7, #20]
 8007842:	681b      	ldr	r3, [r3, #0]
 8007844:	4a35      	ldr	r2, [pc, #212]	@ (800791c <UART_SetConfig+0x344>)
 8007846:	4293      	cmp	r3, r2
 8007848:	d130      	bne.n	80078ac <UART_SetConfig+0x2d4>
 800784a:	4b31      	ldr	r3, [pc, #196]	@ (8007910 <UART_SetConfig+0x338>)
 800784c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800784e:	f003 0307 	and.w	r3, r3, #7
 8007852:	2b05      	cmp	r3, #5
 8007854:	d826      	bhi.n	80078a4 <UART_SetConfig+0x2cc>
 8007856:	a201      	add	r2, pc, #4	@ (adr r2, 800785c <UART_SetConfig+0x284>)
 8007858:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800785c:	08007875 	.word	0x08007875
 8007860:	0800787d 	.word	0x0800787d
 8007864:	08007885 	.word	0x08007885
 8007868:	0800788d 	.word	0x0800788d
 800786c:	08007895 	.word	0x08007895
 8007870:	0800789d 	.word	0x0800789d
 8007874:	2300      	movs	r3, #0
 8007876:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800787a:	e284      	b.n	8007d86 <UART_SetConfig+0x7ae>
 800787c:	2304      	movs	r3, #4
 800787e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007882:	e280      	b.n	8007d86 <UART_SetConfig+0x7ae>
 8007884:	2308      	movs	r3, #8
 8007886:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800788a:	e27c      	b.n	8007d86 <UART_SetConfig+0x7ae>
 800788c:	2310      	movs	r3, #16
 800788e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007892:	e278      	b.n	8007d86 <UART_SetConfig+0x7ae>
 8007894:	2320      	movs	r3, #32
 8007896:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800789a:	e274      	b.n	8007d86 <UART_SetConfig+0x7ae>
 800789c:	2340      	movs	r3, #64	@ 0x40
 800789e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80078a2:	e270      	b.n	8007d86 <UART_SetConfig+0x7ae>
 80078a4:	2380      	movs	r3, #128	@ 0x80
 80078a6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80078aa:	e26c      	b.n	8007d86 <UART_SetConfig+0x7ae>
 80078ac:	697b      	ldr	r3, [r7, #20]
 80078ae:	681b      	ldr	r3, [r3, #0]
 80078b0:	4a1b      	ldr	r2, [pc, #108]	@ (8007920 <UART_SetConfig+0x348>)
 80078b2:	4293      	cmp	r3, r2
 80078b4:	d142      	bne.n	800793c <UART_SetConfig+0x364>
 80078b6:	4b16      	ldr	r3, [pc, #88]	@ (8007910 <UART_SetConfig+0x338>)
 80078b8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80078ba:	f003 0307 	and.w	r3, r3, #7
 80078be:	2b05      	cmp	r3, #5
 80078c0:	d838      	bhi.n	8007934 <UART_SetConfig+0x35c>
 80078c2:	a201      	add	r2, pc, #4	@ (adr r2, 80078c8 <UART_SetConfig+0x2f0>)
 80078c4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80078c8:	080078e1 	.word	0x080078e1
 80078cc:	080078e9 	.word	0x080078e9
 80078d0:	080078f1 	.word	0x080078f1
 80078d4:	080078f9 	.word	0x080078f9
 80078d8:	08007925 	.word	0x08007925
 80078dc:	0800792d 	.word	0x0800792d
 80078e0:	2300      	movs	r3, #0
 80078e2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80078e6:	e24e      	b.n	8007d86 <UART_SetConfig+0x7ae>
 80078e8:	2304      	movs	r3, #4
 80078ea:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80078ee:	e24a      	b.n	8007d86 <UART_SetConfig+0x7ae>
 80078f0:	2308      	movs	r3, #8
 80078f2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80078f6:	e246      	b.n	8007d86 <UART_SetConfig+0x7ae>
 80078f8:	2310      	movs	r3, #16
 80078fa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80078fe:	e242      	b.n	8007d86 <UART_SetConfig+0x7ae>
 8007900:	cfff69f3 	.word	0xcfff69f3
 8007904:	58000c00 	.word	0x58000c00
 8007908:	11fff4ff 	.word	0x11fff4ff
 800790c:	40011000 	.word	0x40011000
 8007910:	58024400 	.word	0x58024400
 8007914:	40004400 	.word	0x40004400
 8007918:	40004800 	.word	0x40004800
 800791c:	40004c00 	.word	0x40004c00
 8007920:	40005000 	.word	0x40005000
 8007924:	2320      	movs	r3, #32
 8007926:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800792a:	e22c      	b.n	8007d86 <UART_SetConfig+0x7ae>
 800792c:	2340      	movs	r3, #64	@ 0x40
 800792e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007932:	e228      	b.n	8007d86 <UART_SetConfig+0x7ae>
 8007934:	2380      	movs	r3, #128	@ 0x80
 8007936:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800793a:	e224      	b.n	8007d86 <UART_SetConfig+0x7ae>
 800793c:	697b      	ldr	r3, [r7, #20]
 800793e:	681b      	ldr	r3, [r3, #0]
 8007940:	4ab1      	ldr	r2, [pc, #708]	@ (8007c08 <UART_SetConfig+0x630>)
 8007942:	4293      	cmp	r3, r2
 8007944:	d176      	bne.n	8007a34 <UART_SetConfig+0x45c>
 8007946:	4bb1      	ldr	r3, [pc, #708]	@ (8007c0c <UART_SetConfig+0x634>)
 8007948:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800794a:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800794e:	2b28      	cmp	r3, #40	@ 0x28
 8007950:	d86c      	bhi.n	8007a2c <UART_SetConfig+0x454>
 8007952:	a201      	add	r2, pc, #4	@ (adr r2, 8007958 <UART_SetConfig+0x380>)
 8007954:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007958:	080079fd 	.word	0x080079fd
 800795c:	08007a2d 	.word	0x08007a2d
 8007960:	08007a2d 	.word	0x08007a2d
 8007964:	08007a2d 	.word	0x08007a2d
 8007968:	08007a2d 	.word	0x08007a2d
 800796c:	08007a2d 	.word	0x08007a2d
 8007970:	08007a2d 	.word	0x08007a2d
 8007974:	08007a2d 	.word	0x08007a2d
 8007978:	08007a05 	.word	0x08007a05
 800797c:	08007a2d 	.word	0x08007a2d
 8007980:	08007a2d 	.word	0x08007a2d
 8007984:	08007a2d 	.word	0x08007a2d
 8007988:	08007a2d 	.word	0x08007a2d
 800798c:	08007a2d 	.word	0x08007a2d
 8007990:	08007a2d 	.word	0x08007a2d
 8007994:	08007a2d 	.word	0x08007a2d
 8007998:	08007a0d 	.word	0x08007a0d
 800799c:	08007a2d 	.word	0x08007a2d
 80079a0:	08007a2d 	.word	0x08007a2d
 80079a4:	08007a2d 	.word	0x08007a2d
 80079a8:	08007a2d 	.word	0x08007a2d
 80079ac:	08007a2d 	.word	0x08007a2d
 80079b0:	08007a2d 	.word	0x08007a2d
 80079b4:	08007a2d 	.word	0x08007a2d
 80079b8:	08007a15 	.word	0x08007a15
 80079bc:	08007a2d 	.word	0x08007a2d
 80079c0:	08007a2d 	.word	0x08007a2d
 80079c4:	08007a2d 	.word	0x08007a2d
 80079c8:	08007a2d 	.word	0x08007a2d
 80079cc:	08007a2d 	.word	0x08007a2d
 80079d0:	08007a2d 	.word	0x08007a2d
 80079d4:	08007a2d 	.word	0x08007a2d
 80079d8:	08007a1d 	.word	0x08007a1d
 80079dc:	08007a2d 	.word	0x08007a2d
 80079e0:	08007a2d 	.word	0x08007a2d
 80079e4:	08007a2d 	.word	0x08007a2d
 80079e8:	08007a2d 	.word	0x08007a2d
 80079ec:	08007a2d 	.word	0x08007a2d
 80079f0:	08007a2d 	.word	0x08007a2d
 80079f4:	08007a2d 	.word	0x08007a2d
 80079f8:	08007a25 	.word	0x08007a25
 80079fc:	2301      	movs	r3, #1
 80079fe:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007a02:	e1c0      	b.n	8007d86 <UART_SetConfig+0x7ae>
 8007a04:	2304      	movs	r3, #4
 8007a06:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007a0a:	e1bc      	b.n	8007d86 <UART_SetConfig+0x7ae>
 8007a0c:	2308      	movs	r3, #8
 8007a0e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007a12:	e1b8      	b.n	8007d86 <UART_SetConfig+0x7ae>
 8007a14:	2310      	movs	r3, #16
 8007a16:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007a1a:	e1b4      	b.n	8007d86 <UART_SetConfig+0x7ae>
 8007a1c:	2320      	movs	r3, #32
 8007a1e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007a22:	e1b0      	b.n	8007d86 <UART_SetConfig+0x7ae>
 8007a24:	2340      	movs	r3, #64	@ 0x40
 8007a26:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007a2a:	e1ac      	b.n	8007d86 <UART_SetConfig+0x7ae>
 8007a2c:	2380      	movs	r3, #128	@ 0x80
 8007a2e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007a32:	e1a8      	b.n	8007d86 <UART_SetConfig+0x7ae>
 8007a34:	697b      	ldr	r3, [r7, #20]
 8007a36:	681b      	ldr	r3, [r3, #0]
 8007a38:	4a75      	ldr	r2, [pc, #468]	@ (8007c10 <UART_SetConfig+0x638>)
 8007a3a:	4293      	cmp	r3, r2
 8007a3c:	d130      	bne.n	8007aa0 <UART_SetConfig+0x4c8>
 8007a3e:	4b73      	ldr	r3, [pc, #460]	@ (8007c0c <UART_SetConfig+0x634>)
 8007a40:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007a42:	f003 0307 	and.w	r3, r3, #7
 8007a46:	2b05      	cmp	r3, #5
 8007a48:	d826      	bhi.n	8007a98 <UART_SetConfig+0x4c0>
 8007a4a:	a201      	add	r2, pc, #4	@ (adr r2, 8007a50 <UART_SetConfig+0x478>)
 8007a4c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007a50:	08007a69 	.word	0x08007a69
 8007a54:	08007a71 	.word	0x08007a71
 8007a58:	08007a79 	.word	0x08007a79
 8007a5c:	08007a81 	.word	0x08007a81
 8007a60:	08007a89 	.word	0x08007a89
 8007a64:	08007a91 	.word	0x08007a91
 8007a68:	2300      	movs	r3, #0
 8007a6a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007a6e:	e18a      	b.n	8007d86 <UART_SetConfig+0x7ae>
 8007a70:	2304      	movs	r3, #4
 8007a72:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007a76:	e186      	b.n	8007d86 <UART_SetConfig+0x7ae>
 8007a78:	2308      	movs	r3, #8
 8007a7a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007a7e:	e182      	b.n	8007d86 <UART_SetConfig+0x7ae>
 8007a80:	2310      	movs	r3, #16
 8007a82:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007a86:	e17e      	b.n	8007d86 <UART_SetConfig+0x7ae>
 8007a88:	2320      	movs	r3, #32
 8007a8a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007a8e:	e17a      	b.n	8007d86 <UART_SetConfig+0x7ae>
 8007a90:	2340      	movs	r3, #64	@ 0x40
 8007a92:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007a96:	e176      	b.n	8007d86 <UART_SetConfig+0x7ae>
 8007a98:	2380      	movs	r3, #128	@ 0x80
 8007a9a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007a9e:	e172      	b.n	8007d86 <UART_SetConfig+0x7ae>
 8007aa0:	697b      	ldr	r3, [r7, #20]
 8007aa2:	681b      	ldr	r3, [r3, #0]
 8007aa4:	4a5b      	ldr	r2, [pc, #364]	@ (8007c14 <UART_SetConfig+0x63c>)
 8007aa6:	4293      	cmp	r3, r2
 8007aa8:	d130      	bne.n	8007b0c <UART_SetConfig+0x534>
 8007aaa:	4b58      	ldr	r3, [pc, #352]	@ (8007c0c <UART_SetConfig+0x634>)
 8007aac:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007aae:	f003 0307 	and.w	r3, r3, #7
 8007ab2:	2b05      	cmp	r3, #5
 8007ab4:	d826      	bhi.n	8007b04 <UART_SetConfig+0x52c>
 8007ab6:	a201      	add	r2, pc, #4	@ (adr r2, 8007abc <UART_SetConfig+0x4e4>)
 8007ab8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007abc:	08007ad5 	.word	0x08007ad5
 8007ac0:	08007add 	.word	0x08007add
 8007ac4:	08007ae5 	.word	0x08007ae5
 8007ac8:	08007aed 	.word	0x08007aed
 8007acc:	08007af5 	.word	0x08007af5
 8007ad0:	08007afd 	.word	0x08007afd
 8007ad4:	2300      	movs	r3, #0
 8007ad6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007ada:	e154      	b.n	8007d86 <UART_SetConfig+0x7ae>
 8007adc:	2304      	movs	r3, #4
 8007ade:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007ae2:	e150      	b.n	8007d86 <UART_SetConfig+0x7ae>
 8007ae4:	2308      	movs	r3, #8
 8007ae6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007aea:	e14c      	b.n	8007d86 <UART_SetConfig+0x7ae>
 8007aec:	2310      	movs	r3, #16
 8007aee:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007af2:	e148      	b.n	8007d86 <UART_SetConfig+0x7ae>
 8007af4:	2320      	movs	r3, #32
 8007af6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007afa:	e144      	b.n	8007d86 <UART_SetConfig+0x7ae>
 8007afc:	2340      	movs	r3, #64	@ 0x40
 8007afe:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007b02:	e140      	b.n	8007d86 <UART_SetConfig+0x7ae>
 8007b04:	2380      	movs	r3, #128	@ 0x80
 8007b06:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007b0a:	e13c      	b.n	8007d86 <UART_SetConfig+0x7ae>
 8007b0c:	697b      	ldr	r3, [r7, #20]
 8007b0e:	681b      	ldr	r3, [r3, #0]
 8007b10:	4a41      	ldr	r2, [pc, #260]	@ (8007c18 <UART_SetConfig+0x640>)
 8007b12:	4293      	cmp	r3, r2
 8007b14:	f040 8082 	bne.w	8007c1c <UART_SetConfig+0x644>
 8007b18:	4b3c      	ldr	r3, [pc, #240]	@ (8007c0c <UART_SetConfig+0x634>)
 8007b1a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007b1c:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8007b20:	2b28      	cmp	r3, #40	@ 0x28
 8007b22:	d86d      	bhi.n	8007c00 <UART_SetConfig+0x628>
 8007b24:	a201      	add	r2, pc, #4	@ (adr r2, 8007b2c <UART_SetConfig+0x554>)
 8007b26:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007b2a:	bf00      	nop
 8007b2c:	08007bd1 	.word	0x08007bd1
 8007b30:	08007c01 	.word	0x08007c01
 8007b34:	08007c01 	.word	0x08007c01
 8007b38:	08007c01 	.word	0x08007c01
 8007b3c:	08007c01 	.word	0x08007c01
 8007b40:	08007c01 	.word	0x08007c01
 8007b44:	08007c01 	.word	0x08007c01
 8007b48:	08007c01 	.word	0x08007c01
 8007b4c:	08007bd9 	.word	0x08007bd9
 8007b50:	08007c01 	.word	0x08007c01
 8007b54:	08007c01 	.word	0x08007c01
 8007b58:	08007c01 	.word	0x08007c01
 8007b5c:	08007c01 	.word	0x08007c01
 8007b60:	08007c01 	.word	0x08007c01
 8007b64:	08007c01 	.word	0x08007c01
 8007b68:	08007c01 	.word	0x08007c01
 8007b6c:	08007be1 	.word	0x08007be1
 8007b70:	08007c01 	.word	0x08007c01
 8007b74:	08007c01 	.word	0x08007c01
 8007b78:	08007c01 	.word	0x08007c01
 8007b7c:	08007c01 	.word	0x08007c01
 8007b80:	08007c01 	.word	0x08007c01
 8007b84:	08007c01 	.word	0x08007c01
 8007b88:	08007c01 	.word	0x08007c01
 8007b8c:	08007be9 	.word	0x08007be9
 8007b90:	08007c01 	.word	0x08007c01
 8007b94:	08007c01 	.word	0x08007c01
 8007b98:	08007c01 	.word	0x08007c01
 8007b9c:	08007c01 	.word	0x08007c01
 8007ba0:	08007c01 	.word	0x08007c01
 8007ba4:	08007c01 	.word	0x08007c01
 8007ba8:	08007c01 	.word	0x08007c01
 8007bac:	08007bf1 	.word	0x08007bf1
 8007bb0:	08007c01 	.word	0x08007c01
 8007bb4:	08007c01 	.word	0x08007c01
 8007bb8:	08007c01 	.word	0x08007c01
 8007bbc:	08007c01 	.word	0x08007c01
 8007bc0:	08007c01 	.word	0x08007c01
 8007bc4:	08007c01 	.word	0x08007c01
 8007bc8:	08007c01 	.word	0x08007c01
 8007bcc:	08007bf9 	.word	0x08007bf9
 8007bd0:	2301      	movs	r3, #1
 8007bd2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007bd6:	e0d6      	b.n	8007d86 <UART_SetConfig+0x7ae>
 8007bd8:	2304      	movs	r3, #4
 8007bda:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007bde:	e0d2      	b.n	8007d86 <UART_SetConfig+0x7ae>
 8007be0:	2308      	movs	r3, #8
 8007be2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007be6:	e0ce      	b.n	8007d86 <UART_SetConfig+0x7ae>
 8007be8:	2310      	movs	r3, #16
 8007bea:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007bee:	e0ca      	b.n	8007d86 <UART_SetConfig+0x7ae>
 8007bf0:	2320      	movs	r3, #32
 8007bf2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007bf6:	e0c6      	b.n	8007d86 <UART_SetConfig+0x7ae>
 8007bf8:	2340      	movs	r3, #64	@ 0x40
 8007bfa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007bfe:	e0c2      	b.n	8007d86 <UART_SetConfig+0x7ae>
 8007c00:	2380      	movs	r3, #128	@ 0x80
 8007c02:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007c06:	e0be      	b.n	8007d86 <UART_SetConfig+0x7ae>
 8007c08:	40011400 	.word	0x40011400
 8007c0c:	58024400 	.word	0x58024400
 8007c10:	40007800 	.word	0x40007800
 8007c14:	40007c00 	.word	0x40007c00
 8007c18:	40011800 	.word	0x40011800
 8007c1c:	697b      	ldr	r3, [r7, #20]
 8007c1e:	681b      	ldr	r3, [r3, #0]
 8007c20:	4aad      	ldr	r2, [pc, #692]	@ (8007ed8 <UART_SetConfig+0x900>)
 8007c22:	4293      	cmp	r3, r2
 8007c24:	d176      	bne.n	8007d14 <UART_SetConfig+0x73c>
 8007c26:	4bad      	ldr	r3, [pc, #692]	@ (8007edc <UART_SetConfig+0x904>)
 8007c28:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007c2a:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8007c2e:	2b28      	cmp	r3, #40	@ 0x28
 8007c30:	d86c      	bhi.n	8007d0c <UART_SetConfig+0x734>
 8007c32:	a201      	add	r2, pc, #4	@ (adr r2, 8007c38 <UART_SetConfig+0x660>)
 8007c34:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007c38:	08007cdd 	.word	0x08007cdd
 8007c3c:	08007d0d 	.word	0x08007d0d
 8007c40:	08007d0d 	.word	0x08007d0d
 8007c44:	08007d0d 	.word	0x08007d0d
 8007c48:	08007d0d 	.word	0x08007d0d
 8007c4c:	08007d0d 	.word	0x08007d0d
 8007c50:	08007d0d 	.word	0x08007d0d
 8007c54:	08007d0d 	.word	0x08007d0d
 8007c58:	08007ce5 	.word	0x08007ce5
 8007c5c:	08007d0d 	.word	0x08007d0d
 8007c60:	08007d0d 	.word	0x08007d0d
 8007c64:	08007d0d 	.word	0x08007d0d
 8007c68:	08007d0d 	.word	0x08007d0d
 8007c6c:	08007d0d 	.word	0x08007d0d
 8007c70:	08007d0d 	.word	0x08007d0d
 8007c74:	08007d0d 	.word	0x08007d0d
 8007c78:	08007ced 	.word	0x08007ced
 8007c7c:	08007d0d 	.word	0x08007d0d
 8007c80:	08007d0d 	.word	0x08007d0d
 8007c84:	08007d0d 	.word	0x08007d0d
 8007c88:	08007d0d 	.word	0x08007d0d
 8007c8c:	08007d0d 	.word	0x08007d0d
 8007c90:	08007d0d 	.word	0x08007d0d
 8007c94:	08007d0d 	.word	0x08007d0d
 8007c98:	08007cf5 	.word	0x08007cf5
 8007c9c:	08007d0d 	.word	0x08007d0d
 8007ca0:	08007d0d 	.word	0x08007d0d
 8007ca4:	08007d0d 	.word	0x08007d0d
 8007ca8:	08007d0d 	.word	0x08007d0d
 8007cac:	08007d0d 	.word	0x08007d0d
 8007cb0:	08007d0d 	.word	0x08007d0d
 8007cb4:	08007d0d 	.word	0x08007d0d
 8007cb8:	08007cfd 	.word	0x08007cfd
 8007cbc:	08007d0d 	.word	0x08007d0d
 8007cc0:	08007d0d 	.word	0x08007d0d
 8007cc4:	08007d0d 	.word	0x08007d0d
 8007cc8:	08007d0d 	.word	0x08007d0d
 8007ccc:	08007d0d 	.word	0x08007d0d
 8007cd0:	08007d0d 	.word	0x08007d0d
 8007cd4:	08007d0d 	.word	0x08007d0d
 8007cd8:	08007d05 	.word	0x08007d05
 8007cdc:	2301      	movs	r3, #1
 8007cde:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007ce2:	e050      	b.n	8007d86 <UART_SetConfig+0x7ae>
 8007ce4:	2304      	movs	r3, #4
 8007ce6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007cea:	e04c      	b.n	8007d86 <UART_SetConfig+0x7ae>
 8007cec:	2308      	movs	r3, #8
 8007cee:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007cf2:	e048      	b.n	8007d86 <UART_SetConfig+0x7ae>
 8007cf4:	2310      	movs	r3, #16
 8007cf6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007cfa:	e044      	b.n	8007d86 <UART_SetConfig+0x7ae>
 8007cfc:	2320      	movs	r3, #32
 8007cfe:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007d02:	e040      	b.n	8007d86 <UART_SetConfig+0x7ae>
 8007d04:	2340      	movs	r3, #64	@ 0x40
 8007d06:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007d0a:	e03c      	b.n	8007d86 <UART_SetConfig+0x7ae>
 8007d0c:	2380      	movs	r3, #128	@ 0x80
 8007d0e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007d12:	e038      	b.n	8007d86 <UART_SetConfig+0x7ae>
 8007d14:	697b      	ldr	r3, [r7, #20]
 8007d16:	681b      	ldr	r3, [r3, #0]
 8007d18:	4a71      	ldr	r2, [pc, #452]	@ (8007ee0 <UART_SetConfig+0x908>)
 8007d1a:	4293      	cmp	r3, r2
 8007d1c:	d130      	bne.n	8007d80 <UART_SetConfig+0x7a8>
 8007d1e:	4b6f      	ldr	r3, [pc, #444]	@ (8007edc <UART_SetConfig+0x904>)
 8007d20:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007d22:	f003 0307 	and.w	r3, r3, #7
 8007d26:	2b05      	cmp	r3, #5
 8007d28:	d826      	bhi.n	8007d78 <UART_SetConfig+0x7a0>
 8007d2a:	a201      	add	r2, pc, #4	@ (adr r2, 8007d30 <UART_SetConfig+0x758>)
 8007d2c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007d30:	08007d49 	.word	0x08007d49
 8007d34:	08007d51 	.word	0x08007d51
 8007d38:	08007d59 	.word	0x08007d59
 8007d3c:	08007d61 	.word	0x08007d61
 8007d40:	08007d69 	.word	0x08007d69
 8007d44:	08007d71 	.word	0x08007d71
 8007d48:	2302      	movs	r3, #2
 8007d4a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007d4e:	e01a      	b.n	8007d86 <UART_SetConfig+0x7ae>
 8007d50:	2304      	movs	r3, #4
 8007d52:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007d56:	e016      	b.n	8007d86 <UART_SetConfig+0x7ae>
 8007d58:	2308      	movs	r3, #8
 8007d5a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007d5e:	e012      	b.n	8007d86 <UART_SetConfig+0x7ae>
 8007d60:	2310      	movs	r3, #16
 8007d62:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007d66:	e00e      	b.n	8007d86 <UART_SetConfig+0x7ae>
 8007d68:	2320      	movs	r3, #32
 8007d6a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007d6e:	e00a      	b.n	8007d86 <UART_SetConfig+0x7ae>
 8007d70:	2340      	movs	r3, #64	@ 0x40
 8007d72:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007d76:	e006      	b.n	8007d86 <UART_SetConfig+0x7ae>
 8007d78:	2380      	movs	r3, #128	@ 0x80
 8007d7a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007d7e:	e002      	b.n	8007d86 <UART_SetConfig+0x7ae>
 8007d80:	2380      	movs	r3, #128	@ 0x80
 8007d82:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8007d86:	697b      	ldr	r3, [r7, #20]
 8007d88:	681b      	ldr	r3, [r3, #0]
 8007d8a:	4a55      	ldr	r2, [pc, #340]	@ (8007ee0 <UART_SetConfig+0x908>)
 8007d8c:	4293      	cmp	r3, r2
 8007d8e:	f040 80f8 	bne.w	8007f82 <UART_SetConfig+0x9aa>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8007d92:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 8007d96:	2b20      	cmp	r3, #32
 8007d98:	dc46      	bgt.n	8007e28 <UART_SetConfig+0x850>
 8007d9a:	2b02      	cmp	r3, #2
 8007d9c:	db75      	blt.n	8007e8a <UART_SetConfig+0x8b2>
 8007d9e:	3b02      	subs	r3, #2
 8007da0:	2b1e      	cmp	r3, #30
 8007da2:	d872      	bhi.n	8007e8a <UART_SetConfig+0x8b2>
 8007da4:	a201      	add	r2, pc, #4	@ (adr r2, 8007dac <UART_SetConfig+0x7d4>)
 8007da6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007daa:	bf00      	nop
 8007dac:	08007e2f 	.word	0x08007e2f
 8007db0:	08007e8b 	.word	0x08007e8b
 8007db4:	08007e37 	.word	0x08007e37
 8007db8:	08007e8b 	.word	0x08007e8b
 8007dbc:	08007e8b 	.word	0x08007e8b
 8007dc0:	08007e8b 	.word	0x08007e8b
 8007dc4:	08007e47 	.word	0x08007e47
 8007dc8:	08007e8b 	.word	0x08007e8b
 8007dcc:	08007e8b 	.word	0x08007e8b
 8007dd0:	08007e8b 	.word	0x08007e8b
 8007dd4:	08007e8b 	.word	0x08007e8b
 8007dd8:	08007e8b 	.word	0x08007e8b
 8007ddc:	08007e8b 	.word	0x08007e8b
 8007de0:	08007e8b 	.word	0x08007e8b
 8007de4:	08007e57 	.word	0x08007e57
 8007de8:	08007e8b 	.word	0x08007e8b
 8007dec:	08007e8b 	.word	0x08007e8b
 8007df0:	08007e8b 	.word	0x08007e8b
 8007df4:	08007e8b 	.word	0x08007e8b
 8007df8:	08007e8b 	.word	0x08007e8b
 8007dfc:	08007e8b 	.word	0x08007e8b
 8007e00:	08007e8b 	.word	0x08007e8b
 8007e04:	08007e8b 	.word	0x08007e8b
 8007e08:	08007e8b 	.word	0x08007e8b
 8007e0c:	08007e8b 	.word	0x08007e8b
 8007e10:	08007e8b 	.word	0x08007e8b
 8007e14:	08007e8b 	.word	0x08007e8b
 8007e18:	08007e8b 	.word	0x08007e8b
 8007e1c:	08007e8b 	.word	0x08007e8b
 8007e20:	08007e8b 	.word	0x08007e8b
 8007e24:	08007e7d 	.word	0x08007e7d
 8007e28:	2b40      	cmp	r3, #64	@ 0x40
 8007e2a:	d02a      	beq.n	8007e82 <UART_SetConfig+0x8aa>
 8007e2c:	e02d      	b.n	8007e8a <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 8007e2e:	f7fd fb85 	bl	800553c <HAL_RCCEx_GetD3PCLK1Freq>
 8007e32:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8007e34:	e02f      	b.n	8007e96 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007e36:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8007e3a:	4618      	mov	r0, r3
 8007e3c:	f7fd fb94 	bl	8005568 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8007e40:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007e42:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007e44:	e027      	b.n	8007e96 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007e46:	f107 0318 	add.w	r3, r7, #24
 8007e4a:	4618      	mov	r0, r3
 8007e4c:	f7fd fce0 	bl	8005810 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8007e50:	69fb      	ldr	r3, [r7, #28]
 8007e52:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007e54:	e01f      	b.n	8007e96 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8007e56:	4b21      	ldr	r3, [pc, #132]	@ (8007edc <UART_SetConfig+0x904>)
 8007e58:	681b      	ldr	r3, [r3, #0]
 8007e5a:	f003 0320 	and.w	r3, r3, #32
 8007e5e:	2b00      	cmp	r3, #0
 8007e60:	d009      	beq.n	8007e76 <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8007e62:	4b1e      	ldr	r3, [pc, #120]	@ (8007edc <UART_SetConfig+0x904>)
 8007e64:	681b      	ldr	r3, [r3, #0]
 8007e66:	08db      	lsrs	r3, r3, #3
 8007e68:	f003 0303 	and.w	r3, r3, #3
 8007e6c:	4a1d      	ldr	r2, [pc, #116]	@ (8007ee4 <UART_SetConfig+0x90c>)
 8007e6e:	fa22 f303 	lsr.w	r3, r2, r3
 8007e72:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8007e74:	e00f      	b.n	8007e96 <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 8007e76:	4b1b      	ldr	r3, [pc, #108]	@ (8007ee4 <UART_SetConfig+0x90c>)
 8007e78:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007e7a:	e00c      	b.n	8007e96 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8007e7c:	4b1a      	ldr	r3, [pc, #104]	@ (8007ee8 <UART_SetConfig+0x910>)
 8007e7e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007e80:	e009      	b.n	8007e96 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007e82:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8007e86:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8007e88:	e005      	b.n	8007e96 <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 8007e8a:	2300      	movs	r3, #0
 8007e8c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 8007e8e:	2301      	movs	r3, #1
 8007e90:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 8007e94:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8007e96:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007e98:	2b00      	cmp	r3, #0
 8007e9a:	f000 81ee 	beq.w	800827a <UART_SetConfig+0xca2>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8007e9e:	697b      	ldr	r3, [r7, #20]
 8007ea0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007ea2:	4a12      	ldr	r2, [pc, #72]	@ (8007eec <UART_SetConfig+0x914>)
 8007ea4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007ea8:	461a      	mov	r2, r3
 8007eaa:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007eac:	fbb3 f3f2 	udiv	r3, r3, r2
 8007eb0:	633b      	str	r3, [r7, #48]	@ 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8007eb2:	697b      	ldr	r3, [r7, #20]
 8007eb4:	685a      	ldr	r2, [r3, #4]
 8007eb6:	4613      	mov	r3, r2
 8007eb8:	005b      	lsls	r3, r3, #1
 8007eba:	4413      	add	r3, r2
 8007ebc:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007ebe:	429a      	cmp	r2, r3
 8007ec0:	d305      	bcc.n	8007ece <UART_SetConfig+0x8f6>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8007ec2:	697b      	ldr	r3, [r7, #20]
 8007ec4:	685b      	ldr	r3, [r3, #4]
 8007ec6:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8007ec8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007eca:	429a      	cmp	r2, r3
 8007ecc:	d910      	bls.n	8007ef0 <UART_SetConfig+0x918>
      {
        ret = HAL_ERROR;
 8007ece:	2301      	movs	r3, #1
 8007ed0:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 8007ed4:	e1d1      	b.n	800827a <UART_SetConfig+0xca2>
 8007ed6:	bf00      	nop
 8007ed8:	40011c00 	.word	0x40011c00
 8007edc:	58024400 	.word	0x58024400
 8007ee0:	58000c00 	.word	0x58000c00
 8007ee4:	03d09000 	.word	0x03d09000
 8007ee8:	003d0900 	.word	0x003d0900
 8007eec:	0800b304 	.word	0x0800b304
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007ef0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007ef2:	2200      	movs	r2, #0
 8007ef4:	60bb      	str	r3, [r7, #8]
 8007ef6:	60fa      	str	r2, [r7, #12]
 8007ef8:	697b      	ldr	r3, [r7, #20]
 8007efa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007efc:	4ac0      	ldr	r2, [pc, #768]	@ (8008200 <UART_SetConfig+0xc28>)
 8007efe:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007f02:	b29b      	uxth	r3, r3
 8007f04:	2200      	movs	r2, #0
 8007f06:	603b      	str	r3, [r7, #0]
 8007f08:	607a      	str	r2, [r7, #4]
 8007f0a:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007f0e:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8007f12:	f7f8 fa55 	bl	80003c0 <__aeabi_uldivmod>
 8007f16:	4602      	mov	r2, r0
 8007f18:	460b      	mov	r3, r1
 8007f1a:	4610      	mov	r0, r2
 8007f1c:	4619      	mov	r1, r3
 8007f1e:	f04f 0200 	mov.w	r2, #0
 8007f22:	f04f 0300 	mov.w	r3, #0
 8007f26:	020b      	lsls	r3, r1, #8
 8007f28:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8007f2c:	0202      	lsls	r2, r0, #8
 8007f2e:	6979      	ldr	r1, [r7, #20]
 8007f30:	6849      	ldr	r1, [r1, #4]
 8007f32:	0849      	lsrs	r1, r1, #1
 8007f34:	2000      	movs	r0, #0
 8007f36:	460c      	mov	r4, r1
 8007f38:	4605      	mov	r5, r0
 8007f3a:	eb12 0804 	adds.w	r8, r2, r4
 8007f3e:	eb43 0905 	adc.w	r9, r3, r5
 8007f42:	697b      	ldr	r3, [r7, #20]
 8007f44:	685b      	ldr	r3, [r3, #4]
 8007f46:	2200      	movs	r2, #0
 8007f48:	469a      	mov	sl, r3
 8007f4a:	4693      	mov	fp, r2
 8007f4c:	4652      	mov	r2, sl
 8007f4e:	465b      	mov	r3, fp
 8007f50:	4640      	mov	r0, r8
 8007f52:	4649      	mov	r1, r9
 8007f54:	f7f8 fa34 	bl	80003c0 <__aeabi_uldivmod>
 8007f58:	4602      	mov	r2, r0
 8007f5a:	460b      	mov	r3, r1
 8007f5c:	4613      	mov	r3, r2
 8007f5e:	63bb      	str	r3, [r7, #56]	@ 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8007f60:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007f62:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8007f66:	d308      	bcc.n	8007f7a <UART_SetConfig+0x9a2>
 8007f68:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007f6a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8007f6e:	d204      	bcs.n	8007f7a <UART_SetConfig+0x9a2>
        {
          huart->Instance->BRR = usartdiv;
 8007f70:	697b      	ldr	r3, [r7, #20]
 8007f72:	681b      	ldr	r3, [r3, #0]
 8007f74:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8007f76:	60da      	str	r2, [r3, #12]
 8007f78:	e17f      	b.n	800827a <UART_SetConfig+0xca2>
        }
        else
        {
          ret = HAL_ERROR;
 8007f7a:	2301      	movs	r3, #1
 8007f7c:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 8007f80:	e17b      	b.n	800827a <UART_SetConfig+0xca2>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8007f82:	697b      	ldr	r3, [r7, #20]
 8007f84:	69db      	ldr	r3, [r3, #28]
 8007f86:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8007f8a:	f040 80bd 	bne.w	8008108 <UART_SetConfig+0xb30>
  {
    switch (clocksource)
 8007f8e:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 8007f92:	2b20      	cmp	r3, #32
 8007f94:	dc48      	bgt.n	8008028 <UART_SetConfig+0xa50>
 8007f96:	2b00      	cmp	r3, #0
 8007f98:	db7b      	blt.n	8008092 <UART_SetConfig+0xaba>
 8007f9a:	2b20      	cmp	r3, #32
 8007f9c:	d879      	bhi.n	8008092 <UART_SetConfig+0xaba>
 8007f9e:	a201      	add	r2, pc, #4	@ (adr r2, 8007fa4 <UART_SetConfig+0x9cc>)
 8007fa0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007fa4:	0800802f 	.word	0x0800802f
 8007fa8:	08008037 	.word	0x08008037
 8007fac:	08008093 	.word	0x08008093
 8007fb0:	08008093 	.word	0x08008093
 8007fb4:	0800803f 	.word	0x0800803f
 8007fb8:	08008093 	.word	0x08008093
 8007fbc:	08008093 	.word	0x08008093
 8007fc0:	08008093 	.word	0x08008093
 8007fc4:	0800804f 	.word	0x0800804f
 8007fc8:	08008093 	.word	0x08008093
 8007fcc:	08008093 	.word	0x08008093
 8007fd0:	08008093 	.word	0x08008093
 8007fd4:	08008093 	.word	0x08008093
 8007fd8:	08008093 	.word	0x08008093
 8007fdc:	08008093 	.word	0x08008093
 8007fe0:	08008093 	.word	0x08008093
 8007fe4:	0800805f 	.word	0x0800805f
 8007fe8:	08008093 	.word	0x08008093
 8007fec:	08008093 	.word	0x08008093
 8007ff0:	08008093 	.word	0x08008093
 8007ff4:	08008093 	.word	0x08008093
 8007ff8:	08008093 	.word	0x08008093
 8007ffc:	08008093 	.word	0x08008093
 8008000:	08008093 	.word	0x08008093
 8008004:	08008093 	.word	0x08008093
 8008008:	08008093 	.word	0x08008093
 800800c:	08008093 	.word	0x08008093
 8008010:	08008093 	.word	0x08008093
 8008014:	08008093 	.word	0x08008093
 8008018:	08008093 	.word	0x08008093
 800801c:	08008093 	.word	0x08008093
 8008020:	08008093 	.word	0x08008093
 8008024:	08008085 	.word	0x08008085
 8008028:	2b40      	cmp	r3, #64	@ 0x40
 800802a:	d02e      	beq.n	800808a <UART_SetConfig+0xab2>
 800802c:	e031      	b.n	8008092 <UART_SetConfig+0xaba>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800802e:	f7fc f8b9 	bl	80041a4 <HAL_RCC_GetPCLK1Freq>
 8008032:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8008034:	e033      	b.n	800809e <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8008036:	f7fc f8cb 	bl	80041d0 <HAL_RCC_GetPCLK2Freq>
 800803a:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800803c:	e02f      	b.n	800809e <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800803e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8008042:	4618      	mov	r0, r3
 8008044:	f7fd fa90 	bl	8005568 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8008048:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800804a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800804c:	e027      	b.n	800809e <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800804e:	f107 0318 	add.w	r3, r7, #24
 8008052:	4618      	mov	r0, r3
 8008054:	f7fd fbdc 	bl	8005810 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8008058:	69fb      	ldr	r3, [r7, #28]
 800805a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800805c:	e01f      	b.n	800809e <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800805e:	4b69      	ldr	r3, [pc, #420]	@ (8008204 <UART_SetConfig+0xc2c>)
 8008060:	681b      	ldr	r3, [r3, #0]
 8008062:	f003 0320 	and.w	r3, r3, #32
 8008066:	2b00      	cmp	r3, #0
 8008068:	d009      	beq.n	800807e <UART_SetConfig+0xaa6>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800806a:	4b66      	ldr	r3, [pc, #408]	@ (8008204 <UART_SetConfig+0xc2c>)
 800806c:	681b      	ldr	r3, [r3, #0]
 800806e:	08db      	lsrs	r3, r3, #3
 8008070:	f003 0303 	and.w	r3, r3, #3
 8008074:	4a64      	ldr	r2, [pc, #400]	@ (8008208 <UART_SetConfig+0xc30>)
 8008076:	fa22 f303 	lsr.w	r3, r2, r3
 800807a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800807c:	e00f      	b.n	800809e <UART_SetConfig+0xac6>
          pclk = (uint32_t) HSI_VALUE;
 800807e:	4b62      	ldr	r3, [pc, #392]	@ (8008208 <UART_SetConfig+0xc30>)
 8008080:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008082:	e00c      	b.n	800809e <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8008084:	4b61      	ldr	r3, [pc, #388]	@ (800820c <UART_SetConfig+0xc34>)
 8008086:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008088:	e009      	b.n	800809e <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800808a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800808e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008090:	e005      	b.n	800809e <UART_SetConfig+0xac6>
      default:
        pclk = 0U;
 8008092:	2300      	movs	r3, #0
 8008094:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 8008096:	2301      	movs	r3, #1
 8008098:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 800809c:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800809e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80080a0:	2b00      	cmp	r3, #0
 80080a2:	f000 80ea 	beq.w	800827a <UART_SetConfig+0xca2>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80080a6:	697b      	ldr	r3, [r7, #20]
 80080a8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80080aa:	4a55      	ldr	r2, [pc, #340]	@ (8008200 <UART_SetConfig+0xc28>)
 80080ac:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80080b0:	461a      	mov	r2, r3
 80080b2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80080b4:	fbb3 f3f2 	udiv	r3, r3, r2
 80080b8:	005a      	lsls	r2, r3, #1
 80080ba:	697b      	ldr	r3, [r7, #20]
 80080bc:	685b      	ldr	r3, [r3, #4]
 80080be:	085b      	lsrs	r3, r3, #1
 80080c0:	441a      	add	r2, r3
 80080c2:	697b      	ldr	r3, [r7, #20]
 80080c4:	685b      	ldr	r3, [r3, #4]
 80080c6:	fbb2 f3f3 	udiv	r3, r2, r3
 80080ca:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80080cc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80080ce:	2b0f      	cmp	r3, #15
 80080d0:	d916      	bls.n	8008100 <UART_SetConfig+0xb28>
 80080d2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80080d4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80080d8:	d212      	bcs.n	8008100 <UART_SetConfig+0xb28>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80080da:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80080dc:	b29b      	uxth	r3, r3
 80080de:	f023 030f 	bic.w	r3, r3, #15
 80080e2:	86fb      	strh	r3, [r7, #54]	@ 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80080e4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80080e6:	085b      	lsrs	r3, r3, #1
 80080e8:	b29b      	uxth	r3, r3
 80080ea:	f003 0307 	and.w	r3, r3, #7
 80080ee:	b29a      	uxth	r2, r3
 80080f0:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 80080f2:	4313      	orrs	r3, r2
 80080f4:	86fb      	strh	r3, [r7, #54]	@ 0x36
        huart->Instance->BRR = brrtemp;
 80080f6:	697b      	ldr	r3, [r7, #20]
 80080f8:	681b      	ldr	r3, [r3, #0]
 80080fa:	8efa      	ldrh	r2, [r7, #54]	@ 0x36
 80080fc:	60da      	str	r2, [r3, #12]
 80080fe:	e0bc      	b.n	800827a <UART_SetConfig+0xca2>
      }
      else
      {
        ret = HAL_ERROR;
 8008100:	2301      	movs	r3, #1
 8008102:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 8008106:	e0b8      	b.n	800827a <UART_SetConfig+0xca2>
      }
    }
  }
  else
  {
    switch (clocksource)
 8008108:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 800810c:	2b20      	cmp	r3, #32
 800810e:	dc4b      	bgt.n	80081a8 <UART_SetConfig+0xbd0>
 8008110:	2b00      	cmp	r3, #0
 8008112:	f2c0 8087 	blt.w	8008224 <UART_SetConfig+0xc4c>
 8008116:	2b20      	cmp	r3, #32
 8008118:	f200 8084 	bhi.w	8008224 <UART_SetConfig+0xc4c>
 800811c:	a201      	add	r2, pc, #4	@ (adr r2, 8008124 <UART_SetConfig+0xb4c>)
 800811e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008122:	bf00      	nop
 8008124:	080081af 	.word	0x080081af
 8008128:	080081b7 	.word	0x080081b7
 800812c:	08008225 	.word	0x08008225
 8008130:	08008225 	.word	0x08008225
 8008134:	080081bf 	.word	0x080081bf
 8008138:	08008225 	.word	0x08008225
 800813c:	08008225 	.word	0x08008225
 8008140:	08008225 	.word	0x08008225
 8008144:	080081cf 	.word	0x080081cf
 8008148:	08008225 	.word	0x08008225
 800814c:	08008225 	.word	0x08008225
 8008150:	08008225 	.word	0x08008225
 8008154:	08008225 	.word	0x08008225
 8008158:	08008225 	.word	0x08008225
 800815c:	08008225 	.word	0x08008225
 8008160:	08008225 	.word	0x08008225
 8008164:	080081df 	.word	0x080081df
 8008168:	08008225 	.word	0x08008225
 800816c:	08008225 	.word	0x08008225
 8008170:	08008225 	.word	0x08008225
 8008174:	08008225 	.word	0x08008225
 8008178:	08008225 	.word	0x08008225
 800817c:	08008225 	.word	0x08008225
 8008180:	08008225 	.word	0x08008225
 8008184:	08008225 	.word	0x08008225
 8008188:	08008225 	.word	0x08008225
 800818c:	08008225 	.word	0x08008225
 8008190:	08008225 	.word	0x08008225
 8008194:	08008225 	.word	0x08008225
 8008198:	08008225 	.word	0x08008225
 800819c:	08008225 	.word	0x08008225
 80081a0:	08008225 	.word	0x08008225
 80081a4:	08008217 	.word	0x08008217
 80081a8:	2b40      	cmp	r3, #64	@ 0x40
 80081aa:	d037      	beq.n	800821c <UART_SetConfig+0xc44>
 80081ac:	e03a      	b.n	8008224 <UART_SetConfig+0xc4c>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80081ae:	f7fb fff9 	bl	80041a4 <HAL_RCC_GetPCLK1Freq>
 80081b2:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 80081b4:	e03c      	b.n	8008230 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80081b6:	f7fc f80b 	bl	80041d0 <HAL_RCC_GetPCLK2Freq>
 80081ba:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 80081bc:	e038      	b.n	8008230 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80081be:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80081c2:	4618      	mov	r0, r3
 80081c4:	f7fd f9d0 	bl	8005568 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 80081c8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80081ca:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80081cc:	e030      	b.n	8008230 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80081ce:	f107 0318 	add.w	r3, r7, #24
 80081d2:	4618      	mov	r0, r3
 80081d4:	f7fd fb1c 	bl	8005810 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 80081d8:	69fb      	ldr	r3, [r7, #28]
 80081da:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80081dc:	e028      	b.n	8008230 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80081de:	4b09      	ldr	r3, [pc, #36]	@ (8008204 <UART_SetConfig+0xc2c>)
 80081e0:	681b      	ldr	r3, [r3, #0]
 80081e2:	f003 0320 	and.w	r3, r3, #32
 80081e6:	2b00      	cmp	r3, #0
 80081e8:	d012      	beq.n	8008210 <UART_SetConfig+0xc38>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 80081ea:	4b06      	ldr	r3, [pc, #24]	@ (8008204 <UART_SetConfig+0xc2c>)
 80081ec:	681b      	ldr	r3, [r3, #0]
 80081ee:	08db      	lsrs	r3, r3, #3
 80081f0:	f003 0303 	and.w	r3, r3, #3
 80081f4:	4a04      	ldr	r2, [pc, #16]	@ (8008208 <UART_SetConfig+0xc30>)
 80081f6:	fa22 f303 	lsr.w	r3, r2, r3
 80081fa:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 80081fc:	e018      	b.n	8008230 <UART_SetConfig+0xc58>
 80081fe:	bf00      	nop
 8008200:	0800b304 	.word	0x0800b304
 8008204:	58024400 	.word	0x58024400
 8008208:	03d09000 	.word	0x03d09000
 800820c:	003d0900 	.word	0x003d0900
          pclk = (uint32_t) HSI_VALUE;
 8008210:	4b24      	ldr	r3, [pc, #144]	@ (80082a4 <UART_SetConfig+0xccc>)
 8008212:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008214:	e00c      	b.n	8008230 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8008216:	4b24      	ldr	r3, [pc, #144]	@ (80082a8 <UART_SetConfig+0xcd0>)
 8008218:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800821a:	e009      	b.n	8008230 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800821c:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8008220:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008222:	e005      	b.n	8008230 <UART_SetConfig+0xc58>
      default:
        pclk = 0U;
 8008224:	2300      	movs	r3, #0
 8008226:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 8008228:	2301      	movs	r3, #1
 800822a:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 800822e:	bf00      	nop
    }

    if (pclk != 0U)
 8008230:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008232:	2b00      	cmp	r3, #0
 8008234:	d021      	beq.n	800827a <UART_SetConfig+0xca2>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8008236:	697b      	ldr	r3, [r7, #20]
 8008238:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800823a:	4a1c      	ldr	r2, [pc, #112]	@ (80082ac <UART_SetConfig+0xcd4>)
 800823c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008240:	461a      	mov	r2, r3
 8008242:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008244:	fbb3 f2f2 	udiv	r2, r3, r2
 8008248:	697b      	ldr	r3, [r7, #20]
 800824a:	685b      	ldr	r3, [r3, #4]
 800824c:	085b      	lsrs	r3, r3, #1
 800824e:	441a      	add	r2, r3
 8008250:	697b      	ldr	r3, [r7, #20]
 8008252:	685b      	ldr	r3, [r3, #4]
 8008254:	fbb2 f3f3 	udiv	r3, r2, r3
 8008258:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800825a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800825c:	2b0f      	cmp	r3, #15
 800825e:	d909      	bls.n	8008274 <UART_SetConfig+0xc9c>
 8008260:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008262:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8008266:	d205      	bcs.n	8008274 <UART_SetConfig+0xc9c>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8008268:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800826a:	b29a      	uxth	r2, r3
 800826c:	697b      	ldr	r3, [r7, #20]
 800826e:	681b      	ldr	r3, [r3, #0]
 8008270:	60da      	str	r2, [r3, #12]
 8008272:	e002      	b.n	800827a <UART_SetConfig+0xca2>
      }
      else
      {
        ret = HAL_ERROR;
 8008274:	2301      	movs	r3, #1
 8008276:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800827a:	697b      	ldr	r3, [r7, #20]
 800827c:	2201      	movs	r2, #1
 800827e:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 8008282:	697b      	ldr	r3, [r7, #20]
 8008284:	2201      	movs	r2, #1
 8008286:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800828a:	697b      	ldr	r3, [r7, #20]
 800828c:	2200      	movs	r2, #0
 800828e:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 8008290:	697b      	ldr	r3, [r7, #20]
 8008292:	2200      	movs	r2, #0
 8008294:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 8008296:	f897 3042 	ldrb.w	r3, [r7, #66]	@ 0x42
}
 800829a:	4618      	mov	r0, r3
 800829c:	3748      	adds	r7, #72	@ 0x48
 800829e:	46bd      	mov	sp, r7
 80082a0:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80082a4:	03d09000 	.word	0x03d09000
 80082a8:	003d0900 	.word	0x003d0900
 80082ac:	0800b304 	.word	0x0800b304

080082b0 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80082b0:	b480      	push	{r7}
 80082b2:	b083      	sub	sp, #12
 80082b4:	af00      	add	r7, sp, #0
 80082b6:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80082b8:	687b      	ldr	r3, [r7, #4]
 80082ba:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80082bc:	f003 0308 	and.w	r3, r3, #8
 80082c0:	2b00      	cmp	r3, #0
 80082c2:	d00a      	beq.n	80082da <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80082c4:	687b      	ldr	r3, [r7, #4]
 80082c6:	681b      	ldr	r3, [r3, #0]
 80082c8:	685b      	ldr	r3, [r3, #4]
 80082ca:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 80082ce:	687b      	ldr	r3, [r7, #4]
 80082d0:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80082d2:	687b      	ldr	r3, [r7, #4]
 80082d4:	681b      	ldr	r3, [r3, #0]
 80082d6:	430a      	orrs	r2, r1
 80082d8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80082da:	687b      	ldr	r3, [r7, #4]
 80082dc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80082de:	f003 0301 	and.w	r3, r3, #1
 80082e2:	2b00      	cmp	r3, #0
 80082e4:	d00a      	beq.n	80082fc <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80082e6:	687b      	ldr	r3, [r7, #4]
 80082e8:	681b      	ldr	r3, [r3, #0]
 80082ea:	685b      	ldr	r3, [r3, #4]
 80082ec:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 80082f0:	687b      	ldr	r3, [r7, #4]
 80082f2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80082f4:	687b      	ldr	r3, [r7, #4]
 80082f6:	681b      	ldr	r3, [r3, #0]
 80082f8:	430a      	orrs	r2, r1
 80082fa:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80082fc:	687b      	ldr	r3, [r7, #4]
 80082fe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008300:	f003 0302 	and.w	r3, r3, #2
 8008304:	2b00      	cmp	r3, #0
 8008306:	d00a      	beq.n	800831e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8008308:	687b      	ldr	r3, [r7, #4]
 800830a:	681b      	ldr	r3, [r3, #0]
 800830c:	685b      	ldr	r3, [r3, #4]
 800830e:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8008312:	687b      	ldr	r3, [r7, #4]
 8008314:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8008316:	687b      	ldr	r3, [r7, #4]
 8008318:	681b      	ldr	r3, [r3, #0]
 800831a:	430a      	orrs	r2, r1
 800831c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800831e:	687b      	ldr	r3, [r7, #4]
 8008320:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008322:	f003 0304 	and.w	r3, r3, #4
 8008326:	2b00      	cmp	r3, #0
 8008328:	d00a      	beq.n	8008340 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800832a:	687b      	ldr	r3, [r7, #4]
 800832c:	681b      	ldr	r3, [r3, #0]
 800832e:	685b      	ldr	r3, [r3, #4]
 8008330:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8008334:	687b      	ldr	r3, [r7, #4]
 8008336:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8008338:	687b      	ldr	r3, [r7, #4]
 800833a:	681b      	ldr	r3, [r3, #0]
 800833c:	430a      	orrs	r2, r1
 800833e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8008340:	687b      	ldr	r3, [r7, #4]
 8008342:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008344:	f003 0310 	and.w	r3, r3, #16
 8008348:	2b00      	cmp	r3, #0
 800834a:	d00a      	beq.n	8008362 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800834c:	687b      	ldr	r3, [r7, #4]
 800834e:	681b      	ldr	r3, [r3, #0]
 8008350:	689b      	ldr	r3, [r3, #8]
 8008352:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8008356:	687b      	ldr	r3, [r7, #4]
 8008358:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800835a:	687b      	ldr	r3, [r7, #4]
 800835c:	681b      	ldr	r3, [r3, #0]
 800835e:	430a      	orrs	r2, r1
 8008360:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8008362:	687b      	ldr	r3, [r7, #4]
 8008364:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008366:	f003 0320 	and.w	r3, r3, #32
 800836a:	2b00      	cmp	r3, #0
 800836c:	d00a      	beq.n	8008384 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800836e:	687b      	ldr	r3, [r7, #4]
 8008370:	681b      	ldr	r3, [r3, #0]
 8008372:	689b      	ldr	r3, [r3, #8]
 8008374:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8008378:	687b      	ldr	r3, [r7, #4]
 800837a:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800837c:	687b      	ldr	r3, [r7, #4]
 800837e:	681b      	ldr	r3, [r3, #0]
 8008380:	430a      	orrs	r2, r1
 8008382:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8008384:	687b      	ldr	r3, [r7, #4]
 8008386:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008388:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800838c:	2b00      	cmp	r3, #0
 800838e:	d01a      	beq.n	80083c6 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8008390:	687b      	ldr	r3, [r7, #4]
 8008392:	681b      	ldr	r3, [r3, #0]
 8008394:	685b      	ldr	r3, [r3, #4]
 8008396:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 800839a:	687b      	ldr	r3, [r7, #4]
 800839c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800839e:	687b      	ldr	r3, [r7, #4]
 80083a0:	681b      	ldr	r3, [r3, #0]
 80083a2:	430a      	orrs	r2, r1
 80083a4:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80083a6:	687b      	ldr	r3, [r7, #4]
 80083a8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80083aa:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80083ae:	d10a      	bne.n	80083c6 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80083b0:	687b      	ldr	r3, [r7, #4]
 80083b2:	681b      	ldr	r3, [r3, #0]
 80083b4:	685b      	ldr	r3, [r3, #4]
 80083b6:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 80083ba:	687b      	ldr	r3, [r7, #4]
 80083bc:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 80083be:	687b      	ldr	r3, [r7, #4]
 80083c0:	681b      	ldr	r3, [r3, #0]
 80083c2:	430a      	orrs	r2, r1
 80083c4:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80083c6:	687b      	ldr	r3, [r7, #4]
 80083c8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80083ca:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80083ce:	2b00      	cmp	r3, #0
 80083d0:	d00a      	beq.n	80083e8 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80083d2:	687b      	ldr	r3, [r7, #4]
 80083d4:	681b      	ldr	r3, [r3, #0]
 80083d6:	685b      	ldr	r3, [r3, #4]
 80083d8:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 80083dc:	687b      	ldr	r3, [r7, #4]
 80083de:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80083e0:	687b      	ldr	r3, [r7, #4]
 80083e2:	681b      	ldr	r3, [r3, #0]
 80083e4:	430a      	orrs	r2, r1
 80083e6:	605a      	str	r2, [r3, #4]
  }
}
 80083e8:	bf00      	nop
 80083ea:	370c      	adds	r7, #12
 80083ec:	46bd      	mov	sp, r7
 80083ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083f2:	4770      	bx	lr

080083f4 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80083f4:	b580      	push	{r7, lr}
 80083f6:	b098      	sub	sp, #96	@ 0x60
 80083f8:	af02      	add	r7, sp, #8
 80083fa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80083fc:	687b      	ldr	r3, [r7, #4]
 80083fe:	2200      	movs	r2, #0
 8008400:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8008404:	f7f9 f9c0 	bl	8001788 <HAL_GetTick>
 8008408:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800840a:	687b      	ldr	r3, [r7, #4]
 800840c:	681b      	ldr	r3, [r3, #0]
 800840e:	681b      	ldr	r3, [r3, #0]
 8008410:	f003 0308 	and.w	r3, r3, #8
 8008414:	2b08      	cmp	r3, #8
 8008416:	d12f      	bne.n	8008478 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8008418:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800841c:	9300      	str	r3, [sp, #0]
 800841e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8008420:	2200      	movs	r2, #0
 8008422:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8008426:	6878      	ldr	r0, [r7, #4]
 8008428:	f000 f88e 	bl	8008548 <UART_WaitOnFlagUntilTimeout>
 800842c:	4603      	mov	r3, r0
 800842e:	2b00      	cmp	r3, #0
 8008430:	d022      	beq.n	8008478 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8008432:	687b      	ldr	r3, [r7, #4]
 8008434:	681b      	ldr	r3, [r3, #0]
 8008436:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008438:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800843a:	e853 3f00 	ldrex	r3, [r3]
 800843e:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8008440:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008442:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8008446:	653b      	str	r3, [r7, #80]	@ 0x50
 8008448:	687b      	ldr	r3, [r7, #4]
 800844a:	681b      	ldr	r3, [r3, #0]
 800844c:	461a      	mov	r2, r3
 800844e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8008450:	647b      	str	r3, [r7, #68]	@ 0x44
 8008452:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008454:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8008456:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8008458:	e841 2300 	strex	r3, r2, [r1]
 800845c:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800845e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008460:	2b00      	cmp	r3, #0
 8008462:	d1e6      	bne.n	8008432 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8008464:	687b      	ldr	r3, [r7, #4]
 8008466:	2220      	movs	r2, #32
 8008468:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 800846c:	687b      	ldr	r3, [r7, #4]
 800846e:	2200      	movs	r2, #0
 8008470:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8008474:	2303      	movs	r3, #3
 8008476:	e063      	b.n	8008540 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8008478:	687b      	ldr	r3, [r7, #4]
 800847a:	681b      	ldr	r3, [r3, #0]
 800847c:	681b      	ldr	r3, [r3, #0]
 800847e:	f003 0304 	and.w	r3, r3, #4
 8008482:	2b04      	cmp	r3, #4
 8008484:	d149      	bne.n	800851a <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8008486:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800848a:	9300      	str	r3, [sp, #0]
 800848c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800848e:	2200      	movs	r2, #0
 8008490:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8008494:	6878      	ldr	r0, [r7, #4]
 8008496:	f000 f857 	bl	8008548 <UART_WaitOnFlagUntilTimeout>
 800849a:	4603      	mov	r3, r0
 800849c:	2b00      	cmp	r3, #0
 800849e:	d03c      	beq.n	800851a <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80084a0:	687b      	ldr	r3, [r7, #4]
 80084a2:	681b      	ldr	r3, [r3, #0]
 80084a4:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80084a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80084a8:	e853 3f00 	ldrex	r3, [r3]
 80084ac:	623b      	str	r3, [r7, #32]
   return(result);
 80084ae:	6a3b      	ldr	r3, [r7, #32]
 80084b0:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80084b4:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80084b6:	687b      	ldr	r3, [r7, #4]
 80084b8:	681b      	ldr	r3, [r3, #0]
 80084ba:	461a      	mov	r2, r3
 80084bc:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80084be:	633b      	str	r3, [r7, #48]	@ 0x30
 80084c0:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80084c2:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80084c4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80084c6:	e841 2300 	strex	r3, r2, [r1]
 80084ca:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80084cc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80084ce:	2b00      	cmp	r3, #0
 80084d0:	d1e6      	bne.n	80084a0 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80084d2:	687b      	ldr	r3, [r7, #4]
 80084d4:	681b      	ldr	r3, [r3, #0]
 80084d6:	3308      	adds	r3, #8
 80084d8:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80084da:	693b      	ldr	r3, [r7, #16]
 80084dc:	e853 3f00 	ldrex	r3, [r3]
 80084e0:	60fb      	str	r3, [r7, #12]
   return(result);
 80084e2:	68fb      	ldr	r3, [r7, #12]
 80084e4:	f023 0301 	bic.w	r3, r3, #1
 80084e8:	64bb      	str	r3, [r7, #72]	@ 0x48
 80084ea:	687b      	ldr	r3, [r7, #4]
 80084ec:	681b      	ldr	r3, [r3, #0]
 80084ee:	3308      	adds	r3, #8
 80084f0:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80084f2:	61fa      	str	r2, [r7, #28]
 80084f4:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80084f6:	69b9      	ldr	r1, [r7, #24]
 80084f8:	69fa      	ldr	r2, [r7, #28]
 80084fa:	e841 2300 	strex	r3, r2, [r1]
 80084fe:	617b      	str	r3, [r7, #20]
   return(result);
 8008500:	697b      	ldr	r3, [r7, #20]
 8008502:	2b00      	cmp	r3, #0
 8008504:	d1e5      	bne.n	80084d2 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 8008506:	687b      	ldr	r3, [r7, #4]
 8008508:	2220      	movs	r2, #32
 800850a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 800850e:	687b      	ldr	r3, [r7, #4]
 8008510:	2200      	movs	r2, #0
 8008512:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8008516:	2303      	movs	r3, #3
 8008518:	e012      	b.n	8008540 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800851a:	687b      	ldr	r3, [r7, #4]
 800851c:	2220      	movs	r2, #32
 800851e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8008522:	687b      	ldr	r3, [r7, #4]
 8008524:	2220      	movs	r2, #32
 8008526:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800852a:	687b      	ldr	r3, [r7, #4]
 800852c:	2200      	movs	r2, #0
 800852e:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8008530:	687b      	ldr	r3, [r7, #4]
 8008532:	2200      	movs	r2, #0
 8008534:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 8008536:	687b      	ldr	r3, [r7, #4]
 8008538:	2200      	movs	r2, #0
 800853a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800853e:	2300      	movs	r3, #0
}
 8008540:	4618      	mov	r0, r3
 8008542:	3758      	adds	r7, #88	@ 0x58
 8008544:	46bd      	mov	sp, r7
 8008546:	bd80      	pop	{r7, pc}

08008548 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8008548:	b580      	push	{r7, lr}
 800854a:	b084      	sub	sp, #16
 800854c:	af00      	add	r7, sp, #0
 800854e:	60f8      	str	r0, [r7, #12]
 8008550:	60b9      	str	r1, [r7, #8]
 8008552:	603b      	str	r3, [r7, #0]
 8008554:	4613      	mov	r3, r2
 8008556:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008558:	e04f      	b.n	80085fa <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800855a:	69bb      	ldr	r3, [r7, #24]
 800855c:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8008560:	d04b      	beq.n	80085fa <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008562:	f7f9 f911 	bl	8001788 <HAL_GetTick>
 8008566:	4602      	mov	r2, r0
 8008568:	683b      	ldr	r3, [r7, #0]
 800856a:	1ad3      	subs	r3, r2, r3
 800856c:	69ba      	ldr	r2, [r7, #24]
 800856e:	429a      	cmp	r2, r3
 8008570:	d302      	bcc.n	8008578 <UART_WaitOnFlagUntilTimeout+0x30>
 8008572:	69bb      	ldr	r3, [r7, #24]
 8008574:	2b00      	cmp	r3, #0
 8008576:	d101      	bne.n	800857c <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8008578:	2303      	movs	r3, #3
 800857a:	e04e      	b.n	800861a <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800857c:	68fb      	ldr	r3, [r7, #12]
 800857e:	681b      	ldr	r3, [r3, #0]
 8008580:	681b      	ldr	r3, [r3, #0]
 8008582:	f003 0304 	and.w	r3, r3, #4
 8008586:	2b00      	cmp	r3, #0
 8008588:	d037      	beq.n	80085fa <UART_WaitOnFlagUntilTimeout+0xb2>
 800858a:	68bb      	ldr	r3, [r7, #8]
 800858c:	2b80      	cmp	r3, #128	@ 0x80
 800858e:	d034      	beq.n	80085fa <UART_WaitOnFlagUntilTimeout+0xb2>
 8008590:	68bb      	ldr	r3, [r7, #8]
 8008592:	2b40      	cmp	r3, #64	@ 0x40
 8008594:	d031      	beq.n	80085fa <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8008596:	68fb      	ldr	r3, [r7, #12]
 8008598:	681b      	ldr	r3, [r3, #0]
 800859a:	69db      	ldr	r3, [r3, #28]
 800859c:	f003 0308 	and.w	r3, r3, #8
 80085a0:	2b08      	cmp	r3, #8
 80085a2:	d110      	bne.n	80085c6 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80085a4:	68fb      	ldr	r3, [r7, #12]
 80085a6:	681b      	ldr	r3, [r3, #0]
 80085a8:	2208      	movs	r2, #8
 80085aa:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80085ac:	68f8      	ldr	r0, [r7, #12]
 80085ae:	f000 f839 	bl	8008624 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80085b2:	68fb      	ldr	r3, [r7, #12]
 80085b4:	2208      	movs	r2, #8
 80085b6:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80085ba:	68fb      	ldr	r3, [r7, #12]
 80085bc:	2200      	movs	r2, #0
 80085be:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 80085c2:	2301      	movs	r3, #1
 80085c4:	e029      	b.n	800861a <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80085c6:	68fb      	ldr	r3, [r7, #12]
 80085c8:	681b      	ldr	r3, [r3, #0]
 80085ca:	69db      	ldr	r3, [r3, #28]
 80085cc:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80085d0:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80085d4:	d111      	bne.n	80085fa <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80085d6:	68fb      	ldr	r3, [r7, #12]
 80085d8:	681b      	ldr	r3, [r3, #0]
 80085da:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80085de:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80085e0:	68f8      	ldr	r0, [r7, #12]
 80085e2:	f000 f81f 	bl	8008624 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80085e6:	68fb      	ldr	r3, [r7, #12]
 80085e8:	2220      	movs	r2, #32
 80085ea:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80085ee:	68fb      	ldr	r3, [r7, #12]
 80085f0:	2200      	movs	r2, #0
 80085f2:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 80085f6:	2303      	movs	r3, #3
 80085f8:	e00f      	b.n	800861a <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80085fa:	68fb      	ldr	r3, [r7, #12]
 80085fc:	681b      	ldr	r3, [r3, #0]
 80085fe:	69da      	ldr	r2, [r3, #28]
 8008600:	68bb      	ldr	r3, [r7, #8]
 8008602:	4013      	ands	r3, r2
 8008604:	68ba      	ldr	r2, [r7, #8]
 8008606:	429a      	cmp	r2, r3
 8008608:	bf0c      	ite	eq
 800860a:	2301      	moveq	r3, #1
 800860c:	2300      	movne	r3, #0
 800860e:	b2db      	uxtb	r3, r3
 8008610:	461a      	mov	r2, r3
 8008612:	79fb      	ldrb	r3, [r7, #7]
 8008614:	429a      	cmp	r2, r3
 8008616:	d0a0      	beq.n	800855a <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8008618:	2300      	movs	r3, #0
}
 800861a:	4618      	mov	r0, r3
 800861c:	3710      	adds	r7, #16
 800861e:	46bd      	mov	sp, r7
 8008620:	bd80      	pop	{r7, pc}
	...

08008624 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8008624:	b480      	push	{r7}
 8008626:	b095      	sub	sp, #84	@ 0x54
 8008628:	af00      	add	r7, sp, #0
 800862a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800862c:	687b      	ldr	r3, [r7, #4]
 800862e:	681b      	ldr	r3, [r3, #0]
 8008630:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008632:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008634:	e853 3f00 	ldrex	r3, [r3]
 8008638:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800863a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800863c:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8008640:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8008642:	687b      	ldr	r3, [r7, #4]
 8008644:	681b      	ldr	r3, [r3, #0]
 8008646:	461a      	mov	r2, r3
 8008648:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800864a:	643b      	str	r3, [r7, #64]	@ 0x40
 800864c:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800864e:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8008650:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8008652:	e841 2300 	strex	r3, r2, [r1]
 8008656:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8008658:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800865a:	2b00      	cmp	r3, #0
 800865c:	d1e6      	bne.n	800862c <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800865e:	687b      	ldr	r3, [r7, #4]
 8008660:	681b      	ldr	r3, [r3, #0]
 8008662:	3308      	adds	r3, #8
 8008664:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008666:	6a3b      	ldr	r3, [r7, #32]
 8008668:	e853 3f00 	ldrex	r3, [r3]
 800866c:	61fb      	str	r3, [r7, #28]
   return(result);
 800866e:	69fa      	ldr	r2, [r7, #28]
 8008670:	4b1e      	ldr	r3, [pc, #120]	@ (80086ec <UART_EndRxTransfer+0xc8>)
 8008672:	4013      	ands	r3, r2
 8008674:	64bb      	str	r3, [r7, #72]	@ 0x48
 8008676:	687b      	ldr	r3, [r7, #4]
 8008678:	681b      	ldr	r3, [r3, #0]
 800867a:	3308      	adds	r3, #8
 800867c:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800867e:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8008680:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008682:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8008684:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8008686:	e841 2300 	strex	r3, r2, [r1]
 800868a:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800868c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800868e:	2b00      	cmp	r3, #0
 8008690:	d1e5      	bne.n	800865e <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008692:	687b      	ldr	r3, [r7, #4]
 8008694:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8008696:	2b01      	cmp	r3, #1
 8008698:	d118      	bne.n	80086cc <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800869a:	687b      	ldr	r3, [r7, #4]
 800869c:	681b      	ldr	r3, [r3, #0]
 800869e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80086a0:	68fb      	ldr	r3, [r7, #12]
 80086a2:	e853 3f00 	ldrex	r3, [r3]
 80086a6:	60bb      	str	r3, [r7, #8]
   return(result);
 80086a8:	68bb      	ldr	r3, [r7, #8]
 80086aa:	f023 0310 	bic.w	r3, r3, #16
 80086ae:	647b      	str	r3, [r7, #68]	@ 0x44
 80086b0:	687b      	ldr	r3, [r7, #4]
 80086b2:	681b      	ldr	r3, [r3, #0]
 80086b4:	461a      	mov	r2, r3
 80086b6:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80086b8:	61bb      	str	r3, [r7, #24]
 80086ba:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80086bc:	6979      	ldr	r1, [r7, #20]
 80086be:	69ba      	ldr	r2, [r7, #24]
 80086c0:	e841 2300 	strex	r3, r2, [r1]
 80086c4:	613b      	str	r3, [r7, #16]
   return(result);
 80086c6:	693b      	ldr	r3, [r7, #16]
 80086c8:	2b00      	cmp	r3, #0
 80086ca:	d1e6      	bne.n	800869a <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80086cc:	687b      	ldr	r3, [r7, #4]
 80086ce:	2220      	movs	r2, #32
 80086d0:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80086d4:	687b      	ldr	r3, [r7, #4]
 80086d6:	2200      	movs	r2, #0
 80086d8:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80086da:	687b      	ldr	r3, [r7, #4]
 80086dc:	2200      	movs	r2, #0
 80086de:	675a      	str	r2, [r3, #116]	@ 0x74
}
 80086e0:	bf00      	nop
 80086e2:	3754      	adds	r7, #84	@ 0x54
 80086e4:	46bd      	mov	sp, r7
 80086e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086ea:	4770      	bx	lr
 80086ec:	effffffe 	.word	0xeffffffe

080086f0 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80086f0:	b580      	push	{r7, lr}
 80086f2:	b084      	sub	sp, #16
 80086f4:	af00      	add	r7, sp, #0
 80086f6:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80086f8:	687b      	ldr	r3, [r7, #4]
 80086fa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80086fc:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 80086fe:	68fb      	ldr	r3, [r7, #12]
 8008700:	2200      	movs	r2, #0
 8008702:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8008706:	68f8      	ldr	r0, [r7, #12]
 8008708:	f7fe ff50 	bl	80075ac <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800870c:	bf00      	nop
 800870e:	3710      	adds	r7, #16
 8008710:	46bd      	mov	sp, r7
 8008712:	bd80      	pop	{r7, pc}

08008714 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8008714:	b580      	push	{r7, lr}
 8008716:	b088      	sub	sp, #32
 8008718:	af00      	add	r7, sp, #0
 800871a:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800871c:	687b      	ldr	r3, [r7, #4]
 800871e:	681b      	ldr	r3, [r3, #0]
 8008720:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008722:	68fb      	ldr	r3, [r7, #12]
 8008724:	e853 3f00 	ldrex	r3, [r3]
 8008728:	60bb      	str	r3, [r7, #8]
   return(result);
 800872a:	68bb      	ldr	r3, [r7, #8]
 800872c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8008730:	61fb      	str	r3, [r7, #28]
 8008732:	687b      	ldr	r3, [r7, #4]
 8008734:	681b      	ldr	r3, [r3, #0]
 8008736:	461a      	mov	r2, r3
 8008738:	69fb      	ldr	r3, [r7, #28]
 800873a:	61bb      	str	r3, [r7, #24]
 800873c:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800873e:	6979      	ldr	r1, [r7, #20]
 8008740:	69ba      	ldr	r2, [r7, #24]
 8008742:	e841 2300 	strex	r3, r2, [r1]
 8008746:	613b      	str	r3, [r7, #16]
   return(result);
 8008748:	693b      	ldr	r3, [r7, #16]
 800874a:	2b00      	cmp	r3, #0
 800874c:	d1e6      	bne.n	800871c <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800874e:	687b      	ldr	r3, [r7, #4]
 8008750:	2220      	movs	r2, #32
 8008752:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8008756:	687b      	ldr	r3, [r7, #4]
 8008758:	2200      	movs	r2, #0
 800875a:	679a      	str	r2, [r3, #120]	@ 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800875c:	6878      	ldr	r0, [r7, #4]
 800875e:	f7fe ff1b 	bl	8007598 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8008762:	bf00      	nop
 8008764:	3720      	adds	r7, #32
 8008766:	46bd      	mov	sp, r7
 8008768:	bd80      	pop	{r7, pc}

0800876a <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800876a:	b480      	push	{r7}
 800876c:	b083      	sub	sp, #12
 800876e:	af00      	add	r7, sp, #0
 8008770:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8008772:	bf00      	nop
 8008774:	370c      	adds	r7, #12
 8008776:	46bd      	mov	sp, r7
 8008778:	f85d 7b04 	ldr.w	r7, [sp], #4
 800877c:	4770      	bx	lr

0800877e <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 800877e:	b480      	push	{r7}
 8008780:	b083      	sub	sp, #12
 8008782:	af00      	add	r7, sp, #0
 8008784:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 8008786:	bf00      	nop
 8008788:	370c      	adds	r7, #12
 800878a:	46bd      	mov	sp, r7
 800878c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008790:	4770      	bx	lr

08008792 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 8008792:	b480      	push	{r7}
 8008794:	b083      	sub	sp, #12
 8008796:	af00      	add	r7, sp, #0
 8008798:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 800879a:	bf00      	nop
 800879c:	370c      	adds	r7, #12
 800879e:	46bd      	mov	sp, r7
 80087a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087a4:	4770      	bx	lr

080087a6 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 80087a6:	b480      	push	{r7}
 80087a8:	b085      	sub	sp, #20
 80087aa:	af00      	add	r7, sp, #0
 80087ac:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 80087ae:	687b      	ldr	r3, [r7, #4]
 80087b0:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 80087b4:	2b01      	cmp	r3, #1
 80087b6:	d101      	bne.n	80087bc <HAL_UARTEx_DisableFifoMode+0x16>
 80087b8:	2302      	movs	r3, #2
 80087ba:	e027      	b.n	800880c <HAL_UARTEx_DisableFifoMode+0x66>
 80087bc:	687b      	ldr	r3, [r7, #4]
 80087be:	2201      	movs	r2, #1
 80087c0:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80087c4:	687b      	ldr	r3, [r7, #4]
 80087c6:	2224      	movs	r2, #36	@ 0x24
 80087c8:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80087cc:	687b      	ldr	r3, [r7, #4]
 80087ce:	681b      	ldr	r3, [r3, #0]
 80087d0:	681b      	ldr	r3, [r3, #0]
 80087d2:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80087d4:	687b      	ldr	r3, [r7, #4]
 80087d6:	681b      	ldr	r3, [r3, #0]
 80087d8:	681a      	ldr	r2, [r3, #0]
 80087da:	687b      	ldr	r3, [r7, #4]
 80087dc:	681b      	ldr	r3, [r3, #0]
 80087de:	f022 0201 	bic.w	r2, r2, #1
 80087e2:	601a      	str	r2, [r3, #0]

  /* Disable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 80087e4:	68fb      	ldr	r3, [r7, #12]
 80087e6:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 80087ea:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 80087ec:	687b      	ldr	r3, [r7, #4]
 80087ee:	2200      	movs	r2, #0
 80087f0:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80087f2:	687b      	ldr	r3, [r7, #4]
 80087f4:	681b      	ldr	r3, [r3, #0]
 80087f6:	68fa      	ldr	r2, [r7, #12]
 80087f8:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80087fa:	687b      	ldr	r3, [r7, #4]
 80087fc:	2220      	movs	r2, #32
 80087fe:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8008802:	687b      	ldr	r3, [r7, #4]
 8008804:	2200      	movs	r2, #0
 8008806:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800880a:	2300      	movs	r3, #0
}
 800880c:	4618      	mov	r0, r3
 800880e:	3714      	adds	r7, #20
 8008810:	46bd      	mov	sp, r7
 8008812:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008816:	4770      	bx	lr

08008818 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8008818:	b580      	push	{r7, lr}
 800881a:	b084      	sub	sp, #16
 800881c:	af00      	add	r7, sp, #0
 800881e:	6078      	str	r0, [r7, #4]
 8008820:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8008822:	687b      	ldr	r3, [r7, #4]
 8008824:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8008828:	2b01      	cmp	r3, #1
 800882a:	d101      	bne.n	8008830 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800882c:	2302      	movs	r3, #2
 800882e:	e02d      	b.n	800888c <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8008830:	687b      	ldr	r3, [r7, #4]
 8008832:	2201      	movs	r2, #1
 8008834:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8008838:	687b      	ldr	r3, [r7, #4]
 800883a:	2224      	movs	r2, #36	@ 0x24
 800883c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8008840:	687b      	ldr	r3, [r7, #4]
 8008842:	681b      	ldr	r3, [r3, #0]
 8008844:	681b      	ldr	r3, [r3, #0]
 8008846:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8008848:	687b      	ldr	r3, [r7, #4]
 800884a:	681b      	ldr	r3, [r3, #0]
 800884c:	681a      	ldr	r2, [r3, #0]
 800884e:	687b      	ldr	r3, [r7, #4]
 8008850:	681b      	ldr	r3, [r3, #0]
 8008852:	f022 0201 	bic.w	r2, r2, #1
 8008856:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8008858:	687b      	ldr	r3, [r7, #4]
 800885a:	681b      	ldr	r3, [r3, #0]
 800885c:	689b      	ldr	r3, [r3, #8]
 800885e:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 8008862:	687b      	ldr	r3, [r7, #4]
 8008864:	681b      	ldr	r3, [r3, #0]
 8008866:	683a      	ldr	r2, [r7, #0]
 8008868:	430a      	orrs	r2, r1
 800886a:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800886c:	6878      	ldr	r0, [r7, #4]
 800886e:	f000 f84f 	bl	8008910 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8008872:	687b      	ldr	r3, [r7, #4]
 8008874:	681b      	ldr	r3, [r3, #0]
 8008876:	68fa      	ldr	r2, [r7, #12]
 8008878:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800887a:	687b      	ldr	r3, [r7, #4]
 800887c:	2220      	movs	r2, #32
 800887e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8008882:	687b      	ldr	r3, [r7, #4]
 8008884:	2200      	movs	r2, #0
 8008886:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800888a:	2300      	movs	r3, #0
}
 800888c:	4618      	mov	r0, r3
 800888e:	3710      	adds	r7, #16
 8008890:	46bd      	mov	sp, r7
 8008892:	bd80      	pop	{r7, pc}

08008894 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8008894:	b580      	push	{r7, lr}
 8008896:	b084      	sub	sp, #16
 8008898:	af00      	add	r7, sp, #0
 800889a:	6078      	str	r0, [r7, #4]
 800889c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800889e:	687b      	ldr	r3, [r7, #4]
 80088a0:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 80088a4:	2b01      	cmp	r3, #1
 80088a6:	d101      	bne.n	80088ac <HAL_UARTEx_SetRxFifoThreshold+0x18>
 80088a8:	2302      	movs	r3, #2
 80088aa:	e02d      	b.n	8008908 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 80088ac:	687b      	ldr	r3, [r7, #4]
 80088ae:	2201      	movs	r2, #1
 80088b0:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80088b4:	687b      	ldr	r3, [r7, #4]
 80088b6:	2224      	movs	r2, #36	@ 0x24
 80088b8:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80088bc:	687b      	ldr	r3, [r7, #4]
 80088be:	681b      	ldr	r3, [r3, #0]
 80088c0:	681b      	ldr	r3, [r3, #0]
 80088c2:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80088c4:	687b      	ldr	r3, [r7, #4]
 80088c6:	681b      	ldr	r3, [r3, #0]
 80088c8:	681a      	ldr	r2, [r3, #0]
 80088ca:	687b      	ldr	r3, [r7, #4]
 80088cc:	681b      	ldr	r3, [r3, #0]
 80088ce:	f022 0201 	bic.w	r2, r2, #1
 80088d2:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 80088d4:	687b      	ldr	r3, [r7, #4]
 80088d6:	681b      	ldr	r3, [r3, #0]
 80088d8:	689b      	ldr	r3, [r3, #8]
 80088da:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 80088de:	687b      	ldr	r3, [r7, #4]
 80088e0:	681b      	ldr	r3, [r3, #0]
 80088e2:	683a      	ldr	r2, [r7, #0]
 80088e4:	430a      	orrs	r2, r1
 80088e6:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80088e8:	6878      	ldr	r0, [r7, #4]
 80088ea:	f000 f811 	bl	8008910 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80088ee:	687b      	ldr	r3, [r7, #4]
 80088f0:	681b      	ldr	r3, [r3, #0]
 80088f2:	68fa      	ldr	r2, [r7, #12]
 80088f4:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80088f6:	687b      	ldr	r3, [r7, #4]
 80088f8:	2220      	movs	r2, #32
 80088fa:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80088fe:	687b      	ldr	r3, [r7, #4]
 8008900:	2200      	movs	r2, #0
 8008902:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8008906:	2300      	movs	r3, #0
}
 8008908:	4618      	mov	r0, r3
 800890a:	3710      	adds	r7, #16
 800890c:	46bd      	mov	sp, r7
 800890e:	bd80      	pop	{r7, pc}

08008910 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8008910:	b480      	push	{r7}
 8008912:	b085      	sub	sp, #20
 8008914:	af00      	add	r7, sp, #0
 8008916:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8008918:	687b      	ldr	r3, [r7, #4]
 800891a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800891c:	2b00      	cmp	r3, #0
 800891e:	d108      	bne.n	8008932 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8008920:	687b      	ldr	r3, [r7, #4]
 8008922:	2201      	movs	r2, #1
 8008924:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 8008928:	687b      	ldr	r3, [r7, #4]
 800892a:	2201      	movs	r2, #1
 800892c:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8008930:	e031      	b.n	8008996 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8008932:	2310      	movs	r3, #16
 8008934:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8008936:	2310      	movs	r3, #16
 8008938:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800893a:	687b      	ldr	r3, [r7, #4]
 800893c:	681b      	ldr	r3, [r3, #0]
 800893e:	689b      	ldr	r3, [r3, #8]
 8008940:	0e5b      	lsrs	r3, r3, #25
 8008942:	b2db      	uxtb	r3, r3
 8008944:	f003 0307 	and.w	r3, r3, #7
 8008948:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800894a:	687b      	ldr	r3, [r7, #4]
 800894c:	681b      	ldr	r3, [r3, #0]
 800894e:	689b      	ldr	r3, [r3, #8]
 8008950:	0f5b      	lsrs	r3, r3, #29
 8008952:	b2db      	uxtb	r3, r3
 8008954:	f003 0307 	and.w	r3, r3, #7
 8008958:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800895a:	7bbb      	ldrb	r3, [r7, #14]
 800895c:	7b3a      	ldrb	r2, [r7, #12]
 800895e:	4911      	ldr	r1, [pc, #68]	@ (80089a4 <UARTEx_SetNbDataToProcess+0x94>)
 8008960:	5c8a      	ldrb	r2, [r1, r2]
 8008962:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8008966:	7b3a      	ldrb	r2, [r7, #12]
 8008968:	490f      	ldr	r1, [pc, #60]	@ (80089a8 <UARTEx_SetNbDataToProcess+0x98>)
 800896a:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800896c:	fb93 f3f2 	sdiv	r3, r3, r2
 8008970:	b29a      	uxth	r2, r3
 8008972:	687b      	ldr	r3, [r7, #4]
 8008974:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8008978:	7bfb      	ldrb	r3, [r7, #15]
 800897a:	7b7a      	ldrb	r2, [r7, #13]
 800897c:	4909      	ldr	r1, [pc, #36]	@ (80089a4 <UARTEx_SetNbDataToProcess+0x94>)
 800897e:	5c8a      	ldrb	r2, [r1, r2]
 8008980:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8008984:	7b7a      	ldrb	r2, [r7, #13]
 8008986:	4908      	ldr	r1, [pc, #32]	@ (80089a8 <UARTEx_SetNbDataToProcess+0x98>)
 8008988:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800898a:	fb93 f3f2 	sdiv	r3, r3, r2
 800898e:	b29a      	uxth	r2, r3
 8008990:	687b      	ldr	r3, [r7, #4]
 8008992:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 8008996:	bf00      	nop
 8008998:	3714      	adds	r7, #20
 800899a:	46bd      	mov	sp, r7
 800899c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089a0:	4770      	bx	lr
 80089a2:	bf00      	nop
 80089a4:	0800b31c 	.word	0x0800b31c
 80089a8:	0800b324 	.word	0x0800b324

080089ac <__cvt>:
 80089ac:	b5f0      	push	{r4, r5, r6, r7, lr}
 80089ae:	ed2d 8b02 	vpush	{d8}
 80089b2:	eeb0 8b40 	vmov.f64	d8, d0
 80089b6:	b085      	sub	sp, #20
 80089b8:	4617      	mov	r7, r2
 80089ba:	9d0d      	ldr	r5, [sp, #52]	@ 0x34
 80089bc:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 80089be:	ee18 2a90 	vmov	r2, s17
 80089c2:	f025 0520 	bic.w	r5, r5, #32
 80089c6:	2a00      	cmp	r2, #0
 80089c8:	bfb6      	itet	lt
 80089ca:	222d      	movlt	r2, #45	@ 0x2d
 80089cc:	2200      	movge	r2, #0
 80089ce:	eeb1 8b40 	vneglt.f64	d8, d0
 80089d2:	2d46      	cmp	r5, #70	@ 0x46
 80089d4:	460c      	mov	r4, r1
 80089d6:	701a      	strb	r2, [r3, #0]
 80089d8:	d004      	beq.n	80089e4 <__cvt+0x38>
 80089da:	2d45      	cmp	r5, #69	@ 0x45
 80089dc:	d100      	bne.n	80089e0 <__cvt+0x34>
 80089de:	3401      	adds	r4, #1
 80089e0:	2102      	movs	r1, #2
 80089e2:	e000      	b.n	80089e6 <__cvt+0x3a>
 80089e4:	2103      	movs	r1, #3
 80089e6:	ab03      	add	r3, sp, #12
 80089e8:	9301      	str	r3, [sp, #4]
 80089ea:	ab02      	add	r3, sp, #8
 80089ec:	9300      	str	r3, [sp, #0]
 80089ee:	4622      	mov	r2, r4
 80089f0:	4633      	mov	r3, r6
 80089f2:	eeb0 0b48 	vmov.f64	d0, d8
 80089f6:	f000 fe0f 	bl	8009618 <_dtoa_r>
 80089fa:	2d47      	cmp	r5, #71	@ 0x47
 80089fc:	d114      	bne.n	8008a28 <__cvt+0x7c>
 80089fe:	07fb      	lsls	r3, r7, #31
 8008a00:	d50a      	bpl.n	8008a18 <__cvt+0x6c>
 8008a02:	1902      	adds	r2, r0, r4
 8008a04:	eeb5 8b40 	vcmp.f64	d8, #0.0
 8008a08:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008a0c:	bf08      	it	eq
 8008a0e:	9203      	streq	r2, [sp, #12]
 8008a10:	2130      	movs	r1, #48	@ 0x30
 8008a12:	9b03      	ldr	r3, [sp, #12]
 8008a14:	4293      	cmp	r3, r2
 8008a16:	d319      	bcc.n	8008a4c <__cvt+0xa0>
 8008a18:	9b03      	ldr	r3, [sp, #12]
 8008a1a:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8008a1c:	1a1b      	subs	r3, r3, r0
 8008a1e:	6013      	str	r3, [r2, #0]
 8008a20:	b005      	add	sp, #20
 8008a22:	ecbd 8b02 	vpop	{d8}
 8008a26:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008a28:	2d46      	cmp	r5, #70	@ 0x46
 8008a2a:	eb00 0204 	add.w	r2, r0, r4
 8008a2e:	d1e9      	bne.n	8008a04 <__cvt+0x58>
 8008a30:	7803      	ldrb	r3, [r0, #0]
 8008a32:	2b30      	cmp	r3, #48	@ 0x30
 8008a34:	d107      	bne.n	8008a46 <__cvt+0x9a>
 8008a36:	eeb5 8b40 	vcmp.f64	d8, #0.0
 8008a3a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008a3e:	bf1c      	itt	ne
 8008a40:	f1c4 0401 	rsbne	r4, r4, #1
 8008a44:	6034      	strne	r4, [r6, #0]
 8008a46:	6833      	ldr	r3, [r6, #0]
 8008a48:	441a      	add	r2, r3
 8008a4a:	e7db      	b.n	8008a04 <__cvt+0x58>
 8008a4c:	1c5c      	adds	r4, r3, #1
 8008a4e:	9403      	str	r4, [sp, #12]
 8008a50:	7019      	strb	r1, [r3, #0]
 8008a52:	e7de      	b.n	8008a12 <__cvt+0x66>

08008a54 <__exponent>:
 8008a54:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8008a56:	2900      	cmp	r1, #0
 8008a58:	bfba      	itte	lt
 8008a5a:	4249      	neglt	r1, r1
 8008a5c:	232d      	movlt	r3, #45	@ 0x2d
 8008a5e:	232b      	movge	r3, #43	@ 0x2b
 8008a60:	2909      	cmp	r1, #9
 8008a62:	7002      	strb	r2, [r0, #0]
 8008a64:	7043      	strb	r3, [r0, #1]
 8008a66:	dd29      	ble.n	8008abc <__exponent+0x68>
 8008a68:	f10d 0307 	add.w	r3, sp, #7
 8008a6c:	461d      	mov	r5, r3
 8008a6e:	270a      	movs	r7, #10
 8008a70:	461a      	mov	r2, r3
 8008a72:	fbb1 f6f7 	udiv	r6, r1, r7
 8008a76:	fb07 1416 	mls	r4, r7, r6, r1
 8008a7a:	3430      	adds	r4, #48	@ 0x30
 8008a7c:	f802 4c01 	strb.w	r4, [r2, #-1]
 8008a80:	460c      	mov	r4, r1
 8008a82:	2c63      	cmp	r4, #99	@ 0x63
 8008a84:	f103 33ff 	add.w	r3, r3, #4294967295	@ 0xffffffff
 8008a88:	4631      	mov	r1, r6
 8008a8a:	dcf1      	bgt.n	8008a70 <__exponent+0x1c>
 8008a8c:	3130      	adds	r1, #48	@ 0x30
 8008a8e:	1e94      	subs	r4, r2, #2
 8008a90:	f803 1c01 	strb.w	r1, [r3, #-1]
 8008a94:	1c41      	adds	r1, r0, #1
 8008a96:	4623      	mov	r3, r4
 8008a98:	42ab      	cmp	r3, r5
 8008a9a:	d30a      	bcc.n	8008ab2 <__exponent+0x5e>
 8008a9c:	f10d 0309 	add.w	r3, sp, #9
 8008aa0:	1a9b      	subs	r3, r3, r2
 8008aa2:	42ac      	cmp	r4, r5
 8008aa4:	bf88      	it	hi
 8008aa6:	2300      	movhi	r3, #0
 8008aa8:	3302      	adds	r3, #2
 8008aaa:	4403      	add	r3, r0
 8008aac:	1a18      	subs	r0, r3, r0
 8008aae:	b003      	add	sp, #12
 8008ab0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008ab2:	f813 6b01 	ldrb.w	r6, [r3], #1
 8008ab6:	f801 6f01 	strb.w	r6, [r1, #1]!
 8008aba:	e7ed      	b.n	8008a98 <__exponent+0x44>
 8008abc:	2330      	movs	r3, #48	@ 0x30
 8008abe:	3130      	adds	r1, #48	@ 0x30
 8008ac0:	7083      	strb	r3, [r0, #2]
 8008ac2:	70c1      	strb	r1, [r0, #3]
 8008ac4:	1d03      	adds	r3, r0, #4
 8008ac6:	e7f1      	b.n	8008aac <__exponent+0x58>

08008ac8 <_printf_float>:
 8008ac8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008acc:	b08d      	sub	sp, #52	@ 0x34
 8008ace:	460c      	mov	r4, r1
 8008ad0:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 8008ad4:	4616      	mov	r6, r2
 8008ad6:	461f      	mov	r7, r3
 8008ad8:	4605      	mov	r5, r0
 8008ada:	f000 fd03 	bl	80094e4 <_localeconv_r>
 8008ade:	f8d0 b000 	ldr.w	fp, [r0]
 8008ae2:	4658      	mov	r0, fp
 8008ae4:	f7f7 fc64 	bl	80003b0 <strlen>
 8008ae8:	2300      	movs	r3, #0
 8008aea:	930a      	str	r3, [sp, #40]	@ 0x28
 8008aec:	f8d8 3000 	ldr.w	r3, [r8]
 8008af0:	f894 9018 	ldrb.w	r9, [r4, #24]
 8008af4:	6822      	ldr	r2, [r4, #0]
 8008af6:	9005      	str	r0, [sp, #20]
 8008af8:	3307      	adds	r3, #7
 8008afa:	f023 0307 	bic.w	r3, r3, #7
 8008afe:	f103 0108 	add.w	r1, r3, #8
 8008b02:	f8c8 1000 	str.w	r1, [r8]
 8008b06:	ed93 0b00 	vldr	d0, [r3]
 8008b0a:	ed9f 6b97 	vldr	d6, [pc, #604]	@ 8008d68 <_printf_float+0x2a0>
 8008b0e:	eeb0 7bc0 	vabs.f64	d7, d0
 8008b12:	eeb4 7b46 	vcmp.f64	d7, d6
 8008b16:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008b1a:	ed84 0b12 	vstr	d0, [r4, #72]	@ 0x48
 8008b1e:	dd24      	ble.n	8008b6a <_printf_float+0xa2>
 8008b20:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 8008b24:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008b28:	d502      	bpl.n	8008b30 <_printf_float+0x68>
 8008b2a:	232d      	movs	r3, #45	@ 0x2d
 8008b2c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8008b30:	498f      	ldr	r1, [pc, #572]	@ (8008d70 <_printf_float+0x2a8>)
 8008b32:	4b90      	ldr	r3, [pc, #576]	@ (8008d74 <_printf_float+0x2ac>)
 8008b34:	f1b9 0f47 	cmp.w	r9, #71	@ 0x47
 8008b38:	bf8c      	ite	hi
 8008b3a:	4688      	movhi	r8, r1
 8008b3c:	4698      	movls	r8, r3
 8008b3e:	f022 0204 	bic.w	r2, r2, #4
 8008b42:	2303      	movs	r3, #3
 8008b44:	6123      	str	r3, [r4, #16]
 8008b46:	6022      	str	r2, [r4, #0]
 8008b48:	f04f 0a00 	mov.w	sl, #0
 8008b4c:	9700      	str	r7, [sp, #0]
 8008b4e:	4633      	mov	r3, r6
 8008b50:	aa0b      	add	r2, sp, #44	@ 0x2c
 8008b52:	4621      	mov	r1, r4
 8008b54:	4628      	mov	r0, r5
 8008b56:	f000 f9d1 	bl	8008efc <_printf_common>
 8008b5a:	3001      	adds	r0, #1
 8008b5c:	f040 8089 	bne.w	8008c72 <_printf_float+0x1aa>
 8008b60:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8008b64:	b00d      	add	sp, #52	@ 0x34
 8008b66:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008b6a:	eeb4 0b40 	vcmp.f64	d0, d0
 8008b6e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008b72:	d709      	bvc.n	8008b88 <_printf_float+0xc0>
 8008b74:	ee10 3a90 	vmov	r3, s1
 8008b78:	2b00      	cmp	r3, #0
 8008b7a:	bfbc      	itt	lt
 8008b7c:	232d      	movlt	r3, #45	@ 0x2d
 8008b7e:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 8008b82:	497d      	ldr	r1, [pc, #500]	@ (8008d78 <_printf_float+0x2b0>)
 8008b84:	4b7d      	ldr	r3, [pc, #500]	@ (8008d7c <_printf_float+0x2b4>)
 8008b86:	e7d5      	b.n	8008b34 <_printf_float+0x6c>
 8008b88:	6863      	ldr	r3, [r4, #4]
 8008b8a:	1c59      	adds	r1, r3, #1
 8008b8c:	f009 0adf 	and.w	sl, r9, #223	@ 0xdf
 8008b90:	d139      	bne.n	8008c06 <_printf_float+0x13e>
 8008b92:	2306      	movs	r3, #6
 8008b94:	6063      	str	r3, [r4, #4]
 8008b96:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8008b9a:	2300      	movs	r3, #0
 8008b9c:	6022      	str	r2, [r4, #0]
 8008b9e:	9303      	str	r3, [sp, #12]
 8008ba0:	ab0a      	add	r3, sp, #40	@ 0x28
 8008ba2:	e9cd 9301 	strd	r9, r3, [sp, #4]
 8008ba6:	ab09      	add	r3, sp, #36	@ 0x24
 8008ba8:	9300      	str	r3, [sp, #0]
 8008baa:	6861      	ldr	r1, [r4, #4]
 8008bac:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 8008bb0:	4628      	mov	r0, r5
 8008bb2:	f7ff fefb 	bl	80089ac <__cvt>
 8008bb6:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 8008bba:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8008bbc:	4680      	mov	r8, r0
 8008bbe:	d129      	bne.n	8008c14 <_printf_float+0x14c>
 8008bc0:	1cc8      	adds	r0, r1, #3
 8008bc2:	db02      	blt.n	8008bca <_printf_float+0x102>
 8008bc4:	6863      	ldr	r3, [r4, #4]
 8008bc6:	4299      	cmp	r1, r3
 8008bc8:	dd41      	ble.n	8008c4e <_printf_float+0x186>
 8008bca:	f1a9 0902 	sub.w	r9, r9, #2
 8008bce:	fa5f f989 	uxtb.w	r9, r9
 8008bd2:	3901      	subs	r1, #1
 8008bd4:	464a      	mov	r2, r9
 8008bd6:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 8008bda:	9109      	str	r1, [sp, #36]	@ 0x24
 8008bdc:	f7ff ff3a 	bl	8008a54 <__exponent>
 8008be0:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8008be2:	1813      	adds	r3, r2, r0
 8008be4:	2a01      	cmp	r2, #1
 8008be6:	4682      	mov	sl, r0
 8008be8:	6123      	str	r3, [r4, #16]
 8008bea:	dc02      	bgt.n	8008bf2 <_printf_float+0x12a>
 8008bec:	6822      	ldr	r2, [r4, #0]
 8008bee:	07d2      	lsls	r2, r2, #31
 8008bf0:	d501      	bpl.n	8008bf6 <_printf_float+0x12e>
 8008bf2:	3301      	adds	r3, #1
 8008bf4:	6123      	str	r3, [r4, #16]
 8008bf6:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 8008bfa:	2b00      	cmp	r3, #0
 8008bfc:	d0a6      	beq.n	8008b4c <_printf_float+0x84>
 8008bfe:	232d      	movs	r3, #45	@ 0x2d
 8008c00:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8008c04:	e7a2      	b.n	8008b4c <_printf_float+0x84>
 8008c06:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 8008c0a:	d1c4      	bne.n	8008b96 <_printf_float+0xce>
 8008c0c:	2b00      	cmp	r3, #0
 8008c0e:	d1c2      	bne.n	8008b96 <_printf_float+0xce>
 8008c10:	2301      	movs	r3, #1
 8008c12:	e7bf      	b.n	8008b94 <_printf_float+0xcc>
 8008c14:	f1b9 0f65 	cmp.w	r9, #101	@ 0x65
 8008c18:	d9db      	bls.n	8008bd2 <_printf_float+0x10a>
 8008c1a:	f1b9 0f66 	cmp.w	r9, #102	@ 0x66
 8008c1e:	d118      	bne.n	8008c52 <_printf_float+0x18a>
 8008c20:	2900      	cmp	r1, #0
 8008c22:	6863      	ldr	r3, [r4, #4]
 8008c24:	dd0b      	ble.n	8008c3e <_printf_float+0x176>
 8008c26:	6121      	str	r1, [r4, #16]
 8008c28:	b913      	cbnz	r3, 8008c30 <_printf_float+0x168>
 8008c2a:	6822      	ldr	r2, [r4, #0]
 8008c2c:	07d0      	lsls	r0, r2, #31
 8008c2e:	d502      	bpl.n	8008c36 <_printf_float+0x16e>
 8008c30:	3301      	adds	r3, #1
 8008c32:	440b      	add	r3, r1
 8008c34:	6123      	str	r3, [r4, #16]
 8008c36:	65a1      	str	r1, [r4, #88]	@ 0x58
 8008c38:	f04f 0a00 	mov.w	sl, #0
 8008c3c:	e7db      	b.n	8008bf6 <_printf_float+0x12e>
 8008c3e:	b913      	cbnz	r3, 8008c46 <_printf_float+0x17e>
 8008c40:	6822      	ldr	r2, [r4, #0]
 8008c42:	07d2      	lsls	r2, r2, #31
 8008c44:	d501      	bpl.n	8008c4a <_printf_float+0x182>
 8008c46:	3302      	adds	r3, #2
 8008c48:	e7f4      	b.n	8008c34 <_printf_float+0x16c>
 8008c4a:	2301      	movs	r3, #1
 8008c4c:	e7f2      	b.n	8008c34 <_printf_float+0x16c>
 8008c4e:	f04f 0967 	mov.w	r9, #103	@ 0x67
 8008c52:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8008c54:	4299      	cmp	r1, r3
 8008c56:	db05      	blt.n	8008c64 <_printf_float+0x19c>
 8008c58:	6823      	ldr	r3, [r4, #0]
 8008c5a:	6121      	str	r1, [r4, #16]
 8008c5c:	07d8      	lsls	r0, r3, #31
 8008c5e:	d5ea      	bpl.n	8008c36 <_printf_float+0x16e>
 8008c60:	1c4b      	adds	r3, r1, #1
 8008c62:	e7e7      	b.n	8008c34 <_printf_float+0x16c>
 8008c64:	2900      	cmp	r1, #0
 8008c66:	bfd4      	ite	le
 8008c68:	f1c1 0202 	rsble	r2, r1, #2
 8008c6c:	2201      	movgt	r2, #1
 8008c6e:	4413      	add	r3, r2
 8008c70:	e7e0      	b.n	8008c34 <_printf_float+0x16c>
 8008c72:	6823      	ldr	r3, [r4, #0]
 8008c74:	055a      	lsls	r2, r3, #21
 8008c76:	d407      	bmi.n	8008c88 <_printf_float+0x1c0>
 8008c78:	6923      	ldr	r3, [r4, #16]
 8008c7a:	4642      	mov	r2, r8
 8008c7c:	4631      	mov	r1, r6
 8008c7e:	4628      	mov	r0, r5
 8008c80:	47b8      	blx	r7
 8008c82:	3001      	adds	r0, #1
 8008c84:	d12a      	bne.n	8008cdc <_printf_float+0x214>
 8008c86:	e76b      	b.n	8008b60 <_printf_float+0x98>
 8008c88:	f1b9 0f65 	cmp.w	r9, #101	@ 0x65
 8008c8c:	f240 80e0 	bls.w	8008e50 <_printf_float+0x388>
 8008c90:	ed94 7b12 	vldr	d7, [r4, #72]	@ 0x48
 8008c94:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8008c98:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008c9c:	d133      	bne.n	8008d06 <_printf_float+0x23e>
 8008c9e:	4a38      	ldr	r2, [pc, #224]	@ (8008d80 <_printf_float+0x2b8>)
 8008ca0:	2301      	movs	r3, #1
 8008ca2:	4631      	mov	r1, r6
 8008ca4:	4628      	mov	r0, r5
 8008ca6:	47b8      	blx	r7
 8008ca8:	3001      	adds	r0, #1
 8008caa:	f43f af59 	beq.w	8008b60 <_printf_float+0x98>
 8008cae:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 8008cb2:	4543      	cmp	r3, r8
 8008cb4:	db02      	blt.n	8008cbc <_printf_float+0x1f4>
 8008cb6:	6823      	ldr	r3, [r4, #0]
 8008cb8:	07d8      	lsls	r0, r3, #31
 8008cba:	d50f      	bpl.n	8008cdc <_printf_float+0x214>
 8008cbc:	9b05      	ldr	r3, [sp, #20]
 8008cbe:	465a      	mov	r2, fp
 8008cc0:	4631      	mov	r1, r6
 8008cc2:	4628      	mov	r0, r5
 8008cc4:	47b8      	blx	r7
 8008cc6:	3001      	adds	r0, #1
 8008cc8:	f43f af4a 	beq.w	8008b60 <_printf_float+0x98>
 8008ccc:	f04f 0900 	mov.w	r9, #0
 8008cd0:	f108 38ff 	add.w	r8, r8, #4294967295	@ 0xffffffff
 8008cd4:	f104 0a1a 	add.w	sl, r4, #26
 8008cd8:	45c8      	cmp	r8, r9
 8008cda:	dc09      	bgt.n	8008cf0 <_printf_float+0x228>
 8008cdc:	6823      	ldr	r3, [r4, #0]
 8008cde:	079b      	lsls	r3, r3, #30
 8008ce0:	f100 8107 	bmi.w	8008ef2 <_printf_float+0x42a>
 8008ce4:	68e0      	ldr	r0, [r4, #12]
 8008ce6:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8008ce8:	4298      	cmp	r0, r3
 8008cea:	bfb8      	it	lt
 8008cec:	4618      	movlt	r0, r3
 8008cee:	e739      	b.n	8008b64 <_printf_float+0x9c>
 8008cf0:	2301      	movs	r3, #1
 8008cf2:	4652      	mov	r2, sl
 8008cf4:	4631      	mov	r1, r6
 8008cf6:	4628      	mov	r0, r5
 8008cf8:	47b8      	blx	r7
 8008cfa:	3001      	adds	r0, #1
 8008cfc:	f43f af30 	beq.w	8008b60 <_printf_float+0x98>
 8008d00:	f109 0901 	add.w	r9, r9, #1
 8008d04:	e7e8      	b.n	8008cd8 <_printf_float+0x210>
 8008d06:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008d08:	2b00      	cmp	r3, #0
 8008d0a:	dc3b      	bgt.n	8008d84 <_printf_float+0x2bc>
 8008d0c:	4a1c      	ldr	r2, [pc, #112]	@ (8008d80 <_printf_float+0x2b8>)
 8008d0e:	2301      	movs	r3, #1
 8008d10:	4631      	mov	r1, r6
 8008d12:	4628      	mov	r0, r5
 8008d14:	47b8      	blx	r7
 8008d16:	3001      	adds	r0, #1
 8008d18:	f43f af22 	beq.w	8008b60 <_printf_float+0x98>
 8008d1c:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 8008d20:	ea59 0303 	orrs.w	r3, r9, r3
 8008d24:	d102      	bne.n	8008d2c <_printf_float+0x264>
 8008d26:	6823      	ldr	r3, [r4, #0]
 8008d28:	07d9      	lsls	r1, r3, #31
 8008d2a:	d5d7      	bpl.n	8008cdc <_printf_float+0x214>
 8008d2c:	9b05      	ldr	r3, [sp, #20]
 8008d2e:	465a      	mov	r2, fp
 8008d30:	4631      	mov	r1, r6
 8008d32:	4628      	mov	r0, r5
 8008d34:	47b8      	blx	r7
 8008d36:	3001      	adds	r0, #1
 8008d38:	f43f af12 	beq.w	8008b60 <_printf_float+0x98>
 8008d3c:	f04f 0a00 	mov.w	sl, #0
 8008d40:	f104 0b1a 	add.w	fp, r4, #26
 8008d44:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008d46:	425b      	negs	r3, r3
 8008d48:	4553      	cmp	r3, sl
 8008d4a:	dc01      	bgt.n	8008d50 <_printf_float+0x288>
 8008d4c:	464b      	mov	r3, r9
 8008d4e:	e794      	b.n	8008c7a <_printf_float+0x1b2>
 8008d50:	2301      	movs	r3, #1
 8008d52:	465a      	mov	r2, fp
 8008d54:	4631      	mov	r1, r6
 8008d56:	4628      	mov	r0, r5
 8008d58:	47b8      	blx	r7
 8008d5a:	3001      	adds	r0, #1
 8008d5c:	f43f af00 	beq.w	8008b60 <_printf_float+0x98>
 8008d60:	f10a 0a01 	add.w	sl, sl, #1
 8008d64:	e7ee      	b.n	8008d44 <_printf_float+0x27c>
 8008d66:	bf00      	nop
 8008d68:	ffffffff 	.word	0xffffffff
 8008d6c:	7fefffff 	.word	0x7fefffff
 8008d70:	0800b330 	.word	0x0800b330
 8008d74:	0800b32c 	.word	0x0800b32c
 8008d78:	0800b338 	.word	0x0800b338
 8008d7c:	0800b334 	.word	0x0800b334
 8008d80:	0800b33c 	.word	0x0800b33c
 8008d84:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8008d86:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8008d8a:	4553      	cmp	r3, sl
 8008d8c:	bfa8      	it	ge
 8008d8e:	4653      	movge	r3, sl
 8008d90:	2b00      	cmp	r3, #0
 8008d92:	4699      	mov	r9, r3
 8008d94:	dc37      	bgt.n	8008e06 <_printf_float+0x33e>
 8008d96:	2300      	movs	r3, #0
 8008d98:	9307      	str	r3, [sp, #28]
 8008d9a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8008d9e:	f104 021a 	add.w	r2, r4, #26
 8008da2:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8008da4:	9907      	ldr	r1, [sp, #28]
 8008da6:	9306      	str	r3, [sp, #24]
 8008da8:	eba3 0309 	sub.w	r3, r3, r9
 8008dac:	428b      	cmp	r3, r1
 8008dae:	dc31      	bgt.n	8008e14 <_printf_float+0x34c>
 8008db0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008db2:	459a      	cmp	sl, r3
 8008db4:	dc3b      	bgt.n	8008e2e <_printf_float+0x366>
 8008db6:	6823      	ldr	r3, [r4, #0]
 8008db8:	07da      	lsls	r2, r3, #31
 8008dba:	d438      	bmi.n	8008e2e <_printf_float+0x366>
 8008dbc:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008dbe:	ebaa 0903 	sub.w	r9, sl, r3
 8008dc2:	9b06      	ldr	r3, [sp, #24]
 8008dc4:	ebaa 0303 	sub.w	r3, sl, r3
 8008dc8:	4599      	cmp	r9, r3
 8008dca:	bfa8      	it	ge
 8008dcc:	4699      	movge	r9, r3
 8008dce:	f1b9 0f00 	cmp.w	r9, #0
 8008dd2:	dc34      	bgt.n	8008e3e <_printf_float+0x376>
 8008dd4:	f04f 0800 	mov.w	r8, #0
 8008dd8:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8008ddc:	f104 0b1a 	add.w	fp, r4, #26
 8008de0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008de2:	ebaa 0303 	sub.w	r3, sl, r3
 8008de6:	eba3 0309 	sub.w	r3, r3, r9
 8008dea:	4543      	cmp	r3, r8
 8008dec:	f77f af76 	ble.w	8008cdc <_printf_float+0x214>
 8008df0:	2301      	movs	r3, #1
 8008df2:	465a      	mov	r2, fp
 8008df4:	4631      	mov	r1, r6
 8008df6:	4628      	mov	r0, r5
 8008df8:	47b8      	blx	r7
 8008dfa:	3001      	adds	r0, #1
 8008dfc:	f43f aeb0 	beq.w	8008b60 <_printf_float+0x98>
 8008e00:	f108 0801 	add.w	r8, r8, #1
 8008e04:	e7ec      	b.n	8008de0 <_printf_float+0x318>
 8008e06:	4642      	mov	r2, r8
 8008e08:	4631      	mov	r1, r6
 8008e0a:	4628      	mov	r0, r5
 8008e0c:	47b8      	blx	r7
 8008e0e:	3001      	adds	r0, #1
 8008e10:	d1c1      	bne.n	8008d96 <_printf_float+0x2ce>
 8008e12:	e6a5      	b.n	8008b60 <_printf_float+0x98>
 8008e14:	2301      	movs	r3, #1
 8008e16:	4631      	mov	r1, r6
 8008e18:	4628      	mov	r0, r5
 8008e1a:	9206      	str	r2, [sp, #24]
 8008e1c:	47b8      	blx	r7
 8008e1e:	3001      	adds	r0, #1
 8008e20:	f43f ae9e 	beq.w	8008b60 <_printf_float+0x98>
 8008e24:	9b07      	ldr	r3, [sp, #28]
 8008e26:	9a06      	ldr	r2, [sp, #24]
 8008e28:	3301      	adds	r3, #1
 8008e2a:	9307      	str	r3, [sp, #28]
 8008e2c:	e7b9      	b.n	8008da2 <_printf_float+0x2da>
 8008e2e:	9b05      	ldr	r3, [sp, #20]
 8008e30:	465a      	mov	r2, fp
 8008e32:	4631      	mov	r1, r6
 8008e34:	4628      	mov	r0, r5
 8008e36:	47b8      	blx	r7
 8008e38:	3001      	adds	r0, #1
 8008e3a:	d1bf      	bne.n	8008dbc <_printf_float+0x2f4>
 8008e3c:	e690      	b.n	8008b60 <_printf_float+0x98>
 8008e3e:	9a06      	ldr	r2, [sp, #24]
 8008e40:	464b      	mov	r3, r9
 8008e42:	4442      	add	r2, r8
 8008e44:	4631      	mov	r1, r6
 8008e46:	4628      	mov	r0, r5
 8008e48:	47b8      	blx	r7
 8008e4a:	3001      	adds	r0, #1
 8008e4c:	d1c2      	bne.n	8008dd4 <_printf_float+0x30c>
 8008e4e:	e687      	b.n	8008b60 <_printf_float+0x98>
 8008e50:	f8dd 9028 	ldr.w	r9, [sp, #40]	@ 0x28
 8008e54:	f1b9 0f01 	cmp.w	r9, #1
 8008e58:	dc01      	bgt.n	8008e5e <_printf_float+0x396>
 8008e5a:	07db      	lsls	r3, r3, #31
 8008e5c:	d536      	bpl.n	8008ecc <_printf_float+0x404>
 8008e5e:	2301      	movs	r3, #1
 8008e60:	4642      	mov	r2, r8
 8008e62:	4631      	mov	r1, r6
 8008e64:	4628      	mov	r0, r5
 8008e66:	47b8      	blx	r7
 8008e68:	3001      	adds	r0, #1
 8008e6a:	f43f ae79 	beq.w	8008b60 <_printf_float+0x98>
 8008e6e:	9b05      	ldr	r3, [sp, #20]
 8008e70:	465a      	mov	r2, fp
 8008e72:	4631      	mov	r1, r6
 8008e74:	4628      	mov	r0, r5
 8008e76:	47b8      	blx	r7
 8008e78:	3001      	adds	r0, #1
 8008e7a:	f43f ae71 	beq.w	8008b60 <_printf_float+0x98>
 8008e7e:	ed94 7b12 	vldr	d7, [r4, #72]	@ 0x48
 8008e82:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8008e86:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008e8a:	f109 39ff 	add.w	r9, r9, #4294967295	@ 0xffffffff
 8008e8e:	d018      	beq.n	8008ec2 <_printf_float+0x3fa>
 8008e90:	464b      	mov	r3, r9
 8008e92:	f108 0201 	add.w	r2, r8, #1
 8008e96:	4631      	mov	r1, r6
 8008e98:	4628      	mov	r0, r5
 8008e9a:	47b8      	blx	r7
 8008e9c:	3001      	adds	r0, #1
 8008e9e:	d10c      	bne.n	8008eba <_printf_float+0x3f2>
 8008ea0:	e65e      	b.n	8008b60 <_printf_float+0x98>
 8008ea2:	2301      	movs	r3, #1
 8008ea4:	465a      	mov	r2, fp
 8008ea6:	4631      	mov	r1, r6
 8008ea8:	4628      	mov	r0, r5
 8008eaa:	47b8      	blx	r7
 8008eac:	3001      	adds	r0, #1
 8008eae:	f43f ae57 	beq.w	8008b60 <_printf_float+0x98>
 8008eb2:	f108 0801 	add.w	r8, r8, #1
 8008eb6:	45c8      	cmp	r8, r9
 8008eb8:	dbf3      	blt.n	8008ea2 <_printf_float+0x3da>
 8008eba:	4653      	mov	r3, sl
 8008ebc:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 8008ec0:	e6dc      	b.n	8008c7c <_printf_float+0x1b4>
 8008ec2:	f04f 0800 	mov.w	r8, #0
 8008ec6:	f104 0b1a 	add.w	fp, r4, #26
 8008eca:	e7f4      	b.n	8008eb6 <_printf_float+0x3ee>
 8008ecc:	2301      	movs	r3, #1
 8008ece:	4642      	mov	r2, r8
 8008ed0:	e7e1      	b.n	8008e96 <_printf_float+0x3ce>
 8008ed2:	2301      	movs	r3, #1
 8008ed4:	464a      	mov	r2, r9
 8008ed6:	4631      	mov	r1, r6
 8008ed8:	4628      	mov	r0, r5
 8008eda:	47b8      	blx	r7
 8008edc:	3001      	adds	r0, #1
 8008ede:	f43f ae3f 	beq.w	8008b60 <_printf_float+0x98>
 8008ee2:	f108 0801 	add.w	r8, r8, #1
 8008ee6:	68e3      	ldr	r3, [r4, #12]
 8008ee8:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8008eea:	1a5b      	subs	r3, r3, r1
 8008eec:	4543      	cmp	r3, r8
 8008eee:	dcf0      	bgt.n	8008ed2 <_printf_float+0x40a>
 8008ef0:	e6f8      	b.n	8008ce4 <_printf_float+0x21c>
 8008ef2:	f04f 0800 	mov.w	r8, #0
 8008ef6:	f104 0919 	add.w	r9, r4, #25
 8008efa:	e7f4      	b.n	8008ee6 <_printf_float+0x41e>

08008efc <_printf_common>:
 8008efc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008f00:	4616      	mov	r6, r2
 8008f02:	4698      	mov	r8, r3
 8008f04:	688a      	ldr	r2, [r1, #8]
 8008f06:	690b      	ldr	r3, [r1, #16]
 8008f08:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8008f0c:	4293      	cmp	r3, r2
 8008f0e:	bfb8      	it	lt
 8008f10:	4613      	movlt	r3, r2
 8008f12:	6033      	str	r3, [r6, #0]
 8008f14:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8008f18:	4607      	mov	r7, r0
 8008f1a:	460c      	mov	r4, r1
 8008f1c:	b10a      	cbz	r2, 8008f22 <_printf_common+0x26>
 8008f1e:	3301      	adds	r3, #1
 8008f20:	6033      	str	r3, [r6, #0]
 8008f22:	6823      	ldr	r3, [r4, #0]
 8008f24:	0699      	lsls	r1, r3, #26
 8008f26:	bf42      	ittt	mi
 8008f28:	6833      	ldrmi	r3, [r6, #0]
 8008f2a:	3302      	addmi	r3, #2
 8008f2c:	6033      	strmi	r3, [r6, #0]
 8008f2e:	6825      	ldr	r5, [r4, #0]
 8008f30:	f015 0506 	ands.w	r5, r5, #6
 8008f34:	d106      	bne.n	8008f44 <_printf_common+0x48>
 8008f36:	f104 0a19 	add.w	sl, r4, #25
 8008f3a:	68e3      	ldr	r3, [r4, #12]
 8008f3c:	6832      	ldr	r2, [r6, #0]
 8008f3e:	1a9b      	subs	r3, r3, r2
 8008f40:	42ab      	cmp	r3, r5
 8008f42:	dc26      	bgt.n	8008f92 <_printf_common+0x96>
 8008f44:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8008f48:	6822      	ldr	r2, [r4, #0]
 8008f4a:	3b00      	subs	r3, #0
 8008f4c:	bf18      	it	ne
 8008f4e:	2301      	movne	r3, #1
 8008f50:	0692      	lsls	r2, r2, #26
 8008f52:	d42b      	bmi.n	8008fac <_printf_common+0xb0>
 8008f54:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8008f58:	4641      	mov	r1, r8
 8008f5a:	4638      	mov	r0, r7
 8008f5c:	47c8      	blx	r9
 8008f5e:	3001      	adds	r0, #1
 8008f60:	d01e      	beq.n	8008fa0 <_printf_common+0xa4>
 8008f62:	6823      	ldr	r3, [r4, #0]
 8008f64:	6922      	ldr	r2, [r4, #16]
 8008f66:	f003 0306 	and.w	r3, r3, #6
 8008f6a:	2b04      	cmp	r3, #4
 8008f6c:	bf02      	ittt	eq
 8008f6e:	68e5      	ldreq	r5, [r4, #12]
 8008f70:	6833      	ldreq	r3, [r6, #0]
 8008f72:	1aed      	subeq	r5, r5, r3
 8008f74:	68a3      	ldr	r3, [r4, #8]
 8008f76:	bf0c      	ite	eq
 8008f78:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8008f7c:	2500      	movne	r5, #0
 8008f7e:	4293      	cmp	r3, r2
 8008f80:	bfc4      	itt	gt
 8008f82:	1a9b      	subgt	r3, r3, r2
 8008f84:	18ed      	addgt	r5, r5, r3
 8008f86:	2600      	movs	r6, #0
 8008f88:	341a      	adds	r4, #26
 8008f8a:	42b5      	cmp	r5, r6
 8008f8c:	d11a      	bne.n	8008fc4 <_printf_common+0xc8>
 8008f8e:	2000      	movs	r0, #0
 8008f90:	e008      	b.n	8008fa4 <_printf_common+0xa8>
 8008f92:	2301      	movs	r3, #1
 8008f94:	4652      	mov	r2, sl
 8008f96:	4641      	mov	r1, r8
 8008f98:	4638      	mov	r0, r7
 8008f9a:	47c8      	blx	r9
 8008f9c:	3001      	adds	r0, #1
 8008f9e:	d103      	bne.n	8008fa8 <_printf_common+0xac>
 8008fa0:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8008fa4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008fa8:	3501      	adds	r5, #1
 8008faa:	e7c6      	b.n	8008f3a <_printf_common+0x3e>
 8008fac:	18e1      	adds	r1, r4, r3
 8008fae:	1c5a      	adds	r2, r3, #1
 8008fb0:	2030      	movs	r0, #48	@ 0x30
 8008fb2:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8008fb6:	4422      	add	r2, r4
 8008fb8:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8008fbc:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8008fc0:	3302      	adds	r3, #2
 8008fc2:	e7c7      	b.n	8008f54 <_printf_common+0x58>
 8008fc4:	2301      	movs	r3, #1
 8008fc6:	4622      	mov	r2, r4
 8008fc8:	4641      	mov	r1, r8
 8008fca:	4638      	mov	r0, r7
 8008fcc:	47c8      	blx	r9
 8008fce:	3001      	adds	r0, #1
 8008fd0:	d0e6      	beq.n	8008fa0 <_printf_common+0xa4>
 8008fd2:	3601      	adds	r6, #1
 8008fd4:	e7d9      	b.n	8008f8a <_printf_common+0x8e>
	...

08008fd8 <_printf_i>:
 8008fd8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8008fdc:	7e0f      	ldrb	r7, [r1, #24]
 8008fde:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8008fe0:	2f78      	cmp	r7, #120	@ 0x78
 8008fe2:	4691      	mov	r9, r2
 8008fe4:	4680      	mov	r8, r0
 8008fe6:	460c      	mov	r4, r1
 8008fe8:	469a      	mov	sl, r3
 8008fea:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8008fee:	d807      	bhi.n	8009000 <_printf_i+0x28>
 8008ff0:	2f62      	cmp	r7, #98	@ 0x62
 8008ff2:	d80a      	bhi.n	800900a <_printf_i+0x32>
 8008ff4:	2f00      	cmp	r7, #0
 8008ff6:	f000 80d1 	beq.w	800919c <_printf_i+0x1c4>
 8008ffa:	2f58      	cmp	r7, #88	@ 0x58
 8008ffc:	f000 80b8 	beq.w	8009170 <_printf_i+0x198>
 8009000:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8009004:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8009008:	e03a      	b.n	8009080 <_printf_i+0xa8>
 800900a:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800900e:	2b15      	cmp	r3, #21
 8009010:	d8f6      	bhi.n	8009000 <_printf_i+0x28>
 8009012:	a101      	add	r1, pc, #4	@ (adr r1, 8009018 <_printf_i+0x40>)
 8009014:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8009018:	08009071 	.word	0x08009071
 800901c:	08009085 	.word	0x08009085
 8009020:	08009001 	.word	0x08009001
 8009024:	08009001 	.word	0x08009001
 8009028:	08009001 	.word	0x08009001
 800902c:	08009001 	.word	0x08009001
 8009030:	08009085 	.word	0x08009085
 8009034:	08009001 	.word	0x08009001
 8009038:	08009001 	.word	0x08009001
 800903c:	08009001 	.word	0x08009001
 8009040:	08009001 	.word	0x08009001
 8009044:	08009183 	.word	0x08009183
 8009048:	080090af 	.word	0x080090af
 800904c:	0800913d 	.word	0x0800913d
 8009050:	08009001 	.word	0x08009001
 8009054:	08009001 	.word	0x08009001
 8009058:	080091a5 	.word	0x080091a5
 800905c:	08009001 	.word	0x08009001
 8009060:	080090af 	.word	0x080090af
 8009064:	08009001 	.word	0x08009001
 8009068:	08009001 	.word	0x08009001
 800906c:	08009145 	.word	0x08009145
 8009070:	6833      	ldr	r3, [r6, #0]
 8009072:	1d1a      	adds	r2, r3, #4
 8009074:	681b      	ldr	r3, [r3, #0]
 8009076:	6032      	str	r2, [r6, #0]
 8009078:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800907c:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8009080:	2301      	movs	r3, #1
 8009082:	e09c      	b.n	80091be <_printf_i+0x1e6>
 8009084:	6833      	ldr	r3, [r6, #0]
 8009086:	6820      	ldr	r0, [r4, #0]
 8009088:	1d19      	adds	r1, r3, #4
 800908a:	6031      	str	r1, [r6, #0]
 800908c:	0606      	lsls	r6, r0, #24
 800908e:	d501      	bpl.n	8009094 <_printf_i+0xbc>
 8009090:	681d      	ldr	r5, [r3, #0]
 8009092:	e003      	b.n	800909c <_printf_i+0xc4>
 8009094:	0645      	lsls	r5, r0, #25
 8009096:	d5fb      	bpl.n	8009090 <_printf_i+0xb8>
 8009098:	f9b3 5000 	ldrsh.w	r5, [r3]
 800909c:	2d00      	cmp	r5, #0
 800909e:	da03      	bge.n	80090a8 <_printf_i+0xd0>
 80090a0:	232d      	movs	r3, #45	@ 0x2d
 80090a2:	426d      	negs	r5, r5
 80090a4:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80090a8:	4858      	ldr	r0, [pc, #352]	@ (800920c <_printf_i+0x234>)
 80090aa:	230a      	movs	r3, #10
 80090ac:	e011      	b.n	80090d2 <_printf_i+0xfa>
 80090ae:	6821      	ldr	r1, [r4, #0]
 80090b0:	6833      	ldr	r3, [r6, #0]
 80090b2:	0608      	lsls	r0, r1, #24
 80090b4:	f853 5b04 	ldr.w	r5, [r3], #4
 80090b8:	d402      	bmi.n	80090c0 <_printf_i+0xe8>
 80090ba:	0649      	lsls	r1, r1, #25
 80090bc:	bf48      	it	mi
 80090be:	b2ad      	uxthmi	r5, r5
 80090c0:	2f6f      	cmp	r7, #111	@ 0x6f
 80090c2:	4852      	ldr	r0, [pc, #328]	@ (800920c <_printf_i+0x234>)
 80090c4:	6033      	str	r3, [r6, #0]
 80090c6:	bf14      	ite	ne
 80090c8:	230a      	movne	r3, #10
 80090ca:	2308      	moveq	r3, #8
 80090cc:	2100      	movs	r1, #0
 80090ce:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 80090d2:	6866      	ldr	r6, [r4, #4]
 80090d4:	60a6      	str	r6, [r4, #8]
 80090d6:	2e00      	cmp	r6, #0
 80090d8:	db05      	blt.n	80090e6 <_printf_i+0x10e>
 80090da:	6821      	ldr	r1, [r4, #0]
 80090dc:	432e      	orrs	r6, r5
 80090de:	f021 0104 	bic.w	r1, r1, #4
 80090e2:	6021      	str	r1, [r4, #0]
 80090e4:	d04b      	beq.n	800917e <_printf_i+0x1a6>
 80090e6:	4616      	mov	r6, r2
 80090e8:	fbb5 f1f3 	udiv	r1, r5, r3
 80090ec:	fb03 5711 	mls	r7, r3, r1, r5
 80090f0:	5dc7      	ldrb	r7, [r0, r7]
 80090f2:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80090f6:	462f      	mov	r7, r5
 80090f8:	42bb      	cmp	r3, r7
 80090fa:	460d      	mov	r5, r1
 80090fc:	d9f4      	bls.n	80090e8 <_printf_i+0x110>
 80090fe:	2b08      	cmp	r3, #8
 8009100:	d10b      	bne.n	800911a <_printf_i+0x142>
 8009102:	6823      	ldr	r3, [r4, #0]
 8009104:	07df      	lsls	r7, r3, #31
 8009106:	d508      	bpl.n	800911a <_printf_i+0x142>
 8009108:	6923      	ldr	r3, [r4, #16]
 800910a:	6861      	ldr	r1, [r4, #4]
 800910c:	4299      	cmp	r1, r3
 800910e:	bfde      	ittt	le
 8009110:	2330      	movle	r3, #48	@ 0x30
 8009112:	f806 3c01 	strble.w	r3, [r6, #-1]
 8009116:	f106 36ff 	addle.w	r6, r6, #4294967295	@ 0xffffffff
 800911a:	1b92      	subs	r2, r2, r6
 800911c:	6122      	str	r2, [r4, #16]
 800911e:	f8cd a000 	str.w	sl, [sp]
 8009122:	464b      	mov	r3, r9
 8009124:	aa03      	add	r2, sp, #12
 8009126:	4621      	mov	r1, r4
 8009128:	4640      	mov	r0, r8
 800912a:	f7ff fee7 	bl	8008efc <_printf_common>
 800912e:	3001      	adds	r0, #1
 8009130:	d14a      	bne.n	80091c8 <_printf_i+0x1f0>
 8009132:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8009136:	b004      	add	sp, #16
 8009138:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800913c:	6823      	ldr	r3, [r4, #0]
 800913e:	f043 0320 	orr.w	r3, r3, #32
 8009142:	6023      	str	r3, [r4, #0]
 8009144:	4832      	ldr	r0, [pc, #200]	@ (8009210 <_printf_i+0x238>)
 8009146:	2778      	movs	r7, #120	@ 0x78
 8009148:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800914c:	6823      	ldr	r3, [r4, #0]
 800914e:	6831      	ldr	r1, [r6, #0]
 8009150:	061f      	lsls	r7, r3, #24
 8009152:	f851 5b04 	ldr.w	r5, [r1], #4
 8009156:	d402      	bmi.n	800915e <_printf_i+0x186>
 8009158:	065f      	lsls	r7, r3, #25
 800915a:	bf48      	it	mi
 800915c:	b2ad      	uxthmi	r5, r5
 800915e:	6031      	str	r1, [r6, #0]
 8009160:	07d9      	lsls	r1, r3, #31
 8009162:	bf44      	itt	mi
 8009164:	f043 0320 	orrmi.w	r3, r3, #32
 8009168:	6023      	strmi	r3, [r4, #0]
 800916a:	b11d      	cbz	r5, 8009174 <_printf_i+0x19c>
 800916c:	2310      	movs	r3, #16
 800916e:	e7ad      	b.n	80090cc <_printf_i+0xf4>
 8009170:	4826      	ldr	r0, [pc, #152]	@ (800920c <_printf_i+0x234>)
 8009172:	e7e9      	b.n	8009148 <_printf_i+0x170>
 8009174:	6823      	ldr	r3, [r4, #0]
 8009176:	f023 0320 	bic.w	r3, r3, #32
 800917a:	6023      	str	r3, [r4, #0]
 800917c:	e7f6      	b.n	800916c <_printf_i+0x194>
 800917e:	4616      	mov	r6, r2
 8009180:	e7bd      	b.n	80090fe <_printf_i+0x126>
 8009182:	6833      	ldr	r3, [r6, #0]
 8009184:	6825      	ldr	r5, [r4, #0]
 8009186:	6961      	ldr	r1, [r4, #20]
 8009188:	1d18      	adds	r0, r3, #4
 800918a:	6030      	str	r0, [r6, #0]
 800918c:	062e      	lsls	r6, r5, #24
 800918e:	681b      	ldr	r3, [r3, #0]
 8009190:	d501      	bpl.n	8009196 <_printf_i+0x1be>
 8009192:	6019      	str	r1, [r3, #0]
 8009194:	e002      	b.n	800919c <_printf_i+0x1c4>
 8009196:	0668      	lsls	r0, r5, #25
 8009198:	d5fb      	bpl.n	8009192 <_printf_i+0x1ba>
 800919a:	8019      	strh	r1, [r3, #0]
 800919c:	2300      	movs	r3, #0
 800919e:	6123      	str	r3, [r4, #16]
 80091a0:	4616      	mov	r6, r2
 80091a2:	e7bc      	b.n	800911e <_printf_i+0x146>
 80091a4:	6833      	ldr	r3, [r6, #0]
 80091a6:	1d1a      	adds	r2, r3, #4
 80091a8:	6032      	str	r2, [r6, #0]
 80091aa:	681e      	ldr	r6, [r3, #0]
 80091ac:	6862      	ldr	r2, [r4, #4]
 80091ae:	2100      	movs	r1, #0
 80091b0:	4630      	mov	r0, r6
 80091b2:	f7f7 f8ad 	bl	8000310 <memchr>
 80091b6:	b108      	cbz	r0, 80091bc <_printf_i+0x1e4>
 80091b8:	1b80      	subs	r0, r0, r6
 80091ba:	6060      	str	r0, [r4, #4]
 80091bc:	6863      	ldr	r3, [r4, #4]
 80091be:	6123      	str	r3, [r4, #16]
 80091c0:	2300      	movs	r3, #0
 80091c2:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80091c6:	e7aa      	b.n	800911e <_printf_i+0x146>
 80091c8:	6923      	ldr	r3, [r4, #16]
 80091ca:	4632      	mov	r2, r6
 80091cc:	4649      	mov	r1, r9
 80091ce:	4640      	mov	r0, r8
 80091d0:	47d0      	blx	sl
 80091d2:	3001      	adds	r0, #1
 80091d4:	d0ad      	beq.n	8009132 <_printf_i+0x15a>
 80091d6:	6823      	ldr	r3, [r4, #0]
 80091d8:	079b      	lsls	r3, r3, #30
 80091da:	d413      	bmi.n	8009204 <_printf_i+0x22c>
 80091dc:	68e0      	ldr	r0, [r4, #12]
 80091de:	9b03      	ldr	r3, [sp, #12]
 80091e0:	4298      	cmp	r0, r3
 80091e2:	bfb8      	it	lt
 80091e4:	4618      	movlt	r0, r3
 80091e6:	e7a6      	b.n	8009136 <_printf_i+0x15e>
 80091e8:	2301      	movs	r3, #1
 80091ea:	4632      	mov	r2, r6
 80091ec:	4649      	mov	r1, r9
 80091ee:	4640      	mov	r0, r8
 80091f0:	47d0      	blx	sl
 80091f2:	3001      	adds	r0, #1
 80091f4:	d09d      	beq.n	8009132 <_printf_i+0x15a>
 80091f6:	3501      	adds	r5, #1
 80091f8:	68e3      	ldr	r3, [r4, #12]
 80091fa:	9903      	ldr	r1, [sp, #12]
 80091fc:	1a5b      	subs	r3, r3, r1
 80091fe:	42ab      	cmp	r3, r5
 8009200:	dcf2      	bgt.n	80091e8 <_printf_i+0x210>
 8009202:	e7eb      	b.n	80091dc <_printf_i+0x204>
 8009204:	2500      	movs	r5, #0
 8009206:	f104 0619 	add.w	r6, r4, #25
 800920a:	e7f5      	b.n	80091f8 <_printf_i+0x220>
 800920c:	0800b33e 	.word	0x0800b33e
 8009210:	0800b34f 	.word	0x0800b34f

08009214 <std>:
 8009214:	2300      	movs	r3, #0
 8009216:	b510      	push	{r4, lr}
 8009218:	4604      	mov	r4, r0
 800921a:	e9c0 3300 	strd	r3, r3, [r0]
 800921e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8009222:	6083      	str	r3, [r0, #8]
 8009224:	8181      	strh	r1, [r0, #12]
 8009226:	6643      	str	r3, [r0, #100]	@ 0x64
 8009228:	81c2      	strh	r2, [r0, #14]
 800922a:	6183      	str	r3, [r0, #24]
 800922c:	4619      	mov	r1, r3
 800922e:	2208      	movs	r2, #8
 8009230:	305c      	adds	r0, #92	@ 0x5c
 8009232:	f000 f921 	bl	8009478 <memset>
 8009236:	4b0d      	ldr	r3, [pc, #52]	@ (800926c <std+0x58>)
 8009238:	6263      	str	r3, [r4, #36]	@ 0x24
 800923a:	4b0d      	ldr	r3, [pc, #52]	@ (8009270 <std+0x5c>)
 800923c:	62a3      	str	r3, [r4, #40]	@ 0x28
 800923e:	4b0d      	ldr	r3, [pc, #52]	@ (8009274 <std+0x60>)
 8009240:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8009242:	4b0d      	ldr	r3, [pc, #52]	@ (8009278 <std+0x64>)
 8009244:	6323      	str	r3, [r4, #48]	@ 0x30
 8009246:	4b0d      	ldr	r3, [pc, #52]	@ (800927c <std+0x68>)
 8009248:	6224      	str	r4, [r4, #32]
 800924a:	429c      	cmp	r4, r3
 800924c:	d006      	beq.n	800925c <std+0x48>
 800924e:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8009252:	4294      	cmp	r4, r2
 8009254:	d002      	beq.n	800925c <std+0x48>
 8009256:	33d0      	adds	r3, #208	@ 0xd0
 8009258:	429c      	cmp	r4, r3
 800925a:	d105      	bne.n	8009268 <std+0x54>
 800925c:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8009260:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009264:	f000 b93a 	b.w	80094dc <__retarget_lock_init_recursive>
 8009268:	bd10      	pop	{r4, pc}
 800926a:	bf00      	nop
 800926c:	0800ad11 	.word	0x0800ad11
 8009270:	0800ad33 	.word	0x0800ad33
 8009274:	0800ad6b 	.word	0x0800ad6b
 8009278:	0800ad8f 	.word	0x0800ad8f
 800927c:	240003c4 	.word	0x240003c4

08009280 <stdio_exit_handler>:
 8009280:	4a02      	ldr	r2, [pc, #8]	@ (800928c <stdio_exit_handler+0xc>)
 8009282:	4903      	ldr	r1, [pc, #12]	@ (8009290 <stdio_exit_handler+0x10>)
 8009284:	4803      	ldr	r0, [pc, #12]	@ (8009294 <stdio_exit_handler+0x14>)
 8009286:	f000 b869 	b.w	800935c <_fwalk_sglue>
 800928a:	bf00      	nop
 800928c:	24000010 	.word	0x24000010
 8009290:	0800a5b5 	.word	0x0800a5b5
 8009294:	24000020 	.word	0x24000020

08009298 <cleanup_stdio>:
 8009298:	6841      	ldr	r1, [r0, #4]
 800929a:	4b0c      	ldr	r3, [pc, #48]	@ (80092cc <cleanup_stdio+0x34>)
 800929c:	4299      	cmp	r1, r3
 800929e:	b510      	push	{r4, lr}
 80092a0:	4604      	mov	r4, r0
 80092a2:	d001      	beq.n	80092a8 <cleanup_stdio+0x10>
 80092a4:	f001 f986 	bl	800a5b4 <_fflush_r>
 80092a8:	68a1      	ldr	r1, [r4, #8]
 80092aa:	4b09      	ldr	r3, [pc, #36]	@ (80092d0 <cleanup_stdio+0x38>)
 80092ac:	4299      	cmp	r1, r3
 80092ae:	d002      	beq.n	80092b6 <cleanup_stdio+0x1e>
 80092b0:	4620      	mov	r0, r4
 80092b2:	f001 f97f 	bl	800a5b4 <_fflush_r>
 80092b6:	68e1      	ldr	r1, [r4, #12]
 80092b8:	4b06      	ldr	r3, [pc, #24]	@ (80092d4 <cleanup_stdio+0x3c>)
 80092ba:	4299      	cmp	r1, r3
 80092bc:	d004      	beq.n	80092c8 <cleanup_stdio+0x30>
 80092be:	4620      	mov	r0, r4
 80092c0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80092c4:	f001 b976 	b.w	800a5b4 <_fflush_r>
 80092c8:	bd10      	pop	{r4, pc}
 80092ca:	bf00      	nop
 80092cc:	240003c4 	.word	0x240003c4
 80092d0:	2400042c 	.word	0x2400042c
 80092d4:	24000494 	.word	0x24000494

080092d8 <global_stdio_init.part.0>:
 80092d8:	b510      	push	{r4, lr}
 80092da:	4b0b      	ldr	r3, [pc, #44]	@ (8009308 <global_stdio_init.part.0+0x30>)
 80092dc:	4c0b      	ldr	r4, [pc, #44]	@ (800930c <global_stdio_init.part.0+0x34>)
 80092de:	4a0c      	ldr	r2, [pc, #48]	@ (8009310 <global_stdio_init.part.0+0x38>)
 80092e0:	601a      	str	r2, [r3, #0]
 80092e2:	4620      	mov	r0, r4
 80092e4:	2200      	movs	r2, #0
 80092e6:	2104      	movs	r1, #4
 80092e8:	f7ff ff94 	bl	8009214 <std>
 80092ec:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 80092f0:	2201      	movs	r2, #1
 80092f2:	2109      	movs	r1, #9
 80092f4:	f7ff ff8e 	bl	8009214 <std>
 80092f8:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 80092fc:	2202      	movs	r2, #2
 80092fe:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009302:	2112      	movs	r1, #18
 8009304:	f7ff bf86 	b.w	8009214 <std>
 8009308:	240004fc 	.word	0x240004fc
 800930c:	240003c4 	.word	0x240003c4
 8009310:	08009281 	.word	0x08009281

08009314 <__sfp_lock_acquire>:
 8009314:	4801      	ldr	r0, [pc, #4]	@ (800931c <__sfp_lock_acquire+0x8>)
 8009316:	f000 b8e2 	b.w	80094de <__retarget_lock_acquire_recursive>
 800931a:	bf00      	nop
 800931c:	24000501 	.word	0x24000501

08009320 <__sfp_lock_release>:
 8009320:	4801      	ldr	r0, [pc, #4]	@ (8009328 <__sfp_lock_release+0x8>)
 8009322:	f000 b8dd 	b.w	80094e0 <__retarget_lock_release_recursive>
 8009326:	bf00      	nop
 8009328:	24000501 	.word	0x24000501

0800932c <__sinit>:
 800932c:	b510      	push	{r4, lr}
 800932e:	4604      	mov	r4, r0
 8009330:	f7ff fff0 	bl	8009314 <__sfp_lock_acquire>
 8009334:	6a23      	ldr	r3, [r4, #32]
 8009336:	b11b      	cbz	r3, 8009340 <__sinit+0x14>
 8009338:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800933c:	f7ff bff0 	b.w	8009320 <__sfp_lock_release>
 8009340:	4b04      	ldr	r3, [pc, #16]	@ (8009354 <__sinit+0x28>)
 8009342:	6223      	str	r3, [r4, #32]
 8009344:	4b04      	ldr	r3, [pc, #16]	@ (8009358 <__sinit+0x2c>)
 8009346:	681b      	ldr	r3, [r3, #0]
 8009348:	2b00      	cmp	r3, #0
 800934a:	d1f5      	bne.n	8009338 <__sinit+0xc>
 800934c:	f7ff ffc4 	bl	80092d8 <global_stdio_init.part.0>
 8009350:	e7f2      	b.n	8009338 <__sinit+0xc>
 8009352:	bf00      	nop
 8009354:	08009299 	.word	0x08009299
 8009358:	240004fc 	.word	0x240004fc

0800935c <_fwalk_sglue>:
 800935c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009360:	4607      	mov	r7, r0
 8009362:	4688      	mov	r8, r1
 8009364:	4614      	mov	r4, r2
 8009366:	2600      	movs	r6, #0
 8009368:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800936c:	f1b9 0901 	subs.w	r9, r9, #1
 8009370:	d505      	bpl.n	800937e <_fwalk_sglue+0x22>
 8009372:	6824      	ldr	r4, [r4, #0]
 8009374:	2c00      	cmp	r4, #0
 8009376:	d1f7      	bne.n	8009368 <_fwalk_sglue+0xc>
 8009378:	4630      	mov	r0, r6
 800937a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800937e:	89ab      	ldrh	r3, [r5, #12]
 8009380:	2b01      	cmp	r3, #1
 8009382:	d907      	bls.n	8009394 <_fwalk_sglue+0x38>
 8009384:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8009388:	3301      	adds	r3, #1
 800938a:	d003      	beq.n	8009394 <_fwalk_sglue+0x38>
 800938c:	4629      	mov	r1, r5
 800938e:	4638      	mov	r0, r7
 8009390:	47c0      	blx	r8
 8009392:	4306      	orrs	r6, r0
 8009394:	3568      	adds	r5, #104	@ 0x68
 8009396:	e7e9      	b.n	800936c <_fwalk_sglue+0x10>

08009398 <iprintf>:
 8009398:	b40f      	push	{r0, r1, r2, r3}
 800939a:	b507      	push	{r0, r1, r2, lr}
 800939c:	4906      	ldr	r1, [pc, #24]	@ (80093b8 <iprintf+0x20>)
 800939e:	ab04      	add	r3, sp, #16
 80093a0:	6808      	ldr	r0, [r1, #0]
 80093a2:	f853 2b04 	ldr.w	r2, [r3], #4
 80093a6:	6881      	ldr	r1, [r0, #8]
 80093a8:	9301      	str	r3, [sp, #4]
 80093aa:	f000 febd 	bl	800a128 <_vfiprintf_r>
 80093ae:	b003      	add	sp, #12
 80093b0:	f85d eb04 	ldr.w	lr, [sp], #4
 80093b4:	b004      	add	sp, #16
 80093b6:	4770      	bx	lr
 80093b8:	2400001c 	.word	0x2400001c

080093bc <_puts_r>:
 80093bc:	6a03      	ldr	r3, [r0, #32]
 80093be:	b570      	push	{r4, r5, r6, lr}
 80093c0:	6884      	ldr	r4, [r0, #8]
 80093c2:	4605      	mov	r5, r0
 80093c4:	460e      	mov	r6, r1
 80093c6:	b90b      	cbnz	r3, 80093cc <_puts_r+0x10>
 80093c8:	f7ff ffb0 	bl	800932c <__sinit>
 80093cc:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80093ce:	07db      	lsls	r3, r3, #31
 80093d0:	d405      	bmi.n	80093de <_puts_r+0x22>
 80093d2:	89a3      	ldrh	r3, [r4, #12]
 80093d4:	0598      	lsls	r0, r3, #22
 80093d6:	d402      	bmi.n	80093de <_puts_r+0x22>
 80093d8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80093da:	f000 f880 	bl	80094de <__retarget_lock_acquire_recursive>
 80093de:	89a3      	ldrh	r3, [r4, #12]
 80093e0:	0719      	lsls	r1, r3, #28
 80093e2:	d502      	bpl.n	80093ea <_puts_r+0x2e>
 80093e4:	6923      	ldr	r3, [r4, #16]
 80093e6:	2b00      	cmp	r3, #0
 80093e8:	d135      	bne.n	8009456 <_puts_r+0x9a>
 80093ea:	4621      	mov	r1, r4
 80093ec:	4628      	mov	r0, r5
 80093ee:	f001 fd11 	bl	800ae14 <__swsetup_r>
 80093f2:	b380      	cbz	r0, 8009456 <_puts_r+0x9a>
 80093f4:	f04f 35ff 	mov.w	r5, #4294967295	@ 0xffffffff
 80093f8:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80093fa:	07da      	lsls	r2, r3, #31
 80093fc:	d405      	bmi.n	800940a <_puts_r+0x4e>
 80093fe:	89a3      	ldrh	r3, [r4, #12]
 8009400:	059b      	lsls	r3, r3, #22
 8009402:	d402      	bmi.n	800940a <_puts_r+0x4e>
 8009404:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8009406:	f000 f86b 	bl	80094e0 <__retarget_lock_release_recursive>
 800940a:	4628      	mov	r0, r5
 800940c:	bd70      	pop	{r4, r5, r6, pc}
 800940e:	2b00      	cmp	r3, #0
 8009410:	da04      	bge.n	800941c <_puts_r+0x60>
 8009412:	69a2      	ldr	r2, [r4, #24]
 8009414:	429a      	cmp	r2, r3
 8009416:	dc17      	bgt.n	8009448 <_puts_r+0x8c>
 8009418:	290a      	cmp	r1, #10
 800941a:	d015      	beq.n	8009448 <_puts_r+0x8c>
 800941c:	6823      	ldr	r3, [r4, #0]
 800941e:	1c5a      	adds	r2, r3, #1
 8009420:	6022      	str	r2, [r4, #0]
 8009422:	7019      	strb	r1, [r3, #0]
 8009424:	68a3      	ldr	r3, [r4, #8]
 8009426:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800942a:	3b01      	subs	r3, #1
 800942c:	60a3      	str	r3, [r4, #8]
 800942e:	2900      	cmp	r1, #0
 8009430:	d1ed      	bne.n	800940e <_puts_r+0x52>
 8009432:	2b00      	cmp	r3, #0
 8009434:	da11      	bge.n	800945a <_puts_r+0x9e>
 8009436:	4622      	mov	r2, r4
 8009438:	210a      	movs	r1, #10
 800943a:	4628      	mov	r0, r5
 800943c:	f001 fcab 	bl	800ad96 <__swbuf_r>
 8009440:	3001      	adds	r0, #1
 8009442:	d0d7      	beq.n	80093f4 <_puts_r+0x38>
 8009444:	250a      	movs	r5, #10
 8009446:	e7d7      	b.n	80093f8 <_puts_r+0x3c>
 8009448:	4622      	mov	r2, r4
 800944a:	4628      	mov	r0, r5
 800944c:	f001 fca3 	bl	800ad96 <__swbuf_r>
 8009450:	3001      	adds	r0, #1
 8009452:	d1e7      	bne.n	8009424 <_puts_r+0x68>
 8009454:	e7ce      	b.n	80093f4 <_puts_r+0x38>
 8009456:	3e01      	subs	r6, #1
 8009458:	e7e4      	b.n	8009424 <_puts_r+0x68>
 800945a:	6823      	ldr	r3, [r4, #0]
 800945c:	1c5a      	adds	r2, r3, #1
 800945e:	6022      	str	r2, [r4, #0]
 8009460:	220a      	movs	r2, #10
 8009462:	701a      	strb	r2, [r3, #0]
 8009464:	e7ee      	b.n	8009444 <_puts_r+0x88>
	...

08009468 <puts>:
 8009468:	4b02      	ldr	r3, [pc, #8]	@ (8009474 <puts+0xc>)
 800946a:	4601      	mov	r1, r0
 800946c:	6818      	ldr	r0, [r3, #0]
 800946e:	f7ff bfa5 	b.w	80093bc <_puts_r>
 8009472:	bf00      	nop
 8009474:	2400001c 	.word	0x2400001c

08009478 <memset>:
 8009478:	4402      	add	r2, r0
 800947a:	4603      	mov	r3, r0
 800947c:	4293      	cmp	r3, r2
 800947e:	d100      	bne.n	8009482 <memset+0xa>
 8009480:	4770      	bx	lr
 8009482:	f803 1b01 	strb.w	r1, [r3], #1
 8009486:	e7f9      	b.n	800947c <memset+0x4>

08009488 <__errno>:
 8009488:	4b01      	ldr	r3, [pc, #4]	@ (8009490 <__errno+0x8>)
 800948a:	6818      	ldr	r0, [r3, #0]
 800948c:	4770      	bx	lr
 800948e:	bf00      	nop
 8009490:	2400001c 	.word	0x2400001c

08009494 <__libc_init_array>:
 8009494:	b570      	push	{r4, r5, r6, lr}
 8009496:	4d0d      	ldr	r5, [pc, #52]	@ (80094cc <__libc_init_array+0x38>)
 8009498:	4c0d      	ldr	r4, [pc, #52]	@ (80094d0 <__libc_init_array+0x3c>)
 800949a:	1b64      	subs	r4, r4, r5
 800949c:	10a4      	asrs	r4, r4, #2
 800949e:	2600      	movs	r6, #0
 80094a0:	42a6      	cmp	r6, r4
 80094a2:	d109      	bne.n	80094b8 <__libc_init_array+0x24>
 80094a4:	4d0b      	ldr	r5, [pc, #44]	@ (80094d4 <__libc_init_array+0x40>)
 80094a6:	4c0c      	ldr	r4, [pc, #48]	@ (80094d8 <__libc_init_array+0x44>)
 80094a8:	f001 fedc 	bl	800b264 <_init>
 80094ac:	1b64      	subs	r4, r4, r5
 80094ae:	10a4      	asrs	r4, r4, #2
 80094b0:	2600      	movs	r6, #0
 80094b2:	42a6      	cmp	r6, r4
 80094b4:	d105      	bne.n	80094c2 <__libc_init_array+0x2e>
 80094b6:	bd70      	pop	{r4, r5, r6, pc}
 80094b8:	f855 3b04 	ldr.w	r3, [r5], #4
 80094bc:	4798      	blx	r3
 80094be:	3601      	adds	r6, #1
 80094c0:	e7ee      	b.n	80094a0 <__libc_init_array+0xc>
 80094c2:	f855 3b04 	ldr.w	r3, [r5], #4
 80094c6:	4798      	blx	r3
 80094c8:	3601      	adds	r6, #1
 80094ca:	e7f2      	b.n	80094b2 <__libc_init_array+0x1e>
 80094cc:	0800b6ac 	.word	0x0800b6ac
 80094d0:	0800b6ac 	.word	0x0800b6ac
 80094d4:	0800b6ac 	.word	0x0800b6ac
 80094d8:	0800b6b0 	.word	0x0800b6b0

080094dc <__retarget_lock_init_recursive>:
 80094dc:	4770      	bx	lr

080094de <__retarget_lock_acquire_recursive>:
 80094de:	4770      	bx	lr

080094e0 <__retarget_lock_release_recursive>:
 80094e0:	4770      	bx	lr
	...

080094e4 <_localeconv_r>:
 80094e4:	4800      	ldr	r0, [pc, #0]	@ (80094e8 <_localeconv_r+0x4>)
 80094e6:	4770      	bx	lr
 80094e8:	2400015c 	.word	0x2400015c

080094ec <memcpy>:
 80094ec:	440a      	add	r2, r1
 80094ee:	4291      	cmp	r1, r2
 80094f0:	f100 33ff 	add.w	r3, r0, #4294967295	@ 0xffffffff
 80094f4:	d100      	bne.n	80094f8 <memcpy+0xc>
 80094f6:	4770      	bx	lr
 80094f8:	b510      	push	{r4, lr}
 80094fa:	f811 4b01 	ldrb.w	r4, [r1], #1
 80094fe:	f803 4f01 	strb.w	r4, [r3, #1]!
 8009502:	4291      	cmp	r1, r2
 8009504:	d1f9      	bne.n	80094fa <memcpy+0xe>
 8009506:	bd10      	pop	{r4, pc}

08009508 <quorem>:
 8009508:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800950c:	6903      	ldr	r3, [r0, #16]
 800950e:	690c      	ldr	r4, [r1, #16]
 8009510:	42a3      	cmp	r3, r4
 8009512:	4607      	mov	r7, r0
 8009514:	db7e      	blt.n	8009614 <quorem+0x10c>
 8009516:	3c01      	subs	r4, #1
 8009518:	f101 0814 	add.w	r8, r1, #20
 800951c:	00a3      	lsls	r3, r4, #2
 800951e:	f100 0514 	add.w	r5, r0, #20
 8009522:	9300      	str	r3, [sp, #0]
 8009524:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8009528:	9301      	str	r3, [sp, #4]
 800952a:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800952e:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8009532:	3301      	adds	r3, #1
 8009534:	429a      	cmp	r2, r3
 8009536:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800953a:	fbb2 f6f3 	udiv	r6, r2, r3
 800953e:	d32e      	bcc.n	800959e <quorem+0x96>
 8009540:	f04f 0a00 	mov.w	sl, #0
 8009544:	46c4      	mov	ip, r8
 8009546:	46ae      	mov	lr, r5
 8009548:	46d3      	mov	fp, sl
 800954a:	f85c 3b04 	ldr.w	r3, [ip], #4
 800954e:	b298      	uxth	r0, r3
 8009550:	fb06 a000 	mla	r0, r6, r0, sl
 8009554:	0c02      	lsrs	r2, r0, #16
 8009556:	0c1b      	lsrs	r3, r3, #16
 8009558:	fb06 2303 	mla	r3, r6, r3, r2
 800955c:	f8de 2000 	ldr.w	r2, [lr]
 8009560:	b280      	uxth	r0, r0
 8009562:	b292      	uxth	r2, r2
 8009564:	1a12      	subs	r2, r2, r0
 8009566:	445a      	add	r2, fp
 8009568:	f8de 0000 	ldr.w	r0, [lr]
 800956c:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8009570:	b29b      	uxth	r3, r3
 8009572:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 8009576:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 800957a:	b292      	uxth	r2, r2
 800957c:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 8009580:	45e1      	cmp	r9, ip
 8009582:	f84e 2b04 	str.w	r2, [lr], #4
 8009586:	ea4f 4b23 	mov.w	fp, r3, asr #16
 800958a:	d2de      	bcs.n	800954a <quorem+0x42>
 800958c:	9b00      	ldr	r3, [sp, #0]
 800958e:	58eb      	ldr	r3, [r5, r3]
 8009590:	b92b      	cbnz	r3, 800959e <quorem+0x96>
 8009592:	9b01      	ldr	r3, [sp, #4]
 8009594:	3b04      	subs	r3, #4
 8009596:	429d      	cmp	r5, r3
 8009598:	461a      	mov	r2, r3
 800959a:	d32f      	bcc.n	80095fc <quorem+0xf4>
 800959c:	613c      	str	r4, [r7, #16]
 800959e:	4638      	mov	r0, r7
 80095a0:	f001 faae 	bl	800ab00 <__mcmp>
 80095a4:	2800      	cmp	r0, #0
 80095a6:	db25      	blt.n	80095f4 <quorem+0xec>
 80095a8:	4629      	mov	r1, r5
 80095aa:	2000      	movs	r0, #0
 80095ac:	f858 2b04 	ldr.w	r2, [r8], #4
 80095b0:	f8d1 c000 	ldr.w	ip, [r1]
 80095b4:	fa1f fe82 	uxth.w	lr, r2
 80095b8:	fa1f f38c 	uxth.w	r3, ip
 80095bc:	eba3 030e 	sub.w	r3, r3, lr
 80095c0:	4403      	add	r3, r0
 80095c2:	0c12      	lsrs	r2, r2, #16
 80095c4:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 80095c8:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 80095cc:	b29b      	uxth	r3, r3
 80095ce:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80095d2:	45c1      	cmp	r9, r8
 80095d4:	f841 3b04 	str.w	r3, [r1], #4
 80095d8:	ea4f 4022 	mov.w	r0, r2, asr #16
 80095dc:	d2e6      	bcs.n	80095ac <quorem+0xa4>
 80095de:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80095e2:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80095e6:	b922      	cbnz	r2, 80095f2 <quorem+0xea>
 80095e8:	3b04      	subs	r3, #4
 80095ea:	429d      	cmp	r5, r3
 80095ec:	461a      	mov	r2, r3
 80095ee:	d30b      	bcc.n	8009608 <quorem+0x100>
 80095f0:	613c      	str	r4, [r7, #16]
 80095f2:	3601      	adds	r6, #1
 80095f4:	4630      	mov	r0, r6
 80095f6:	b003      	add	sp, #12
 80095f8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80095fc:	6812      	ldr	r2, [r2, #0]
 80095fe:	3b04      	subs	r3, #4
 8009600:	2a00      	cmp	r2, #0
 8009602:	d1cb      	bne.n	800959c <quorem+0x94>
 8009604:	3c01      	subs	r4, #1
 8009606:	e7c6      	b.n	8009596 <quorem+0x8e>
 8009608:	6812      	ldr	r2, [r2, #0]
 800960a:	3b04      	subs	r3, #4
 800960c:	2a00      	cmp	r2, #0
 800960e:	d1ef      	bne.n	80095f0 <quorem+0xe8>
 8009610:	3c01      	subs	r4, #1
 8009612:	e7ea      	b.n	80095ea <quorem+0xe2>
 8009614:	2000      	movs	r0, #0
 8009616:	e7ee      	b.n	80095f6 <quorem+0xee>

08009618 <_dtoa_r>:
 8009618:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800961c:	ed2d 8b02 	vpush	{d8}
 8009620:	69c7      	ldr	r7, [r0, #28]
 8009622:	b091      	sub	sp, #68	@ 0x44
 8009624:	ed8d 0b02 	vstr	d0, [sp, #8]
 8009628:	ec55 4b10 	vmov	r4, r5, d0
 800962c:	9e1c      	ldr	r6, [sp, #112]	@ 0x70
 800962e:	9107      	str	r1, [sp, #28]
 8009630:	4681      	mov	r9, r0
 8009632:	9209      	str	r2, [sp, #36]	@ 0x24
 8009634:	930d      	str	r3, [sp, #52]	@ 0x34
 8009636:	b97f      	cbnz	r7, 8009658 <_dtoa_r+0x40>
 8009638:	2010      	movs	r0, #16
 800963a:	f000 fe8d 	bl	800a358 <malloc>
 800963e:	4602      	mov	r2, r0
 8009640:	f8c9 001c 	str.w	r0, [r9, #28]
 8009644:	b920      	cbnz	r0, 8009650 <_dtoa_r+0x38>
 8009646:	4ba0      	ldr	r3, [pc, #640]	@ (80098c8 <_dtoa_r+0x2b0>)
 8009648:	21ef      	movs	r1, #239	@ 0xef
 800964a:	48a0      	ldr	r0, [pc, #640]	@ (80098cc <_dtoa_r+0x2b4>)
 800964c:	f001 fd12 	bl	800b074 <__assert_func>
 8009650:	e9c0 7701 	strd	r7, r7, [r0, #4]
 8009654:	6007      	str	r7, [r0, #0]
 8009656:	60c7      	str	r7, [r0, #12]
 8009658:	f8d9 301c 	ldr.w	r3, [r9, #28]
 800965c:	6819      	ldr	r1, [r3, #0]
 800965e:	b159      	cbz	r1, 8009678 <_dtoa_r+0x60>
 8009660:	685a      	ldr	r2, [r3, #4]
 8009662:	604a      	str	r2, [r1, #4]
 8009664:	2301      	movs	r3, #1
 8009666:	4093      	lsls	r3, r2
 8009668:	608b      	str	r3, [r1, #8]
 800966a:	4648      	mov	r0, r9
 800966c:	f001 f816 	bl	800a69c <_Bfree>
 8009670:	f8d9 301c 	ldr.w	r3, [r9, #28]
 8009674:	2200      	movs	r2, #0
 8009676:	601a      	str	r2, [r3, #0]
 8009678:	1e2b      	subs	r3, r5, #0
 800967a:	bfbb      	ittet	lt
 800967c:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 8009680:	9303      	strlt	r3, [sp, #12]
 8009682:	2300      	movge	r3, #0
 8009684:	2201      	movlt	r2, #1
 8009686:	bfac      	ite	ge
 8009688:	6033      	strge	r3, [r6, #0]
 800968a:	6032      	strlt	r2, [r6, #0]
 800968c:	4b90      	ldr	r3, [pc, #576]	@ (80098d0 <_dtoa_r+0x2b8>)
 800968e:	9e03      	ldr	r6, [sp, #12]
 8009690:	43b3      	bics	r3, r6
 8009692:	d110      	bne.n	80096b6 <_dtoa_r+0x9e>
 8009694:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8009696:	f242 730f 	movw	r3, #9999	@ 0x270f
 800969a:	6013      	str	r3, [r2, #0]
 800969c:	f3c6 0313 	ubfx	r3, r6, #0, #20
 80096a0:	4323      	orrs	r3, r4
 80096a2:	f000 84e6 	beq.w	800a072 <_dtoa_r+0xa5a>
 80096a6:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 80096a8:	4f8a      	ldr	r7, [pc, #552]	@ (80098d4 <_dtoa_r+0x2bc>)
 80096aa:	2b00      	cmp	r3, #0
 80096ac:	f000 84e8 	beq.w	800a080 <_dtoa_r+0xa68>
 80096b0:	1cfb      	adds	r3, r7, #3
 80096b2:	f000 bce3 	b.w	800a07c <_dtoa_r+0xa64>
 80096b6:	ed9d 8b02 	vldr	d8, [sp, #8]
 80096ba:	eeb5 8b40 	vcmp.f64	d8, #0.0
 80096be:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80096c2:	d10a      	bne.n	80096da <_dtoa_r+0xc2>
 80096c4:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 80096c6:	2301      	movs	r3, #1
 80096c8:	6013      	str	r3, [r2, #0]
 80096ca:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 80096cc:	b113      	cbz	r3, 80096d4 <_dtoa_r+0xbc>
 80096ce:	9a1d      	ldr	r2, [sp, #116]	@ 0x74
 80096d0:	4b81      	ldr	r3, [pc, #516]	@ (80098d8 <_dtoa_r+0x2c0>)
 80096d2:	6013      	str	r3, [r2, #0]
 80096d4:	4f81      	ldr	r7, [pc, #516]	@ (80098dc <_dtoa_r+0x2c4>)
 80096d6:	f000 bcd3 	b.w	800a080 <_dtoa_r+0xa68>
 80096da:	aa0e      	add	r2, sp, #56	@ 0x38
 80096dc:	a90f      	add	r1, sp, #60	@ 0x3c
 80096de:	4648      	mov	r0, r9
 80096e0:	eeb0 0b48 	vmov.f64	d0, d8
 80096e4:	f001 fabc 	bl	800ac60 <__d2b>
 80096e8:	f3c6 530a 	ubfx	r3, r6, #20, #11
 80096ec:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80096ee:	9001      	str	r0, [sp, #4]
 80096f0:	2b00      	cmp	r3, #0
 80096f2:	d045      	beq.n	8009780 <_dtoa_r+0x168>
 80096f4:	eeb0 7b48 	vmov.f64	d7, d8
 80096f8:	ee18 1a90 	vmov	r1, s17
 80096fc:	f3c1 0113 	ubfx	r1, r1, #0, #20
 8009700:	f041 517f 	orr.w	r1, r1, #1069547520	@ 0x3fc00000
 8009704:	f441 1140 	orr.w	r1, r1, #3145728	@ 0x300000
 8009708:	f2a3 33ff 	subw	r3, r3, #1023	@ 0x3ff
 800970c:	2500      	movs	r5, #0
 800970e:	ee07 1a90 	vmov	s15, r1
 8009712:	eeb7 6b08 	vmov.f64	d6, #120	@ 0x3fc00000  1.5
 8009716:	ed9f 5b66 	vldr	d5, [pc, #408]	@ 80098b0 <_dtoa_r+0x298>
 800971a:	ee37 7b46 	vsub.f64	d7, d7, d6
 800971e:	ed9f 6b66 	vldr	d6, [pc, #408]	@ 80098b8 <_dtoa_r+0x2a0>
 8009722:	eea7 6b05 	vfma.f64	d6, d7, d5
 8009726:	ed9f 5b66 	vldr	d5, [pc, #408]	@ 80098c0 <_dtoa_r+0x2a8>
 800972a:	ee07 3a90 	vmov	s15, r3
 800972e:	eeb8 4be7 	vcvt.f64.s32	d4, s15
 8009732:	eeb0 7b46 	vmov.f64	d7, d6
 8009736:	eea4 7b05 	vfma.f64	d7, d4, d5
 800973a:	eefd 6bc7 	vcvt.s32.f64	s13, d7
 800973e:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 8009742:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009746:	ee16 8a90 	vmov	r8, s13
 800974a:	d508      	bpl.n	800975e <_dtoa_r+0x146>
 800974c:	eeb8 6be6 	vcvt.f64.s32	d6, s13
 8009750:	eeb4 6b47 	vcmp.f64	d6, d7
 8009754:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009758:	bf18      	it	ne
 800975a:	f108 38ff 	addne.w	r8, r8, #4294967295	@ 0xffffffff
 800975e:	f1b8 0f16 	cmp.w	r8, #22
 8009762:	d82b      	bhi.n	80097bc <_dtoa_r+0x1a4>
 8009764:	495e      	ldr	r1, [pc, #376]	@ (80098e0 <_dtoa_r+0x2c8>)
 8009766:	eb01 01c8 	add.w	r1, r1, r8, lsl #3
 800976a:	ed91 7b00 	vldr	d7, [r1]
 800976e:	eeb4 8bc7 	vcmpe.f64	d8, d7
 8009772:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009776:	d501      	bpl.n	800977c <_dtoa_r+0x164>
 8009778:	f108 38ff 	add.w	r8, r8, #4294967295	@ 0xffffffff
 800977c:	2100      	movs	r1, #0
 800977e:	e01e      	b.n	80097be <_dtoa_r+0x1a6>
 8009780:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8009782:	4413      	add	r3, r2
 8009784:	f203 4132 	addw	r1, r3, #1074	@ 0x432
 8009788:	2920      	cmp	r1, #32
 800978a:	bfc1      	itttt	gt
 800978c:	f1c1 0140 	rsbgt	r1, r1, #64	@ 0x40
 8009790:	408e      	lslgt	r6, r1
 8009792:	f203 4112 	addwgt	r1, r3, #1042	@ 0x412
 8009796:	fa24 f101 	lsrgt.w	r1, r4, r1
 800979a:	bfd6      	itet	le
 800979c:	f1c1 0120 	rsble	r1, r1, #32
 80097a0:	4331      	orrgt	r1, r6
 80097a2:	fa04 f101 	lslle.w	r1, r4, r1
 80097a6:	ee07 1a90 	vmov	s15, r1
 80097aa:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 80097ae:	3b01      	subs	r3, #1
 80097b0:	ee17 1a90 	vmov	r1, s15
 80097b4:	2501      	movs	r5, #1
 80097b6:	f1a1 71f8 	sub.w	r1, r1, #32505856	@ 0x1f00000
 80097ba:	e7a8      	b.n	800970e <_dtoa_r+0xf6>
 80097bc:	2101      	movs	r1, #1
 80097be:	1ad2      	subs	r2, r2, r3
 80097c0:	1e53      	subs	r3, r2, #1
 80097c2:	9306      	str	r3, [sp, #24]
 80097c4:	bf45      	ittet	mi
 80097c6:	f1c2 0301 	rsbmi	r3, r2, #1
 80097ca:	9304      	strmi	r3, [sp, #16]
 80097cc:	2300      	movpl	r3, #0
 80097ce:	2300      	movmi	r3, #0
 80097d0:	bf4c      	ite	mi
 80097d2:	9306      	strmi	r3, [sp, #24]
 80097d4:	9304      	strpl	r3, [sp, #16]
 80097d6:	f1b8 0f00 	cmp.w	r8, #0
 80097da:	910c      	str	r1, [sp, #48]	@ 0x30
 80097dc:	db18      	blt.n	8009810 <_dtoa_r+0x1f8>
 80097de:	9b06      	ldr	r3, [sp, #24]
 80097e0:	f8cd 8028 	str.w	r8, [sp, #40]	@ 0x28
 80097e4:	4443      	add	r3, r8
 80097e6:	9306      	str	r3, [sp, #24]
 80097e8:	2300      	movs	r3, #0
 80097ea:	9a07      	ldr	r2, [sp, #28]
 80097ec:	2a09      	cmp	r2, #9
 80097ee:	d845      	bhi.n	800987c <_dtoa_r+0x264>
 80097f0:	2a05      	cmp	r2, #5
 80097f2:	bfc4      	itt	gt
 80097f4:	3a04      	subgt	r2, #4
 80097f6:	9207      	strgt	r2, [sp, #28]
 80097f8:	9a07      	ldr	r2, [sp, #28]
 80097fa:	f1a2 0202 	sub.w	r2, r2, #2
 80097fe:	bfcc      	ite	gt
 8009800:	2400      	movgt	r4, #0
 8009802:	2401      	movle	r4, #1
 8009804:	2a03      	cmp	r2, #3
 8009806:	d844      	bhi.n	8009892 <_dtoa_r+0x27a>
 8009808:	e8df f002 	tbb	[pc, r2]
 800980c:	0b173634 	.word	0x0b173634
 8009810:	9b04      	ldr	r3, [sp, #16]
 8009812:	2200      	movs	r2, #0
 8009814:	eba3 0308 	sub.w	r3, r3, r8
 8009818:	9304      	str	r3, [sp, #16]
 800981a:	920a      	str	r2, [sp, #40]	@ 0x28
 800981c:	f1c8 0300 	rsb	r3, r8, #0
 8009820:	e7e3      	b.n	80097ea <_dtoa_r+0x1d2>
 8009822:	2201      	movs	r2, #1
 8009824:	9208      	str	r2, [sp, #32]
 8009826:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8009828:	eb08 0b02 	add.w	fp, r8, r2
 800982c:	f10b 0a01 	add.w	sl, fp, #1
 8009830:	4652      	mov	r2, sl
 8009832:	2a01      	cmp	r2, #1
 8009834:	bfb8      	it	lt
 8009836:	2201      	movlt	r2, #1
 8009838:	e006      	b.n	8009848 <_dtoa_r+0x230>
 800983a:	2201      	movs	r2, #1
 800983c:	9208      	str	r2, [sp, #32]
 800983e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8009840:	2a00      	cmp	r2, #0
 8009842:	dd29      	ble.n	8009898 <_dtoa_r+0x280>
 8009844:	4693      	mov	fp, r2
 8009846:	4692      	mov	sl, r2
 8009848:	f8d9 701c 	ldr.w	r7, [r9, #28]
 800984c:	2100      	movs	r1, #0
 800984e:	2004      	movs	r0, #4
 8009850:	f100 0614 	add.w	r6, r0, #20
 8009854:	4296      	cmp	r6, r2
 8009856:	d926      	bls.n	80098a6 <_dtoa_r+0x28e>
 8009858:	6079      	str	r1, [r7, #4]
 800985a:	4648      	mov	r0, r9
 800985c:	9305      	str	r3, [sp, #20]
 800985e:	f000 fedd 	bl	800a61c <_Balloc>
 8009862:	9b05      	ldr	r3, [sp, #20]
 8009864:	4607      	mov	r7, r0
 8009866:	2800      	cmp	r0, #0
 8009868:	d13e      	bne.n	80098e8 <_dtoa_r+0x2d0>
 800986a:	4b1e      	ldr	r3, [pc, #120]	@ (80098e4 <_dtoa_r+0x2cc>)
 800986c:	4602      	mov	r2, r0
 800986e:	f240 11af 	movw	r1, #431	@ 0x1af
 8009872:	e6ea      	b.n	800964a <_dtoa_r+0x32>
 8009874:	2200      	movs	r2, #0
 8009876:	e7e1      	b.n	800983c <_dtoa_r+0x224>
 8009878:	2200      	movs	r2, #0
 800987a:	e7d3      	b.n	8009824 <_dtoa_r+0x20c>
 800987c:	2401      	movs	r4, #1
 800987e:	2200      	movs	r2, #0
 8009880:	e9cd 2407 	strd	r2, r4, [sp, #28]
 8009884:	f04f 3bff 	mov.w	fp, #4294967295	@ 0xffffffff
 8009888:	2100      	movs	r1, #0
 800988a:	46da      	mov	sl, fp
 800988c:	2212      	movs	r2, #18
 800988e:	9109      	str	r1, [sp, #36]	@ 0x24
 8009890:	e7da      	b.n	8009848 <_dtoa_r+0x230>
 8009892:	2201      	movs	r2, #1
 8009894:	9208      	str	r2, [sp, #32]
 8009896:	e7f5      	b.n	8009884 <_dtoa_r+0x26c>
 8009898:	f04f 0b01 	mov.w	fp, #1
 800989c:	46da      	mov	sl, fp
 800989e:	465a      	mov	r2, fp
 80098a0:	f8cd b024 	str.w	fp, [sp, #36]	@ 0x24
 80098a4:	e7d0      	b.n	8009848 <_dtoa_r+0x230>
 80098a6:	3101      	adds	r1, #1
 80098a8:	0040      	lsls	r0, r0, #1
 80098aa:	e7d1      	b.n	8009850 <_dtoa_r+0x238>
 80098ac:	f3af 8000 	nop.w
 80098b0:	636f4361 	.word	0x636f4361
 80098b4:	3fd287a7 	.word	0x3fd287a7
 80098b8:	8b60c8b3 	.word	0x8b60c8b3
 80098bc:	3fc68a28 	.word	0x3fc68a28
 80098c0:	509f79fb 	.word	0x509f79fb
 80098c4:	3fd34413 	.word	0x3fd34413
 80098c8:	0800b36d 	.word	0x0800b36d
 80098cc:	0800b384 	.word	0x0800b384
 80098d0:	7ff00000 	.word	0x7ff00000
 80098d4:	0800b369 	.word	0x0800b369
 80098d8:	0800b33d 	.word	0x0800b33d
 80098dc:	0800b33c 	.word	0x0800b33c
 80098e0:	0800b4d8 	.word	0x0800b4d8
 80098e4:	0800b3dc 	.word	0x0800b3dc
 80098e8:	f8d9 201c 	ldr.w	r2, [r9, #28]
 80098ec:	f1ba 0f0e 	cmp.w	sl, #14
 80098f0:	6010      	str	r0, [r2, #0]
 80098f2:	d86e      	bhi.n	80099d2 <_dtoa_r+0x3ba>
 80098f4:	2c00      	cmp	r4, #0
 80098f6:	d06c      	beq.n	80099d2 <_dtoa_r+0x3ba>
 80098f8:	f1b8 0f00 	cmp.w	r8, #0
 80098fc:	f340 80b4 	ble.w	8009a68 <_dtoa_r+0x450>
 8009900:	4ac8      	ldr	r2, [pc, #800]	@ (8009c24 <_dtoa_r+0x60c>)
 8009902:	f008 010f 	and.w	r1, r8, #15
 8009906:	eb02 02c1 	add.w	r2, r2, r1, lsl #3
 800990a:	f418 7f80 	tst.w	r8, #256	@ 0x100
 800990e:	ed92 7b00 	vldr	d7, [r2]
 8009912:	ea4f 1128 	mov.w	r1, r8, asr #4
 8009916:	f000 809b 	beq.w	8009a50 <_dtoa_r+0x438>
 800991a:	4ac3      	ldr	r2, [pc, #780]	@ (8009c28 <_dtoa_r+0x610>)
 800991c:	ed92 6b08 	vldr	d6, [r2, #32]
 8009920:	ee88 6b06 	vdiv.f64	d6, d8, d6
 8009924:	ed8d 6b02 	vstr	d6, [sp, #8]
 8009928:	f001 010f 	and.w	r1, r1, #15
 800992c:	2203      	movs	r2, #3
 800992e:	48be      	ldr	r0, [pc, #760]	@ (8009c28 <_dtoa_r+0x610>)
 8009930:	2900      	cmp	r1, #0
 8009932:	f040 808f 	bne.w	8009a54 <_dtoa_r+0x43c>
 8009936:	ed9d 6b02 	vldr	d6, [sp, #8]
 800993a:	ee86 7b07 	vdiv.f64	d7, d6, d7
 800993e:	ed8d 7b02 	vstr	d7, [sp, #8]
 8009942:	990c      	ldr	r1, [sp, #48]	@ 0x30
 8009944:	ed9d 7b02 	vldr	d7, [sp, #8]
 8009948:	2900      	cmp	r1, #0
 800994a:	f000 80b3 	beq.w	8009ab4 <_dtoa_r+0x49c>
 800994e:	eeb7 6b00 	vmov.f64	d6, #112	@ 0x3f800000  1.0
 8009952:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8009956:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800995a:	f140 80ab 	bpl.w	8009ab4 <_dtoa_r+0x49c>
 800995e:	f1ba 0f00 	cmp.w	sl, #0
 8009962:	f000 80a7 	beq.w	8009ab4 <_dtoa_r+0x49c>
 8009966:	f1bb 0f00 	cmp.w	fp, #0
 800996a:	dd30      	ble.n	80099ce <_dtoa_r+0x3b6>
 800996c:	eeb2 6b04 	vmov.f64	d6, #36	@ 0x41200000  10.0
 8009970:	ee27 7b06 	vmul.f64	d7, d7, d6
 8009974:	ed8d 7b02 	vstr	d7, [sp, #8]
 8009978:	f108 31ff 	add.w	r1, r8, #4294967295	@ 0xffffffff
 800997c:	9105      	str	r1, [sp, #20]
 800997e:	3201      	adds	r2, #1
 8009980:	465c      	mov	r4, fp
 8009982:	ed9d 6b02 	vldr	d6, [sp, #8]
 8009986:	eeb1 5b0c 	vmov.f64	d5, #28	@ 0x40e00000  7.0
 800998a:	ee07 2a90 	vmov	s15, r2
 800998e:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8009992:	eea7 5b06 	vfma.f64	d5, d7, d6
 8009996:	ee15 2a90 	vmov	r2, s11
 800999a:	ec51 0b15 	vmov	r0, r1, d5
 800999e:	f1a2 7150 	sub.w	r1, r2, #54525952	@ 0x3400000
 80099a2:	2c00      	cmp	r4, #0
 80099a4:	f040 808a 	bne.w	8009abc <_dtoa_r+0x4a4>
 80099a8:	eeb1 7b04 	vmov.f64	d7, #20	@ 0x40a00000  5.0
 80099ac:	ee36 6b47 	vsub.f64	d6, d6, d7
 80099b0:	ec41 0b17 	vmov	d7, r0, r1
 80099b4:	eeb4 6bc7 	vcmpe.f64	d6, d7
 80099b8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80099bc:	f300 826a 	bgt.w	8009e94 <_dtoa_r+0x87c>
 80099c0:	eeb1 7b47 	vneg.f64	d7, d7
 80099c4:	eeb4 6bc7 	vcmpe.f64	d6, d7
 80099c8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80099cc:	d423      	bmi.n	8009a16 <_dtoa_r+0x3fe>
 80099ce:	ed8d 8b02 	vstr	d8, [sp, #8]
 80099d2:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 80099d4:	2a00      	cmp	r2, #0
 80099d6:	f2c0 8129 	blt.w	8009c2c <_dtoa_r+0x614>
 80099da:	f1b8 0f0e 	cmp.w	r8, #14
 80099de:	f300 8125 	bgt.w	8009c2c <_dtoa_r+0x614>
 80099e2:	4b90      	ldr	r3, [pc, #576]	@ (8009c24 <_dtoa_r+0x60c>)
 80099e4:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 80099e8:	ed93 6b00 	vldr	d6, [r3]
 80099ec:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80099ee:	2b00      	cmp	r3, #0
 80099f0:	f280 80c8 	bge.w	8009b84 <_dtoa_r+0x56c>
 80099f4:	f1ba 0f00 	cmp.w	sl, #0
 80099f8:	f300 80c4 	bgt.w	8009b84 <_dtoa_r+0x56c>
 80099fc:	d10b      	bne.n	8009a16 <_dtoa_r+0x3fe>
 80099fe:	eeb1 7b04 	vmov.f64	d7, #20	@ 0x40a00000  5.0
 8009a02:	ee26 6b07 	vmul.f64	d6, d6, d7
 8009a06:	ed9d 7b02 	vldr	d7, [sp, #8]
 8009a0a:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8009a0e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009a12:	f2c0 823c 	blt.w	8009e8e <_dtoa_r+0x876>
 8009a16:	2400      	movs	r4, #0
 8009a18:	4625      	mov	r5, r4
 8009a1a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009a1c:	43db      	mvns	r3, r3
 8009a1e:	9305      	str	r3, [sp, #20]
 8009a20:	463e      	mov	r6, r7
 8009a22:	f04f 0800 	mov.w	r8, #0
 8009a26:	4621      	mov	r1, r4
 8009a28:	4648      	mov	r0, r9
 8009a2a:	f000 fe37 	bl	800a69c <_Bfree>
 8009a2e:	2d00      	cmp	r5, #0
 8009a30:	f000 80a2 	beq.w	8009b78 <_dtoa_r+0x560>
 8009a34:	f1b8 0f00 	cmp.w	r8, #0
 8009a38:	d005      	beq.n	8009a46 <_dtoa_r+0x42e>
 8009a3a:	45a8      	cmp	r8, r5
 8009a3c:	d003      	beq.n	8009a46 <_dtoa_r+0x42e>
 8009a3e:	4641      	mov	r1, r8
 8009a40:	4648      	mov	r0, r9
 8009a42:	f000 fe2b 	bl	800a69c <_Bfree>
 8009a46:	4629      	mov	r1, r5
 8009a48:	4648      	mov	r0, r9
 8009a4a:	f000 fe27 	bl	800a69c <_Bfree>
 8009a4e:	e093      	b.n	8009b78 <_dtoa_r+0x560>
 8009a50:	2202      	movs	r2, #2
 8009a52:	e76c      	b.n	800992e <_dtoa_r+0x316>
 8009a54:	07cc      	lsls	r4, r1, #31
 8009a56:	d504      	bpl.n	8009a62 <_dtoa_r+0x44a>
 8009a58:	ed90 6b00 	vldr	d6, [r0]
 8009a5c:	3201      	adds	r2, #1
 8009a5e:	ee27 7b06 	vmul.f64	d7, d7, d6
 8009a62:	1049      	asrs	r1, r1, #1
 8009a64:	3008      	adds	r0, #8
 8009a66:	e763      	b.n	8009930 <_dtoa_r+0x318>
 8009a68:	d022      	beq.n	8009ab0 <_dtoa_r+0x498>
 8009a6a:	f1c8 0100 	rsb	r1, r8, #0
 8009a6e:	4a6d      	ldr	r2, [pc, #436]	@ (8009c24 <_dtoa_r+0x60c>)
 8009a70:	f001 000f 	and.w	r0, r1, #15
 8009a74:	eb02 02c0 	add.w	r2, r2, r0, lsl #3
 8009a78:	ed92 7b00 	vldr	d7, [r2]
 8009a7c:	ee28 7b07 	vmul.f64	d7, d8, d7
 8009a80:	ed8d 7b02 	vstr	d7, [sp, #8]
 8009a84:	4868      	ldr	r0, [pc, #416]	@ (8009c28 <_dtoa_r+0x610>)
 8009a86:	1109      	asrs	r1, r1, #4
 8009a88:	2400      	movs	r4, #0
 8009a8a:	2202      	movs	r2, #2
 8009a8c:	b929      	cbnz	r1, 8009a9a <_dtoa_r+0x482>
 8009a8e:	2c00      	cmp	r4, #0
 8009a90:	f43f af57 	beq.w	8009942 <_dtoa_r+0x32a>
 8009a94:	ed8d 7b02 	vstr	d7, [sp, #8]
 8009a98:	e753      	b.n	8009942 <_dtoa_r+0x32a>
 8009a9a:	07ce      	lsls	r6, r1, #31
 8009a9c:	d505      	bpl.n	8009aaa <_dtoa_r+0x492>
 8009a9e:	ed90 6b00 	vldr	d6, [r0]
 8009aa2:	3201      	adds	r2, #1
 8009aa4:	2401      	movs	r4, #1
 8009aa6:	ee27 7b06 	vmul.f64	d7, d7, d6
 8009aaa:	1049      	asrs	r1, r1, #1
 8009aac:	3008      	adds	r0, #8
 8009aae:	e7ed      	b.n	8009a8c <_dtoa_r+0x474>
 8009ab0:	2202      	movs	r2, #2
 8009ab2:	e746      	b.n	8009942 <_dtoa_r+0x32a>
 8009ab4:	f8cd 8014 	str.w	r8, [sp, #20]
 8009ab8:	4654      	mov	r4, sl
 8009aba:	e762      	b.n	8009982 <_dtoa_r+0x36a>
 8009abc:	4a59      	ldr	r2, [pc, #356]	@ (8009c24 <_dtoa_r+0x60c>)
 8009abe:	eb02 02c4 	add.w	r2, r2, r4, lsl #3
 8009ac2:	ed12 4b02 	vldr	d4, [r2, #-8]
 8009ac6:	9a08      	ldr	r2, [sp, #32]
 8009ac8:	ec41 0b17 	vmov	d7, r0, r1
 8009acc:	443c      	add	r4, r7
 8009ace:	b34a      	cbz	r2, 8009b24 <_dtoa_r+0x50c>
 8009ad0:	eeb6 3b00 	vmov.f64	d3, #96	@ 0x3f000000  0.5
 8009ad4:	eeb7 2b00 	vmov.f64	d2, #112	@ 0x3f800000  1.0
 8009ad8:	463e      	mov	r6, r7
 8009ada:	ee83 5b04 	vdiv.f64	d5, d3, d4
 8009ade:	eeb2 3b04 	vmov.f64	d3, #36	@ 0x41200000  10.0
 8009ae2:	ee35 7b47 	vsub.f64	d7, d5, d7
 8009ae6:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 8009aea:	ee14 2a90 	vmov	r2, s9
 8009aee:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 8009af2:	3230      	adds	r2, #48	@ 0x30
 8009af4:	ee36 6b45 	vsub.f64	d6, d6, d5
 8009af8:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8009afc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009b00:	f806 2b01 	strb.w	r2, [r6], #1
 8009b04:	d438      	bmi.n	8009b78 <_dtoa_r+0x560>
 8009b06:	ee32 5b46 	vsub.f64	d5, d2, d6
 8009b0a:	eeb4 5bc7 	vcmpe.f64	d5, d7
 8009b0e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009b12:	d46e      	bmi.n	8009bf2 <_dtoa_r+0x5da>
 8009b14:	42a6      	cmp	r6, r4
 8009b16:	f43f af5a 	beq.w	80099ce <_dtoa_r+0x3b6>
 8009b1a:	ee27 7b03 	vmul.f64	d7, d7, d3
 8009b1e:	ee26 6b03 	vmul.f64	d6, d6, d3
 8009b22:	e7e0      	b.n	8009ae6 <_dtoa_r+0x4ce>
 8009b24:	4621      	mov	r1, r4
 8009b26:	463e      	mov	r6, r7
 8009b28:	ee27 7b04 	vmul.f64	d7, d7, d4
 8009b2c:	eeb2 3b04 	vmov.f64	d3, #36	@ 0x41200000  10.0
 8009b30:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 8009b34:	ee14 2a90 	vmov	r2, s9
 8009b38:	3230      	adds	r2, #48	@ 0x30
 8009b3a:	f806 2b01 	strb.w	r2, [r6], #1
 8009b3e:	42a6      	cmp	r6, r4
 8009b40:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 8009b44:	ee36 6b45 	vsub.f64	d6, d6, d5
 8009b48:	d119      	bne.n	8009b7e <_dtoa_r+0x566>
 8009b4a:	eeb6 5b00 	vmov.f64	d5, #96	@ 0x3f000000  0.5
 8009b4e:	ee37 4b05 	vadd.f64	d4, d7, d5
 8009b52:	eeb4 6bc4 	vcmpe.f64	d6, d4
 8009b56:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009b5a:	dc4a      	bgt.n	8009bf2 <_dtoa_r+0x5da>
 8009b5c:	ee35 5b47 	vsub.f64	d5, d5, d7
 8009b60:	eeb4 6bc5 	vcmpe.f64	d6, d5
 8009b64:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009b68:	f57f af31 	bpl.w	80099ce <_dtoa_r+0x3b6>
 8009b6c:	460e      	mov	r6, r1
 8009b6e:	3901      	subs	r1, #1
 8009b70:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8009b74:	2b30      	cmp	r3, #48	@ 0x30
 8009b76:	d0f9      	beq.n	8009b6c <_dtoa_r+0x554>
 8009b78:	f8dd 8014 	ldr.w	r8, [sp, #20]
 8009b7c:	e027      	b.n	8009bce <_dtoa_r+0x5b6>
 8009b7e:	ee26 6b03 	vmul.f64	d6, d6, d3
 8009b82:	e7d5      	b.n	8009b30 <_dtoa_r+0x518>
 8009b84:	ed9d 7b02 	vldr	d7, [sp, #8]
 8009b88:	eeb2 4b04 	vmov.f64	d4, #36	@ 0x41200000  10.0
 8009b8c:	463e      	mov	r6, r7
 8009b8e:	ee87 5b06 	vdiv.f64	d5, d7, d6
 8009b92:	eebd 5bc5 	vcvt.s32.f64	s10, d5
 8009b96:	ee15 3a10 	vmov	r3, s10
 8009b9a:	3330      	adds	r3, #48	@ 0x30
 8009b9c:	f806 3b01 	strb.w	r3, [r6], #1
 8009ba0:	1bf3      	subs	r3, r6, r7
 8009ba2:	459a      	cmp	sl, r3
 8009ba4:	eeb8 3bc5 	vcvt.f64.s32	d3, s10
 8009ba8:	eea3 7b46 	vfms.f64	d7, d3, d6
 8009bac:	d132      	bne.n	8009c14 <_dtoa_r+0x5fc>
 8009bae:	ee37 7b07 	vadd.f64	d7, d7, d7
 8009bb2:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8009bb6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009bba:	dc18      	bgt.n	8009bee <_dtoa_r+0x5d6>
 8009bbc:	eeb4 7b46 	vcmp.f64	d7, d6
 8009bc0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009bc4:	d103      	bne.n	8009bce <_dtoa_r+0x5b6>
 8009bc6:	ee15 3a10 	vmov	r3, s10
 8009bca:	07db      	lsls	r3, r3, #31
 8009bcc:	d40f      	bmi.n	8009bee <_dtoa_r+0x5d6>
 8009bce:	9901      	ldr	r1, [sp, #4]
 8009bd0:	4648      	mov	r0, r9
 8009bd2:	f000 fd63 	bl	800a69c <_Bfree>
 8009bd6:	2300      	movs	r3, #0
 8009bd8:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8009bda:	7033      	strb	r3, [r6, #0]
 8009bdc:	f108 0301 	add.w	r3, r8, #1
 8009be0:	6013      	str	r3, [r2, #0]
 8009be2:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 8009be4:	2b00      	cmp	r3, #0
 8009be6:	f000 824b 	beq.w	800a080 <_dtoa_r+0xa68>
 8009bea:	601e      	str	r6, [r3, #0]
 8009bec:	e248      	b.n	800a080 <_dtoa_r+0xa68>
 8009bee:	f8cd 8014 	str.w	r8, [sp, #20]
 8009bf2:	4633      	mov	r3, r6
 8009bf4:	461e      	mov	r6, r3
 8009bf6:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8009bfa:	2a39      	cmp	r2, #57	@ 0x39
 8009bfc:	d106      	bne.n	8009c0c <_dtoa_r+0x5f4>
 8009bfe:	429f      	cmp	r7, r3
 8009c00:	d1f8      	bne.n	8009bf4 <_dtoa_r+0x5dc>
 8009c02:	9a05      	ldr	r2, [sp, #20]
 8009c04:	3201      	adds	r2, #1
 8009c06:	9205      	str	r2, [sp, #20]
 8009c08:	2230      	movs	r2, #48	@ 0x30
 8009c0a:	703a      	strb	r2, [r7, #0]
 8009c0c:	781a      	ldrb	r2, [r3, #0]
 8009c0e:	3201      	adds	r2, #1
 8009c10:	701a      	strb	r2, [r3, #0]
 8009c12:	e7b1      	b.n	8009b78 <_dtoa_r+0x560>
 8009c14:	ee27 7b04 	vmul.f64	d7, d7, d4
 8009c18:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8009c1c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009c20:	d1b5      	bne.n	8009b8e <_dtoa_r+0x576>
 8009c22:	e7d4      	b.n	8009bce <_dtoa_r+0x5b6>
 8009c24:	0800b4d8 	.word	0x0800b4d8
 8009c28:	0800b4b0 	.word	0x0800b4b0
 8009c2c:	9908      	ldr	r1, [sp, #32]
 8009c2e:	2900      	cmp	r1, #0
 8009c30:	f000 80e9 	beq.w	8009e06 <_dtoa_r+0x7ee>
 8009c34:	9907      	ldr	r1, [sp, #28]
 8009c36:	2901      	cmp	r1, #1
 8009c38:	f300 80cb 	bgt.w	8009dd2 <_dtoa_r+0x7ba>
 8009c3c:	2d00      	cmp	r5, #0
 8009c3e:	f000 80c4 	beq.w	8009dca <_dtoa_r+0x7b2>
 8009c42:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 8009c46:	9e04      	ldr	r6, [sp, #16]
 8009c48:	461c      	mov	r4, r3
 8009c4a:	9305      	str	r3, [sp, #20]
 8009c4c:	9b04      	ldr	r3, [sp, #16]
 8009c4e:	4413      	add	r3, r2
 8009c50:	9304      	str	r3, [sp, #16]
 8009c52:	9b06      	ldr	r3, [sp, #24]
 8009c54:	2101      	movs	r1, #1
 8009c56:	4413      	add	r3, r2
 8009c58:	4648      	mov	r0, r9
 8009c5a:	9306      	str	r3, [sp, #24]
 8009c5c:	f000 fdd2 	bl	800a804 <__i2b>
 8009c60:	9b05      	ldr	r3, [sp, #20]
 8009c62:	4605      	mov	r5, r0
 8009c64:	b166      	cbz	r6, 8009c80 <_dtoa_r+0x668>
 8009c66:	9a06      	ldr	r2, [sp, #24]
 8009c68:	2a00      	cmp	r2, #0
 8009c6a:	dd09      	ble.n	8009c80 <_dtoa_r+0x668>
 8009c6c:	42b2      	cmp	r2, r6
 8009c6e:	9904      	ldr	r1, [sp, #16]
 8009c70:	bfa8      	it	ge
 8009c72:	4632      	movge	r2, r6
 8009c74:	1a89      	subs	r1, r1, r2
 8009c76:	9104      	str	r1, [sp, #16]
 8009c78:	9906      	ldr	r1, [sp, #24]
 8009c7a:	1ab6      	subs	r6, r6, r2
 8009c7c:	1a8a      	subs	r2, r1, r2
 8009c7e:	9206      	str	r2, [sp, #24]
 8009c80:	b30b      	cbz	r3, 8009cc6 <_dtoa_r+0x6ae>
 8009c82:	9a08      	ldr	r2, [sp, #32]
 8009c84:	2a00      	cmp	r2, #0
 8009c86:	f000 80c5 	beq.w	8009e14 <_dtoa_r+0x7fc>
 8009c8a:	2c00      	cmp	r4, #0
 8009c8c:	f000 80bf 	beq.w	8009e0e <_dtoa_r+0x7f6>
 8009c90:	4629      	mov	r1, r5
 8009c92:	4622      	mov	r2, r4
 8009c94:	4648      	mov	r0, r9
 8009c96:	930b      	str	r3, [sp, #44]	@ 0x2c
 8009c98:	f000 fe6c 	bl	800a974 <__pow5mult>
 8009c9c:	9a01      	ldr	r2, [sp, #4]
 8009c9e:	4601      	mov	r1, r0
 8009ca0:	4605      	mov	r5, r0
 8009ca2:	4648      	mov	r0, r9
 8009ca4:	f000 fdc4 	bl	800a830 <__multiply>
 8009ca8:	9901      	ldr	r1, [sp, #4]
 8009caa:	9005      	str	r0, [sp, #20]
 8009cac:	4648      	mov	r0, r9
 8009cae:	f000 fcf5 	bl	800a69c <_Bfree>
 8009cb2:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8009cb4:	1b1b      	subs	r3, r3, r4
 8009cb6:	f000 80b0 	beq.w	8009e1a <_dtoa_r+0x802>
 8009cba:	9905      	ldr	r1, [sp, #20]
 8009cbc:	461a      	mov	r2, r3
 8009cbe:	4648      	mov	r0, r9
 8009cc0:	f000 fe58 	bl	800a974 <__pow5mult>
 8009cc4:	9001      	str	r0, [sp, #4]
 8009cc6:	2101      	movs	r1, #1
 8009cc8:	4648      	mov	r0, r9
 8009cca:	f000 fd9b 	bl	800a804 <__i2b>
 8009cce:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8009cd0:	4604      	mov	r4, r0
 8009cd2:	2b00      	cmp	r3, #0
 8009cd4:	f000 81da 	beq.w	800a08c <_dtoa_r+0xa74>
 8009cd8:	461a      	mov	r2, r3
 8009cda:	4601      	mov	r1, r0
 8009cdc:	4648      	mov	r0, r9
 8009cde:	f000 fe49 	bl	800a974 <__pow5mult>
 8009ce2:	9b07      	ldr	r3, [sp, #28]
 8009ce4:	2b01      	cmp	r3, #1
 8009ce6:	4604      	mov	r4, r0
 8009ce8:	f300 80a0 	bgt.w	8009e2c <_dtoa_r+0x814>
 8009cec:	9b02      	ldr	r3, [sp, #8]
 8009cee:	2b00      	cmp	r3, #0
 8009cf0:	f040 8096 	bne.w	8009e20 <_dtoa_r+0x808>
 8009cf4:	9b03      	ldr	r3, [sp, #12]
 8009cf6:	f3c3 0213 	ubfx	r2, r3, #0, #20
 8009cfa:	2a00      	cmp	r2, #0
 8009cfc:	f040 8092 	bne.w	8009e24 <_dtoa_r+0x80c>
 8009d00:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8009d04:	0d12      	lsrs	r2, r2, #20
 8009d06:	0512      	lsls	r2, r2, #20
 8009d08:	2a00      	cmp	r2, #0
 8009d0a:	f000 808d 	beq.w	8009e28 <_dtoa_r+0x810>
 8009d0e:	9b04      	ldr	r3, [sp, #16]
 8009d10:	3301      	adds	r3, #1
 8009d12:	9304      	str	r3, [sp, #16]
 8009d14:	9b06      	ldr	r3, [sp, #24]
 8009d16:	3301      	adds	r3, #1
 8009d18:	9306      	str	r3, [sp, #24]
 8009d1a:	2301      	movs	r3, #1
 8009d1c:	930b      	str	r3, [sp, #44]	@ 0x2c
 8009d1e:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8009d20:	2b00      	cmp	r3, #0
 8009d22:	f000 81b9 	beq.w	800a098 <_dtoa_r+0xa80>
 8009d26:	6922      	ldr	r2, [r4, #16]
 8009d28:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 8009d2c:	6910      	ldr	r0, [r2, #16]
 8009d2e:	f000 fd1d 	bl	800a76c <__hi0bits>
 8009d32:	f1c0 0020 	rsb	r0, r0, #32
 8009d36:	9b06      	ldr	r3, [sp, #24]
 8009d38:	4418      	add	r0, r3
 8009d3a:	f010 001f 	ands.w	r0, r0, #31
 8009d3e:	f000 8081 	beq.w	8009e44 <_dtoa_r+0x82c>
 8009d42:	f1c0 0220 	rsb	r2, r0, #32
 8009d46:	2a04      	cmp	r2, #4
 8009d48:	dd73      	ble.n	8009e32 <_dtoa_r+0x81a>
 8009d4a:	9b04      	ldr	r3, [sp, #16]
 8009d4c:	f1c0 001c 	rsb	r0, r0, #28
 8009d50:	4403      	add	r3, r0
 8009d52:	9304      	str	r3, [sp, #16]
 8009d54:	9b06      	ldr	r3, [sp, #24]
 8009d56:	4406      	add	r6, r0
 8009d58:	4403      	add	r3, r0
 8009d5a:	9306      	str	r3, [sp, #24]
 8009d5c:	9b04      	ldr	r3, [sp, #16]
 8009d5e:	2b00      	cmp	r3, #0
 8009d60:	dd05      	ble.n	8009d6e <_dtoa_r+0x756>
 8009d62:	9901      	ldr	r1, [sp, #4]
 8009d64:	461a      	mov	r2, r3
 8009d66:	4648      	mov	r0, r9
 8009d68:	f000 fe5e 	bl	800aa28 <__lshift>
 8009d6c:	9001      	str	r0, [sp, #4]
 8009d6e:	9b06      	ldr	r3, [sp, #24]
 8009d70:	2b00      	cmp	r3, #0
 8009d72:	dd05      	ble.n	8009d80 <_dtoa_r+0x768>
 8009d74:	4621      	mov	r1, r4
 8009d76:	461a      	mov	r2, r3
 8009d78:	4648      	mov	r0, r9
 8009d7a:	f000 fe55 	bl	800aa28 <__lshift>
 8009d7e:	4604      	mov	r4, r0
 8009d80:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8009d82:	2b00      	cmp	r3, #0
 8009d84:	d060      	beq.n	8009e48 <_dtoa_r+0x830>
 8009d86:	9801      	ldr	r0, [sp, #4]
 8009d88:	4621      	mov	r1, r4
 8009d8a:	f000 feb9 	bl	800ab00 <__mcmp>
 8009d8e:	2800      	cmp	r0, #0
 8009d90:	da5a      	bge.n	8009e48 <_dtoa_r+0x830>
 8009d92:	f108 33ff 	add.w	r3, r8, #4294967295	@ 0xffffffff
 8009d96:	9305      	str	r3, [sp, #20]
 8009d98:	9901      	ldr	r1, [sp, #4]
 8009d9a:	2300      	movs	r3, #0
 8009d9c:	220a      	movs	r2, #10
 8009d9e:	4648      	mov	r0, r9
 8009da0:	f000 fc9e 	bl	800a6e0 <__multadd>
 8009da4:	9b08      	ldr	r3, [sp, #32]
 8009da6:	9001      	str	r0, [sp, #4]
 8009da8:	2b00      	cmp	r3, #0
 8009daa:	f000 8177 	beq.w	800a09c <_dtoa_r+0xa84>
 8009dae:	4629      	mov	r1, r5
 8009db0:	2300      	movs	r3, #0
 8009db2:	220a      	movs	r2, #10
 8009db4:	4648      	mov	r0, r9
 8009db6:	f000 fc93 	bl	800a6e0 <__multadd>
 8009dba:	f1bb 0f00 	cmp.w	fp, #0
 8009dbe:	4605      	mov	r5, r0
 8009dc0:	dc6e      	bgt.n	8009ea0 <_dtoa_r+0x888>
 8009dc2:	9b07      	ldr	r3, [sp, #28]
 8009dc4:	2b02      	cmp	r3, #2
 8009dc6:	dc48      	bgt.n	8009e5a <_dtoa_r+0x842>
 8009dc8:	e06a      	b.n	8009ea0 <_dtoa_r+0x888>
 8009dca:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8009dcc:	f1c2 0236 	rsb	r2, r2, #54	@ 0x36
 8009dd0:	e739      	b.n	8009c46 <_dtoa_r+0x62e>
 8009dd2:	f10a 34ff 	add.w	r4, sl, #4294967295	@ 0xffffffff
 8009dd6:	42a3      	cmp	r3, r4
 8009dd8:	db07      	blt.n	8009dea <_dtoa_r+0x7d2>
 8009dda:	f1ba 0f00 	cmp.w	sl, #0
 8009dde:	eba3 0404 	sub.w	r4, r3, r4
 8009de2:	db0b      	blt.n	8009dfc <_dtoa_r+0x7e4>
 8009de4:	9e04      	ldr	r6, [sp, #16]
 8009de6:	4652      	mov	r2, sl
 8009de8:	e72f      	b.n	8009c4a <_dtoa_r+0x632>
 8009dea:	1ae2      	subs	r2, r4, r3
 8009dec:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8009dee:	9e04      	ldr	r6, [sp, #16]
 8009df0:	4413      	add	r3, r2
 8009df2:	930a      	str	r3, [sp, #40]	@ 0x28
 8009df4:	4652      	mov	r2, sl
 8009df6:	4623      	mov	r3, r4
 8009df8:	2400      	movs	r4, #0
 8009dfa:	e726      	b.n	8009c4a <_dtoa_r+0x632>
 8009dfc:	9a04      	ldr	r2, [sp, #16]
 8009dfe:	eba2 060a 	sub.w	r6, r2, sl
 8009e02:	2200      	movs	r2, #0
 8009e04:	e721      	b.n	8009c4a <_dtoa_r+0x632>
 8009e06:	9e04      	ldr	r6, [sp, #16]
 8009e08:	9d08      	ldr	r5, [sp, #32]
 8009e0a:	461c      	mov	r4, r3
 8009e0c:	e72a      	b.n	8009c64 <_dtoa_r+0x64c>
 8009e0e:	9a01      	ldr	r2, [sp, #4]
 8009e10:	9205      	str	r2, [sp, #20]
 8009e12:	e752      	b.n	8009cba <_dtoa_r+0x6a2>
 8009e14:	9901      	ldr	r1, [sp, #4]
 8009e16:	461a      	mov	r2, r3
 8009e18:	e751      	b.n	8009cbe <_dtoa_r+0x6a6>
 8009e1a:	9b05      	ldr	r3, [sp, #20]
 8009e1c:	9301      	str	r3, [sp, #4]
 8009e1e:	e752      	b.n	8009cc6 <_dtoa_r+0x6ae>
 8009e20:	2300      	movs	r3, #0
 8009e22:	e77b      	b.n	8009d1c <_dtoa_r+0x704>
 8009e24:	9b02      	ldr	r3, [sp, #8]
 8009e26:	e779      	b.n	8009d1c <_dtoa_r+0x704>
 8009e28:	920b      	str	r2, [sp, #44]	@ 0x2c
 8009e2a:	e778      	b.n	8009d1e <_dtoa_r+0x706>
 8009e2c:	2300      	movs	r3, #0
 8009e2e:	930b      	str	r3, [sp, #44]	@ 0x2c
 8009e30:	e779      	b.n	8009d26 <_dtoa_r+0x70e>
 8009e32:	d093      	beq.n	8009d5c <_dtoa_r+0x744>
 8009e34:	9b04      	ldr	r3, [sp, #16]
 8009e36:	321c      	adds	r2, #28
 8009e38:	4413      	add	r3, r2
 8009e3a:	9304      	str	r3, [sp, #16]
 8009e3c:	9b06      	ldr	r3, [sp, #24]
 8009e3e:	4416      	add	r6, r2
 8009e40:	4413      	add	r3, r2
 8009e42:	e78a      	b.n	8009d5a <_dtoa_r+0x742>
 8009e44:	4602      	mov	r2, r0
 8009e46:	e7f5      	b.n	8009e34 <_dtoa_r+0x81c>
 8009e48:	f1ba 0f00 	cmp.w	sl, #0
 8009e4c:	f8cd 8014 	str.w	r8, [sp, #20]
 8009e50:	46d3      	mov	fp, sl
 8009e52:	dc21      	bgt.n	8009e98 <_dtoa_r+0x880>
 8009e54:	9b07      	ldr	r3, [sp, #28]
 8009e56:	2b02      	cmp	r3, #2
 8009e58:	dd1e      	ble.n	8009e98 <_dtoa_r+0x880>
 8009e5a:	f1bb 0f00 	cmp.w	fp, #0
 8009e5e:	f47f addc 	bne.w	8009a1a <_dtoa_r+0x402>
 8009e62:	4621      	mov	r1, r4
 8009e64:	465b      	mov	r3, fp
 8009e66:	2205      	movs	r2, #5
 8009e68:	4648      	mov	r0, r9
 8009e6a:	f000 fc39 	bl	800a6e0 <__multadd>
 8009e6e:	4601      	mov	r1, r0
 8009e70:	4604      	mov	r4, r0
 8009e72:	9801      	ldr	r0, [sp, #4]
 8009e74:	f000 fe44 	bl	800ab00 <__mcmp>
 8009e78:	2800      	cmp	r0, #0
 8009e7a:	f77f adce 	ble.w	8009a1a <_dtoa_r+0x402>
 8009e7e:	463e      	mov	r6, r7
 8009e80:	2331      	movs	r3, #49	@ 0x31
 8009e82:	f806 3b01 	strb.w	r3, [r6], #1
 8009e86:	9b05      	ldr	r3, [sp, #20]
 8009e88:	3301      	adds	r3, #1
 8009e8a:	9305      	str	r3, [sp, #20]
 8009e8c:	e5c9      	b.n	8009a22 <_dtoa_r+0x40a>
 8009e8e:	f8cd 8014 	str.w	r8, [sp, #20]
 8009e92:	4654      	mov	r4, sl
 8009e94:	4625      	mov	r5, r4
 8009e96:	e7f2      	b.n	8009e7e <_dtoa_r+0x866>
 8009e98:	9b08      	ldr	r3, [sp, #32]
 8009e9a:	2b00      	cmp	r3, #0
 8009e9c:	f000 8102 	beq.w	800a0a4 <_dtoa_r+0xa8c>
 8009ea0:	2e00      	cmp	r6, #0
 8009ea2:	dd05      	ble.n	8009eb0 <_dtoa_r+0x898>
 8009ea4:	4629      	mov	r1, r5
 8009ea6:	4632      	mov	r2, r6
 8009ea8:	4648      	mov	r0, r9
 8009eaa:	f000 fdbd 	bl	800aa28 <__lshift>
 8009eae:	4605      	mov	r5, r0
 8009eb0:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8009eb2:	2b00      	cmp	r3, #0
 8009eb4:	d058      	beq.n	8009f68 <_dtoa_r+0x950>
 8009eb6:	6869      	ldr	r1, [r5, #4]
 8009eb8:	4648      	mov	r0, r9
 8009eba:	f000 fbaf 	bl	800a61c <_Balloc>
 8009ebe:	4606      	mov	r6, r0
 8009ec0:	b928      	cbnz	r0, 8009ece <_dtoa_r+0x8b6>
 8009ec2:	4b82      	ldr	r3, [pc, #520]	@ (800a0cc <_dtoa_r+0xab4>)
 8009ec4:	4602      	mov	r2, r0
 8009ec6:	f240 21ef 	movw	r1, #751	@ 0x2ef
 8009eca:	f7ff bbbe 	b.w	800964a <_dtoa_r+0x32>
 8009ece:	692a      	ldr	r2, [r5, #16]
 8009ed0:	3202      	adds	r2, #2
 8009ed2:	0092      	lsls	r2, r2, #2
 8009ed4:	f105 010c 	add.w	r1, r5, #12
 8009ed8:	300c      	adds	r0, #12
 8009eda:	f7ff fb07 	bl	80094ec <memcpy>
 8009ede:	2201      	movs	r2, #1
 8009ee0:	4631      	mov	r1, r6
 8009ee2:	4648      	mov	r0, r9
 8009ee4:	f000 fda0 	bl	800aa28 <__lshift>
 8009ee8:	1c7b      	adds	r3, r7, #1
 8009eea:	9304      	str	r3, [sp, #16]
 8009eec:	eb07 030b 	add.w	r3, r7, fp
 8009ef0:	9309      	str	r3, [sp, #36]	@ 0x24
 8009ef2:	9b02      	ldr	r3, [sp, #8]
 8009ef4:	f003 0301 	and.w	r3, r3, #1
 8009ef8:	46a8      	mov	r8, r5
 8009efa:	9308      	str	r3, [sp, #32]
 8009efc:	4605      	mov	r5, r0
 8009efe:	9b04      	ldr	r3, [sp, #16]
 8009f00:	9801      	ldr	r0, [sp, #4]
 8009f02:	4621      	mov	r1, r4
 8009f04:	f103 3bff 	add.w	fp, r3, #4294967295	@ 0xffffffff
 8009f08:	f7ff fafe 	bl	8009508 <quorem>
 8009f0c:	4641      	mov	r1, r8
 8009f0e:	9002      	str	r0, [sp, #8]
 8009f10:	f100 0a30 	add.w	sl, r0, #48	@ 0x30
 8009f14:	9801      	ldr	r0, [sp, #4]
 8009f16:	f000 fdf3 	bl	800ab00 <__mcmp>
 8009f1a:	462a      	mov	r2, r5
 8009f1c:	9006      	str	r0, [sp, #24]
 8009f1e:	4621      	mov	r1, r4
 8009f20:	4648      	mov	r0, r9
 8009f22:	f000 fe09 	bl	800ab38 <__mdiff>
 8009f26:	68c2      	ldr	r2, [r0, #12]
 8009f28:	4606      	mov	r6, r0
 8009f2a:	b9fa      	cbnz	r2, 8009f6c <_dtoa_r+0x954>
 8009f2c:	4601      	mov	r1, r0
 8009f2e:	9801      	ldr	r0, [sp, #4]
 8009f30:	f000 fde6 	bl	800ab00 <__mcmp>
 8009f34:	4602      	mov	r2, r0
 8009f36:	4631      	mov	r1, r6
 8009f38:	4648      	mov	r0, r9
 8009f3a:	920a      	str	r2, [sp, #40]	@ 0x28
 8009f3c:	f000 fbae 	bl	800a69c <_Bfree>
 8009f40:	9b07      	ldr	r3, [sp, #28]
 8009f42:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8009f44:	9e04      	ldr	r6, [sp, #16]
 8009f46:	ea42 0103 	orr.w	r1, r2, r3
 8009f4a:	9b08      	ldr	r3, [sp, #32]
 8009f4c:	4319      	orrs	r1, r3
 8009f4e:	d10f      	bne.n	8009f70 <_dtoa_r+0x958>
 8009f50:	f1ba 0f39 	cmp.w	sl, #57	@ 0x39
 8009f54:	d028      	beq.n	8009fa8 <_dtoa_r+0x990>
 8009f56:	9b06      	ldr	r3, [sp, #24]
 8009f58:	2b00      	cmp	r3, #0
 8009f5a:	dd02      	ble.n	8009f62 <_dtoa_r+0x94a>
 8009f5c:	9b02      	ldr	r3, [sp, #8]
 8009f5e:	f103 0a31 	add.w	sl, r3, #49	@ 0x31
 8009f62:	f88b a000 	strb.w	sl, [fp]
 8009f66:	e55e      	b.n	8009a26 <_dtoa_r+0x40e>
 8009f68:	4628      	mov	r0, r5
 8009f6a:	e7bd      	b.n	8009ee8 <_dtoa_r+0x8d0>
 8009f6c:	2201      	movs	r2, #1
 8009f6e:	e7e2      	b.n	8009f36 <_dtoa_r+0x91e>
 8009f70:	9b06      	ldr	r3, [sp, #24]
 8009f72:	2b00      	cmp	r3, #0
 8009f74:	db04      	blt.n	8009f80 <_dtoa_r+0x968>
 8009f76:	9907      	ldr	r1, [sp, #28]
 8009f78:	430b      	orrs	r3, r1
 8009f7a:	9908      	ldr	r1, [sp, #32]
 8009f7c:	430b      	orrs	r3, r1
 8009f7e:	d120      	bne.n	8009fc2 <_dtoa_r+0x9aa>
 8009f80:	2a00      	cmp	r2, #0
 8009f82:	ddee      	ble.n	8009f62 <_dtoa_r+0x94a>
 8009f84:	9901      	ldr	r1, [sp, #4]
 8009f86:	2201      	movs	r2, #1
 8009f88:	4648      	mov	r0, r9
 8009f8a:	f000 fd4d 	bl	800aa28 <__lshift>
 8009f8e:	4621      	mov	r1, r4
 8009f90:	9001      	str	r0, [sp, #4]
 8009f92:	f000 fdb5 	bl	800ab00 <__mcmp>
 8009f96:	2800      	cmp	r0, #0
 8009f98:	dc03      	bgt.n	8009fa2 <_dtoa_r+0x98a>
 8009f9a:	d1e2      	bne.n	8009f62 <_dtoa_r+0x94a>
 8009f9c:	f01a 0f01 	tst.w	sl, #1
 8009fa0:	d0df      	beq.n	8009f62 <_dtoa_r+0x94a>
 8009fa2:	f1ba 0f39 	cmp.w	sl, #57	@ 0x39
 8009fa6:	d1d9      	bne.n	8009f5c <_dtoa_r+0x944>
 8009fa8:	2339      	movs	r3, #57	@ 0x39
 8009faa:	f88b 3000 	strb.w	r3, [fp]
 8009fae:	4633      	mov	r3, r6
 8009fb0:	461e      	mov	r6, r3
 8009fb2:	3b01      	subs	r3, #1
 8009fb4:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 8009fb8:	2a39      	cmp	r2, #57	@ 0x39
 8009fba:	d052      	beq.n	800a062 <_dtoa_r+0xa4a>
 8009fbc:	3201      	adds	r2, #1
 8009fbe:	701a      	strb	r2, [r3, #0]
 8009fc0:	e531      	b.n	8009a26 <_dtoa_r+0x40e>
 8009fc2:	2a00      	cmp	r2, #0
 8009fc4:	dd07      	ble.n	8009fd6 <_dtoa_r+0x9be>
 8009fc6:	f1ba 0f39 	cmp.w	sl, #57	@ 0x39
 8009fca:	d0ed      	beq.n	8009fa8 <_dtoa_r+0x990>
 8009fcc:	f10a 0301 	add.w	r3, sl, #1
 8009fd0:	f88b 3000 	strb.w	r3, [fp]
 8009fd4:	e527      	b.n	8009a26 <_dtoa_r+0x40e>
 8009fd6:	9b04      	ldr	r3, [sp, #16]
 8009fd8:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8009fda:	f803 ac01 	strb.w	sl, [r3, #-1]
 8009fde:	4293      	cmp	r3, r2
 8009fe0:	d029      	beq.n	800a036 <_dtoa_r+0xa1e>
 8009fe2:	9901      	ldr	r1, [sp, #4]
 8009fe4:	2300      	movs	r3, #0
 8009fe6:	220a      	movs	r2, #10
 8009fe8:	4648      	mov	r0, r9
 8009fea:	f000 fb79 	bl	800a6e0 <__multadd>
 8009fee:	45a8      	cmp	r8, r5
 8009ff0:	9001      	str	r0, [sp, #4]
 8009ff2:	f04f 0300 	mov.w	r3, #0
 8009ff6:	f04f 020a 	mov.w	r2, #10
 8009ffa:	4641      	mov	r1, r8
 8009ffc:	4648      	mov	r0, r9
 8009ffe:	d107      	bne.n	800a010 <_dtoa_r+0x9f8>
 800a000:	f000 fb6e 	bl	800a6e0 <__multadd>
 800a004:	4680      	mov	r8, r0
 800a006:	4605      	mov	r5, r0
 800a008:	9b04      	ldr	r3, [sp, #16]
 800a00a:	3301      	adds	r3, #1
 800a00c:	9304      	str	r3, [sp, #16]
 800a00e:	e776      	b.n	8009efe <_dtoa_r+0x8e6>
 800a010:	f000 fb66 	bl	800a6e0 <__multadd>
 800a014:	4629      	mov	r1, r5
 800a016:	4680      	mov	r8, r0
 800a018:	2300      	movs	r3, #0
 800a01a:	220a      	movs	r2, #10
 800a01c:	4648      	mov	r0, r9
 800a01e:	f000 fb5f 	bl	800a6e0 <__multadd>
 800a022:	4605      	mov	r5, r0
 800a024:	e7f0      	b.n	800a008 <_dtoa_r+0x9f0>
 800a026:	f1bb 0f00 	cmp.w	fp, #0
 800a02a:	bfcc      	ite	gt
 800a02c:	465e      	movgt	r6, fp
 800a02e:	2601      	movle	r6, #1
 800a030:	443e      	add	r6, r7
 800a032:	f04f 0800 	mov.w	r8, #0
 800a036:	9901      	ldr	r1, [sp, #4]
 800a038:	2201      	movs	r2, #1
 800a03a:	4648      	mov	r0, r9
 800a03c:	f000 fcf4 	bl	800aa28 <__lshift>
 800a040:	4621      	mov	r1, r4
 800a042:	9001      	str	r0, [sp, #4]
 800a044:	f000 fd5c 	bl	800ab00 <__mcmp>
 800a048:	2800      	cmp	r0, #0
 800a04a:	dcb0      	bgt.n	8009fae <_dtoa_r+0x996>
 800a04c:	d102      	bne.n	800a054 <_dtoa_r+0xa3c>
 800a04e:	f01a 0f01 	tst.w	sl, #1
 800a052:	d1ac      	bne.n	8009fae <_dtoa_r+0x996>
 800a054:	4633      	mov	r3, r6
 800a056:	461e      	mov	r6, r3
 800a058:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800a05c:	2a30      	cmp	r2, #48	@ 0x30
 800a05e:	d0fa      	beq.n	800a056 <_dtoa_r+0xa3e>
 800a060:	e4e1      	b.n	8009a26 <_dtoa_r+0x40e>
 800a062:	429f      	cmp	r7, r3
 800a064:	d1a4      	bne.n	8009fb0 <_dtoa_r+0x998>
 800a066:	9b05      	ldr	r3, [sp, #20]
 800a068:	3301      	adds	r3, #1
 800a06a:	9305      	str	r3, [sp, #20]
 800a06c:	2331      	movs	r3, #49	@ 0x31
 800a06e:	703b      	strb	r3, [r7, #0]
 800a070:	e4d9      	b.n	8009a26 <_dtoa_r+0x40e>
 800a072:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 800a074:	4f16      	ldr	r7, [pc, #88]	@ (800a0d0 <_dtoa_r+0xab8>)
 800a076:	b11b      	cbz	r3, 800a080 <_dtoa_r+0xa68>
 800a078:	f107 0308 	add.w	r3, r7, #8
 800a07c:	9a1d      	ldr	r2, [sp, #116]	@ 0x74
 800a07e:	6013      	str	r3, [r2, #0]
 800a080:	4638      	mov	r0, r7
 800a082:	b011      	add	sp, #68	@ 0x44
 800a084:	ecbd 8b02 	vpop	{d8}
 800a088:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a08c:	9b07      	ldr	r3, [sp, #28]
 800a08e:	2b01      	cmp	r3, #1
 800a090:	f77f ae2c 	ble.w	8009cec <_dtoa_r+0x6d4>
 800a094:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800a096:	930b      	str	r3, [sp, #44]	@ 0x2c
 800a098:	2001      	movs	r0, #1
 800a09a:	e64c      	b.n	8009d36 <_dtoa_r+0x71e>
 800a09c:	f1bb 0f00 	cmp.w	fp, #0
 800a0a0:	f77f aed8 	ble.w	8009e54 <_dtoa_r+0x83c>
 800a0a4:	463e      	mov	r6, r7
 800a0a6:	9801      	ldr	r0, [sp, #4]
 800a0a8:	4621      	mov	r1, r4
 800a0aa:	f7ff fa2d 	bl	8009508 <quorem>
 800a0ae:	f100 0a30 	add.w	sl, r0, #48	@ 0x30
 800a0b2:	f806 ab01 	strb.w	sl, [r6], #1
 800a0b6:	1bf2      	subs	r2, r6, r7
 800a0b8:	4593      	cmp	fp, r2
 800a0ba:	ddb4      	ble.n	800a026 <_dtoa_r+0xa0e>
 800a0bc:	9901      	ldr	r1, [sp, #4]
 800a0be:	2300      	movs	r3, #0
 800a0c0:	220a      	movs	r2, #10
 800a0c2:	4648      	mov	r0, r9
 800a0c4:	f000 fb0c 	bl	800a6e0 <__multadd>
 800a0c8:	9001      	str	r0, [sp, #4]
 800a0ca:	e7ec      	b.n	800a0a6 <_dtoa_r+0xa8e>
 800a0cc:	0800b3dc 	.word	0x0800b3dc
 800a0d0:	0800b360 	.word	0x0800b360

0800a0d4 <__sfputc_r>:
 800a0d4:	6893      	ldr	r3, [r2, #8]
 800a0d6:	3b01      	subs	r3, #1
 800a0d8:	2b00      	cmp	r3, #0
 800a0da:	b410      	push	{r4}
 800a0dc:	6093      	str	r3, [r2, #8]
 800a0de:	da08      	bge.n	800a0f2 <__sfputc_r+0x1e>
 800a0e0:	6994      	ldr	r4, [r2, #24]
 800a0e2:	42a3      	cmp	r3, r4
 800a0e4:	db01      	blt.n	800a0ea <__sfputc_r+0x16>
 800a0e6:	290a      	cmp	r1, #10
 800a0e8:	d103      	bne.n	800a0f2 <__sfputc_r+0x1e>
 800a0ea:	f85d 4b04 	ldr.w	r4, [sp], #4
 800a0ee:	f000 be52 	b.w	800ad96 <__swbuf_r>
 800a0f2:	6813      	ldr	r3, [r2, #0]
 800a0f4:	1c58      	adds	r0, r3, #1
 800a0f6:	6010      	str	r0, [r2, #0]
 800a0f8:	7019      	strb	r1, [r3, #0]
 800a0fa:	4608      	mov	r0, r1
 800a0fc:	f85d 4b04 	ldr.w	r4, [sp], #4
 800a100:	4770      	bx	lr

0800a102 <__sfputs_r>:
 800a102:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a104:	4606      	mov	r6, r0
 800a106:	460f      	mov	r7, r1
 800a108:	4614      	mov	r4, r2
 800a10a:	18d5      	adds	r5, r2, r3
 800a10c:	42ac      	cmp	r4, r5
 800a10e:	d101      	bne.n	800a114 <__sfputs_r+0x12>
 800a110:	2000      	movs	r0, #0
 800a112:	e007      	b.n	800a124 <__sfputs_r+0x22>
 800a114:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a118:	463a      	mov	r2, r7
 800a11a:	4630      	mov	r0, r6
 800a11c:	f7ff ffda 	bl	800a0d4 <__sfputc_r>
 800a120:	1c43      	adds	r3, r0, #1
 800a122:	d1f3      	bne.n	800a10c <__sfputs_r+0xa>
 800a124:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800a128 <_vfiprintf_r>:
 800a128:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a12c:	460d      	mov	r5, r1
 800a12e:	b09d      	sub	sp, #116	@ 0x74
 800a130:	4614      	mov	r4, r2
 800a132:	4698      	mov	r8, r3
 800a134:	4606      	mov	r6, r0
 800a136:	b118      	cbz	r0, 800a140 <_vfiprintf_r+0x18>
 800a138:	6a03      	ldr	r3, [r0, #32]
 800a13a:	b90b      	cbnz	r3, 800a140 <_vfiprintf_r+0x18>
 800a13c:	f7ff f8f6 	bl	800932c <__sinit>
 800a140:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800a142:	07d9      	lsls	r1, r3, #31
 800a144:	d405      	bmi.n	800a152 <_vfiprintf_r+0x2a>
 800a146:	89ab      	ldrh	r3, [r5, #12]
 800a148:	059a      	lsls	r2, r3, #22
 800a14a:	d402      	bmi.n	800a152 <_vfiprintf_r+0x2a>
 800a14c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800a14e:	f7ff f9c6 	bl	80094de <__retarget_lock_acquire_recursive>
 800a152:	89ab      	ldrh	r3, [r5, #12]
 800a154:	071b      	lsls	r3, r3, #28
 800a156:	d501      	bpl.n	800a15c <_vfiprintf_r+0x34>
 800a158:	692b      	ldr	r3, [r5, #16]
 800a15a:	b99b      	cbnz	r3, 800a184 <_vfiprintf_r+0x5c>
 800a15c:	4629      	mov	r1, r5
 800a15e:	4630      	mov	r0, r6
 800a160:	f000 fe58 	bl	800ae14 <__swsetup_r>
 800a164:	b170      	cbz	r0, 800a184 <_vfiprintf_r+0x5c>
 800a166:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800a168:	07dc      	lsls	r4, r3, #31
 800a16a:	d504      	bpl.n	800a176 <_vfiprintf_r+0x4e>
 800a16c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800a170:	b01d      	add	sp, #116	@ 0x74
 800a172:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a176:	89ab      	ldrh	r3, [r5, #12]
 800a178:	0598      	lsls	r0, r3, #22
 800a17a:	d4f7      	bmi.n	800a16c <_vfiprintf_r+0x44>
 800a17c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800a17e:	f7ff f9af 	bl	80094e0 <__retarget_lock_release_recursive>
 800a182:	e7f3      	b.n	800a16c <_vfiprintf_r+0x44>
 800a184:	2300      	movs	r3, #0
 800a186:	9309      	str	r3, [sp, #36]	@ 0x24
 800a188:	2320      	movs	r3, #32
 800a18a:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800a18e:	f8cd 800c 	str.w	r8, [sp, #12]
 800a192:	2330      	movs	r3, #48	@ 0x30
 800a194:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 800a344 <_vfiprintf_r+0x21c>
 800a198:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800a19c:	f04f 0901 	mov.w	r9, #1
 800a1a0:	4623      	mov	r3, r4
 800a1a2:	469a      	mov	sl, r3
 800a1a4:	f813 2b01 	ldrb.w	r2, [r3], #1
 800a1a8:	b10a      	cbz	r2, 800a1ae <_vfiprintf_r+0x86>
 800a1aa:	2a25      	cmp	r2, #37	@ 0x25
 800a1ac:	d1f9      	bne.n	800a1a2 <_vfiprintf_r+0x7a>
 800a1ae:	ebba 0b04 	subs.w	fp, sl, r4
 800a1b2:	d00b      	beq.n	800a1cc <_vfiprintf_r+0xa4>
 800a1b4:	465b      	mov	r3, fp
 800a1b6:	4622      	mov	r2, r4
 800a1b8:	4629      	mov	r1, r5
 800a1ba:	4630      	mov	r0, r6
 800a1bc:	f7ff ffa1 	bl	800a102 <__sfputs_r>
 800a1c0:	3001      	adds	r0, #1
 800a1c2:	f000 80a7 	beq.w	800a314 <_vfiprintf_r+0x1ec>
 800a1c6:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800a1c8:	445a      	add	r2, fp
 800a1ca:	9209      	str	r2, [sp, #36]	@ 0x24
 800a1cc:	f89a 3000 	ldrb.w	r3, [sl]
 800a1d0:	2b00      	cmp	r3, #0
 800a1d2:	f000 809f 	beq.w	800a314 <_vfiprintf_r+0x1ec>
 800a1d6:	2300      	movs	r3, #0
 800a1d8:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800a1dc:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800a1e0:	f10a 0a01 	add.w	sl, sl, #1
 800a1e4:	9304      	str	r3, [sp, #16]
 800a1e6:	9307      	str	r3, [sp, #28]
 800a1e8:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800a1ec:	931a      	str	r3, [sp, #104]	@ 0x68
 800a1ee:	4654      	mov	r4, sl
 800a1f0:	2205      	movs	r2, #5
 800a1f2:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a1f6:	4853      	ldr	r0, [pc, #332]	@ (800a344 <_vfiprintf_r+0x21c>)
 800a1f8:	f7f6 f88a 	bl	8000310 <memchr>
 800a1fc:	9a04      	ldr	r2, [sp, #16]
 800a1fe:	b9d8      	cbnz	r0, 800a238 <_vfiprintf_r+0x110>
 800a200:	06d1      	lsls	r1, r2, #27
 800a202:	bf44      	itt	mi
 800a204:	2320      	movmi	r3, #32
 800a206:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800a20a:	0713      	lsls	r3, r2, #28
 800a20c:	bf44      	itt	mi
 800a20e:	232b      	movmi	r3, #43	@ 0x2b
 800a210:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800a214:	f89a 3000 	ldrb.w	r3, [sl]
 800a218:	2b2a      	cmp	r3, #42	@ 0x2a
 800a21a:	d015      	beq.n	800a248 <_vfiprintf_r+0x120>
 800a21c:	9a07      	ldr	r2, [sp, #28]
 800a21e:	4654      	mov	r4, sl
 800a220:	2000      	movs	r0, #0
 800a222:	f04f 0c0a 	mov.w	ip, #10
 800a226:	4621      	mov	r1, r4
 800a228:	f811 3b01 	ldrb.w	r3, [r1], #1
 800a22c:	3b30      	subs	r3, #48	@ 0x30
 800a22e:	2b09      	cmp	r3, #9
 800a230:	d94b      	bls.n	800a2ca <_vfiprintf_r+0x1a2>
 800a232:	b1b0      	cbz	r0, 800a262 <_vfiprintf_r+0x13a>
 800a234:	9207      	str	r2, [sp, #28]
 800a236:	e014      	b.n	800a262 <_vfiprintf_r+0x13a>
 800a238:	eba0 0308 	sub.w	r3, r0, r8
 800a23c:	fa09 f303 	lsl.w	r3, r9, r3
 800a240:	4313      	orrs	r3, r2
 800a242:	9304      	str	r3, [sp, #16]
 800a244:	46a2      	mov	sl, r4
 800a246:	e7d2      	b.n	800a1ee <_vfiprintf_r+0xc6>
 800a248:	9b03      	ldr	r3, [sp, #12]
 800a24a:	1d19      	adds	r1, r3, #4
 800a24c:	681b      	ldr	r3, [r3, #0]
 800a24e:	9103      	str	r1, [sp, #12]
 800a250:	2b00      	cmp	r3, #0
 800a252:	bfbb      	ittet	lt
 800a254:	425b      	neglt	r3, r3
 800a256:	f042 0202 	orrlt.w	r2, r2, #2
 800a25a:	9307      	strge	r3, [sp, #28]
 800a25c:	9307      	strlt	r3, [sp, #28]
 800a25e:	bfb8      	it	lt
 800a260:	9204      	strlt	r2, [sp, #16]
 800a262:	7823      	ldrb	r3, [r4, #0]
 800a264:	2b2e      	cmp	r3, #46	@ 0x2e
 800a266:	d10a      	bne.n	800a27e <_vfiprintf_r+0x156>
 800a268:	7863      	ldrb	r3, [r4, #1]
 800a26a:	2b2a      	cmp	r3, #42	@ 0x2a
 800a26c:	d132      	bne.n	800a2d4 <_vfiprintf_r+0x1ac>
 800a26e:	9b03      	ldr	r3, [sp, #12]
 800a270:	1d1a      	adds	r2, r3, #4
 800a272:	681b      	ldr	r3, [r3, #0]
 800a274:	9203      	str	r2, [sp, #12]
 800a276:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800a27a:	3402      	adds	r4, #2
 800a27c:	9305      	str	r3, [sp, #20]
 800a27e:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800a354 <_vfiprintf_r+0x22c>
 800a282:	7821      	ldrb	r1, [r4, #0]
 800a284:	2203      	movs	r2, #3
 800a286:	4650      	mov	r0, sl
 800a288:	f7f6 f842 	bl	8000310 <memchr>
 800a28c:	b138      	cbz	r0, 800a29e <_vfiprintf_r+0x176>
 800a28e:	9b04      	ldr	r3, [sp, #16]
 800a290:	eba0 000a 	sub.w	r0, r0, sl
 800a294:	2240      	movs	r2, #64	@ 0x40
 800a296:	4082      	lsls	r2, r0
 800a298:	4313      	orrs	r3, r2
 800a29a:	3401      	adds	r4, #1
 800a29c:	9304      	str	r3, [sp, #16]
 800a29e:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a2a2:	4829      	ldr	r0, [pc, #164]	@ (800a348 <_vfiprintf_r+0x220>)
 800a2a4:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800a2a8:	2206      	movs	r2, #6
 800a2aa:	f7f6 f831 	bl	8000310 <memchr>
 800a2ae:	2800      	cmp	r0, #0
 800a2b0:	d03f      	beq.n	800a332 <_vfiprintf_r+0x20a>
 800a2b2:	4b26      	ldr	r3, [pc, #152]	@ (800a34c <_vfiprintf_r+0x224>)
 800a2b4:	bb1b      	cbnz	r3, 800a2fe <_vfiprintf_r+0x1d6>
 800a2b6:	9b03      	ldr	r3, [sp, #12]
 800a2b8:	3307      	adds	r3, #7
 800a2ba:	f023 0307 	bic.w	r3, r3, #7
 800a2be:	3308      	adds	r3, #8
 800a2c0:	9303      	str	r3, [sp, #12]
 800a2c2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a2c4:	443b      	add	r3, r7
 800a2c6:	9309      	str	r3, [sp, #36]	@ 0x24
 800a2c8:	e76a      	b.n	800a1a0 <_vfiprintf_r+0x78>
 800a2ca:	fb0c 3202 	mla	r2, ip, r2, r3
 800a2ce:	460c      	mov	r4, r1
 800a2d0:	2001      	movs	r0, #1
 800a2d2:	e7a8      	b.n	800a226 <_vfiprintf_r+0xfe>
 800a2d4:	2300      	movs	r3, #0
 800a2d6:	3401      	adds	r4, #1
 800a2d8:	9305      	str	r3, [sp, #20]
 800a2da:	4619      	mov	r1, r3
 800a2dc:	f04f 0c0a 	mov.w	ip, #10
 800a2e0:	4620      	mov	r0, r4
 800a2e2:	f810 2b01 	ldrb.w	r2, [r0], #1
 800a2e6:	3a30      	subs	r2, #48	@ 0x30
 800a2e8:	2a09      	cmp	r2, #9
 800a2ea:	d903      	bls.n	800a2f4 <_vfiprintf_r+0x1cc>
 800a2ec:	2b00      	cmp	r3, #0
 800a2ee:	d0c6      	beq.n	800a27e <_vfiprintf_r+0x156>
 800a2f0:	9105      	str	r1, [sp, #20]
 800a2f2:	e7c4      	b.n	800a27e <_vfiprintf_r+0x156>
 800a2f4:	fb0c 2101 	mla	r1, ip, r1, r2
 800a2f8:	4604      	mov	r4, r0
 800a2fa:	2301      	movs	r3, #1
 800a2fc:	e7f0      	b.n	800a2e0 <_vfiprintf_r+0x1b8>
 800a2fe:	ab03      	add	r3, sp, #12
 800a300:	9300      	str	r3, [sp, #0]
 800a302:	462a      	mov	r2, r5
 800a304:	4b12      	ldr	r3, [pc, #72]	@ (800a350 <_vfiprintf_r+0x228>)
 800a306:	a904      	add	r1, sp, #16
 800a308:	4630      	mov	r0, r6
 800a30a:	f7fe fbdd 	bl	8008ac8 <_printf_float>
 800a30e:	4607      	mov	r7, r0
 800a310:	1c78      	adds	r0, r7, #1
 800a312:	d1d6      	bne.n	800a2c2 <_vfiprintf_r+0x19a>
 800a314:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800a316:	07d9      	lsls	r1, r3, #31
 800a318:	d405      	bmi.n	800a326 <_vfiprintf_r+0x1fe>
 800a31a:	89ab      	ldrh	r3, [r5, #12]
 800a31c:	059a      	lsls	r2, r3, #22
 800a31e:	d402      	bmi.n	800a326 <_vfiprintf_r+0x1fe>
 800a320:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800a322:	f7ff f8dd 	bl	80094e0 <__retarget_lock_release_recursive>
 800a326:	89ab      	ldrh	r3, [r5, #12]
 800a328:	065b      	lsls	r3, r3, #25
 800a32a:	f53f af1f 	bmi.w	800a16c <_vfiprintf_r+0x44>
 800a32e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800a330:	e71e      	b.n	800a170 <_vfiprintf_r+0x48>
 800a332:	ab03      	add	r3, sp, #12
 800a334:	9300      	str	r3, [sp, #0]
 800a336:	462a      	mov	r2, r5
 800a338:	4b05      	ldr	r3, [pc, #20]	@ (800a350 <_vfiprintf_r+0x228>)
 800a33a:	a904      	add	r1, sp, #16
 800a33c:	4630      	mov	r0, r6
 800a33e:	f7fe fe4b 	bl	8008fd8 <_printf_i>
 800a342:	e7e4      	b.n	800a30e <_vfiprintf_r+0x1e6>
 800a344:	0800b3ed 	.word	0x0800b3ed
 800a348:	0800b3f7 	.word	0x0800b3f7
 800a34c:	08008ac9 	.word	0x08008ac9
 800a350:	0800a103 	.word	0x0800a103
 800a354:	0800b3f3 	.word	0x0800b3f3

0800a358 <malloc>:
 800a358:	4b02      	ldr	r3, [pc, #8]	@ (800a364 <malloc+0xc>)
 800a35a:	4601      	mov	r1, r0
 800a35c:	6818      	ldr	r0, [r3, #0]
 800a35e:	f000 b825 	b.w	800a3ac <_malloc_r>
 800a362:	bf00      	nop
 800a364:	2400001c 	.word	0x2400001c

0800a368 <sbrk_aligned>:
 800a368:	b570      	push	{r4, r5, r6, lr}
 800a36a:	4e0f      	ldr	r6, [pc, #60]	@ (800a3a8 <sbrk_aligned+0x40>)
 800a36c:	460c      	mov	r4, r1
 800a36e:	6831      	ldr	r1, [r6, #0]
 800a370:	4605      	mov	r5, r0
 800a372:	b911      	cbnz	r1, 800a37a <sbrk_aligned+0x12>
 800a374:	f000 fe3a 	bl	800afec <_sbrk_r>
 800a378:	6030      	str	r0, [r6, #0]
 800a37a:	4621      	mov	r1, r4
 800a37c:	4628      	mov	r0, r5
 800a37e:	f000 fe35 	bl	800afec <_sbrk_r>
 800a382:	1c43      	adds	r3, r0, #1
 800a384:	d103      	bne.n	800a38e <sbrk_aligned+0x26>
 800a386:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 800a38a:	4620      	mov	r0, r4
 800a38c:	bd70      	pop	{r4, r5, r6, pc}
 800a38e:	1cc4      	adds	r4, r0, #3
 800a390:	f024 0403 	bic.w	r4, r4, #3
 800a394:	42a0      	cmp	r0, r4
 800a396:	d0f8      	beq.n	800a38a <sbrk_aligned+0x22>
 800a398:	1a21      	subs	r1, r4, r0
 800a39a:	4628      	mov	r0, r5
 800a39c:	f000 fe26 	bl	800afec <_sbrk_r>
 800a3a0:	3001      	adds	r0, #1
 800a3a2:	d1f2      	bne.n	800a38a <sbrk_aligned+0x22>
 800a3a4:	e7ef      	b.n	800a386 <sbrk_aligned+0x1e>
 800a3a6:	bf00      	nop
 800a3a8:	24000504 	.word	0x24000504

0800a3ac <_malloc_r>:
 800a3ac:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a3b0:	1ccd      	adds	r5, r1, #3
 800a3b2:	f025 0503 	bic.w	r5, r5, #3
 800a3b6:	3508      	adds	r5, #8
 800a3b8:	2d0c      	cmp	r5, #12
 800a3ba:	bf38      	it	cc
 800a3bc:	250c      	movcc	r5, #12
 800a3be:	2d00      	cmp	r5, #0
 800a3c0:	4606      	mov	r6, r0
 800a3c2:	db01      	blt.n	800a3c8 <_malloc_r+0x1c>
 800a3c4:	42a9      	cmp	r1, r5
 800a3c6:	d904      	bls.n	800a3d2 <_malloc_r+0x26>
 800a3c8:	230c      	movs	r3, #12
 800a3ca:	6033      	str	r3, [r6, #0]
 800a3cc:	2000      	movs	r0, #0
 800a3ce:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a3d2:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800a4a8 <_malloc_r+0xfc>
 800a3d6:	f000 f915 	bl	800a604 <__malloc_lock>
 800a3da:	f8d8 3000 	ldr.w	r3, [r8]
 800a3de:	461c      	mov	r4, r3
 800a3e0:	bb44      	cbnz	r4, 800a434 <_malloc_r+0x88>
 800a3e2:	4629      	mov	r1, r5
 800a3e4:	4630      	mov	r0, r6
 800a3e6:	f7ff ffbf 	bl	800a368 <sbrk_aligned>
 800a3ea:	1c43      	adds	r3, r0, #1
 800a3ec:	4604      	mov	r4, r0
 800a3ee:	d158      	bne.n	800a4a2 <_malloc_r+0xf6>
 800a3f0:	f8d8 4000 	ldr.w	r4, [r8]
 800a3f4:	4627      	mov	r7, r4
 800a3f6:	2f00      	cmp	r7, #0
 800a3f8:	d143      	bne.n	800a482 <_malloc_r+0xd6>
 800a3fa:	2c00      	cmp	r4, #0
 800a3fc:	d04b      	beq.n	800a496 <_malloc_r+0xea>
 800a3fe:	6823      	ldr	r3, [r4, #0]
 800a400:	4639      	mov	r1, r7
 800a402:	4630      	mov	r0, r6
 800a404:	eb04 0903 	add.w	r9, r4, r3
 800a408:	f000 fdf0 	bl	800afec <_sbrk_r>
 800a40c:	4581      	cmp	r9, r0
 800a40e:	d142      	bne.n	800a496 <_malloc_r+0xea>
 800a410:	6821      	ldr	r1, [r4, #0]
 800a412:	1a6d      	subs	r5, r5, r1
 800a414:	4629      	mov	r1, r5
 800a416:	4630      	mov	r0, r6
 800a418:	f7ff ffa6 	bl	800a368 <sbrk_aligned>
 800a41c:	3001      	adds	r0, #1
 800a41e:	d03a      	beq.n	800a496 <_malloc_r+0xea>
 800a420:	6823      	ldr	r3, [r4, #0]
 800a422:	442b      	add	r3, r5
 800a424:	6023      	str	r3, [r4, #0]
 800a426:	f8d8 3000 	ldr.w	r3, [r8]
 800a42a:	685a      	ldr	r2, [r3, #4]
 800a42c:	bb62      	cbnz	r2, 800a488 <_malloc_r+0xdc>
 800a42e:	f8c8 7000 	str.w	r7, [r8]
 800a432:	e00f      	b.n	800a454 <_malloc_r+0xa8>
 800a434:	6822      	ldr	r2, [r4, #0]
 800a436:	1b52      	subs	r2, r2, r5
 800a438:	d420      	bmi.n	800a47c <_malloc_r+0xd0>
 800a43a:	2a0b      	cmp	r2, #11
 800a43c:	d917      	bls.n	800a46e <_malloc_r+0xc2>
 800a43e:	1961      	adds	r1, r4, r5
 800a440:	42a3      	cmp	r3, r4
 800a442:	6025      	str	r5, [r4, #0]
 800a444:	bf18      	it	ne
 800a446:	6059      	strne	r1, [r3, #4]
 800a448:	6863      	ldr	r3, [r4, #4]
 800a44a:	bf08      	it	eq
 800a44c:	f8c8 1000 	streq.w	r1, [r8]
 800a450:	5162      	str	r2, [r4, r5]
 800a452:	604b      	str	r3, [r1, #4]
 800a454:	4630      	mov	r0, r6
 800a456:	f000 f8db 	bl	800a610 <__malloc_unlock>
 800a45a:	f104 000b 	add.w	r0, r4, #11
 800a45e:	1d23      	adds	r3, r4, #4
 800a460:	f020 0007 	bic.w	r0, r0, #7
 800a464:	1ac2      	subs	r2, r0, r3
 800a466:	bf1c      	itt	ne
 800a468:	1a1b      	subne	r3, r3, r0
 800a46a:	50a3      	strne	r3, [r4, r2]
 800a46c:	e7af      	b.n	800a3ce <_malloc_r+0x22>
 800a46e:	6862      	ldr	r2, [r4, #4]
 800a470:	42a3      	cmp	r3, r4
 800a472:	bf0c      	ite	eq
 800a474:	f8c8 2000 	streq.w	r2, [r8]
 800a478:	605a      	strne	r2, [r3, #4]
 800a47a:	e7eb      	b.n	800a454 <_malloc_r+0xa8>
 800a47c:	4623      	mov	r3, r4
 800a47e:	6864      	ldr	r4, [r4, #4]
 800a480:	e7ae      	b.n	800a3e0 <_malloc_r+0x34>
 800a482:	463c      	mov	r4, r7
 800a484:	687f      	ldr	r7, [r7, #4]
 800a486:	e7b6      	b.n	800a3f6 <_malloc_r+0x4a>
 800a488:	461a      	mov	r2, r3
 800a48a:	685b      	ldr	r3, [r3, #4]
 800a48c:	42a3      	cmp	r3, r4
 800a48e:	d1fb      	bne.n	800a488 <_malloc_r+0xdc>
 800a490:	2300      	movs	r3, #0
 800a492:	6053      	str	r3, [r2, #4]
 800a494:	e7de      	b.n	800a454 <_malloc_r+0xa8>
 800a496:	230c      	movs	r3, #12
 800a498:	6033      	str	r3, [r6, #0]
 800a49a:	4630      	mov	r0, r6
 800a49c:	f000 f8b8 	bl	800a610 <__malloc_unlock>
 800a4a0:	e794      	b.n	800a3cc <_malloc_r+0x20>
 800a4a2:	6005      	str	r5, [r0, #0]
 800a4a4:	e7d6      	b.n	800a454 <_malloc_r+0xa8>
 800a4a6:	bf00      	nop
 800a4a8:	24000508 	.word	0x24000508

0800a4ac <__sflush_r>:
 800a4ac:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800a4b0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a4b4:	0716      	lsls	r6, r2, #28
 800a4b6:	4605      	mov	r5, r0
 800a4b8:	460c      	mov	r4, r1
 800a4ba:	d454      	bmi.n	800a566 <__sflush_r+0xba>
 800a4bc:	684b      	ldr	r3, [r1, #4]
 800a4be:	2b00      	cmp	r3, #0
 800a4c0:	dc02      	bgt.n	800a4c8 <__sflush_r+0x1c>
 800a4c2:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800a4c4:	2b00      	cmp	r3, #0
 800a4c6:	dd48      	ble.n	800a55a <__sflush_r+0xae>
 800a4c8:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800a4ca:	2e00      	cmp	r6, #0
 800a4cc:	d045      	beq.n	800a55a <__sflush_r+0xae>
 800a4ce:	2300      	movs	r3, #0
 800a4d0:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800a4d4:	682f      	ldr	r7, [r5, #0]
 800a4d6:	6a21      	ldr	r1, [r4, #32]
 800a4d8:	602b      	str	r3, [r5, #0]
 800a4da:	d030      	beq.n	800a53e <__sflush_r+0x92>
 800a4dc:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800a4de:	89a3      	ldrh	r3, [r4, #12]
 800a4e0:	0759      	lsls	r1, r3, #29
 800a4e2:	d505      	bpl.n	800a4f0 <__sflush_r+0x44>
 800a4e4:	6863      	ldr	r3, [r4, #4]
 800a4e6:	1ad2      	subs	r2, r2, r3
 800a4e8:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800a4ea:	b10b      	cbz	r3, 800a4f0 <__sflush_r+0x44>
 800a4ec:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800a4ee:	1ad2      	subs	r2, r2, r3
 800a4f0:	2300      	movs	r3, #0
 800a4f2:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800a4f4:	6a21      	ldr	r1, [r4, #32]
 800a4f6:	4628      	mov	r0, r5
 800a4f8:	47b0      	blx	r6
 800a4fa:	1c43      	adds	r3, r0, #1
 800a4fc:	89a3      	ldrh	r3, [r4, #12]
 800a4fe:	d106      	bne.n	800a50e <__sflush_r+0x62>
 800a500:	6829      	ldr	r1, [r5, #0]
 800a502:	291d      	cmp	r1, #29
 800a504:	d82b      	bhi.n	800a55e <__sflush_r+0xb2>
 800a506:	4a2a      	ldr	r2, [pc, #168]	@ (800a5b0 <__sflush_r+0x104>)
 800a508:	40ca      	lsrs	r2, r1
 800a50a:	07d6      	lsls	r6, r2, #31
 800a50c:	d527      	bpl.n	800a55e <__sflush_r+0xb2>
 800a50e:	2200      	movs	r2, #0
 800a510:	6062      	str	r2, [r4, #4]
 800a512:	04d9      	lsls	r1, r3, #19
 800a514:	6922      	ldr	r2, [r4, #16]
 800a516:	6022      	str	r2, [r4, #0]
 800a518:	d504      	bpl.n	800a524 <__sflush_r+0x78>
 800a51a:	1c42      	adds	r2, r0, #1
 800a51c:	d101      	bne.n	800a522 <__sflush_r+0x76>
 800a51e:	682b      	ldr	r3, [r5, #0]
 800a520:	b903      	cbnz	r3, 800a524 <__sflush_r+0x78>
 800a522:	6560      	str	r0, [r4, #84]	@ 0x54
 800a524:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800a526:	602f      	str	r7, [r5, #0]
 800a528:	b1b9      	cbz	r1, 800a55a <__sflush_r+0xae>
 800a52a:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800a52e:	4299      	cmp	r1, r3
 800a530:	d002      	beq.n	800a538 <__sflush_r+0x8c>
 800a532:	4628      	mov	r0, r5
 800a534:	f000 fdd0 	bl	800b0d8 <_free_r>
 800a538:	2300      	movs	r3, #0
 800a53a:	6363      	str	r3, [r4, #52]	@ 0x34
 800a53c:	e00d      	b.n	800a55a <__sflush_r+0xae>
 800a53e:	2301      	movs	r3, #1
 800a540:	4628      	mov	r0, r5
 800a542:	47b0      	blx	r6
 800a544:	4602      	mov	r2, r0
 800a546:	1c50      	adds	r0, r2, #1
 800a548:	d1c9      	bne.n	800a4de <__sflush_r+0x32>
 800a54a:	682b      	ldr	r3, [r5, #0]
 800a54c:	2b00      	cmp	r3, #0
 800a54e:	d0c6      	beq.n	800a4de <__sflush_r+0x32>
 800a550:	2b1d      	cmp	r3, #29
 800a552:	d001      	beq.n	800a558 <__sflush_r+0xac>
 800a554:	2b16      	cmp	r3, #22
 800a556:	d11e      	bne.n	800a596 <__sflush_r+0xea>
 800a558:	602f      	str	r7, [r5, #0]
 800a55a:	2000      	movs	r0, #0
 800a55c:	e022      	b.n	800a5a4 <__sflush_r+0xf8>
 800a55e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800a562:	b21b      	sxth	r3, r3
 800a564:	e01b      	b.n	800a59e <__sflush_r+0xf2>
 800a566:	690f      	ldr	r7, [r1, #16]
 800a568:	2f00      	cmp	r7, #0
 800a56a:	d0f6      	beq.n	800a55a <__sflush_r+0xae>
 800a56c:	0793      	lsls	r3, r2, #30
 800a56e:	680e      	ldr	r6, [r1, #0]
 800a570:	bf08      	it	eq
 800a572:	694b      	ldreq	r3, [r1, #20]
 800a574:	600f      	str	r7, [r1, #0]
 800a576:	bf18      	it	ne
 800a578:	2300      	movne	r3, #0
 800a57a:	eba6 0807 	sub.w	r8, r6, r7
 800a57e:	608b      	str	r3, [r1, #8]
 800a580:	f1b8 0f00 	cmp.w	r8, #0
 800a584:	dde9      	ble.n	800a55a <__sflush_r+0xae>
 800a586:	6a21      	ldr	r1, [r4, #32]
 800a588:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800a58a:	4643      	mov	r3, r8
 800a58c:	463a      	mov	r2, r7
 800a58e:	4628      	mov	r0, r5
 800a590:	47b0      	blx	r6
 800a592:	2800      	cmp	r0, #0
 800a594:	dc08      	bgt.n	800a5a8 <__sflush_r+0xfc>
 800a596:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a59a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800a59e:	81a3      	strh	r3, [r4, #12]
 800a5a0:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800a5a4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a5a8:	4407      	add	r7, r0
 800a5aa:	eba8 0800 	sub.w	r8, r8, r0
 800a5ae:	e7e7      	b.n	800a580 <__sflush_r+0xd4>
 800a5b0:	20400001 	.word	0x20400001

0800a5b4 <_fflush_r>:
 800a5b4:	b538      	push	{r3, r4, r5, lr}
 800a5b6:	690b      	ldr	r3, [r1, #16]
 800a5b8:	4605      	mov	r5, r0
 800a5ba:	460c      	mov	r4, r1
 800a5bc:	b913      	cbnz	r3, 800a5c4 <_fflush_r+0x10>
 800a5be:	2500      	movs	r5, #0
 800a5c0:	4628      	mov	r0, r5
 800a5c2:	bd38      	pop	{r3, r4, r5, pc}
 800a5c4:	b118      	cbz	r0, 800a5ce <_fflush_r+0x1a>
 800a5c6:	6a03      	ldr	r3, [r0, #32]
 800a5c8:	b90b      	cbnz	r3, 800a5ce <_fflush_r+0x1a>
 800a5ca:	f7fe feaf 	bl	800932c <__sinit>
 800a5ce:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a5d2:	2b00      	cmp	r3, #0
 800a5d4:	d0f3      	beq.n	800a5be <_fflush_r+0xa>
 800a5d6:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800a5d8:	07d0      	lsls	r0, r2, #31
 800a5da:	d404      	bmi.n	800a5e6 <_fflush_r+0x32>
 800a5dc:	0599      	lsls	r1, r3, #22
 800a5de:	d402      	bmi.n	800a5e6 <_fflush_r+0x32>
 800a5e0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800a5e2:	f7fe ff7c 	bl	80094de <__retarget_lock_acquire_recursive>
 800a5e6:	4628      	mov	r0, r5
 800a5e8:	4621      	mov	r1, r4
 800a5ea:	f7ff ff5f 	bl	800a4ac <__sflush_r>
 800a5ee:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800a5f0:	07da      	lsls	r2, r3, #31
 800a5f2:	4605      	mov	r5, r0
 800a5f4:	d4e4      	bmi.n	800a5c0 <_fflush_r+0xc>
 800a5f6:	89a3      	ldrh	r3, [r4, #12]
 800a5f8:	059b      	lsls	r3, r3, #22
 800a5fa:	d4e1      	bmi.n	800a5c0 <_fflush_r+0xc>
 800a5fc:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800a5fe:	f7fe ff6f 	bl	80094e0 <__retarget_lock_release_recursive>
 800a602:	e7dd      	b.n	800a5c0 <_fflush_r+0xc>

0800a604 <__malloc_lock>:
 800a604:	4801      	ldr	r0, [pc, #4]	@ (800a60c <__malloc_lock+0x8>)
 800a606:	f7fe bf6a 	b.w	80094de <__retarget_lock_acquire_recursive>
 800a60a:	bf00      	nop
 800a60c:	24000500 	.word	0x24000500

0800a610 <__malloc_unlock>:
 800a610:	4801      	ldr	r0, [pc, #4]	@ (800a618 <__malloc_unlock+0x8>)
 800a612:	f7fe bf65 	b.w	80094e0 <__retarget_lock_release_recursive>
 800a616:	bf00      	nop
 800a618:	24000500 	.word	0x24000500

0800a61c <_Balloc>:
 800a61c:	b570      	push	{r4, r5, r6, lr}
 800a61e:	69c6      	ldr	r6, [r0, #28]
 800a620:	4604      	mov	r4, r0
 800a622:	460d      	mov	r5, r1
 800a624:	b976      	cbnz	r6, 800a644 <_Balloc+0x28>
 800a626:	2010      	movs	r0, #16
 800a628:	f7ff fe96 	bl	800a358 <malloc>
 800a62c:	4602      	mov	r2, r0
 800a62e:	61e0      	str	r0, [r4, #28]
 800a630:	b920      	cbnz	r0, 800a63c <_Balloc+0x20>
 800a632:	4b18      	ldr	r3, [pc, #96]	@ (800a694 <_Balloc+0x78>)
 800a634:	4818      	ldr	r0, [pc, #96]	@ (800a698 <_Balloc+0x7c>)
 800a636:	216b      	movs	r1, #107	@ 0x6b
 800a638:	f000 fd1c 	bl	800b074 <__assert_func>
 800a63c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800a640:	6006      	str	r6, [r0, #0]
 800a642:	60c6      	str	r6, [r0, #12]
 800a644:	69e6      	ldr	r6, [r4, #28]
 800a646:	68f3      	ldr	r3, [r6, #12]
 800a648:	b183      	cbz	r3, 800a66c <_Balloc+0x50>
 800a64a:	69e3      	ldr	r3, [r4, #28]
 800a64c:	68db      	ldr	r3, [r3, #12]
 800a64e:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800a652:	b9b8      	cbnz	r0, 800a684 <_Balloc+0x68>
 800a654:	2101      	movs	r1, #1
 800a656:	fa01 f605 	lsl.w	r6, r1, r5
 800a65a:	1d72      	adds	r2, r6, #5
 800a65c:	0092      	lsls	r2, r2, #2
 800a65e:	4620      	mov	r0, r4
 800a660:	f000 fd26 	bl	800b0b0 <_calloc_r>
 800a664:	b160      	cbz	r0, 800a680 <_Balloc+0x64>
 800a666:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800a66a:	e00e      	b.n	800a68a <_Balloc+0x6e>
 800a66c:	2221      	movs	r2, #33	@ 0x21
 800a66e:	2104      	movs	r1, #4
 800a670:	4620      	mov	r0, r4
 800a672:	f000 fd1d 	bl	800b0b0 <_calloc_r>
 800a676:	69e3      	ldr	r3, [r4, #28]
 800a678:	60f0      	str	r0, [r6, #12]
 800a67a:	68db      	ldr	r3, [r3, #12]
 800a67c:	2b00      	cmp	r3, #0
 800a67e:	d1e4      	bne.n	800a64a <_Balloc+0x2e>
 800a680:	2000      	movs	r0, #0
 800a682:	bd70      	pop	{r4, r5, r6, pc}
 800a684:	6802      	ldr	r2, [r0, #0]
 800a686:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800a68a:	2300      	movs	r3, #0
 800a68c:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800a690:	e7f7      	b.n	800a682 <_Balloc+0x66>
 800a692:	bf00      	nop
 800a694:	0800b36d 	.word	0x0800b36d
 800a698:	0800b3fe 	.word	0x0800b3fe

0800a69c <_Bfree>:
 800a69c:	b570      	push	{r4, r5, r6, lr}
 800a69e:	69c6      	ldr	r6, [r0, #28]
 800a6a0:	4605      	mov	r5, r0
 800a6a2:	460c      	mov	r4, r1
 800a6a4:	b976      	cbnz	r6, 800a6c4 <_Bfree+0x28>
 800a6a6:	2010      	movs	r0, #16
 800a6a8:	f7ff fe56 	bl	800a358 <malloc>
 800a6ac:	4602      	mov	r2, r0
 800a6ae:	61e8      	str	r0, [r5, #28]
 800a6b0:	b920      	cbnz	r0, 800a6bc <_Bfree+0x20>
 800a6b2:	4b09      	ldr	r3, [pc, #36]	@ (800a6d8 <_Bfree+0x3c>)
 800a6b4:	4809      	ldr	r0, [pc, #36]	@ (800a6dc <_Bfree+0x40>)
 800a6b6:	218f      	movs	r1, #143	@ 0x8f
 800a6b8:	f000 fcdc 	bl	800b074 <__assert_func>
 800a6bc:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800a6c0:	6006      	str	r6, [r0, #0]
 800a6c2:	60c6      	str	r6, [r0, #12]
 800a6c4:	b13c      	cbz	r4, 800a6d6 <_Bfree+0x3a>
 800a6c6:	69eb      	ldr	r3, [r5, #28]
 800a6c8:	6862      	ldr	r2, [r4, #4]
 800a6ca:	68db      	ldr	r3, [r3, #12]
 800a6cc:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800a6d0:	6021      	str	r1, [r4, #0]
 800a6d2:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800a6d6:	bd70      	pop	{r4, r5, r6, pc}
 800a6d8:	0800b36d 	.word	0x0800b36d
 800a6dc:	0800b3fe 	.word	0x0800b3fe

0800a6e0 <__multadd>:
 800a6e0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a6e4:	690d      	ldr	r5, [r1, #16]
 800a6e6:	4607      	mov	r7, r0
 800a6e8:	460c      	mov	r4, r1
 800a6ea:	461e      	mov	r6, r3
 800a6ec:	f101 0c14 	add.w	ip, r1, #20
 800a6f0:	2000      	movs	r0, #0
 800a6f2:	f8dc 3000 	ldr.w	r3, [ip]
 800a6f6:	b299      	uxth	r1, r3
 800a6f8:	fb02 6101 	mla	r1, r2, r1, r6
 800a6fc:	0c1e      	lsrs	r6, r3, #16
 800a6fe:	0c0b      	lsrs	r3, r1, #16
 800a700:	fb02 3306 	mla	r3, r2, r6, r3
 800a704:	b289      	uxth	r1, r1
 800a706:	3001      	adds	r0, #1
 800a708:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800a70c:	4285      	cmp	r5, r0
 800a70e:	f84c 1b04 	str.w	r1, [ip], #4
 800a712:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800a716:	dcec      	bgt.n	800a6f2 <__multadd+0x12>
 800a718:	b30e      	cbz	r6, 800a75e <__multadd+0x7e>
 800a71a:	68a3      	ldr	r3, [r4, #8]
 800a71c:	42ab      	cmp	r3, r5
 800a71e:	dc19      	bgt.n	800a754 <__multadd+0x74>
 800a720:	6861      	ldr	r1, [r4, #4]
 800a722:	4638      	mov	r0, r7
 800a724:	3101      	adds	r1, #1
 800a726:	f7ff ff79 	bl	800a61c <_Balloc>
 800a72a:	4680      	mov	r8, r0
 800a72c:	b928      	cbnz	r0, 800a73a <__multadd+0x5a>
 800a72e:	4602      	mov	r2, r0
 800a730:	4b0c      	ldr	r3, [pc, #48]	@ (800a764 <__multadd+0x84>)
 800a732:	480d      	ldr	r0, [pc, #52]	@ (800a768 <__multadd+0x88>)
 800a734:	21ba      	movs	r1, #186	@ 0xba
 800a736:	f000 fc9d 	bl	800b074 <__assert_func>
 800a73a:	6922      	ldr	r2, [r4, #16]
 800a73c:	3202      	adds	r2, #2
 800a73e:	f104 010c 	add.w	r1, r4, #12
 800a742:	0092      	lsls	r2, r2, #2
 800a744:	300c      	adds	r0, #12
 800a746:	f7fe fed1 	bl	80094ec <memcpy>
 800a74a:	4621      	mov	r1, r4
 800a74c:	4638      	mov	r0, r7
 800a74e:	f7ff ffa5 	bl	800a69c <_Bfree>
 800a752:	4644      	mov	r4, r8
 800a754:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800a758:	3501      	adds	r5, #1
 800a75a:	615e      	str	r6, [r3, #20]
 800a75c:	6125      	str	r5, [r4, #16]
 800a75e:	4620      	mov	r0, r4
 800a760:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a764:	0800b3dc 	.word	0x0800b3dc
 800a768:	0800b3fe 	.word	0x0800b3fe

0800a76c <__hi0bits>:
 800a76c:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 800a770:	4603      	mov	r3, r0
 800a772:	bf36      	itet	cc
 800a774:	0403      	lslcc	r3, r0, #16
 800a776:	2000      	movcs	r0, #0
 800a778:	2010      	movcc	r0, #16
 800a77a:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800a77e:	bf3c      	itt	cc
 800a780:	021b      	lslcc	r3, r3, #8
 800a782:	3008      	addcc	r0, #8
 800a784:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800a788:	bf3c      	itt	cc
 800a78a:	011b      	lslcc	r3, r3, #4
 800a78c:	3004      	addcc	r0, #4
 800a78e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800a792:	bf3c      	itt	cc
 800a794:	009b      	lslcc	r3, r3, #2
 800a796:	3002      	addcc	r0, #2
 800a798:	2b00      	cmp	r3, #0
 800a79a:	db05      	blt.n	800a7a8 <__hi0bits+0x3c>
 800a79c:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 800a7a0:	f100 0001 	add.w	r0, r0, #1
 800a7a4:	bf08      	it	eq
 800a7a6:	2020      	moveq	r0, #32
 800a7a8:	4770      	bx	lr

0800a7aa <__lo0bits>:
 800a7aa:	6803      	ldr	r3, [r0, #0]
 800a7ac:	4602      	mov	r2, r0
 800a7ae:	f013 0007 	ands.w	r0, r3, #7
 800a7b2:	d00b      	beq.n	800a7cc <__lo0bits+0x22>
 800a7b4:	07d9      	lsls	r1, r3, #31
 800a7b6:	d421      	bmi.n	800a7fc <__lo0bits+0x52>
 800a7b8:	0798      	lsls	r0, r3, #30
 800a7ba:	bf49      	itett	mi
 800a7bc:	085b      	lsrmi	r3, r3, #1
 800a7be:	089b      	lsrpl	r3, r3, #2
 800a7c0:	2001      	movmi	r0, #1
 800a7c2:	6013      	strmi	r3, [r2, #0]
 800a7c4:	bf5c      	itt	pl
 800a7c6:	6013      	strpl	r3, [r2, #0]
 800a7c8:	2002      	movpl	r0, #2
 800a7ca:	4770      	bx	lr
 800a7cc:	b299      	uxth	r1, r3
 800a7ce:	b909      	cbnz	r1, 800a7d4 <__lo0bits+0x2a>
 800a7d0:	0c1b      	lsrs	r3, r3, #16
 800a7d2:	2010      	movs	r0, #16
 800a7d4:	b2d9      	uxtb	r1, r3
 800a7d6:	b909      	cbnz	r1, 800a7dc <__lo0bits+0x32>
 800a7d8:	3008      	adds	r0, #8
 800a7da:	0a1b      	lsrs	r3, r3, #8
 800a7dc:	0719      	lsls	r1, r3, #28
 800a7de:	bf04      	itt	eq
 800a7e0:	091b      	lsreq	r3, r3, #4
 800a7e2:	3004      	addeq	r0, #4
 800a7e4:	0799      	lsls	r1, r3, #30
 800a7e6:	bf04      	itt	eq
 800a7e8:	089b      	lsreq	r3, r3, #2
 800a7ea:	3002      	addeq	r0, #2
 800a7ec:	07d9      	lsls	r1, r3, #31
 800a7ee:	d403      	bmi.n	800a7f8 <__lo0bits+0x4e>
 800a7f0:	085b      	lsrs	r3, r3, #1
 800a7f2:	f100 0001 	add.w	r0, r0, #1
 800a7f6:	d003      	beq.n	800a800 <__lo0bits+0x56>
 800a7f8:	6013      	str	r3, [r2, #0]
 800a7fa:	4770      	bx	lr
 800a7fc:	2000      	movs	r0, #0
 800a7fe:	4770      	bx	lr
 800a800:	2020      	movs	r0, #32
 800a802:	4770      	bx	lr

0800a804 <__i2b>:
 800a804:	b510      	push	{r4, lr}
 800a806:	460c      	mov	r4, r1
 800a808:	2101      	movs	r1, #1
 800a80a:	f7ff ff07 	bl	800a61c <_Balloc>
 800a80e:	4602      	mov	r2, r0
 800a810:	b928      	cbnz	r0, 800a81e <__i2b+0x1a>
 800a812:	4b05      	ldr	r3, [pc, #20]	@ (800a828 <__i2b+0x24>)
 800a814:	4805      	ldr	r0, [pc, #20]	@ (800a82c <__i2b+0x28>)
 800a816:	f240 1145 	movw	r1, #325	@ 0x145
 800a81a:	f000 fc2b 	bl	800b074 <__assert_func>
 800a81e:	2301      	movs	r3, #1
 800a820:	6144      	str	r4, [r0, #20]
 800a822:	6103      	str	r3, [r0, #16]
 800a824:	bd10      	pop	{r4, pc}
 800a826:	bf00      	nop
 800a828:	0800b3dc 	.word	0x0800b3dc
 800a82c:	0800b3fe 	.word	0x0800b3fe

0800a830 <__multiply>:
 800a830:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a834:	4617      	mov	r7, r2
 800a836:	690a      	ldr	r2, [r1, #16]
 800a838:	693b      	ldr	r3, [r7, #16]
 800a83a:	429a      	cmp	r2, r3
 800a83c:	bfa8      	it	ge
 800a83e:	463b      	movge	r3, r7
 800a840:	4689      	mov	r9, r1
 800a842:	bfa4      	itt	ge
 800a844:	460f      	movge	r7, r1
 800a846:	4699      	movge	r9, r3
 800a848:	693d      	ldr	r5, [r7, #16]
 800a84a:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800a84e:	68bb      	ldr	r3, [r7, #8]
 800a850:	6879      	ldr	r1, [r7, #4]
 800a852:	eb05 060a 	add.w	r6, r5, sl
 800a856:	42b3      	cmp	r3, r6
 800a858:	b085      	sub	sp, #20
 800a85a:	bfb8      	it	lt
 800a85c:	3101      	addlt	r1, #1
 800a85e:	f7ff fedd 	bl	800a61c <_Balloc>
 800a862:	b930      	cbnz	r0, 800a872 <__multiply+0x42>
 800a864:	4602      	mov	r2, r0
 800a866:	4b41      	ldr	r3, [pc, #260]	@ (800a96c <__multiply+0x13c>)
 800a868:	4841      	ldr	r0, [pc, #260]	@ (800a970 <__multiply+0x140>)
 800a86a:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 800a86e:	f000 fc01 	bl	800b074 <__assert_func>
 800a872:	f100 0414 	add.w	r4, r0, #20
 800a876:	eb04 0e86 	add.w	lr, r4, r6, lsl #2
 800a87a:	4623      	mov	r3, r4
 800a87c:	2200      	movs	r2, #0
 800a87e:	4573      	cmp	r3, lr
 800a880:	d320      	bcc.n	800a8c4 <__multiply+0x94>
 800a882:	f107 0814 	add.w	r8, r7, #20
 800a886:	f109 0114 	add.w	r1, r9, #20
 800a88a:	eb08 0585 	add.w	r5, r8, r5, lsl #2
 800a88e:	eb01 038a 	add.w	r3, r1, sl, lsl #2
 800a892:	9302      	str	r3, [sp, #8]
 800a894:	1beb      	subs	r3, r5, r7
 800a896:	3b15      	subs	r3, #21
 800a898:	f023 0303 	bic.w	r3, r3, #3
 800a89c:	3304      	adds	r3, #4
 800a89e:	3715      	adds	r7, #21
 800a8a0:	42bd      	cmp	r5, r7
 800a8a2:	bf38      	it	cc
 800a8a4:	2304      	movcc	r3, #4
 800a8a6:	9301      	str	r3, [sp, #4]
 800a8a8:	9b02      	ldr	r3, [sp, #8]
 800a8aa:	9103      	str	r1, [sp, #12]
 800a8ac:	428b      	cmp	r3, r1
 800a8ae:	d80c      	bhi.n	800a8ca <__multiply+0x9a>
 800a8b0:	2e00      	cmp	r6, #0
 800a8b2:	dd03      	ble.n	800a8bc <__multiply+0x8c>
 800a8b4:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 800a8b8:	2b00      	cmp	r3, #0
 800a8ba:	d055      	beq.n	800a968 <__multiply+0x138>
 800a8bc:	6106      	str	r6, [r0, #16]
 800a8be:	b005      	add	sp, #20
 800a8c0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a8c4:	f843 2b04 	str.w	r2, [r3], #4
 800a8c8:	e7d9      	b.n	800a87e <__multiply+0x4e>
 800a8ca:	f8b1 a000 	ldrh.w	sl, [r1]
 800a8ce:	f1ba 0f00 	cmp.w	sl, #0
 800a8d2:	d01f      	beq.n	800a914 <__multiply+0xe4>
 800a8d4:	46c4      	mov	ip, r8
 800a8d6:	46a1      	mov	r9, r4
 800a8d8:	2700      	movs	r7, #0
 800a8da:	f85c 2b04 	ldr.w	r2, [ip], #4
 800a8de:	f8d9 3000 	ldr.w	r3, [r9]
 800a8e2:	fa1f fb82 	uxth.w	fp, r2
 800a8e6:	b29b      	uxth	r3, r3
 800a8e8:	fb0a 330b 	mla	r3, sl, fp, r3
 800a8ec:	443b      	add	r3, r7
 800a8ee:	f8d9 7000 	ldr.w	r7, [r9]
 800a8f2:	0c12      	lsrs	r2, r2, #16
 800a8f4:	0c3f      	lsrs	r7, r7, #16
 800a8f6:	fb0a 7202 	mla	r2, sl, r2, r7
 800a8fa:	eb02 4213 	add.w	r2, r2, r3, lsr #16
 800a8fe:	b29b      	uxth	r3, r3
 800a900:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800a904:	4565      	cmp	r5, ip
 800a906:	f849 3b04 	str.w	r3, [r9], #4
 800a90a:	ea4f 4712 	mov.w	r7, r2, lsr #16
 800a90e:	d8e4      	bhi.n	800a8da <__multiply+0xaa>
 800a910:	9b01      	ldr	r3, [sp, #4]
 800a912:	50e7      	str	r7, [r4, r3]
 800a914:	9b03      	ldr	r3, [sp, #12]
 800a916:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 800a91a:	3104      	adds	r1, #4
 800a91c:	f1b9 0f00 	cmp.w	r9, #0
 800a920:	d020      	beq.n	800a964 <__multiply+0x134>
 800a922:	6823      	ldr	r3, [r4, #0]
 800a924:	4647      	mov	r7, r8
 800a926:	46a4      	mov	ip, r4
 800a928:	f04f 0a00 	mov.w	sl, #0
 800a92c:	f8b7 b000 	ldrh.w	fp, [r7]
 800a930:	f8bc 2002 	ldrh.w	r2, [ip, #2]
 800a934:	fb09 220b 	mla	r2, r9, fp, r2
 800a938:	4452      	add	r2, sl
 800a93a:	b29b      	uxth	r3, r3
 800a93c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800a940:	f84c 3b04 	str.w	r3, [ip], #4
 800a944:	f857 3b04 	ldr.w	r3, [r7], #4
 800a948:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800a94c:	f8bc 3000 	ldrh.w	r3, [ip]
 800a950:	fb09 330a 	mla	r3, r9, sl, r3
 800a954:	eb03 4312 	add.w	r3, r3, r2, lsr #16
 800a958:	42bd      	cmp	r5, r7
 800a95a:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800a95e:	d8e5      	bhi.n	800a92c <__multiply+0xfc>
 800a960:	9a01      	ldr	r2, [sp, #4]
 800a962:	50a3      	str	r3, [r4, r2]
 800a964:	3404      	adds	r4, #4
 800a966:	e79f      	b.n	800a8a8 <__multiply+0x78>
 800a968:	3e01      	subs	r6, #1
 800a96a:	e7a1      	b.n	800a8b0 <__multiply+0x80>
 800a96c:	0800b3dc 	.word	0x0800b3dc
 800a970:	0800b3fe 	.word	0x0800b3fe

0800a974 <__pow5mult>:
 800a974:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a978:	4615      	mov	r5, r2
 800a97a:	f012 0203 	ands.w	r2, r2, #3
 800a97e:	4607      	mov	r7, r0
 800a980:	460e      	mov	r6, r1
 800a982:	d007      	beq.n	800a994 <__pow5mult+0x20>
 800a984:	4c25      	ldr	r4, [pc, #148]	@ (800aa1c <__pow5mult+0xa8>)
 800a986:	3a01      	subs	r2, #1
 800a988:	2300      	movs	r3, #0
 800a98a:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800a98e:	f7ff fea7 	bl	800a6e0 <__multadd>
 800a992:	4606      	mov	r6, r0
 800a994:	10ad      	asrs	r5, r5, #2
 800a996:	d03d      	beq.n	800aa14 <__pow5mult+0xa0>
 800a998:	69fc      	ldr	r4, [r7, #28]
 800a99a:	b97c      	cbnz	r4, 800a9bc <__pow5mult+0x48>
 800a99c:	2010      	movs	r0, #16
 800a99e:	f7ff fcdb 	bl	800a358 <malloc>
 800a9a2:	4602      	mov	r2, r0
 800a9a4:	61f8      	str	r0, [r7, #28]
 800a9a6:	b928      	cbnz	r0, 800a9b4 <__pow5mult+0x40>
 800a9a8:	4b1d      	ldr	r3, [pc, #116]	@ (800aa20 <__pow5mult+0xac>)
 800a9aa:	481e      	ldr	r0, [pc, #120]	@ (800aa24 <__pow5mult+0xb0>)
 800a9ac:	f240 11b3 	movw	r1, #435	@ 0x1b3
 800a9b0:	f000 fb60 	bl	800b074 <__assert_func>
 800a9b4:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800a9b8:	6004      	str	r4, [r0, #0]
 800a9ba:	60c4      	str	r4, [r0, #12]
 800a9bc:	f8d7 801c 	ldr.w	r8, [r7, #28]
 800a9c0:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800a9c4:	b94c      	cbnz	r4, 800a9da <__pow5mult+0x66>
 800a9c6:	f240 2171 	movw	r1, #625	@ 0x271
 800a9ca:	4638      	mov	r0, r7
 800a9cc:	f7ff ff1a 	bl	800a804 <__i2b>
 800a9d0:	2300      	movs	r3, #0
 800a9d2:	f8c8 0008 	str.w	r0, [r8, #8]
 800a9d6:	4604      	mov	r4, r0
 800a9d8:	6003      	str	r3, [r0, #0]
 800a9da:	f04f 0900 	mov.w	r9, #0
 800a9de:	07eb      	lsls	r3, r5, #31
 800a9e0:	d50a      	bpl.n	800a9f8 <__pow5mult+0x84>
 800a9e2:	4631      	mov	r1, r6
 800a9e4:	4622      	mov	r2, r4
 800a9e6:	4638      	mov	r0, r7
 800a9e8:	f7ff ff22 	bl	800a830 <__multiply>
 800a9ec:	4631      	mov	r1, r6
 800a9ee:	4680      	mov	r8, r0
 800a9f0:	4638      	mov	r0, r7
 800a9f2:	f7ff fe53 	bl	800a69c <_Bfree>
 800a9f6:	4646      	mov	r6, r8
 800a9f8:	106d      	asrs	r5, r5, #1
 800a9fa:	d00b      	beq.n	800aa14 <__pow5mult+0xa0>
 800a9fc:	6820      	ldr	r0, [r4, #0]
 800a9fe:	b938      	cbnz	r0, 800aa10 <__pow5mult+0x9c>
 800aa00:	4622      	mov	r2, r4
 800aa02:	4621      	mov	r1, r4
 800aa04:	4638      	mov	r0, r7
 800aa06:	f7ff ff13 	bl	800a830 <__multiply>
 800aa0a:	6020      	str	r0, [r4, #0]
 800aa0c:	f8c0 9000 	str.w	r9, [r0]
 800aa10:	4604      	mov	r4, r0
 800aa12:	e7e4      	b.n	800a9de <__pow5mult+0x6a>
 800aa14:	4630      	mov	r0, r6
 800aa16:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800aa1a:	bf00      	nop
 800aa1c:	0800b4a0 	.word	0x0800b4a0
 800aa20:	0800b36d 	.word	0x0800b36d
 800aa24:	0800b3fe 	.word	0x0800b3fe

0800aa28 <__lshift>:
 800aa28:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800aa2c:	460c      	mov	r4, r1
 800aa2e:	6849      	ldr	r1, [r1, #4]
 800aa30:	6923      	ldr	r3, [r4, #16]
 800aa32:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800aa36:	68a3      	ldr	r3, [r4, #8]
 800aa38:	4607      	mov	r7, r0
 800aa3a:	4691      	mov	r9, r2
 800aa3c:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800aa40:	f108 0601 	add.w	r6, r8, #1
 800aa44:	42b3      	cmp	r3, r6
 800aa46:	db0b      	blt.n	800aa60 <__lshift+0x38>
 800aa48:	4638      	mov	r0, r7
 800aa4a:	f7ff fde7 	bl	800a61c <_Balloc>
 800aa4e:	4605      	mov	r5, r0
 800aa50:	b948      	cbnz	r0, 800aa66 <__lshift+0x3e>
 800aa52:	4602      	mov	r2, r0
 800aa54:	4b28      	ldr	r3, [pc, #160]	@ (800aaf8 <__lshift+0xd0>)
 800aa56:	4829      	ldr	r0, [pc, #164]	@ (800aafc <__lshift+0xd4>)
 800aa58:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 800aa5c:	f000 fb0a 	bl	800b074 <__assert_func>
 800aa60:	3101      	adds	r1, #1
 800aa62:	005b      	lsls	r3, r3, #1
 800aa64:	e7ee      	b.n	800aa44 <__lshift+0x1c>
 800aa66:	2300      	movs	r3, #0
 800aa68:	f100 0114 	add.w	r1, r0, #20
 800aa6c:	f100 0210 	add.w	r2, r0, #16
 800aa70:	4618      	mov	r0, r3
 800aa72:	4553      	cmp	r3, sl
 800aa74:	db33      	blt.n	800aade <__lshift+0xb6>
 800aa76:	6920      	ldr	r0, [r4, #16]
 800aa78:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800aa7c:	f104 0314 	add.w	r3, r4, #20
 800aa80:	f019 091f 	ands.w	r9, r9, #31
 800aa84:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800aa88:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800aa8c:	d02b      	beq.n	800aae6 <__lshift+0xbe>
 800aa8e:	f1c9 0e20 	rsb	lr, r9, #32
 800aa92:	468a      	mov	sl, r1
 800aa94:	2200      	movs	r2, #0
 800aa96:	6818      	ldr	r0, [r3, #0]
 800aa98:	fa00 f009 	lsl.w	r0, r0, r9
 800aa9c:	4310      	orrs	r0, r2
 800aa9e:	f84a 0b04 	str.w	r0, [sl], #4
 800aaa2:	f853 2b04 	ldr.w	r2, [r3], #4
 800aaa6:	459c      	cmp	ip, r3
 800aaa8:	fa22 f20e 	lsr.w	r2, r2, lr
 800aaac:	d8f3      	bhi.n	800aa96 <__lshift+0x6e>
 800aaae:	ebac 0304 	sub.w	r3, ip, r4
 800aab2:	3b15      	subs	r3, #21
 800aab4:	f023 0303 	bic.w	r3, r3, #3
 800aab8:	3304      	adds	r3, #4
 800aaba:	f104 0015 	add.w	r0, r4, #21
 800aabe:	4560      	cmp	r0, ip
 800aac0:	bf88      	it	hi
 800aac2:	2304      	movhi	r3, #4
 800aac4:	50ca      	str	r2, [r1, r3]
 800aac6:	b10a      	cbz	r2, 800aacc <__lshift+0xa4>
 800aac8:	f108 0602 	add.w	r6, r8, #2
 800aacc:	3e01      	subs	r6, #1
 800aace:	4638      	mov	r0, r7
 800aad0:	612e      	str	r6, [r5, #16]
 800aad2:	4621      	mov	r1, r4
 800aad4:	f7ff fde2 	bl	800a69c <_Bfree>
 800aad8:	4628      	mov	r0, r5
 800aada:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800aade:	f842 0f04 	str.w	r0, [r2, #4]!
 800aae2:	3301      	adds	r3, #1
 800aae4:	e7c5      	b.n	800aa72 <__lshift+0x4a>
 800aae6:	3904      	subs	r1, #4
 800aae8:	f853 2b04 	ldr.w	r2, [r3], #4
 800aaec:	f841 2f04 	str.w	r2, [r1, #4]!
 800aaf0:	459c      	cmp	ip, r3
 800aaf2:	d8f9      	bhi.n	800aae8 <__lshift+0xc0>
 800aaf4:	e7ea      	b.n	800aacc <__lshift+0xa4>
 800aaf6:	bf00      	nop
 800aaf8:	0800b3dc 	.word	0x0800b3dc
 800aafc:	0800b3fe 	.word	0x0800b3fe

0800ab00 <__mcmp>:
 800ab00:	690a      	ldr	r2, [r1, #16]
 800ab02:	4603      	mov	r3, r0
 800ab04:	6900      	ldr	r0, [r0, #16]
 800ab06:	1a80      	subs	r0, r0, r2
 800ab08:	b530      	push	{r4, r5, lr}
 800ab0a:	d10e      	bne.n	800ab2a <__mcmp+0x2a>
 800ab0c:	3314      	adds	r3, #20
 800ab0e:	3114      	adds	r1, #20
 800ab10:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 800ab14:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 800ab18:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800ab1c:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800ab20:	4295      	cmp	r5, r2
 800ab22:	d003      	beq.n	800ab2c <__mcmp+0x2c>
 800ab24:	d205      	bcs.n	800ab32 <__mcmp+0x32>
 800ab26:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800ab2a:	bd30      	pop	{r4, r5, pc}
 800ab2c:	42a3      	cmp	r3, r4
 800ab2e:	d3f3      	bcc.n	800ab18 <__mcmp+0x18>
 800ab30:	e7fb      	b.n	800ab2a <__mcmp+0x2a>
 800ab32:	2001      	movs	r0, #1
 800ab34:	e7f9      	b.n	800ab2a <__mcmp+0x2a>
	...

0800ab38 <__mdiff>:
 800ab38:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ab3c:	4689      	mov	r9, r1
 800ab3e:	4606      	mov	r6, r0
 800ab40:	4611      	mov	r1, r2
 800ab42:	4648      	mov	r0, r9
 800ab44:	4614      	mov	r4, r2
 800ab46:	f7ff ffdb 	bl	800ab00 <__mcmp>
 800ab4a:	1e05      	subs	r5, r0, #0
 800ab4c:	d112      	bne.n	800ab74 <__mdiff+0x3c>
 800ab4e:	4629      	mov	r1, r5
 800ab50:	4630      	mov	r0, r6
 800ab52:	f7ff fd63 	bl	800a61c <_Balloc>
 800ab56:	4602      	mov	r2, r0
 800ab58:	b928      	cbnz	r0, 800ab66 <__mdiff+0x2e>
 800ab5a:	4b3f      	ldr	r3, [pc, #252]	@ (800ac58 <__mdiff+0x120>)
 800ab5c:	f240 2137 	movw	r1, #567	@ 0x237
 800ab60:	483e      	ldr	r0, [pc, #248]	@ (800ac5c <__mdiff+0x124>)
 800ab62:	f000 fa87 	bl	800b074 <__assert_func>
 800ab66:	2301      	movs	r3, #1
 800ab68:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800ab6c:	4610      	mov	r0, r2
 800ab6e:	b003      	add	sp, #12
 800ab70:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ab74:	bfbc      	itt	lt
 800ab76:	464b      	movlt	r3, r9
 800ab78:	46a1      	movlt	r9, r4
 800ab7a:	4630      	mov	r0, r6
 800ab7c:	f8d9 1004 	ldr.w	r1, [r9, #4]
 800ab80:	bfba      	itte	lt
 800ab82:	461c      	movlt	r4, r3
 800ab84:	2501      	movlt	r5, #1
 800ab86:	2500      	movge	r5, #0
 800ab88:	f7ff fd48 	bl	800a61c <_Balloc>
 800ab8c:	4602      	mov	r2, r0
 800ab8e:	b918      	cbnz	r0, 800ab98 <__mdiff+0x60>
 800ab90:	4b31      	ldr	r3, [pc, #196]	@ (800ac58 <__mdiff+0x120>)
 800ab92:	f240 2145 	movw	r1, #581	@ 0x245
 800ab96:	e7e3      	b.n	800ab60 <__mdiff+0x28>
 800ab98:	f8d9 7010 	ldr.w	r7, [r9, #16]
 800ab9c:	6926      	ldr	r6, [r4, #16]
 800ab9e:	60c5      	str	r5, [r0, #12]
 800aba0:	f109 0310 	add.w	r3, r9, #16
 800aba4:	f109 0514 	add.w	r5, r9, #20
 800aba8:	f104 0e14 	add.w	lr, r4, #20
 800abac:	f100 0b14 	add.w	fp, r0, #20
 800abb0:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 800abb4:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 800abb8:	9301      	str	r3, [sp, #4]
 800abba:	46d9      	mov	r9, fp
 800abbc:	f04f 0c00 	mov.w	ip, #0
 800abc0:	9b01      	ldr	r3, [sp, #4]
 800abc2:	f85e 0b04 	ldr.w	r0, [lr], #4
 800abc6:	f853 af04 	ldr.w	sl, [r3, #4]!
 800abca:	9301      	str	r3, [sp, #4]
 800abcc:	fa1f f38a 	uxth.w	r3, sl
 800abd0:	4619      	mov	r1, r3
 800abd2:	b283      	uxth	r3, r0
 800abd4:	1acb      	subs	r3, r1, r3
 800abd6:	0c00      	lsrs	r0, r0, #16
 800abd8:	4463      	add	r3, ip
 800abda:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 800abde:	eb00 4023 	add.w	r0, r0, r3, asr #16
 800abe2:	b29b      	uxth	r3, r3
 800abe4:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 800abe8:	4576      	cmp	r6, lr
 800abea:	f849 3b04 	str.w	r3, [r9], #4
 800abee:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800abf2:	d8e5      	bhi.n	800abc0 <__mdiff+0x88>
 800abf4:	1b33      	subs	r3, r6, r4
 800abf6:	3b15      	subs	r3, #21
 800abf8:	f023 0303 	bic.w	r3, r3, #3
 800abfc:	3415      	adds	r4, #21
 800abfe:	3304      	adds	r3, #4
 800ac00:	42a6      	cmp	r6, r4
 800ac02:	bf38      	it	cc
 800ac04:	2304      	movcc	r3, #4
 800ac06:	441d      	add	r5, r3
 800ac08:	445b      	add	r3, fp
 800ac0a:	461e      	mov	r6, r3
 800ac0c:	462c      	mov	r4, r5
 800ac0e:	4544      	cmp	r4, r8
 800ac10:	d30e      	bcc.n	800ac30 <__mdiff+0xf8>
 800ac12:	f108 0103 	add.w	r1, r8, #3
 800ac16:	1b49      	subs	r1, r1, r5
 800ac18:	f021 0103 	bic.w	r1, r1, #3
 800ac1c:	3d03      	subs	r5, #3
 800ac1e:	45a8      	cmp	r8, r5
 800ac20:	bf38      	it	cc
 800ac22:	2100      	movcc	r1, #0
 800ac24:	440b      	add	r3, r1
 800ac26:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800ac2a:	b191      	cbz	r1, 800ac52 <__mdiff+0x11a>
 800ac2c:	6117      	str	r7, [r2, #16]
 800ac2e:	e79d      	b.n	800ab6c <__mdiff+0x34>
 800ac30:	f854 1b04 	ldr.w	r1, [r4], #4
 800ac34:	46e6      	mov	lr, ip
 800ac36:	0c08      	lsrs	r0, r1, #16
 800ac38:	fa1c fc81 	uxtah	ip, ip, r1
 800ac3c:	4471      	add	r1, lr
 800ac3e:	eb00 402c 	add.w	r0, r0, ip, asr #16
 800ac42:	b289      	uxth	r1, r1
 800ac44:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800ac48:	f846 1b04 	str.w	r1, [r6], #4
 800ac4c:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800ac50:	e7dd      	b.n	800ac0e <__mdiff+0xd6>
 800ac52:	3f01      	subs	r7, #1
 800ac54:	e7e7      	b.n	800ac26 <__mdiff+0xee>
 800ac56:	bf00      	nop
 800ac58:	0800b3dc 	.word	0x0800b3dc
 800ac5c:	0800b3fe 	.word	0x0800b3fe

0800ac60 <__d2b>:
 800ac60:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800ac64:	460f      	mov	r7, r1
 800ac66:	2101      	movs	r1, #1
 800ac68:	ec59 8b10 	vmov	r8, r9, d0
 800ac6c:	4616      	mov	r6, r2
 800ac6e:	f7ff fcd5 	bl	800a61c <_Balloc>
 800ac72:	4604      	mov	r4, r0
 800ac74:	b930      	cbnz	r0, 800ac84 <__d2b+0x24>
 800ac76:	4602      	mov	r2, r0
 800ac78:	4b23      	ldr	r3, [pc, #140]	@ (800ad08 <__d2b+0xa8>)
 800ac7a:	4824      	ldr	r0, [pc, #144]	@ (800ad0c <__d2b+0xac>)
 800ac7c:	f240 310f 	movw	r1, #783	@ 0x30f
 800ac80:	f000 f9f8 	bl	800b074 <__assert_func>
 800ac84:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800ac88:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800ac8c:	b10d      	cbz	r5, 800ac92 <__d2b+0x32>
 800ac8e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800ac92:	9301      	str	r3, [sp, #4]
 800ac94:	f1b8 0300 	subs.w	r3, r8, #0
 800ac98:	d023      	beq.n	800ace2 <__d2b+0x82>
 800ac9a:	4668      	mov	r0, sp
 800ac9c:	9300      	str	r3, [sp, #0]
 800ac9e:	f7ff fd84 	bl	800a7aa <__lo0bits>
 800aca2:	e9dd 1200 	ldrd	r1, r2, [sp]
 800aca6:	b1d0      	cbz	r0, 800acde <__d2b+0x7e>
 800aca8:	f1c0 0320 	rsb	r3, r0, #32
 800acac:	fa02 f303 	lsl.w	r3, r2, r3
 800acb0:	430b      	orrs	r3, r1
 800acb2:	40c2      	lsrs	r2, r0
 800acb4:	6163      	str	r3, [r4, #20]
 800acb6:	9201      	str	r2, [sp, #4]
 800acb8:	9b01      	ldr	r3, [sp, #4]
 800acba:	61a3      	str	r3, [r4, #24]
 800acbc:	2b00      	cmp	r3, #0
 800acbe:	bf0c      	ite	eq
 800acc0:	2201      	moveq	r2, #1
 800acc2:	2202      	movne	r2, #2
 800acc4:	6122      	str	r2, [r4, #16]
 800acc6:	b1a5      	cbz	r5, 800acf2 <__d2b+0x92>
 800acc8:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 800accc:	4405      	add	r5, r0
 800acce:	603d      	str	r5, [r7, #0]
 800acd0:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 800acd4:	6030      	str	r0, [r6, #0]
 800acd6:	4620      	mov	r0, r4
 800acd8:	b003      	add	sp, #12
 800acda:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800acde:	6161      	str	r1, [r4, #20]
 800ace0:	e7ea      	b.n	800acb8 <__d2b+0x58>
 800ace2:	a801      	add	r0, sp, #4
 800ace4:	f7ff fd61 	bl	800a7aa <__lo0bits>
 800ace8:	9b01      	ldr	r3, [sp, #4]
 800acea:	6163      	str	r3, [r4, #20]
 800acec:	3020      	adds	r0, #32
 800acee:	2201      	movs	r2, #1
 800acf0:	e7e8      	b.n	800acc4 <__d2b+0x64>
 800acf2:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800acf6:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 800acfa:	6038      	str	r0, [r7, #0]
 800acfc:	6918      	ldr	r0, [r3, #16]
 800acfe:	f7ff fd35 	bl	800a76c <__hi0bits>
 800ad02:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800ad06:	e7e5      	b.n	800acd4 <__d2b+0x74>
 800ad08:	0800b3dc 	.word	0x0800b3dc
 800ad0c:	0800b3fe 	.word	0x0800b3fe

0800ad10 <__sread>:
 800ad10:	b510      	push	{r4, lr}
 800ad12:	460c      	mov	r4, r1
 800ad14:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ad18:	f000 f956 	bl	800afc8 <_read_r>
 800ad1c:	2800      	cmp	r0, #0
 800ad1e:	bfab      	itete	ge
 800ad20:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800ad22:	89a3      	ldrhlt	r3, [r4, #12]
 800ad24:	181b      	addge	r3, r3, r0
 800ad26:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800ad2a:	bfac      	ite	ge
 800ad2c:	6563      	strge	r3, [r4, #84]	@ 0x54
 800ad2e:	81a3      	strhlt	r3, [r4, #12]
 800ad30:	bd10      	pop	{r4, pc}

0800ad32 <__swrite>:
 800ad32:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ad36:	461f      	mov	r7, r3
 800ad38:	898b      	ldrh	r3, [r1, #12]
 800ad3a:	05db      	lsls	r3, r3, #23
 800ad3c:	4605      	mov	r5, r0
 800ad3e:	460c      	mov	r4, r1
 800ad40:	4616      	mov	r6, r2
 800ad42:	d505      	bpl.n	800ad50 <__swrite+0x1e>
 800ad44:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ad48:	2302      	movs	r3, #2
 800ad4a:	2200      	movs	r2, #0
 800ad4c:	f000 f92a 	bl	800afa4 <_lseek_r>
 800ad50:	89a3      	ldrh	r3, [r4, #12]
 800ad52:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800ad56:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800ad5a:	81a3      	strh	r3, [r4, #12]
 800ad5c:	4632      	mov	r2, r6
 800ad5e:	463b      	mov	r3, r7
 800ad60:	4628      	mov	r0, r5
 800ad62:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800ad66:	f000 b951 	b.w	800b00c <_write_r>

0800ad6a <__sseek>:
 800ad6a:	b510      	push	{r4, lr}
 800ad6c:	460c      	mov	r4, r1
 800ad6e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ad72:	f000 f917 	bl	800afa4 <_lseek_r>
 800ad76:	1c43      	adds	r3, r0, #1
 800ad78:	89a3      	ldrh	r3, [r4, #12]
 800ad7a:	bf15      	itete	ne
 800ad7c:	6560      	strne	r0, [r4, #84]	@ 0x54
 800ad7e:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800ad82:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800ad86:	81a3      	strheq	r3, [r4, #12]
 800ad88:	bf18      	it	ne
 800ad8a:	81a3      	strhne	r3, [r4, #12]
 800ad8c:	bd10      	pop	{r4, pc}

0800ad8e <__sclose>:
 800ad8e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ad92:	f000 b94d 	b.w	800b030 <_close_r>

0800ad96 <__swbuf_r>:
 800ad96:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ad98:	460e      	mov	r6, r1
 800ad9a:	4614      	mov	r4, r2
 800ad9c:	4605      	mov	r5, r0
 800ad9e:	b118      	cbz	r0, 800ada8 <__swbuf_r+0x12>
 800ada0:	6a03      	ldr	r3, [r0, #32]
 800ada2:	b90b      	cbnz	r3, 800ada8 <__swbuf_r+0x12>
 800ada4:	f7fe fac2 	bl	800932c <__sinit>
 800ada8:	69a3      	ldr	r3, [r4, #24]
 800adaa:	60a3      	str	r3, [r4, #8]
 800adac:	89a3      	ldrh	r3, [r4, #12]
 800adae:	071a      	lsls	r2, r3, #28
 800adb0:	d501      	bpl.n	800adb6 <__swbuf_r+0x20>
 800adb2:	6923      	ldr	r3, [r4, #16]
 800adb4:	b943      	cbnz	r3, 800adc8 <__swbuf_r+0x32>
 800adb6:	4621      	mov	r1, r4
 800adb8:	4628      	mov	r0, r5
 800adba:	f000 f82b 	bl	800ae14 <__swsetup_r>
 800adbe:	b118      	cbz	r0, 800adc8 <__swbuf_r+0x32>
 800adc0:	f04f 37ff 	mov.w	r7, #4294967295	@ 0xffffffff
 800adc4:	4638      	mov	r0, r7
 800adc6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800adc8:	6823      	ldr	r3, [r4, #0]
 800adca:	6922      	ldr	r2, [r4, #16]
 800adcc:	1a98      	subs	r0, r3, r2
 800adce:	6963      	ldr	r3, [r4, #20]
 800add0:	b2f6      	uxtb	r6, r6
 800add2:	4283      	cmp	r3, r0
 800add4:	4637      	mov	r7, r6
 800add6:	dc05      	bgt.n	800ade4 <__swbuf_r+0x4e>
 800add8:	4621      	mov	r1, r4
 800adda:	4628      	mov	r0, r5
 800addc:	f7ff fbea 	bl	800a5b4 <_fflush_r>
 800ade0:	2800      	cmp	r0, #0
 800ade2:	d1ed      	bne.n	800adc0 <__swbuf_r+0x2a>
 800ade4:	68a3      	ldr	r3, [r4, #8]
 800ade6:	3b01      	subs	r3, #1
 800ade8:	60a3      	str	r3, [r4, #8]
 800adea:	6823      	ldr	r3, [r4, #0]
 800adec:	1c5a      	adds	r2, r3, #1
 800adee:	6022      	str	r2, [r4, #0]
 800adf0:	701e      	strb	r6, [r3, #0]
 800adf2:	6962      	ldr	r2, [r4, #20]
 800adf4:	1c43      	adds	r3, r0, #1
 800adf6:	429a      	cmp	r2, r3
 800adf8:	d004      	beq.n	800ae04 <__swbuf_r+0x6e>
 800adfa:	89a3      	ldrh	r3, [r4, #12]
 800adfc:	07db      	lsls	r3, r3, #31
 800adfe:	d5e1      	bpl.n	800adc4 <__swbuf_r+0x2e>
 800ae00:	2e0a      	cmp	r6, #10
 800ae02:	d1df      	bne.n	800adc4 <__swbuf_r+0x2e>
 800ae04:	4621      	mov	r1, r4
 800ae06:	4628      	mov	r0, r5
 800ae08:	f7ff fbd4 	bl	800a5b4 <_fflush_r>
 800ae0c:	2800      	cmp	r0, #0
 800ae0e:	d0d9      	beq.n	800adc4 <__swbuf_r+0x2e>
 800ae10:	e7d6      	b.n	800adc0 <__swbuf_r+0x2a>
	...

0800ae14 <__swsetup_r>:
 800ae14:	b538      	push	{r3, r4, r5, lr}
 800ae16:	4b29      	ldr	r3, [pc, #164]	@ (800aebc <__swsetup_r+0xa8>)
 800ae18:	4605      	mov	r5, r0
 800ae1a:	6818      	ldr	r0, [r3, #0]
 800ae1c:	460c      	mov	r4, r1
 800ae1e:	b118      	cbz	r0, 800ae28 <__swsetup_r+0x14>
 800ae20:	6a03      	ldr	r3, [r0, #32]
 800ae22:	b90b      	cbnz	r3, 800ae28 <__swsetup_r+0x14>
 800ae24:	f7fe fa82 	bl	800932c <__sinit>
 800ae28:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800ae2c:	0719      	lsls	r1, r3, #28
 800ae2e:	d422      	bmi.n	800ae76 <__swsetup_r+0x62>
 800ae30:	06da      	lsls	r2, r3, #27
 800ae32:	d407      	bmi.n	800ae44 <__swsetup_r+0x30>
 800ae34:	2209      	movs	r2, #9
 800ae36:	602a      	str	r2, [r5, #0]
 800ae38:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800ae3c:	81a3      	strh	r3, [r4, #12]
 800ae3e:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800ae42:	e033      	b.n	800aeac <__swsetup_r+0x98>
 800ae44:	0758      	lsls	r0, r3, #29
 800ae46:	d512      	bpl.n	800ae6e <__swsetup_r+0x5a>
 800ae48:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800ae4a:	b141      	cbz	r1, 800ae5e <__swsetup_r+0x4a>
 800ae4c:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800ae50:	4299      	cmp	r1, r3
 800ae52:	d002      	beq.n	800ae5a <__swsetup_r+0x46>
 800ae54:	4628      	mov	r0, r5
 800ae56:	f000 f93f 	bl	800b0d8 <_free_r>
 800ae5a:	2300      	movs	r3, #0
 800ae5c:	6363      	str	r3, [r4, #52]	@ 0x34
 800ae5e:	89a3      	ldrh	r3, [r4, #12]
 800ae60:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800ae64:	81a3      	strh	r3, [r4, #12]
 800ae66:	2300      	movs	r3, #0
 800ae68:	6063      	str	r3, [r4, #4]
 800ae6a:	6923      	ldr	r3, [r4, #16]
 800ae6c:	6023      	str	r3, [r4, #0]
 800ae6e:	89a3      	ldrh	r3, [r4, #12]
 800ae70:	f043 0308 	orr.w	r3, r3, #8
 800ae74:	81a3      	strh	r3, [r4, #12]
 800ae76:	6923      	ldr	r3, [r4, #16]
 800ae78:	b94b      	cbnz	r3, 800ae8e <__swsetup_r+0x7a>
 800ae7a:	89a3      	ldrh	r3, [r4, #12]
 800ae7c:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800ae80:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800ae84:	d003      	beq.n	800ae8e <__swsetup_r+0x7a>
 800ae86:	4621      	mov	r1, r4
 800ae88:	4628      	mov	r0, r5
 800ae8a:	f000 f83f 	bl	800af0c <__smakebuf_r>
 800ae8e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800ae92:	f013 0201 	ands.w	r2, r3, #1
 800ae96:	d00a      	beq.n	800aeae <__swsetup_r+0x9a>
 800ae98:	2200      	movs	r2, #0
 800ae9a:	60a2      	str	r2, [r4, #8]
 800ae9c:	6962      	ldr	r2, [r4, #20]
 800ae9e:	4252      	negs	r2, r2
 800aea0:	61a2      	str	r2, [r4, #24]
 800aea2:	6922      	ldr	r2, [r4, #16]
 800aea4:	b942      	cbnz	r2, 800aeb8 <__swsetup_r+0xa4>
 800aea6:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800aeaa:	d1c5      	bne.n	800ae38 <__swsetup_r+0x24>
 800aeac:	bd38      	pop	{r3, r4, r5, pc}
 800aeae:	0799      	lsls	r1, r3, #30
 800aeb0:	bf58      	it	pl
 800aeb2:	6962      	ldrpl	r2, [r4, #20]
 800aeb4:	60a2      	str	r2, [r4, #8]
 800aeb6:	e7f4      	b.n	800aea2 <__swsetup_r+0x8e>
 800aeb8:	2000      	movs	r0, #0
 800aeba:	e7f7      	b.n	800aeac <__swsetup_r+0x98>
 800aebc:	2400001c 	.word	0x2400001c

0800aec0 <__swhatbuf_r>:
 800aec0:	b570      	push	{r4, r5, r6, lr}
 800aec2:	460c      	mov	r4, r1
 800aec4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800aec8:	2900      	cmp	r1, #0
 800aeca:	b096      	sub	sp, #88	@ 0x58
 800aecc:	4615      	mov	r5, r2
 800aece:	461e      	mov	r6, r3
 800aed0:	da0d      	bge.n	800aeee <__swhatbuf_r+0x2e>
 800aed2:	89a3      	ldrh	r3, [r4, #12]
 800aed4:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800aed8:	f04f 0100 	mov.w	r1, #0
 800aedc:	bf14      	ite	ne
 800aede:	2340      	movne	r3, #64	@ 0x40
 800aee0:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800aee4:	2000      	movs	r0, #0
 800aee6:	6031      	str	r1, [r6, #0]
 800aee8:	602b      	str	r3, [r5, #0]
 800aeea:	b016      	add	sp, #88	@ 0x58
 800aeec:	bd70      	pop	{r4, r5, r6, pc}
 800aeee:	466a      	mov	r2, sp
 800aef0:	f000 f8ae 	bl	800b050 <_fstat_r>
 800aef4:	2800      	cmp	r0, #0
 800aef6:	dbec      	blt.n	800aed2 <__swhatbuf_r+0x12>
 800aef8:	9901      	ldr	r1, [sp, #4]
 800aefa:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800aefe:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800af02:	4259      	negs	r1, r3
 800af04:	4159      	adcs	r1, r3
 800af06:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800af0a:	e7eb      	b.n	800aee4 <__swhatbuf_r+0x24>

0800af0c <__smakebuf_r>:
 800af0c:	898b      	ldrh	r3, [r1, #12]
 800af0e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800af10:	079d      	lsls	r5, r3, #30
 800af12:	4606      	mov	r6, r0
 800af14:	460c      	mov	r4, r1
 800af16:	d507      	bpl.n	800af28 <__smakebuf_r+0x1c>
 800af18:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800af1c:	6023      	str	r3, [r4, #0]
 800af1e:	6123      	str	r3, [r4, #16]
 800af20:	2301      	movs	r3, #1
 800af22:	6163      	str	r3, [r4, #20]
 800af24:	b003      	add	sp, #12
 800af26:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800af28:	ab01      	add	r3, sp, #4
 800af2a:	466a      	mov	r2, sp
 800af2c:	f7ff ffc8 	bl	800aec0 <__swhatbuf_r>
 800af30:	9f00      	ldr	r7, [sp, #0]
 800af32:	4605      	mov	r5, r0
 800af34:	4639      	mov	r1, r7
 800af36:	4630      	mov	r0, r6
 800af38:	f7ff fa38 	bl	800a3ac <_malloc_r>
 800af3c:	b948      	cbnz	r0, 800af52 <__smakebuf_r+0x46>
 800af3e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800af42:	059a      	lsls	r2, r3, #22
 800af44:	d4ee      	bmi.n	800af24 <__smakebuf_r+0x18>
 800af46:	f023 0303 	bic.w	r3, r3, #3
 800af4a:	f043 0302 	orr.w	r3, r3, #2
 800af4e:	81a3      	strh	r3, [r4, #12]
 800af50:	e7e2      	b.n	800af18 <__smakebuf_r+0xc>
 800af52:	89a3      	ldrh	r3, [r4, #12]
 800af54:	6020      	str	r0, [r4, #0]
 800af56:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800af5a:	81a3      	strh	r3, [r4, #12]
 800af5c:	9b01      	ldr	r3, [sp, #4]
 800af5e:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800af62:	b15b      	cbz	r3, 800af7c <__smakebuf_r+0x70>
 800af64:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800af68:	4630      	mov	r0, r6
 800af6a:	f000 f80b 	bl	800af84 <_isatty_r>
 800af6e:	b128      	cbz	r0, 800af7c <__smakebuf_r+0x70>
 800af70:	89a3      	ldrh	r3, [r4, #12]
 800af72:	f023 0303 	bic.w	r3, r3, #3
 800af76:	f043 0301 	orr.w	r3, r3, #1
 800af7a:	81a3      	strh	r3, [r4, #12]
 800af7c:	89a3      	ldrh	r3, [r4, #12]
 800af7e:	431d      	orrs	r5, r3
 800af80:	81a5      	strh	r5, [r4, #12]
 800af82:	e7cf      	b.n	800af24 <__smakebuf_r+0x18>

0800af84 <_isatty_r>:
 800af84:	b538      	push	{r3, r4, r5, lr}
 800af86:	4d06      	ldr	r5, [pc, #24]	@ (800afa0 <_isatty_r+0x1c>)
 800af88:	2300      	movs	r3, #0
 800af8a:	4604      	mov	r4, r0
 800af8c:	4608      	mov	r0, r1
 800af8e:	602b      	str	r3, [r5, #0]
 800af90:	f7f6 fa52 	bl	8001438 <_isatty>
 800af94:	1c43      	adds	r3, r0, #1
 800af96:	d102      	bne.n	800af9e <_isatty_r+0x1a>
 800af98:	682b      	ldr	r3, [r5, #0]
 800af9a:	b103      	cbz	r3, 800af9e <_isatty_r+0x1a>
 800af9c:	6023      	str	r3, [r4, #0]
 800af9e:	bd38      	pop	{r3, r4, r5, pc}
 800afa0:	2400050c 	.word	0x2400050c

0800afa4 <_lseek_r>:
 800afa4:	b538      	push	{r3, r4, r5, lr}
 800afa6:	4d07      	ldr	r5, [pc, #28]	@ (800afc4 <_lseek_r+0x20>)
 800afa8:	4604      	mov	r4, r0
 800afaa:	4608      	mov	r0, r1
 800afac:	4611      	mov	r1, r2
 800afae:	2200      	movs	r2, #0
 800afb0:	602a      	str	r2, [r5, #0]
 800afb2:	461a      	mov	r2, r3
 800afb4:	f7f6 fa4b 	bl	800144e <_lseek>
 800afb8:	1c43      	adds	r3, r0, #1
 800afba:	d102      	bne.n	800afc2 <_lseek_r+0x1e>
 800afbc:	682b      	ldr	r3, [r5, #0]
 800afbe:	b103      	cbz	r3, 800afc2 <_lseek_r+0x1e>
 800afc0:	6023      	str	r3, [r4, #0]
 800afc2:	bd38      	pop	{r3, r4, r5, pc}
 800afc4:	2400050c 	.word	0x2400050c

0800afc8 <_read_r>:
 800afc8:	b538      	push	{r3, r4, r5, lr}
 800afca:	4d07      	ldr	r5, [pc, #28]	@ (800afe8 <_read_r+0x20>)
 800afcc:	4604      	mov	r4, r0
 800afce:	4608      	mov	r0, r1
 800afd0:	4611      	mov	r1, r2
 800afd2:	2200      	movs	r2, #0
 800afd4:	602a      	str	r2, [r5, #0]
 800afd6:	461a      	mov	r2, r3
 800afd8:	f7f6 f9d9 	bl	800138e <_read>
 800afdc:	1c43      	adds	r3, r0, #1
 800afde:	d102      	bne.n	800afe6 <_read_r+0x1e>
 800afe0:	682b      	ldr	r3, [r5, #0]
 800afe2:	b103      	cbz	r3, 800afe6 <_read_r+0x1e>
 800afe4:	6023      	str	r3, [r4, #0]
 800afe6:	bd38      	pop	{r3, r4, r5, pc}
 800afe8:	2400050c 	.word	0x2400050c

0800afec <_sbrk_r>:
 800afec:	b538      	push	{r3, r4, r5, lr}
 800afee:	4d06      	ldr	r5, [pc, #24]	@ (800b008 <_sbrk_r+0x1c>)
 800aff0:	2300      	movs	r3, #0
 800aff2:	4604      	mov	r4, r0
 800aff4:	4608      	mov	r0, r1
 800aff6:	602b      	str	r3, [r5, #0]
 800aff8:	f7f6 fa36 	bl	8001468 <_sbrk>
 800affc:	1c43      	adds	r3, r0, #1
 800affe:	d102      	bne.n	800b006 <_sbrk_r+0x1a>
 800b000:	682b      	ldr	r3, [r5, #0]
 800b002:	b103      	cbz	r3, 800b006 <_sbrk_r+0x1a>
 800b004:	6023      	str	r3, [r4, #0]
 800b006:	bd38      	pop	{r3, r4, r5, pc}
 800b008:	2400050c 	.word	0x2400050c

0800b00c <_write_r>:
 800b00c:	b538      	push	{r3, r4, r5, lr}
 800b00e:	4d07      	ldr	r5, [pc, #28]	@ (800b02c <_write_r+0x20>)
 800b010:	4604      	mov	r4, r0
 800b012:	4608      	mov	r0, r1
 800b014:	4611      	mov	r1, r2
 800b016:	2200      	movs	r2, #0
 800b018:	602a      	str	r2, [r5, #0]
 800b01a:	461a      	mov	r2, r3
 800b01c:	f7f6 f9d4 	bl	80013c8 <_write>
 800b020:	1c43      	adds	r3, r0, #1
 800b022:	d102      	bne.n	800b02a <_write_r+0x1e>
 800b024:	682b      	ldr	r3, [r5, #0]
 800b026:	b103      	cbz	r3, 800b02a <_write_r+0x1e>
 800b028:	6023      	str	r3, [r4, #0]
 800b02a:	bd38      	pop	{r3, r4, r5, pc}
 800b02c:	2400050c 	.word	0x2400050c

0800b030 <_close_r>:
 800b030:	b538      	push	{r3, r4, r5, lr}
 800b032:	4d06      	ldr	r5, [pc, #24]	@ (800b04c <_close_r+0x1c>)
 800b034:	2300      	movs	r3, #0
 800b036:	4604      	mov	r4, r0
 800b038:	4608      	mov	r0, r1
 800b03a:	602b      	str	r3, [r5, #0]
 800b03c:	f7f6 f9e0 	bl	8001400 <_close>
 800b040:	1c43      	adds	r3, r0, #1
 800b042:	d102      	bne.n	800b04a <_close_r+0x1a>
 800b044:	682b      	ldr	r3, [r5, #0]
 800b046:	b103      	cbz	r3, 800b04a <_close_r+0x1a>
 800b048:	6023      	str	r3, [r4, #0]
 800b04a:	bd38      	pop	{r3, r4, r5, pc}
 800b04c:	2400050c 	.word	0x2400050c

0800b050 <_fstat_r>:
 800b050:	b538      	push	{r3, r4, r5, lr}
 800b052:	4d07      	ldr	r5, [pc, #28]	@ (800b070 <_fstat_r+0x20>)
 800b054:	2300      	movs	r3, #0
 800b056:	4604      	mov	r4, r0
 800b058:	4608      	mov	r0, r1
 800b05a:	4611      	mov	r1, r2
 800b05c:	602b      	str	r3, [r5, #0]
 800b05e:	f7f6 f9db 	bl	8001418 <_fstat>
 800b062:	1c43      	adds	r3, r0, #1
 800b064:	d102      	bne.n	800b06c <_fstat_r+0x1c>
 800b066:	682b      	ldr	r3, [r5, #0]
 800b068:	b103      	cbz	r3, 800b06c <_fstat_r+0x1c>
 800b06a:	6023      	str	r3, [r4, #0]
 800b06c:	bd38      	pop	{r3, r4, r5, pc}
 800b06e:	bf00      	nop
 800b070:	2400050c 	.word	0x2400050c

0800b074 <__assert_func>:
 800b074:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800b076:	4614      	mov	r4, r2
 800b078:	461a      	mov	r2, r3
 800b07a:	4b09      	ldr	r3, [pc, #36]	@ (800b0a0 <__assert_func+0x2c>)
 800b07c:	681b      	ldr	r3, [r3, #0]
 800b07e:	4605      	mov	r5, r0
 800b080:	68d8      	ldr	r0, [r3, #12]
 800b082:	b14c      	cbz	r4, 800b098 <__assert_func+0x24>
 800b084:	4b07      	ldr	r3, [pc, #28]	@ (800b0a4 <__assert_func+0x30>)
 800b086:	9100      	str	r1, [sp, #0]
 800b088:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800b08c:	4906      	ldr	r1, [pc, #24]	@ (800b0a8 <__assert_func+0x34>)
 800b08e:	462b      	mov	r3, r5
 800b090:	f000 f87e 	bl	800b190 <fiprintf>
 800b094:	f000 f89b 	bl	800b1ce <abort>
 800b098:	4b04      	ldr	r3, [pc, #16]	@ (800b0ac <__assert_func+0x38>)
 800b09a:	461c      	mov	r4, r3
 800b09c:	e7f3      	b.n	800b086 <__assert_func+0x12>
 800b09e:	bf00      	nop
 800b0a0:	2400001c 	.word	0x2400001c
 800b0a4:	0800b461 	.word	0x0800b461
 800b0a8:	0800b46e 	.word	0x0800b46e
 800b0ac:	0800b49c 	.word	0x0800b49c

0800b0b0 <_calloc_r>:
 800b0b0:	b570      	push	{r4, r5, r6, lr}
 800b0b2:	fba1 5402 	umull	r5, r4, r1, r2
 800b0b6:	b934      	cbnz	r4, 800b0c6 <_calloc_r+0x16>
 800b0b8:	4629      	mov	r1, r5
 800b0ba:	f7ff f977 	bl	800a3ac <_malloc_r>
 800b0be:	4606      	mov	r6, r0
 800b0c0:	b928      	cbnz	r0, 800b0ce <_calloc_r+0x1e>
 800b0c2:	4630      	mov	r0, r6
 800b0c4:	bd70      	pop	{r4, r5, r6, pc}
 800b0c6:	220c      	movs	r2, #12
 800b0c8:	6002      	str	r2, [r0, #0]
 800b0ca:	2600      	movs	r6, #0
 800b0cc:	e7f9      	b.n	800b0c2 <_calloc_r+0x12>
 800b0ce:	462a      	mov	r2, r5
 800b0d0:	4621      	mov	r1, r4
 800b0d2:	f7fe f9d1 	bl	8009478 <memset>
 800b0d6:	e7f4      	b.n	800b0c2 <_calloc_r+0x12>

0800b0d8 <_free_r>:
 800b0d8:	b538      	push	{r3, r4, r5, lr}
 800b0da:	4605      	mov	r5, r0
 800b0dc:	2900      	cmp	r1, #0
 800b0de:	d041      	beq.n	800b164 <_free_r+0x8c>
 800b0e0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800b0e4:	1f0c      	subs	r4, r1, #4
 800b0e6:	2b00      	cmp	r3, #0
 800b0e8:	bfb8      	it	lt
 800b0ea:	18e4      	addlt	r4, r4, r3
 800b0ec:	f7ff fa8a 	bl	800a604 <__malloc_lock>
 800b0f0:	4a1d      	ldr	r2, [pc, #116]	@ (800b168 <_free_r+0x90>)
 800b0f2:	6813      	ldr	r3, [r2, #0]
 800b0f4:	b933      	cbnz	r3, 800b104 <_free_r+0x2c>
 800b0f6:	6063      	str	r3, [r4, #4]
 800b0f8:	6014      	str	r4, [r2, #0]
 800b0fa:	4628      	mov	r0, r5
 800b0fc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800b100:	f7ff ba86 	b.w	800a610 <__malloc_unlock>
 800b104:	42a3      	cmp	r3, r4
 800b106:	d908      	bls.n	800b11a <_free_r+0x42>
 800b108:	6820      	ldr	r0, [r4, #0]
 800b10a:	1821      	adds	r1, r4, r0
 800b10c:	428b      	cmp	r3, r1
 800b10e:	bf01      	itttt	eq
 800b110:	6819      	ldreq	r1, [r3, #0]
 800b112:	685b      	ldreq	r3, [r3, #4]
 800b114:	1809      	addeq	r1, r1, r0
 800b116:	6021      	streq	r1, [r4, #0]
 800b118:	e7ed      	b.n	800b0f6 <_free_r+0x1e>
 800b11a:	461a      	mov	r2, r3
 800b11c:	685b      	ldr	r3, [r3, #4]
 800b11e:	b10b      	cbz	r3, 800b124 <_free_r+0x4c>
 800b120:	42a3      	cmp	r3, r4
 800b122:	d9fa      	bls.n	800b11a <_free_r+0x42>
 800b124:	6811      	ldr	r1, [r2, #0]
 800b126:	1850      	adds	r0, r2, r1
 800b128:	42a0      	cmp	r0, r4
 800b12a:	d10b      	bne.n	800b144 <_free_r+0x6c>
 800b12c:	6820      	ldr	r0, [r4, #0]
 800b12e:	4401      	add	r1, r0
 800b130:	1850      	adds	r0, r2, r1
 800b132:	4283      	cmp	r3, r0
 800b134:	6011      	str	r1, [r2, #0]
 800b136:	d1e0      	bne.n	800b0fa <_free_r+0x22>
 800b138:	6818      	ldr	r0, [r3, #0]
 800b13a:	685b      	ldr	r3, [r3, #4]
 800b13c:	6053      	str	r3, [r2, #4]
 800b13e:	4408      	add	r0, r1
 800b140:	6010      	str	r0, [r2, #0]
 800b142:	e7da      	b.n	800b0fa <_free_r+0x22>
 800b144:	d902      	bls.n	800b14c <_free_r+0x74>
 800b146:	230c      	movs	r3, #12
 800b148:	602b      	str	r3, [r5, #0]
 800b14a:	e7d6      	b.n	800b0fa <_free_r+0x22>
 800b14c:	6820      	ldr	r0, [r4, #0]
 800b14e:	1821      	adds	r1, r4, r0
 800b150:	428b      	cmp	r3, r1
 800b152:	bf04      	itt	eq
 800b154:	6819      	ldreq	r1, [r3, #0]
 800b156:	685b      	ldreq	r3, [r3, #4]
 800b158:	6063      	str	r3, [r4, #4]
 800b15a:	bf04      	itt	eq
 800b15c:	1809      	addeq	r1, r1, r0
 800b15e:	6021      	streq	r1, [r4, #0]
 800b160:	6054      	str	r4, [r2, #4]
 800b162:	e7ca      	b.n	800b0fa <_free_r+0x22>
 800b164:	bd38      	pop	{r3, r4, r5, pc}
 800b166:	bf00      	nop
 800b168:	24000508 	.word	0x24000508

0800b16c <__ascii_mbtowc>:
 800b16c:	b082      	sub	sp, #8
 800b16e:	b901      	cbnz	r1, 800b172 <__ascii_mbtowc+0x6>
 800b170:	a901      	add	r1, sp, #4
 800b172:	b142      	cbz	r2, 800b186 <__ascii_mbtowc+0x1a>
 800b174:	b14b      	cbz	r3, 800b18a <__ascii_mbtowc+0x1e>
 800b176:	7813      	ldrb	r3, [r2, #0]
 800b178:	600b      	str	r3, [r1, #0]
 800b17a:	7812      	ldrb	r2, [r2, #0]
 800b17c:	1e10      	subs	r0, r2, #0
 800b17e:	bf18      	it	ne
 800b180:	2001      	movne	r0, #1
 800b182:	b002      	add	sp, #8
 800b184:	4770      	bx	lr
 800b186:	4610      	mov	r0, r2
 800b188:	e7fb      	b.n	800b182 <__ascii_mbtowc+0x16>
 800b18a:	f06f 0001 	mvn.w	r0, #1
 800b18e:	e7f8      	b.n	800b182 <__ascii_mbtowc+0x16>

0800b190 <fiprintf>:
 800b190:	b40e      	push	{r1, r2, r3}
 800b192:	b503      	push	{r0, r1, lr}
 800b194:	4601      	mov	r1, r0
 800b196:	ab03      	add	r3, sp, #12
 800b198:	4805      	ldr	r0, [pc, #20]	@ (800b1b0 <fiprintf+0x20>)
 800b19a:	f853 2b04 	ldr.w	r2, [r3], #4
 800b19e:	6800      	ldr	r0, [r0, #0]
 800b1a0:	9301      	str	r3, [sp, #4]
 800b1a2:	f7fe ffc1 	bl	800a128 <_vfiprintf_r>
 800b1a6:	b002      	add	sp, #8
 800b1a8:	f85d eb04 	ldr.w	lr, [sp], #4
 800b1ac:	b003      	add	sp, #12
 800b1ae:	4770      	bx	lr
 800b1b0:	2400001c 	.word	0x2400001c

0800b1b4 <__ascii_wctomb>:
 800b1b4:	4603      	mov	r3, r0
 800b1b6:	4608      	mov	r0, r1
 800b1b8:	b141      	cbz	r1, 800b1cc <__ascii_wctomb+0x18>
 800b1ba:	2aff      	cmp	r2, #255	@ 0xff
 800b1bc:	d904      	bls.n	800b1c8 <__ascii_wctomb+0x14>
 800b1be:	228a      	movs	r2, #138	@ 0x8a
 800b1c0:	601a      	str	r2, [r3, #0]
 800b1c2:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800b1c6:	4770      	bx	lr
 800b1c8:	700a      	strb	r2, [r1, #0]
 800b1ca:	2001      	movs	r0, #1
 800b1cc:	4770      	bx	lr

0800b1ce <abort>:
 800b1ce:	b508      	push	{r3, lr}
 800b1d0:	2006      	movs	r0, #6
 800b1d2:	f000 f82b 	bl	800b22c <raise>
 800b1d6:	2001      	movs	r0, #1
 800b1d8:	f7f6 f8ce 	bl	8001378 <_exit>

0800b1dc <_raise_r>:
 800b1dc:	291f      	cmp	r1, #31
 800b1de:	b538      	push	{r3, r4, r5, lr}
 800b1e0:	4605      	mov	r5, r0
 800b1e2:	460c      	mov	r4, r1
 800b1e4:	d904      	bls.n	800b1f0 <_raise_r+0x14>
 800b1e6:	2316      	movs	r3, #22
 800b1e8:	6003      	str	r3, [r0, #0]
 800b1ea:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800b1ee:	bd38      	pop	{r3, r4, r5, pc}
 800b1f0:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800b1f2:	b112      	cbz	r2, 800b1fa <_raise_r+0x1e>
 800b1f4:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800b1f8:	b94b      	cbnz	r3, 800b20e <_raise_r+0x32>
 800b1fa:	4628      	mov	r0, r5
 800b1fc:	f000 f830 	bl	800b260 <_getpid_r>
 800b200:	4622      	mov	r2, r4
 800b202:	4601      	mov	r1, r0
 800b204:	4628      	mov	r0, r5
 800b206:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800b20a:	f000 b817 	b.w	800b23c <_kill_r>
 800b20e:	2b01      	cmp	r3, #1
 800b210:	d00a      	beq.n	800b228 <_raise_r+0x4c>
 800b212:	1c59      	adds	r1, r3, #1
 800b214:	d103      	bne.n	800b21e <_raise_r+0x42>
 800b216:	2316      	movs	r3, #22
 800b218:	6003      	str	r3, [r0, #0]
 800b21a:	2001      	movs	r0, #1
 800b21c:	e7e7      	b.n	800b1ee <_raise_r+0x12>
 800b21e:	2100      	movs	r1, #0
 800b220:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800b224:	4620      	mov	r0, r4
 800b226:	4798      	blx	r3
 800b228:	2000      	movs	r0, #0
 800b22a:	e7e0      	b.n	800b1ee <_raise_r+0x12>

0800b22c <raise>:
 800b22c:	4b02      	ldr	r3, [pc, #8]	@ (800b238 <raise+0xc>)
 800b22e:	4601      	mov	r1, r0
 800b230:	6818      	ldr	r0, [r3, #0]
 800b232:	f7ff bfd3 	b.w	800b1dc <_raise_r>
 800b236:	bf00      	nop
 800b238:	2400001c 	.word	0x2400001c

0800b23c <_kill_r>:
 800b23c:	b538      	push	{r3, r4, r5, lr}
 800b23e:	4d07      	ldr	r5, [pc, #28]	@ (800b25c <_kill_r+0x20>)
 800b240:	2300      	movs	r3, #0
 800b242:	4604      	mov	r4, r0
 800b244:	4608      	mov	r0, r1
 800b246:	4611      	mov	r1, r2
 800b248:	602b      	str	r3, [r5, #0]
 800b24a:	f7f6 f885 	bl	8001358 <_kill>
 800b24e:	1c43      	adds	r3, r0, #1
 800b250:	d102      	bne.n	800b258 <_kill_r+0x1c>
 800b252:	682b      	ldr	r3, [r5, #0]
 800b254:	b103      	cbz	r3, 800b258 <_kill_r+0x1c>
 800b256:	6023      	str	r3, [r4, #0]
 800b258:	bd38      	pop	{r3, r4, r5, pc}
 800b25a:	bf00      	nop
 800b25c:	2400050c 	.word	0x2400050c

0800b260 <_getpid_r>:
 800b260:	f7f6 b872 	b.w	8001348 <_getpid>

0800b264 <_init>:
 800b264:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b266:	bf00      	nop
 800b268:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b26a:	bc08      	pop	{r3}
 800b26c:	469e      	mov	lr, r3
 800b26e:	4770      	bx	lr

0800b270 <_fini>:
 800b270:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b272:	bf00      	nop
 800b274:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b276:	bc08      	pop	{r3}
 800b278:	469e      	mov	lr, r3
 800b27a:	4770      	bx	lr
